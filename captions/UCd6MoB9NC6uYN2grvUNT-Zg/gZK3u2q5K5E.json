[
  {
    "start": "0",
    "end": "162000"
  },
  {
    "text": "hi everyone welcome Friday right the last day of rain event I hope everyone's",
    "start": "0",
    "end": "6029"
  },
  {
    "text": "enjoyed the conference so far and everyone's excited about the new features and services we've announced",
    "start": "6029",
    "end": "11610"
  },
  {
    "text": "this week thank you all for being here today my name is James sorry Winnie I am a",
    "start": "11610",
    "end": "16859"
  },
  {
    "text": "software development engineer at AWS and I work on the SDKs and tools team so",
    "start": "16859",
    "end": "22529"
  },
  {
    "text": "some of the main things that I work on are the AWS CLI as well as the AWS SDK",
    "start": "22529",
    "end": "28019"
  },
  {
    "text": "for Python also known as boa 3 and one of the other things that our team does",
    "start": "28019",
    "end": "33780"
  },
  {
    "text": "is we take our SDKs and see allies and you create libraries and frameworks that",
    "start": "33780",
    "end": "39660"
  },
  {
    "text": "build on top of these in order to make developers even more productive and today I'm going to be talking about a",
    "start": "39660",
    "end": "45809"
  },
  {
    "text": "framework that I've created called chalice which is a service micro framework for Python in a nutshell",
    "start": "45809",
    "end": "52170"
  },
  {
    "text": "allows you to quickly create serverless rest api's and deploy them to AWS and it",
    "start": "52170",
    "end": "59520"
  },
  {
    "text": "can get you up and running in less than 30 seconds and we'll see a lot of examples of that throughout the talk in",
    "start": "59520",
    "end": "65100"
  },
  {
    "text": "terms of what I want to cover today there's really three things first thing I want to do is go over serverless REST API s and we'll compare them to api's",
    "start": "65100",
    "end": "72750"
  },
  {
    "text": "that run on ec2 instances and see what some of the main differences are and then after that we're gonna look at",
    "start": "72750",
    "end": "79320"
  },
  {
    "text": "chalice and I'm gonna show you some quick tour some of the main features of chalice so one thing I will mention is",
    "start": "79320",
    "end": "85290"
  },
  {
    "text": "this would be very demo heavy talk I'll be switching over to my laptop throughout the talk I think that's just",
    "start": "85290",
    "end": "90450"
  },
  {
    "text": "the best way to show framework show what it can do hop over to the terminal write some code and deploy it so we'll be doing that a lot and then the third part",
    "start": "90450",
    "end": "97500"
  },
  {
    "text": "I think is probably the most interesting which is we're going to look at a couple of sample applications and I'll show you",
    "start": "97500",
    "end": "104189"
  },
  {
    "text": "how chalice can help you with some of the things that you'll encounter as you start to use it to write applications so",
    "start": "104189",
    "end": "109829"
  },
  {
    "text": "how do we handle configuration and secrets and how we handle SDK generation",
    "start": "109829",
    "end": "115680"
  },
  {
    "text": "and number of other things before we get into that there's a couple of assumptions I'm making probably the",
    "start": "115680",
    "end": "121049"
  },
  {
    "text": "biggest one is that I assume that everyone here can follow along with Python code given chalices a framework",
    "start": "121049",
    "end": "127110"
  },
  {
    "text": "for Python developers that we're not going to spend a lot of time going over on syntax we won't use anything advanced so as long as you can follow along with",
    "start": "127110",
    "end": "133800"
  },
  {
    "text": "basic Python code you'll be fine second thing is that we're not going to spend a lot of time on good restful api design",
    "start": "133800",
    "end": "140819"
  },
  {
    "text": "I'm assuming you at least familiar with it so if you've seen that style where you have resource that can map to URL",
    "start": "140819",
    "end": "147000"
  },
  {
    "text": "and you leverage the various HTTP methods get put post patch and again you'll be fine there and then the last",
    "start": "147000",
    "end": "153209"
  },
  {
    "text": "thing is more of a bonus if you've used a micro framework in Python before like flask or bottle or anything similar I",
    "start": "153209",
    "end": "158820"
  },
  {
    "text": "think you'll find chalice feel right at home all right so with that out of the way let's start",
    "start": "158820",
    "end": "164310"
  },
  {
    "start": "162000",
    "end": "289000"
  },
  {
    "text": "with the first thing here rest api is rest api is there everywhere right from",
    "start": "164310",
    "end": "170070"
  },
  {
    "text": "a web client that has web application running on a desktop customers connect",
    "start": "170070",
    "end": "175470"
  },
  {
    "text": "to two mobile clients or pratap perhaps you have a mobile game that talks to some back-end API to store user data or",
    "start": "175470",
    "end": "182310"
  },
  {
    "text": "game data and even if you expose a REST API yourself so that other services can integrate with you for example github or",
    "start": "182310",
    "end": "189900"
  },
  {
    "text": "Twitter and the next thing about the REST API is is that they're pretty",
    "start": "189900",
    "end": "195810"
  },
  {
    "text": "straightforward so on the left side here is what user of the API sees you just make a request and you get data back so",
    "start": "195810",
    "end": "202110"
  },
  {
    "text": "in this example I'm showing a get request to slash users and in this case we're getting a JSON response which is",
    "start": "202110",
    "end": "208049"
  },
  {
    "text": "what we'll use throughout this talk and on the right-hand side of this the backend you might use a number of",
    "start": "208049",
    "end": "213540"
  },
  {
    "text": "services so for example you might use your datastore as Amazon DynamoDB perhaps you have a caching layer with",
    "start": "213540",
    "end": "220860"
  },
  {
    "text": "memcache D and you have alerting and monitoring with Amazon Cloud Watch but the middle part here this blue box this",
    "start": "220860",
    "end": "227160"
  },
  {
    "text": "is a part where we're gonna look at in a little more detail so here's one way to",
    "start": "227160",
    "end": "232200"
  },
  {
    "text": "structure the REST API this is a very standard way to do this you would have",
    "start": "232200",
    "end": "237510"
  },
  {
    "text": "an ec2 instance and a number of them running in your web tier so in the Python space you might use Apache with",
    "start": "237510",
    "end": "243870"
  },
  {
    "text": "mod whiskey or nginx with micro whiskey or gin unicorn or whatever your preferred app server is and all that",
    "start": "243870",
    "end": "250140"
  },
  {
    "text": "setup is part of an auto scaling group and you configure scaling policies so you can scale up and down based on CPU",
    "start": "250140",
    "end": "256410"
  },
  {
    "text": "load or network traffic or even time of days there's a number of options and you take all of that and you pair it with",
    "start": "256410",
    "end": "261730"
  },
  {
    "text": "is an elastic load balancer and that's the actual end point that customers connect to that then routes to a",
    "start": "261730",
    "end": "267670"
  },
  {
    "text": "specific web instance and this is a great way to create a REST API you do",
    "start": "267670",
    "end": "273490"
  },
  {
    "text": "have to figure out how you want to get code onto that machine so maybe you have scripts that SSH or SCP code on or",
    "start": "273490",
    "end": "279730"
  },
  {
    "text": "you're using ansible or a puppet or shaft for one of your preferred config management tools or you can even use AWS",
    "start": "279730",
    "end": "286180"
  },
  {
    "text": "code deploy any of the services that we offer so when we talk about serverless",
    "start": "286180",
    "end": "291340"
  },
  {
    "start": "289000",
    "end": "400000"
  },
  {
    "text": "REST API so what I mean by that for the purposes of this talk is we're going to take the ec2 instances here and replace",
    "start": "291340",
    "end": "299410"
  },
  {
    "text": "this middle part instead with two services Amazon API gateway and AWS",
    "start": "299410",
    "end": "304570"
  },
  {
    "text": "lambda and by using these two services together we're able to create a service REST API where ADL AWS is going to",
    "start": "304570",
    "end": "312460"
  },
  {
    "text": "handle writing a code for us it's going to handle accepting the HTTP request and we don't have to manage any ec2 servers",
    "start": "312460",
    "end": "318730"
  },
  {
    "text": "ourselves now if you haven't heard of Amazon API gateway it is a way to create",
    "start": "318730",
    "end": "326590"
  },
  {
    "text": "ap is where you specify the various resources you want to expose the path",
    "start": "326590",
    "end": "331720"
  },
  {
    "text": "you want to expose and then you can configure what happens on the back end once you make that request and the nice",
    "start": "331720",
    "end": "337780"
  },
  {
    "text": "thing about it is it handles a number of features for you that you traditionally would have to handle in a framework so",
    "start": "337780",
    "end": "342990"
  },
  {
    "text": "authorization monitoring access control a lot of that is available through API",
    "start": "342990",
    "end": "348760"
  },
  {
    "text": "gateway and the best way to think about it the way we describe it in the documentation is think of it as the",
    "start": "348760",
    "end": "354190"
  },
  {
    "text": "front door for your application now once you take an HTTP request with API gateway you can then configure some sort",
    "start": "354190",
    "end": "361030"
  },
  {
    "text": "of back end and the back end we're going to be using is AWS lambda and if you haven't heard of this service before the",
    "start": "361030",
    "end": "366790"
  },
  {
    "text": "idea is instead of getting an ec2 instance and you figure out how to get the code there instead you create a",
    "start": "366790",
    "end": "372070"
  },
  {
    "text": "lambda function you give it the code that you want and then lambda takes care of running it for you one of the great",
    "start": "372070",
    "end": "377590"
  },
  {
    "text": "things about this is that you only pay for the time that you use for computing so there's no hourly rate it's just",
    "start": "377590",
    "end": "383200"
  },
  {
    "text": "rounding to the nearest hundred millisecond and it takes care of scaling everything for you takes care of running",
    "start": "383200",
    "end": "388570"
  },
  {
    "text": "your code it also can integrate with various AWS events so say when a new s3 object is uploaded you can trigger",
    "start": "388570",
    "end": "394820"
  },
  {
    "text": "- function being run and there's a number of other integration points with DynamoDB streams and Kinesis alright so",
    "start": "394820",
    "end": "402490"
  },
  {
    "start": "400000",
    "end": "554000"
  },
  {
    "text": "if we want to look at our first service REST API we want to set all of this up let's start with a simple example we",
    "start": "402490",
    "end": "408230"
  },
  {
    "text": "want to do a get request and then we just want to return HelloWorld that's that's the simplest example we can think",
    "start": "408230",
    "end": "413240"
  },
  {
    "text": "of right how are we able to set that up so what I want to do here is first show",
    "start": "413240",
    "end": "418670"
  },
  {
    "text": "you how you might set this up in the console this is a good starting point",
    "start": "418670",
    "end": "424820"
  },
  {
    "text": "that most people start with and we'll just hop over to a console here so we'll",
    "start": "424820",
    "end": "436250"
  },
  {
    "text": "just do a single function here let me make this a little bit smaller the way we do this we'll create a new function",
    "start": "436250",
    "end": "442100"
  },
  {
    "text": "that we want to use Python with and we'll go ahead and just return hello world which is what we wanted to do at",
    "start": "442100",
    "end": "447920"
  },
  {
    "text": "first all right and once we do that",
    "start": "447920",
    "end": "453950"
  },
  {
    "text": "we're going to give it a name we'll call it reinvent demo and normally here you",
    "start": "453950",
    "end": "460280"
  },
  {
    "text": "would create whatever roles you want to set up for your function we're just going to use an existing one we've",
    "start": "460280",
    "end": "465470"
  },
  {
    "text": "created and we'll go ahead and say next accept all the defaults and create the function and just to verify that",
    "start": "465470",
    "end": "471950"
  },
  {
    "text": "everything's working here if we go ahead and test this what should happen notice we get hello world there so we've just",
    "start": "471950",
    "end": "477410"
  },
  {
    "text": "set everything up in the console so that's that first part and then we want to pair this with API gateways so what",
    "start": "477410",
    "end": "482450"
  },
  {
    "text": "we would do is hop over to the API gateway console get started we are going",
    "start": "482450",
    "end": "489680"
  },
  {
    "text": "to go ahead and create a new API we'll just call it also reinvent demo and",
    "start": "489680",
    "end": "495370"
  },
  {
    "text": "we're only just going to do that single method there so I'm just going to create a method that's a get method and then",
    "start": "495370",
    "end": "502280"
  },
  {
    "text": "we're going to pair it with lambda here so we'll say that we want to use uswest - which is our region and that function",
    "start": "502280",
    "end": "508910"
  },
  {
    "text": "was reinvent demo it's going to ask us if we want to make sure we're",
    "start": "508910",
    "end": "513950"
  },
  {
    "text": "authorizing API gateway and lambda together we're not going to go over to this part here but there's these four different functions here",
    "start": "513950",
    "end": "521599"
  },
  {
    "text": "there are just four different parts and components one thing I do want to point out is we're only dealing with 200",
    "start": "521599",
    "end": "526790"
  },
  {
    "text": "responses we're not even looking how we handle errors and once we do this we'll go ahead and create a new stage",
    "start": "526790",
    "end": "535410"
  },
  {
    "text": "called eV and we'll go ahead and deploy it and if everything works we should have our first API that returns hello",
    "start": "535410",
    "end": "543460"
  },
  {
    "text": "world all right and so note here I do want to point out we only have single requests doing a single HTTP method all",
    "start": "543460",
    "end": "551260"
  },
  {
    "text": "right so that was a first round of how",
    "start": "551260",
    "end": "559060"
  },
  {
    "start": "554000",
    "end": "616000"
  },
  {
    "text": "we might start looking at serverless REST API is how we might be able to start experimenting with it and we had",
    "start": "559060",
    "end": "564670"
  },
  {
    "text": "this simple requester we did a get request and we returned hello world and again this was what we saw on the console now think about what you would",
    "start": "564670",
    "end": "572470"
  },
  {
    "text": "have to do if you wanted to start building out more of a REST API so this is an example you see a lot this is a",
    "start": "572470",
    "end": "578170"
  },
  {
    "text": "pet store example if you're familiar with a swagger they use this a lot in their documentation and one other thing",
    "start": "578170",
    "end": "584260"
  },
  {
    "text": "we noticed as we were creating this first serverless REST API is that we were having two different experiences here one with",
    "start": "584260",
    "end": "590560"
  },
  {
    "text": "lambda console and then one with the API gateway console so another way we could",
    "start": "590560",
    "end": "595720"
  },
  {
    "text": "do this instead of the console maybe the next thing we do is start over with the SDK and you know if you're familiar with",
    "start": "595720",
    "end": "601720"
  },
  {
    "text": "the SDK the great thing about it is you have a lot of control but there's still a lot of API calls you would need to",
    "start": "601720",
    "end": "607510"
  },
  {
    "text": "make to set everything up and so once you understand all the differences and you really want that fine grained control of how to set up your API you",
    "start": "607510",
    "end": "613900"
  },
  {
    "text": "can certainly use an SDK but this is where Challis comes in Chaves can help",
    "start": "613900",
    "end": "619660"
  },
  {
    "text": "you create these server lists REST API s so taking that example we just saw on the console here's the equivalent",
    "start": "619660",
    "end": "625750"
  },
  {
    "text": "example with Challis so there's really just five lines of code here so every Chellis app has same three",
    "start": "625750",
    "end": "634870"
  },
  {
    "text": "components here first thing you create an app object and call it app second",
    "start": "634870",
    "end": "639940"
  },
  {
    "text": "thing you create one or more routes and this is why I mentioned if you've seen flask or bottle before this decorator",
    "start": "639940",
    "end": "645070"
  },
  {
    "text": "based routing syntax that Python developers really like and should feel right at home here and then the third",
    "start": "645070",
    "end": "650980"
  },
  {
    "text": "thing is you create an app dot PI file you put it in your app and that's all",
    "start": "650980",
    "end": "657070"
  },
  {
    "text": "you need to get started and so once you have all of this set up you can use chalice which also contains",
    "start": "657070",
    "end": "663579"
  },
  {
    "text": "a CLI to then deploy your application so all you would do is you'd run chalice deploy it would set everything up for",
    "start": "663579",
    "end": "669730"
  },
  {
    "text": "you and you get this endpoint here all right so that's the overview of it let's hop back over to the terminal and see",
    "start": "669730",
    "end": "676290"
  },
  {
    "text": "this in action all right so first thing",
    "start": "676290",
    "end": "688510"
  },
  {
    "text": "I'm going to do here I'm going to see that create a virtual environment so I want to point I'll not really I haven't",
    "start": "688510",
    "end": "694570"
  },
  {
    "text": "started with anything starting from scratch here so this is the same steps you would do as your getting started so like most Python project you create a",
    "start": "694570",
    "end": "700810"
  },
  {
    "text": "virtual environment and once we have that we're going to activate it so chalice is a Python package so we'll use",
    "start": "700810",
    "end": "707380"
  },
  {
    "text": "pip to install it and once we install it we'll look at the various components in",
    "start": "707380",
    "end": "713290"
  },
  {
    "text": "more depth but to get started you have a you'll not have a chalice CLI and we know look at these commands throughout",
    "start": "713290",
    "end": "719620"
  },
  {
    "text": "the talk but the one we're going to start with now is this new project so all I would do is the new project and",
    "start": "719620",
    "end": "724870"
  },
  {
    "text": "we'll give it a name of call it reinvents and now if we hop over to this",
    "start": "724870",
    "end": "731050"
  },
  {
    "text": "directory it's created a number of files for us but the one we're going to look at is just what we saw in the slides",
    "start": "731050",
    "end": "736060"
  },
  {
    "text": "this app dot PI file so if I open it up there's a couple of other comments here that give you more examples we'll just",
    "start": "736060",
    "end": "741790"
  },
  {
    "text": "go ahead and remove that and you can see it's the same five lines of code that we started with so I'm just gonna go ahead",
    "start": "741790",
    "end": "748959"
  },
  {
    "text": "and save this and we'll look at the various features but it's go ahead and just start with deploying it so what",
    "start": "748959",
    "end": "754420"
  },
  {
    "text": "this is going to do is start with the same process that we did in the console where it's going to create an item role",
    "start": "754420",
    "end": "759820"
  },
  {
    "text": "for us it's going to create a deployment package which is used for lambda after that it's then going to create",
    "start": "759820",
    "end": "765640"
  },
  {
    "text": "your lambda function figure out what routes we want so in this case because we're just starting with a hello world",
    "start": "765640",
    "end": "770980"
  },
  {
    "text": "simple application here there's not a whole lot involved and then after that we are going to create the API gateway",
    "start": "770980",
    "end": "779410"
  },
  {
    "text": "resources and then deploy our application we should get everything up and running you double-check that I have",
    "start": "779410",
    "end": "788780"
  },
  {
    "text": "internet here oh sorry try that again I guess this is a good",
    "start": "788780",
    "end": "797270"
  },
  {
    "text": "point time to point out that if you wanted to redeploy an app but you would simply just run chalice deploy you don't",
    "start": "797270",
    "end": "802490"
  },
  {
    "text": "have to actually there's no separate update command or anything every time you want this to work you just run",
    "start": "802490",
    "end": "808100"
  },
  {
    "text": "chouse deploy give this a few seconds so",
    "start": "808100",
    "end": "813190"
  },
  {
    "text": "one of the things that will happen as you're writing when you run your initial deploy is this creating an iamb role for",
    "start": "813190",
    "end": "819890"
  },
  {
    "text": "you and sometimes that wool takes a while to propagate so that lambda can assume that role and so what you're",
    "start": "819890",
    "end": "826250"
  },
  {
    "text": "seeing here is a little bit of a delay creating that first lambda role and so once we've done that as we do subsequent",
    "start": "826250",
    "end": "831890"
  },
  {
    "text": "deploys we'll see everything and get a lot quicker here so we've created this HTTP endpoint and now that I call my get",
    "start": "831890",
    "end": "839480"
  },
  {
    "text": "request or doing HTTP request you see we get a hello world here oh and by the way",
    "start": "839480",
    "end": "844670"
  },
  {
    "text": "HTTP this is just I'm gonna use this instead of curl and if you wanted to follow along later it would just be pip",
    "start": "844670",
    "end": "850430"
  },
  {
    "text": "install HTTP pipe all right so that was our initial deploy I just want to show",
    "start": "850430",
    "end": "855980"
  },
  {
    "text": "you how the workflow would go if you wanted to add more features here more routes so let's go ahead and copy this",
    "start": "855980",
    "end": "862810"
  },
  {
    "text": "so the first thing I want to show is you can add any routes you want so let's say a foo slash bar out and so I say I",
    "start": "862810",
    "end": "870740"
  },
  {
    "text": "wanted to return some arbitrary data here you can also do name captures so for example if I wanted to say hello",
    "start": "870740",
    "end": "876230"
  },
  {
    "text": "with a given name just like in flask it would pass along the name for me and I'll call this hello name and perhaps I",
    "start": "876230",
    "end": "883130"
  },
  {
    "text": "wanted to return the name here and I can specify as many capture groups as I want",
    "start": "883130",
    "end": "888740"
  },
  {
    "text": "so I could say you know other and then I would get past another and I could say",
    "start": "888740",
    "end": "894680"
  },
  {
    "text": "you know last and I'd get past another last so as many of the captures that I want here but we'll just keep it at",
    "start": "894680",
    "end": "900020"
  },
  {
    "text": "hello name and then the last thing I wanted to show was how you can introspect data about your requests so",
    "start": "900020",
    "end": "906230"
  },
  {
    "text": "say we'll just call it put here I'm gonna specify you have to send an HTTP",
    "start": "906230",
    "end": "911630"
  },
  {
    "text": "put request so now gets and then what I want to do here is just echo the body back so the way that you look at",
    "start": "911630",
    "end": "918170"
  },
  {
    "text": "attributes are your current request is you'd say app requests and there'd be dot and then",
    "start": "918170",
    "end": "923970"
  },
  {
    "text": "there's a couple of things here zero and C so there's claims contacts headers JSON body and so the one we're gonna",
    "start": "923970",
    "end": "929790"
  },
  {
    "text": "look at here is just JSON body so we're gonna take our request whatever is sent there we're gonna echo it back is the",
    "start": "929790",
    "end": "935129"
  },
  {
    "text": "value of this key alright so now that we have it let me double check now that we",
    "start": "935129",
    "end": "940439"
  },
  {
    "text": "have that in place we'll just go ahead and redeploy our application and so what's happening here is it's taking our",
    "start": "940439",
    "end": "946170"
  },
  {
    "text": "code figuring out what changed and then sending the updates to lambda and then reconfiguring API gateway for us and so",
    "start": "946170",
    "end": "952230"
  },
  {
    "text": "once this finish finishes deploying we'll go ahead and take a look at all these features here so we'll remind",
    "start": "952230",
    "end": "959279"
  },
  {
    "text": "ourselves of what we've added will go through each of these routes so if I do an HTTP GET request to foo slash bar we",
    "start": "959279",
    "end": "966480"
  },
  {
    "text": "should get a foo slash bar response",
    "start": "966480",
    "end": "972410"
  },
  {
    "text": "there we go and now if we do a request to that named capture so I can say hello",
    "start": "972410",
    "end": "979379"
  },
  {
    "text": "and then james and we can see we're getting hello james back and you know we can change that to anything right it's",
    "start": "979379",
    "end": "985980"
  },
  {
    "text": "just going to echo that name back and the last thing we did was looking at how we can provide metadata about the",
    "start": "985980",
    "end": "993449"
  },
  {
    "text": "current request so I'm going to send a JSON body up we'll just call it again hello world and then I'm going to send",
    "start": "993449",
    "end": "999509"
  },
  {
    "text": "an HTTP put request an HTTP put request to that and to that slash put route so",
    "start": "999509",
    "end": "1007339"
  },
  {
    "text": "let's do this here and also an HTTP put and I'll change this to put change that",
    "start": "1007339",
    "end": "1017509"
  },
  {
    "text": "there so",
    "start": "1017509",
    "end": "1022750"
  },
  {
    "text": "thank you all right and so we can see we get this hello world back and so if we change this to anything else you know",
    "start": "1023510",
    "end": "1029010"
  },
  {
    "text": "hello - world - we get same thing back echoed all right so that was a quick",
    "start": "1029010",
    "end": "1035880"
  },
  {
    "text": "overview some of the routing stuff and Charles we're gonna see a lot more of that throughout the talk but let's hop",
    "start": "1035880",
    "end": "1042480"
  },
  {
    "start": "1040000",
    "end": "1146000"
  },
  {
    "text": "over to back to the slides and show you a couple of other things that we didn't have a demo for so first thing in the",
    "start": "1042480",
    "end": "1049380"
  },
  {
    "text": "console I mentioned we didn't handle errors so how do we deal with error responses and in Challis is a number of",
    "start": "1049380",
    "end": "1055320"
  },
  {
    "text": "built-in exceptions here and all you have to do in your code is import those exceptions and raise them whenever you",
    "start": "1055320",
    "end": "1061320"
  },
  {
    "text": "want to trigger an exception so we import bad request error which maps to the HTTP bad request and then in our",
    "start": "1061320",
    "end": "1068760"
  },
  {
    "text": "code here when we want to send an error back we just raise a bad request error",
    "start": "1068760",
    "end": "1073910"
  },
  {
    "text": "this actually results in an HTTP 400 request with a code and a message and so",
    "start": "1073910",
    "end": "1079440"
  },
  {
    "text": "there's a number of these built-in ones that map to the various HTTP status codes all right second thing I just",
    "start": "1079440",
    "end": "1086610"
  },
  {
    "text": "wanted to show another example of how you can introspect more stuff about the metadata of a request so in this case",
    "start": "1086610",
    "end": "1091920"
  },
  {
    "text": "we're pulling a current request which we saw in the previous demo here and the thing I want to point out here is this",
    "start": "1091920",
    "end": "1097890"
  },
  {
    "text": "is updated every request so since we don't have to worry about lamdaur writing our code in multiple threads this current request we can access",
    "start": "1097890",
    "end": "1104700"
  },
  {
    "text": "whenever our view function is called when we know that that reflects the current request and here's an example of",
    "start": "1104700",
    "end": "1111300"
  },
  {
    "text": "where we're actually dispatching based on the current method so again if you've used flask before this should seem very",
    "start": "1111300",
    "end": "1117420"
  },
  {
    "text": "familiar to you and the last thing I want to stress here is I asked the",
    "start": "1117420",
    "end": "1123060"
  },
  {
    "text": "question how would this look in the console and if we wanted to configure the pet store and so here's the",
    "start": "1123060",
    "end": "1128880"
  },
  {
    "text": "equivalent routing code in Challis and if you deploy this app you'll see an API gate wait actually creates all of these",
    "start": "1128880",
    "end": "1135360"
  },
  {
    "text": "routes for you and we'll look at why this matters there's a number of advantages you get if you leverage API",
    "start": "1135360",
    "end": "1141000"
  },
  {
    "text": "gateway to actually create all of the various routes for you and you'll see that in the sample applications alright",
    "start": "1141000",
    "end": "1147540"
  },
  {
    "start": "1146000",
    "end": "1380000"
  },
  {
    "text": "so if we zoom out a bit from the runtime that we've seen with Challis there's actually a couple of components that",
    "start": "1147540",
    "end": "1153140"
  },
  {
    "text": "that make up first one is in addition to that routing API there's also runtime that Charles is",
    "start": "1153140",
    "end": "1160800"
  },
  {
    "text": "injected into your lambda function so this is the normal flow for working with",
    "start": "1160800",
    "end": "1166050"
  },
  {
    "text": "API gateway and lambda and we saw those kind of four corners there when we looked at the console and Challis",
    "start": "1166050",
    "end": "1172020"
  },
  {
    "text": "manages all of this part here but if we take a look at lambda and we zoom into what lambda actually is doing here",
    "start": "1172020",
    "end": "1178130"
  },
  {
    "text": "normally you have a lambda Handler and we saw this in the console where it takes two arguments event in contacts we",
    "start": "1178130",
    "end": "1184050"
  },
  {
    "text": "didn't really look at them but what you do is return some value from your function and then that goes back to API",
    "start": "1184050",
    "end": "1189510"
  },
  {
    "text": "gateway so what Challis does is there's a small component that it has in its library that actually works with lambda",
    "start": "1189510",
    "end": "1196470"
  },
  {
    "text": "and understands the event in the context and figures out how to map that to request object that you can then use in",
    "start": "1196470",
    "end": "1201840"
  },
  {
    "text": "your own code and then from there it calls into your app top PI file in order to call the appropriate view function",
    "start": "1201840",
    "end": "1207990"
  },
  {
    "text": "and then also handles the responses so that's the runtime component the other two components are the command-line",
    "start": "1207990",
    "end": "1214320"
  },
  {
    "text": "interface and then the configuration and packaging so take a look at these last two let's say that I'm on my computer",
    "start": "1214320",
    "end": "1221310"
  },
  {
    "text": "here and I have my app dot pi and requirements file if I run Chou's deploy what that's going to do is generate a",
    "start": "1221310",
    "end": "1226920"
  },
  {
    "text": "deployment package here so if you've worked with lambda you know you have to create a zip file of all your dependencies so it handles installing",
    "start": "1226920",
    "end": "1233490"
  },
  {
    "text": "your requirements files into a virtual environment getting all of that set up for you and once we do that we just saw",
    "start": "1233490",
    "end": "1239760"
  },
  {
    "text": "there's a small runtime that it injects it's the wrapper to lambda and your code and so it's going to put that as part of",
    "start": "1239760",
    "end": "1245220"
  },
  {
    "text": "your deployment package and then it takes that and sends it off to AWS and it uploads it and once that's done it",
    "start": "1245220",
    "end": "1252270"
  },
  {
    "text": "then talks to API gateway and lambda and I am to get everything up and running",
    "start": "1252270",
    "end": "1257480"
  },
  {
    "text": "okay so that was the end of the second part just to recap what we've looked at so far we've looked at how we can set up",
    "start": "1257480",
    "end": "1263850"
  },
  {
    "text": "chalice we looked at creating a new child's project we saw how to deploy it and then we saw a quick tour of some of",
    "start": "1263850",
    "end": "1270810"
  },
  {
    "text": "the Chou's writing api's how we handle methods how we handled name captures and those kinds of things all right so now",
    "start": "1270810",
    "end": "1278250"
  },
  {
    "text": "this is the third part I think the part that we're gonna see a lot of more real-world use cases as you start to",
    "start": "1278250",
    "end": "1284730"
  },
  {
    "text": "write applications how you can use chalice Det these problems for you so the first example we're going to look at we're",
    "start": "1284730",
    "end": "1290920"
  },
  {
    "text": "gonna look at a couple but the first example is a github bot this is I think",
    "start": "1290920",
    "end": "1296020"
  },
  {
    "text": "a lot of I've seen cows used to create various BOTS github BOTS slack BOTS and",
    "start": "1296020",
    "end": "1301450"
  },
  {
    "text": "what we're going to do is have a welcome bot so the idea is pretty straightforward someone goes to your github issue their github repo and they",
    "start": "1301450",
    "end": "1308470"
  },
  {
    "text": "create an issue we want to then comment on the issue welcoming them and we can imagine how we might have more complex",
    "start": "1308470",
    "end": "1315790"
  },
  {
    "text": "logic but we'll show how to just get all the pieces set up so here is a secret a",
    "start": "1315790",
    "end": "1320830"
  },
  {
    "text": "gram of what we're gonna shoot for on the basic steps here a user goes here github repo they open an issue then",
    "start": "1320830",
    "end": "1327910"
  },
  {
    "text": "github has a web hooks integration so it's going to trigger this issue created event that issue created events then",
    "start": "1327910",
    "end": "1334030"
  },
  {
    "text": "going to send an HTTP POST request to api gateway and then api gateway as we've seen will then invoke a lambda",
    "start": "1334030",
    "end": "1340150"
  },
  {
    "text": "function which calls into chalice just going to call our new issue and then after we do that in our view code we're",
    "start": "1340150",
    "end": "1347140"
  },
  {
    "text": "then going to call back to github and we're going to issue a comment here that",
    "start": "1347140",
    "end": "1352720"
  },
  {
    "text": "says welcome to the repo and so maybe for now we're just going to do a static message that says welcome to the repo",
    "start": "1352720",
    "end": "1358270"
  },
  {
    "text": "and the name but perhaps we could have some sort of link to contributing guide we could check if this is their first",
    "start": "1358270",
    "end": "1363850"
  },
  {
    "text": "time commenting on an issue and we could give them a lot more advanced logic here and just to reiterate this part that's",
    "start": "1363850",
    "end": "1370450"
  },
  {
    "text": "highlighted is the part that chalice is going to handle for us the part that we're going to look at and the part on the left-hand side is all the github has",
    "start": "1370450",
    "end": "1376600"
  },
  {
    "text": "and so we don't need to do anything there we just need to configure that alright so let's take a look at how we",
    "start": "1376600",
    "end": "1382930"
  },
  {
    "start": "1380000",
    "end": "1425000"
  },
  {
    "text": "do else so first thing here I'm going to",
    "start": "1382930",
    "end": "1389740"
  },
  {
    "text": "install bo2 3 the AWS SDK for Python so",
    "start": "1389740",
    "end": "1395860"
  },
  {
    "text": "the first thing that comes up is if you've used the github API before you know that you have to create a personal",
    "start": "1395860",
    "end": "1401110"
  },
  {
    "text": "access token which is some sort of API key that identifies who you are and github can check that you have sorry the",
    "start": "1401110",
    "end": "1409420"
  },
  {
    "text": "sufficient permission permissions to access whatever action you're trying to do so we want to figure out how we can",
    "start": "1409420",
    "end": "1414910"
  },
  {
    "text": "store that API key because you don't necessarily want to check it into source but at the same time",
    "start": "1414910",
    "end": "1420310"
  },
  {
    "text": "do you need that API tea in order to work with github so there's a number of",
    "start": "1420310",
    "end": "1425620"
  },
  {
    "start": "1425000",
    "end": "2025000"
  },
  {
    "text": "ways to do this I'm gonna highlight one particular approach that works for this example and that's to use kms so I'm",
    "start": "1425620",
    "end": "1431710"
  },
  {
    "text": "going to show you an example in the repple just so that we get the concepts and then I'll show how we actually use this in our application so if you",
    "start": "1431710",
    "end": "1437560"
  },
  {
    "text": "haven't used kms before what we're gonna do is a couple there's a couple of methods here we're going to use first",
    "start": "1437560",
    "end": "1442630"
  },
  {
    "text": "thing we're gonna do just to give you a demo of this is we're going to create a key and we're gonna have a key ID here",
    "start": "1442630",
    "end": "1448000"
  },
  {
    "text": "we'll just use the default for now as we demo this and now I'm going to use",
    "start": "1448000",
    "end": "1453010"
  },
  {
    "text": "there's two methods here encrypt and decrypt so the idea is that I have a key ID and then I can give it some plaintext",
    "start": "1453010",
    "end": "1460120"
  },
  {
    "text": "and say my secret and kms is then going",
    "start": "1460120",
    "end": "1465460"
  },
  {
    "text": "to encrypt that and give us a ciphertext blob back so we're gonna get this encrypted content back if I wanted to",
    "start": "1465460",
    "end": "1470950"
  },
  {
    "text": "store that I could store that as ciphertext blob and then if I actually",
    "start": "1470950",
    "end": "1476290"
  },
  {
    "text": "wanted to put it in a JSON file what I might do instead of storing binary content I could just maybe encode it as",
    "start": "1476290",
    "end": "1482830"
  },
  {
    "text": "base64 just so that we have ASCII values here and then in my app code when I wanted to decrypt it at runtime so that",
    "start": "1482830",
    "end": "1491050"
  },
  {
    "text": "I can grab that API key whatever I do is called kms decrypt and I would just give it the cipher text blob of this",
    "start": "1491050",
    "end": "1499240"
  },
  {
    "text": "encrypted content and you can see we get plaintext back so in my code I would actually just run this in plaintext to",
    "start": "1499240",
    "end": "1505810"
  },
  {
    "text": "get my secret so this is how we're going to handle dealing with the API keys and",
    "start": "1505810",
    "end": "1511150"
  },
  {
    "text": "github all right so let's hop over to the code here so I wanted to give you",
    "start": "1511150",
    "end": "1519180"
  },
  {
    "text": "know review of the project here in the structure because there's actually a few new things that we're going to look at that we haven't looked at so far so we",
    "start": "1519180",
    "end": "1525700"
  },
  {
    "text": "see our app dot PI file which is what we've seen so far but the first new thing I want to show is there's a",
    "start": "1525700",
    "end": "1530950"
  },
  {
    "text": "chalice Lib directory so if you wanted to structure your application with multiple files you didn't want to put",
    "start": "1530950",
    "end": "1536380"
  },
  {
    "text": "everything in an app PI file you can put it in chalice Lib and chalice Lib will automatically be included when the",
    "start": "1536380",
    "end": "1543010"
  },
  {
    "text": "deployment package is generated and in particular I want to look at this config",
    "start": "1543010",
    "end": "1548230"
  },
  {
    "text": "dot JSON so what we're going to do is add config data in the config dot JSON file",
    "start": "1548230",
    "end": "1554130"
  },
  {
    "text": "so if we take a look at that we can see",
    "start": "1554130",
    "end": "1562480"
  },
  {
    "text": "that we have our encrypted contents here for a github API token she's also an HVAC thing that we'll look at in just a",
    "start": "1562480",
    "end": "1568660"
  },
  {
    "text": "second and I can put any other config data that I want here now that I do that",
    "start": "1568660",
    "end": "1573970"
  },
  {
    "text": "if I take a look at the secrets module which is something I'm going to create as part of my application we have the",
    "start": "1573970",
    "end": "1581170"
  },
  {
    "text": "same steps here that we saw in the repple where this file name is this config JSON file and then what I'm going",
    "start": "1581170",
    "end": "1587050"
  },
  {
    "text": "to do is open that file and I'm gonna load the JSON contents here and then I'm",
    "start": "1587050",
    "end": "1592270"
  },
  {
    "text": "gonna grab the key name so maybe get a H Mac web hook or the API token once we do",
    "start": "1592270",
    "end": "1597370"
  },
  {
    "text": "that we'll go ahead and call will create a kit kms client will decrypt our data and then we'll return the plain text so",
    "start": "1597370",
    "end": "1604990"
  },
  {
    "text": "this is what we're going to use to create and retrieve secrets as part of",
    "start": "1604990",
    "end": "1610929"
  },
  {
    "text": "our application and the way we're going to use those let's hop over to the app top high file here we're going to use",
    "start": "1610929",
    "end": "1618250"
  },
  {
    "text": "this as notice on this line we're importing that secrets that we just looked at and then here we're calling",
    "start": "1618250",
    "end": "1624910"
  },
  {
    "text": "secrets get secrets for both the API token and the H Mac web hook and then we're using the github 3 which is a",
    "start": "1624910",
    "end": "1631630"
  },
  {
    "text": "third-party library to work with the github API and passing in that github API token so one quick caveat I want to",
    "start": "1631630",
    "end": "1639190"
  },
  {
    "text": "mention is this approach works because I only have one once case to secrets that",
    "start": "1639190",
    "end": "1644380"
  },
  {
    "text": "I'm decrypting as you have more secrets a better approach would be to generate a",
    "start": "1644380",
    "end": "1649510"
  },
  {
    "text": "data key do the client-side encryption and then just encrypt that key but here we can keep it simple because we're just dealing with a small number of secrets",
    "start": "1649510",
    "end": "1657059"
  },
  {
    "text": "all right and once we do that let's walk through some of the code here so I'm",
    "start": "1657059",
    "end": "1662350"
  },
  {
    "text": "just adding a Who am I this is a quick sanity check to make sure that everything works and as expected and then the main logic here is in this new",
    "start": "1662350",
    "end": "1668740"
  },
  {
    "text": "issue this is what we're going to hook up to github so if we walk through this code here we've seen the current request",
    "start": "1668740",
    "end": "1674650"
  },
  {
    "text": "metadata so you've done this so far and all we're going to do is pull the JSON body out and so once we do that first",
    "start": "1674650",
    "end": "1680620"
  },
  {
    "text": "we're going to do is validate that this is the valid request from github so we want to make sure we're not just responding to any arbitrary event",
    "start": "1680620",
    "end": "1687100"
  },
  {
    "text": "want to make sure that these requests that we're handling are actually legitimate requests from github and the way that github enables this for us is",
    "start": "1687100",
    "end": "1693730"
  },
  {
    "text": "via hmx so you both establish a shared secret when you configure the HMA you give it the secret and then it sends",
    "start": "1693730",
    "end": "1699580"
  },
  {
    "text": "that value and a header you compute it and you make sure they match and if they do then you can you know that it's a",
    "start": "1699580",
    "end": "1704799"
  },
  {
    "text": "valid request so the first thing we pull out the X hub signature that github",
    "start": "1704799",
    "end": "1710440"
  },
  {
    "text": "sends and we store that as the expected value next thing we do is to calculate",
    "start": "1710440",
    "end": "1716770"
  },
  {
    "text": "that signature ourselves to make sure everything matches up so we're using the standard itch Mac library we're using",
    "start": "1716770",
    "end": "1722590"
  },
  {
    "text": "that github itch Mac secret that we pulled from that secrets module and then we're going to update it with the raw body so this is the actual bytes of the",
    "start": "1722590",
    "end": "1729280"
  },
  {
    "text": "HTTP request that chalice is enabled for you and it Maps it through in its request metadata and then the next thing",
    "start": "1729280",
    "end": "1736179"
  },
  {
    "text": "we're going to do is actually check that the expected signature matches what",
    "start": "1736179",
    "end": "1741370"
  },
  {
    "text": "we've calculated so here we're going to use H Mac compare digest just a constant time comparison and if it doesn't match",
    "start": "1741370",
    "end": "1747159"
  },
  {
    "text": "up we're going to say that it failed we ignore the request otherwise we assume or we know that H max validation passed",
    "start": "1747159",
    "end": "1753400"
  },
  {
    "text": "and once we do that we now know that the request is valid and we can have",
    "start": "1753400",
    "end": "1758409"
  },
  {
    "text": "implement our main logic here so in this case we're just checking if the user opened an event we're gonna grab some information about the repo we're gonna",
    "start": "1758409",
    "end": "1765190"
  },
  {
    "text": "grab the issue number create an issue object figure out who opened the issue and then we're going to create a comment",
    "start": "1765190",
    "end": "1770679"
  },
  {
    "text": "on github this is saying welcome to the repo person who opened it I'm James Bond I'm here to help alright so now that",
    "start": "1770679",
    "end": "1778840"
  },
  {
    "text": "we've done that the second thing I want to show our third thing i want to show is a requirements like text file so if",
    "start": "1778840",
    "end": "1784330"
  },
  {
    "text": "you've used this before you know put all of your dependencies in here as part of the deployment process Chou's creates a",
    "start": "1784330",
    "end": "1789460"
  },
  {
    "text": "virtual environment installs your requirements or installs the dependencies from your requirements and then sends that up to lando so that's",
    "start": "1789460",
    "end": "1795280"
  },
  {
    "text": "how we're managing third-party packages as well alright so we're going to go",
    "start": "1795280",
    "end": "1800289"
  },
  {
    "text": "ahead and deploy this as that's going I'll go ahead and set up the github component so nice thing about this is",
    "start": "1800289",
    "end": "1806470"
  },
  {
    "text": "this is a really straightforward process with github it makes it very easy",
    "start": "1806470",
    "end": "1811049"
  },
  {
    "text": "so let's do a quick sanity check here we can do the Who am I this will make sure that everything works so this at least",
    "start": "1812690",
    "end": "1819990"
  },
  {
    "text": "shows we ran the module as initialization code we can get the username back and now we can set this up",
    "start": "1819990",
    "end": "1825000"
  },
  {
    "text": "and github so have a helper scripture that's gonna open up github for me and",
    "start": "1825000",
    "end": "1831950"
  },
  {
    "text": "right here I just have my passwords in a use key past so I'm just gonna copy them",
    "start": "1831950",
    "end": "1838500"
  },
  {
    "text": "out here and now all we have to do is just hook this up to get up so we need",
    "start": "1838500",
    "end": "1843960"
  },
  {
    "text": "to put the URL here and Chavez has another command here to grab the URL so you just run Challis URL and then I'm",
    "start": "1843960",
    "end": "1851370"
  },
  {
    "text": "gonna paste this in to new issue and then we talked about that established shared secret so in this case I have a",
    "start": "1851370",
    "end": "1861059"
  },
  {
    "text": "secrets helper that's going to set everything up first and again if we take a look at that config key it's called",
    "start": "1861059",
    "end": "1866100"
  },
  {
    "text": "github H Mac web hook so I'll actually just run that locally here so we have",
    "start": "1866100",
    "end": "1873629"
  },
  {
    "text": "some random data here now if I put that in we're gonna say we only care about",
    "start": "1873629",
    "end": "1879779"
  },
  {
    "text": "issues we don't really care about push and we'll go ahead and set everything up here and we can also go back into this",
    "start": "1879779",
    "end": "1887250"
  },
  {
    "text": "to double check it's gonna send a test payload here so if we do that we can see that it's sent a test payload let me see",
    "start": "1887250",
    "end": "1894149"
  },
  {
    "text": "that so there's this X sub signature which is the thing that we're going to",
    "start": "1894149",
    "end": "1899669"
  },
  {
    "text": "validate and we're gonna compare that to what we get you can notice here again we get a 200 response back so now if you go",
    "start": "1899669",
    "end": "1906750"
  },
  {
    "text": "to the issues try it out say you know a new user I found a bug help me it's",
    "start": "1906750",
    "end": "1915690"
  },
  {
    "text": "gonna happen it's going to call into our web hook and then James BOTS gonna come along and it's gonna say welcome to the project so it's pretty straightforward",
    "start": "1915690",
    "end": "1921450"
  },
  {
    "text": "to set up now one other thing I want to show here is while this seems pretty",
    "start": "1921450",
    "end": "1926759"
  },
  {
    "text": "straightforward like most things sometimes things can go wrong so let's say something goes wrong here let's say",
    "start": "1926759",
    "end": "1932190"
  },
  {
    "text": "in my secret I put the wrong shared secret so I'm just gonna put bad value here what should happen is because",
    "start": "1932190",
    "end": "1939389"
  },
  {
    "text": "they're using different secrets validation should say our verification should fail and we shouldn't be doing anything on a new issue so if I go",
    "start": "1939389",
    "end": "1946730"
  },
  {
    "text": "back into this and I say help again if I",
    "start": "1946730",
    "end": "1952700"
  },
  {
    "text": "comment on this issue will notice here you should not get anything back so now how do we troubleshoot our application",
    "start": "1952700",
    "end": "1959330"
  },
  {
    "text": "what happens when things go wrong what's their next step chalice gives you a couple of things here to help you first",
    "start": "1959330",
    "end": "1965320"
  },
  {
    "text": "notice when we created our app we created an app with a log of set level to debug so app that log is just a",
    "start": "1965320",
    "end": "1972140"
  },
  {
    "text": "standard logging jet logger object it just configures it with a few helpful defaults so there's a stream handler",
    "start": "1972140",
    "end": "1977810"
  },
  {
    "text": "there's a logging formatter that works well with cloud watch logs and lambda has integration with cloud watch logs so",
    "start": "1977810",
    "end": "1983480"
  },
  {
    "text": "what's nice about this is now that it's having an issue here I can run Chaves logs to give me a tail of that log I'll",
    "start": "1983480",
    "end": "1990440"
  },
  {
    "text": "actually just take a look at say the last 10 lines here and what this is going to do is call to the cloud watch",
    "start": "1990440",
    "end": "1998690"
  },
  {
    "text": "logs API and show us some of the last log messages so thing to note here Connor to",
    "start": "1998690",
    "end": "2004510"
  },
  {
    "text": "see so see this first line here sha-1 isn't like 9ae and the actual signature",
    "start": "2004510",
    "end": "2010480"
  },
  {
    "text": "is like 4 6 7 so then we get that last message that says signature validation failed ignoring requests and so now that",
    "start": "2010480",
    "end": "2016810"
  },
  {
    "text": "we know what went wrong can go back into github update everything and would be all set all right so to recap what we",
    "start": "2016810",
    "end": "2027250"
  },
  {
    "start": "2025000",
    "end": "2061000"
  },
  {
    "text": "looked in this first sample app just to give you an idea of what you can do you looked at way that you can manage secrets and config and there was that",
    "start": "2027250",
    "end": "2033580"
  },
  {
    "text": "caveat because we had a small number of Secrets using KMS decrypt would work for our case we also looked at how you can",
    "start": "2033580",
    "end": "2039190"
  },
  {
    "text": "use multi file Challis applications so by using Challis lib you can put all of your additional libraries and your",
    "start": "2039190",
    "end": "2045040"
  },
  {
    "text": "config files in that directory and it will automatically take care of sending that to lambda the third thing we looked",
    "start": "2045040",
    "end": "2050950"
  },
  {
    "text": "at is how we can troubleshoot so when things go wrong we have debug logs configured and we saw how we can use",
    "start": "2050950",
    "end": "2056200"
  },
  {
    "text": "chouse logs to then look at and troubleshoot our problem alright so that",
    "start": "2056200",
    "end": "2061510"
  },
  {
    "start": "2061000",
    "end": "2160000"
  },
  {
    "text": "was the first one second one is a single page app and really this is kind of a",
    "start": "2061510",
    "end": "2068159"
  },
  {
    "text": "not just single page app but a more traditional set up here where you know a lot of times you'll have say static",
    "start": "2068160",
    "end": "2075879"
  },
  {
    "text": "content and search the CloudFront or s3 and what you want to do is use your preferred JavaScript",
    "start": "2075880",
    "end": "2083888"
  },
  {
    "text": "frameworks a react or angular and to make API calls to some sort of REST API take that data and then render your",
    "start": "2083889",
    "end": "2090220"
  },
  {
    "text": "components when your components in the browser so first part we're gonna look",
    "start": "2090220",
    "end": "2096280"
  },
  {
    "text": "at is this apt up high file again and we're not gonna actually look at the",
    "start": "2096280",
    "end": "2101740"
  },
  {
    "text": "code in too much depth but for the sample app imagine some sort of leaderboards so you have a game that has",
    "start": "2101740",
    "end": "2108190"
  },
  {
    "text": "users and those users have scores and you're gonna keep track of the high scores for the game so there's two",
    "start": "2108190",
    "end": "2114550"
  },
  {
    "text": "things new that I want to show here that we haven't looked at first is the scores equals true so in order to work with",
    "start": "2114550",
    "end": "2121180"
  },
  {
    "text": "browser we need to enable cores and Challis has this mode that you specify",
    "start": "2121180",
    "end": "2126369"
  },
  {
    "text": "cores equals true and we'll configure all of this for you so it'll set the appropriate headers it also configures a",
    "start": "2126369",
    "end": "2131859"
  },
  {
    "text": "pre-flight request so that if you're sending something we can put or something that's going to require",
    "start": "2131859",
    "end": "2137349"
  },
  {
    "text": "preflighting it will respond appropriately and second thing one of the shows",
    "start": "2137349",
    "end": "2142510"
  },
  {
    "text": "we're using boto 3 here so here we're using dynamo DB as our data store and then we're not going to look at the",
    "start": "2142510",
    "end": "2148589"
  },
  {
    "text": "actual resources but imagine here we have games for a particular game you can look at the leaderboard for games you",
    "start": "2148589",
    "end": "2155109"
  },
  {
    "text": "can look at users for that particular game and so far what we've been doing is",
    "start": "2155109",
    "end": "2161859"
  },
  {
    "start": "2160000",
    "end": "2239000"
  },
  {
    "text": "we write our app we deploy it and then we test it out and you see that everything's working so if we can",
    "start": "2161859",
    "end": "2167470"
  },
  {
    "text": "improve on that and have a more iterative loop where we can have quicker feedback that's going to help us be more",
    "start": "2167470",
    "end": "2173619"
  },
  {
    "text": "productive and so chalice has another mode here you can run which is the chalice local command so what you do",
    "start": "2173619",
    "end": "2180970"
  },
  {
    "text": "here you run chalice local and this will spin up a local HTTP server so you can test",
    "start": "2180970",
    "end": "2186490"
  },
  {
    "text": "your app out locally so you don't have to do deployments you can actually just make sure everything's working as you develop your API and then deploy it",
    "start": "2186490",
    "end": "2191920"
  },
  {
    "text": "afterwards and so the way this works and we can go to games here we can see we",
    "start": "2191920",
    "end": "2198130"
  },
  {
    "text": "have games I wouldn't notice here that child the local mode also understands the cores equals true setting and so we",
    "start": "2198130",
    "end": "2205869"
  },
  {
    "text": "can also go to you know leaderboard to CL scores here",
    "start": "2205869",
    "end": "2211030"
  },
  {
    "text": "and you can double-check that see if that looks right and then once we're happy with that we can deploy our API so",
    "start": "2211030",
    "end": "2217660"
  },
  {
    "text": "Challis local is another tool you can use to help you be more productive so",
    "start": "2217660",
    "end": "2223180"
  },
  {
    "text": "let's say we've worked out the API right we've seen how that works so far we got our API we're happy with that and the",
    "start": "2223180",
    "end": "2228370"
  },
  {
    "text": "next part we need to do is actually write the front-end part so we want to have JavaScript code that's going to talk to our API get the data back and",
    "start": "2228370",
    "end": "2234700"
  },
  {
    "text": "then integrate with some on presentation framework so you could use you know the",
    "start": "2234700",
    "end": "2241420"
  },
  {
    "start": "2239000",
    "end": "2408000"
  },
  {
    "text": "browser API is directly you could use fetch if you wanted or you could use",
    "start": "2241420",
    "end": "2246460"
  },
  {
    "text": "even jQuery to just make the appropriate API calls but one of the nice things about integrating with API gateway so I",
    "start": "2246460",
    "end": "2252580"
  },
  {
    "text": "mentioned if you saw that pet store example it actually creates routes an API gateway one of the nice things about that is it also can leverage features an",
    "start": "2252580",
    "end": "2259720"
  },
  {
    "text": "API gateway including SDK generation so API gateway has support for SDK generation using JavaScript Android iOS",
    "start": "2259720",
    "end": "2268600"
  },
  {
    "text": "as well and the one we're going to look at is JavaScript since we're dealing with browser so the way this works is we",
    "start": "2268600",
    "end": "2276880"
  },
  {
    "text": "run generate SDK here we're going to specify an SDK type of JavaScript and",
    "start": "2276880",
    "end": "2282520"
  },
  {
    "text": "we're going to specify an output directory so if I run generate SDK and",
    "start": "2282520",
    "end": "2287740"
  },
  {
    "text": "we want to have a JavaScript SDK we can specify it's going to generate it here",
    "start": "2287740",
    "end": "2294460"
  },
  {
    "text": "in another directory here and so if we hop over to that directory you can see",
    "start": "2294460",
    "end": "2300400"
  },
  {
    "text": "this leaderboard API is SDK so this is all from the API gateway I want to",
    "start": "2300400",
    "end": "2306010"
  },
  {
    "text": "stress Challis doesn't have to do any don't have to write any special code to actually generate the SDK just has a",
    "start": "2306010",
    "end": "2311410"
  },
  {
    "text": "wrapper on top of this service API and we're allowing API get ready to do all the heavy lifting for us and so API",
    "start": "2311410",
    "end": "2317530"
  },
  {
    "text": "gateway is helpful here it has a readme that shows how you can set this up it gives you examples of how you use the",
    "start": "2317530",
    "end": "2322900"
  },
  {
    "text": "SDK and you know if you look at some of the all the auto-generated code here and",
    "start": "2322900",
    "end": "2328900"
  },
  {
    "text": "we'll just look at one quick one so say you know games game users game",
    "start": "2328900",
    "end": "2334570"
  },
  {
    "text": "games users it generates all this for us all right and then",
    "start": "2334570",
    "end": "2341439"
  },
  {
    "text": "finally just to show you how this would actually work let me serve up I have an index.html",
    "start": "2341439",
    "end": "2348049"
  },
  {
    "text": "page that just integrates this just to give you an idea of how you would actually use this so this is just a",
    "start": "2348049",
    "end": "2355009"
  },
  {
    "text": "boilerplate thing that's just going to show some of the code that's running so we can just get a feel for this so this",
    "start": "2355009",
    "end": "2362989"
  },
  {
    "text": "is straight from the readme that I copied so you have API gateway client Factory and you create a new client and then you notice how we saw this when",
    "start": "2362989",
    "end": "2370369"
  },
  {
    "text": "we're doing child's local just to get to slash games but we can call client gang sketch get our promise back and you",
    "start": "2370369",
    "end": "2375920"
  },
  {
    "text": "specify that we want to display the results so if we run this we should get the same value that we got locally galaxy invaders same thing here if we",
    "start": "2375920",
    "end": "2383599"
  },
  {
    "text": "run games Galaxy invaders leaderboard we should get the same high score list here",
    "start": "2383599",
    "end": "2389439"
  },
  {
    "text": "and the one thing that I do want to mention let me run that again and show you is notice here in the response we",
    "start": "2389439",
    "end": "2399769"
  },
  {
    "text": "get access control allow origin so it's integrating with course as well when it actually deployed it with the API gateways so we can use this in the",
    "start": "2399769",
    "end": "2405170"
  },
  {
    "text": "browser so the last thing I want to show here is this part here and we haven't",
    "start": "2405170",
    "end": "2411679"
  },
  {
    "start": "2408000",
    "end": "2506000"
  },
  {
    "text": "looked at this in the app top pie file but I'm going to try to run this ring and see that an error occurred here what",
    "start": "2411679",
    "end": "2417829"
  },
  {
    "text": "we're trying to do is grab data for our user ID and so if we look at the app",
    "start": "2417829",
    "end": "2424130"
  },
  {
    "text": "there there's actually one other route that I've written and let's take a look at that now",
    "start": "2424130",
    "end": "2429130"
  },
  {
    "text": "the last route here is saying if you go",
    "start": "2434110",
    "end": "2439420"
  },
  {
    "text": "to a game the user and user ID we want course to be enabled but these two new",
    "start": "2439420",
    "end": "2444490"
  },
  {
    "text": "things are the authorizer authorizer ID so I've gone ahead and created these beforehand but I'm using Cognito user",
    "start": "2444490",
    "end": "2450130"
  },
  {
    "text": "pools so cognitive user pools is the fully managed service that allows you to have implement user sign up user sign in",
    "start": "2450130",
    "end": "2457870"
  },
  {
    "text": "a user directory and you don't have to manage any of that yourself and so the nice thing about that is it",
    "start": "2457870",
    "end": "2463690"
  },
  {
    "text": "integrates with the API gateway so I'm saying that I want this to have cognitive user pool integration for just",
    "start": "2463690",
    "end": "2469990"
  },
  {
    "text": "this method and what I'm gonna say is you have to be logged in if you want to",
    "start": "2469990",
    "end": "2475060"
  },
  {
    "text": "see user data and you can only change your own user data so here's an example",
    "start": "2475060",
    "end": "2480100"
  },
  {
    "text": "of that as well there's this new app claims value here which once you've",
    "start": "2480100",
    "end": "2485770"
  },
  {
    "text": "logged in a set of claims that come back or pass into the child's fee function so if you're familiar with the open ID",
    "start": "2485770",
    "end": "2492190"
  },
  {
    "text": "claim or open ID connect claims that you get that's the sub here and then we're going to compare the user ID to the",
    "start": "2492190",
    "end": "2498190"
  },
  {
    "text": "current user ID and we'll say you can only change values for your own account and then we'll have all the logic to",
    "start": "2498190",
    "end": "2504220"
  },
  {
    "text": "actually update so the other nice thing about this is because I'm he's still staying in this serverless space out of",
    "start": "2504220",
    "end": "2510400"
  },
  {
    "start": "2506000",
    "end": "2559000"
  },
  {
    "text": "having to manage anything I also get a Cognito SDK generated for me so again I'm still not writing any JavaScript",
    "start": "2510400",
    "end": "2515590"
  },
  {
    "text": "code don't really prefer not to or as minimal as possible so if I log in here",
    "start": "2515590",
    "end": "2522930"
  },
  {
    "text": "this is using the kognito SDK which also has some really cool stuff so it's using a thing called MSRP secure remote",
    "start": "2522930",
    "end": "2530770"
  },
  {
    "text": "password so it's not actually sending the password over the wire and now if I try this again now that I've logged in",
    "start": "2530770",
    "end": "2536400"
  },
  {
    "text": "you'll see I get the proper response here I get my user ID here which matches",
    "start": "2536400",
    "end": "2541810"
  },
  {
    "text": "up to the user ID you can kind of get the idea of how you can integrate login with chalice and the nice thing again is",
    "start": "2541810",
    "end": "2547840"
  },
  {
    "text": "we don't have to set any of this up for ourselves API gateway is handling all of that login workflow for us alright so at this",
    "start": "2547840",
    "end": "2559780"
  },
  {
    "start": "2559000",
    "end": "2570000"
  },
  {
    "text": "point so this was initially all of the demos that I was going to show today but there's one last thing that I want to",
    "start": "2559780",
    "end": "2566410"
  },
  {
    "text": "show bonus demo if we look at what we have so",
    "start": "2566410",
    "end": "2572060"
  },
  {
    "text": "far with this application one of the things that I've glossed over is I've created this application but I also have",
    "start": "2572060",
    "end": "2578600"
  },
  {
    "text": "additional AWS resources right I have a dynamo DB table there's a couple of other things that I set up beforehand",
    "start": "2578600",
    "end": "2584420"
  },
  {
    "text": "that I didn't really explain how you might integrate with chalice now the",
    "start": "2584420",
    "end": "2589940"
  },
  {
    "text": "second thing I want to mention is that chalice is under active development we were listening to user feedback and the",
    "start": "2589940",
    "end": "2595820"
  },
  {
    "text": "things that mattered to everyone here and we're constantly adding new stuff so I want to give you a sneak peek of a",
    "start": "2595820",
    "end": "2601580"
  },
  {
    "text": "feature that's coming it's not actually in chalice release yet but it will be but I wanted to give you a quick demo of",
    "start": "2601580",
    "end": "2608869"
  },
  {
    "text": "that now in order to address this problem that I mentioned we're going to",
    "start": "2608869",
    "end": "2614480"
  },
  {
    "start": "2611000",
    "end": "2649000"
  },
  {
    "text": "leverage something that AWS announced I believe two weeks ago which is the AWS service application models so AWS Sam if",
    "start": "2614480",
    "end": "2622640"
  },
  {
    "text": "you're not familiar with it it is an extension to cloud formation that allows you to easily declare serverless",
    "start": "2622640",
    "end": "2629050"
  },
  {
    "text": "applications so it has a couple of extra resources a service function an API a simple table and we're going to use that",
    "start": "2629050",
    "end": "2636170"
  },
  {
    "text": "with chalice now so let me check that",
    "start": "2636170",
    "end": "2645080"
  },
  {
    "text": "out show you how that's a little different so what this is allowing us to",
    "start": "2645080",
    "end": "2650540"
  },
  {
    "start": "2649000",
    "end": "2720000"
  },
  {
    "text": "do as we saw when we initially ran our deployed the way that this work does it use the AWS SDK for Python to make",
    "start": "2650540",
    "end": "2656750"
  },
  {
    "text": "appropriate calls to the API gateway to lambda2 I am to set everything up but now with this new back-end it's a new",
    "start": "2656750",
    "end": "2663710"
  },
  {
    "text": "optional back-end that you can choose to use when you create a project it's now going to use Sam templates in cloud",
    "start": "2663710",
    "end": "2669440"
  },
  {
    "text": "formation under the hood to do your deployment so if we look at how that's",
    "start": "2669440",
    "end": "2675470"
  },
  {
    "text": "going to work in new project there will be a you Sam template you can specify",
    "start": "2675470",
    "end": "2681680"
  },
  {
    "text": "and you have to give it an s3 path here",
    "start": "2681680",
    "end": "2687700"
  },
  {
    "text": "so here I'm going to specify an s3 location I'm going to give it a name we'll call it a",
    "start": "2689830",
    "end": "2696579"
  },
  {
    "text": "and demo all right and it's still the",
    "start": "2697449",
    "end": "2705079"
  },
  {
    "text": "same app that we've seen before you know it just has a single route and if I wanted to at this point I could run chalice deploy I'm not going to it",
    "start": "2705079",
    "end": "2711469"
  },
  {
    "text": "should look exactly the same it's just using cloud formation one of the nice things that this is going to give you is",
    "start": "2711469",
    "end": "2716479"
  },
  {
    "text": "a new command which is the package command so the package command what it's",
    "start": "2716479",
    "end": "2722689"
  },
  {
    "start": "2720000",
    "end": "2803000"
  },
  {
    "text": "going to do is instead of deploying your application is going to create the lambda deployment package it's going to generate a Sam template but it's not",
    "start": "2722689",
    "end": "2728630"
  },
  {
    "text": "actually going to deploy your app and so this is nice because then if you have other deployment tools you can then use",
    "start": "2728630",
    "end": "2735019"
  },
  {
    "text": "chalice for what it's really good at this is declarative routing creating API gateway and binding features together",
    "start": "2735019",
    "end": "2740419"
  },
  {
    "text": "and then you can use cloud formation to actually deploy your app so I have to",
    "start": "2740419",
    "end": "2745969"
  },
  {
    "text": "specify a location here let's call it packaged and one other thing that I want",
    "start": "2745969",
    "end": "2752719"
  },
  {
    "text": "to show is I believe two weeks ago and the AWS CLI we also launched support for",
    "start": "2752719",
    "end": "2757729"
  },
  {
    "text": "Sam to make it easy to deploy these new templates so in the AWS CLI there under",
    "start": "2757729",
    "end": "2765319"
  },
  {
    "text": "the cloud formation name there is a new deploy command and if we take a look at",
    "start": "2765319",
    "end": "2771409"
  },
  {
    "text": "how that works I specify a template file stack name and then just the normal cloud formation stuff so I'm going to go",
    "start": "2771409",
    "end": "2777529"
  },
  {
    "text": "ahead and kick this off here cloud formation so we'll specify stack name",
    "start": "2777529",
    "end": "2785499"
  },
  {
    "text": "call it reinvent demo we will specify the template file which is this app dot",
    "start": "2785499",
    "end": "2790609"
  },
  {
    "text": "J so and we'll look at in a minute and then we specify that we are going to be",
    "start": "2790609",
    "end": "2795799"
  },
  {
    "text": "creating I M here alright and so this is",
    "start": "2795799",
    "end": "2800900"
  },
  {
    "text": "going to create change stats and execute the change set so all that's going there's a couple of benefits to doing it this way the first is that you know we",
    "start": "2800900",
    "end": "2807019"
  },
  {
    "start": "2803000",
    "end": "2908000"
  },
  {
    "text": "heard the feedback that a lot of people have a significant investment in cloud formation deployment tools already",
    "start": "2807019",
    "end": "2813289"
  },
  {
    "text": "they're using cloud formation to deploy a lot of their things and so it'd be nice if they could bring those tools and still use them to do their deployment",
    "start": "2813289",
    "end": "2819579"
  },
  {
    "text": "the second thing that's great about this is that when you use cloud formation you",
    "start": "2819579",
    "end": "2825650"
  },
  {
    "text": "can integrate with other AWS services as well so an example a recent example of you know with AWS code pipeline you can",
    "start": "2825650",
    "end": "2832040"
  },
  {
    "text": "integrate with cloud formation to have as part of your pipeline stage to actually deploy a cloud formation",
    "start": "2832040",
    "end": "2837440"
  },
  {
    "text": "template and then the third thing that's nice is we can address the original",
    "start": "2837440",
    "end": "2842540"
  },
  {
    "text": "problem that I motivated this example with which is I'm creating a dynamo DB table as part of my app how do I bring",
    "start": "2842540",
    "end": "2848900"
  },
  {
    "text": "that all together you know ideally it should be part of that same deployment process because that dynamo DB table",
    "start": "2848900",
    "end": "2854540"
  },
  {
    "text": "specific to my application I want to deploy that as a whole I want to be able to delete the stack as a whole and so",
    "start": "2854540",
    "end": "2860540"
  },
  {
    "text": "now we can take a look make this figure",
    "start": "2860540",
    "end": "2868450"
  },
  {
    "text": "and this app JSON of as we've generated this file I could if I wanted to add",
    "start": "2868450",
    "end": "2874640"
  },
  {
    "text": "additional resources here and so jaws will eventually have a way to merge all of these together but you can specify",
    "start": "2874640",
    "end": "2880099"
  },
  {
    "text": "some sort of cloud formation template as additional resources as part of your application so if you take a look here",
    "start": "2880099",
    "end": "2885380"
  },
  {
    "text": "we can see this is the new resource type a server list function and it's taken care of uploading that data to s3 you",
    "start": "2885380",
    "end": "2891800"
  },
  {
    "text": "can also tell chalice to not upload to s3 so it literally makes no remote calls it just puts them locally and then you",
    "start": "2891800",
    "end": "2897619"
  },
  {
    "text": "can use those an AWS CloudFormation package command to actually upload assets s3 and it sets all of the steps",
    "start": "2897619",
    "end": "2903319"
  },
  {
    "text": "so if I had more api's here would flush out everything it would generate a swagger file for me and once that's done",
    "start": "2903319",
    "end": "2909560"
  },
  {
    "start": "2908000",
    "end": "2970000"
  },
  {
    "text": "it also creates a set of outputs for me so the nice thing about that is if you",
    "start": "2909560",
    "end": "2914690"
  },
  {
    "text": "wanted to integrate with other resources so you needed to grab the lambda aren't if you needed to grab the function name",
    "start": "2914690",
    "end": "2920540"
  },
  {
    "text": "if you need you to grab the rest API you can then integrate that as CloudFormation output stacks so if I run cloud",
    "start": "2920540",
    "end": "2928520"
  },
  {
    "text": "formation stack name",
    "start": "2928520",
    "end": "2934940"
  },
  {
    "text": "let's see what I called it here I mean that demo let's call it here notice here",
    "start": "2934940",
    "end": "2947690"
  },
  {
    "text": "we have our output for various things that have been created and here is our",
    "start": "2947690",
    "end": "2952910"
  },
  {
    "text": "familiar endpoint URL so if I then make an HTTP request we should get back our",
    "start": "2952910",
    "end": "2959119"
  },
  {
    "text": "standard hello world so again we can use Sam templates here as another mechanism to integrate our deployment in Charles",
    "start": "2959119",
    "end": "2967059"
  },
  {
    "text": "alright so that was a rabona feature again want to stress it's not in a",
    "start": "2967059",
    "end": "2972440"
  },
  {
    "start": "2970000",
    "end": "3033000"
  },
  {
    "text": "child's release yet it is coming just to give you a sneak peak of what's there so to recap what we've looked at so far",
    "start": "2972440",
    "end": "2978140"
  },
  {
    "text": "throughout the talk we looked at serverless rest api's we looked at chalice api its various routing",
    "start": "2978140",
    "end": "2984380"
  },
  {
    "text": "components all the features that charles gives you to make application development easier using servlets REST",
    "start": "2984380",
    "end": "2990559"
  },
  {
    "text": "API s and then we looked at a couple of sample applications the github bots and so I had to manage multi app files we",
    "start": "2990559",
    "end": "2997250"
  },
  {
    "text": "saw how to manage credentials and configuration and then we looked at the single page app which included SDK",
    "start": "2997250",
    "end": "3003609"
  },
  {
    "text": "generation included integration with cogito user pools and then there was that bonus demo at the end for an",
    "start": "3003609",
    "end": "3009609"
  },
  {
    "text": "upcoming feature with Sam integration with chalice all right so that was all the things that I wanted to cover today",
    "start": "3009609",
    "end": "3015369"
  },
  {
    "text": "please remember to complete your evaluations let us know what you liked what you didn't how we can improve",
    "start": "3015369",
    "end": "3020829"
  },
  {
    "text": "here's links to chalices open source on github the example applications will be",
    "start": "3020829",
    "end": "3026380"
  },
  {
    "text": "at that read the docs link I'll put all that online and once again thank you",
    "start": "3026380",
    "end": "3032339"
  }
]