[
  {
    "start": "0",
    "end": "45000"
  },
  {
    "text": "thanks everyone it's great to be here this morning I'm Matt - Berglas one of the founders of the meteor project we're",
    "start": "1070",
    "end": "7620"
  },
  {
    "text": "a team of about 30 people in San Francisco and around the world working on a full-stack JavaScript application",
    "start": "7620",
    "end": "12960"
  },
  {
    "text": "platform which means you can write a complete modern application for web and for mobile with a modern interactive",
    "start": "12960",
    "end": "19470"
  },
  {
    "text": "interface in pure JavaScript meteor your code base covers all the parts of that",
    "start": "19470",
    "end": "24689"
  },
  {
    "text": "app so the parts that run inside the browser or the mobile device perhaps on an IOT device or a thermostat as well as",
    "start": "24689",
    "end": "31199"
  },
  {
    "text": "the secure logic that runs in the cloud and connects to first party and third party micro services thousands of",
    "start": "31199",
    "end": "38190"
  },
  {
    "text": "companies are using meteor startups building consumer and marketplace apps sis vs and enterprises - so today I want",
    "start": "38190",
    "end": "46890"
  },
  {
    "text": "to share the technical architecture behind meteor what we call connected client and describe galaxy a cloud",
    "start": "46890",
    "end": "53670"
  },
  {
    "text": "service that we just launched this week that runs meteor applications inside of Amazon's new elastic container service",
    "start": "53670",
    "end": "60899"
  },
  {
    "text": "in the cloud there's some unique DevOps challenges that come with running connected client applications so I'll",
    "start": "60899",
    "end": "67080"
  },
  {
    "text": "spend a lot of talk explaining what some of those are and how we've addressed those using the capabilities of ECS and",
    "start": "67080",
    "end": "74580"
  },
  {
    "text": "and the other parts of the Amazon stack um first I'm not sure how much JavaScript background everyone has I",
    "start": "74580",
    "end": "81330"
  },
  {
    "text": "know Deepak mentioned galaxy and his talk yesterday and made a comment about you know JavaScript is that other world",
    "start": "81330",
    "end": "87450"
  },
  {
    "text": "that is so far from back-end programming so I just want to give a little bit of context here we first announced the",
    "start": "87450",
    "end": "94500"
  },
  {
    "text": "project in 2012 it's it's open source it's I believe the most popular application platform on github in terms",
    "start": "94500",
    "end": "101700"
  },
  {
    "text": "of stars and activity it's got hundreds of code contributors around the world and meetups in",
    "start": "101700",
    "end": "107610"
  },
  {
    "text": "something north of 200 cities across the globe we also have a network of over a",
    "start": "107610",
    "end": "113009"
  },
  {
    "text": "hundred training partners and development partners that build apps for clients including companies like",
    "start": "113009",
    "end": "118950"
  },
  {
    "text": "Honeywell Wrangler jeans the city of Hong Kong and we're funded by andreessen",
    "start": "118950",
    "end": "124950"
  },
  {
    "text": "horowitz matrix partners and others in San Francisco as I mentioned the most",
    "start": "124950",
    "end": "129959"
  },
  {
    "text": "recent addition to our platform is galaxy which is the runtime that allows to run a meteor application and the",
    "start": "129959",
    "end": "136049"
  },
  {
    "text": "exciting thing about that for us is that it lets us offer for the first time a complete end-to-end experience in",
    "start": "136049",
    "end": "141239"
  },
  {
    "text": "JavaScript so whether it's the development or the deployment or the monitoring and operations of your app there's a single group that you can work",
    "start": "141239",
    "end": "148890"
  },
  {
    "text": "with to help you with all of the issues that come up during that process meteor itself you can think of a little bit",
    "start": "148890",
    "end": "154980"
  },
  {
    "start": "152000",
    "end": "204000"
  },
  {
    "text": "like Java spring or Ruby on Rails it's a the idea is to pull all of the",
    "start": "154980",
    "end": "161549"
  },
  {
    "text": "technologies together that you need to be able to write an application and make",
    "start": "161549",
    "end": "166560"
  },
  {
    "text": "sure that all those parts are aligned so that you have a productive development experience it turns out the Java Script",
    "start": "166560",
    "end": "173760"
  },
  {
    "text": "unlike some of the other languages we've used in writing applications in the past is very fragmented so you don't have",
    "start": "173760",
    "end": "179129"
  },
  {
    "text": "that consistent development experience across for example the way you'd use it in mobile versus the way you'd use it",
    "start": "179129",
    "end": "184200"
  },
  {
    "text": "with nodejs and the cloud and we've brought those things together but it turns out architectural e meteor is",
    "start": "184200",
    "end": "190769"
  },
  {
    "text": "quite different from a spring or a rails because in modern connected client applications we have stateful",
    "start": "190769",
    "end": "197190"
  },
  {
    "text": "connections between the client and the server and that's going to drive a lot of important differences between the way",
    "start": "197190",
    "end": "202380"
  },
  {
    "text": "that we run and operate these apps so to give you a quick picture of galaxy this is our container environment built on",
    "start": "202380",
    "end": "208680"
  },
  {
    "text": "top of ECS it runs user applications inside containers in a multi-tenant environment that we operate the meteor",
    "start": "208680",
    "end": "215639"
  },
  {
    "text": "company operates users get visibility into those individual containers including real-time metrics of the CPU",
    "start": "215639",
    "end": "222660"
  },
  {
    "text": "consumption which we measure in ECU Amazon standard unit of CPU memory and",
    "start": "222660",
    "end": "228269"
  },
  {
    "text": "other important statistics as well as the number of clients connected to each particular container back-end it's",
    "start": "228269",
    "end": "233879"
  },
  {
    "text": "designed to be a turnkey experience for teams that don't want to think too much about DevOps but it's built on top of these open technologies so that teams",
    "start": "233879",
    "end": "240599"
  },
  {
    "text": "with more sophisticated requirements or who want to have a more nuanced approach to their DevOps can have that have that",
    "start": "240599",
    "end": "247680"
  },
  {
    "text": "option with the help of ELB we're able to schedule a proxy service that we",
    "start": "247680",
    "end": "254010"
  },
  {
    "text": "wrote to route incoming requests from clients into the appropriate container do that in a way that guarantees high",
    "start": "254010",
    "end": "260310"
  },
  {
    "text": "availability for applications that require it now get into how all of this works as we go through the the talk",
    "start": "260310",
    "end": "265349"
  },
  {
    "text": "today but first a little bit of context so why why all of this why is there such a",
    "start": "265349",
    "end": "270940"
  },
  {
    "start": "266000",
    "end": "351000"
  },
  {
    "text": "different runtime environment for these apps why did we have to build galaxies why WebSockets it's really about a big",
    "start": "270940",
    "end": "277180"
  },
  {
    "text": "change in the industry a shift from websites that powered the last 15 years",
    "start": "277180",
    "end": "282190"
  },
  {
    "text": "or so of the way we built applications websites built around the idea of links and forms the idea of looking at one",
    "start": "282190",
    "end": "289330"
  },
  {
    "text": "page at a time and then clicking or taking an action which would draw a new screen apps that were viewed in a",
    "start": "289330",
    "end": "295030"
  },
  {
    "text": "browser a shift away from that to modern applications with a much more engaging",
    "start": "295030",
    "end": "301360"
  },
  {
    "text": "and interactive user interface and user experience the big driver here of course is the rise of mobile the fact that now",
    "start": "301360",
    "end": "308350"
  },
  {
    "text": "that we have a supercomputer in everyone's pocket we can build a far more engaging a richer experience than",
    "start": "308350",
    "end": "314590"
  },
  {
    "text": "was ever possible when you built it around the idea of HTML and pages so the",
    "start": "314590",
    "end": "320410"
  },
  {
    "text": "leading edge of this transition where the consumer facing companies Facebook Twitter Google and so on who were able",
    "start": "320410",
    "end": "327490"
  },
  {
    "text": "to create a different kind of user experience that drove key business metrics like engagement on site or the",
    "start": "327490",
    "end": "333250"
  },
  {
    "text": "ability to share things but that now has carried across to everywhere where companies insist on the same kind of",
    "start": "333250",
    "end": "340660"
  },
  {
    "text": "experience for their customers because that's what their customers are used to so we see the same desire for an interactive engaging experience even in",
    "start": "340660",
    "end": "347560"
  },
  {
    "text": "the enterprise or for a SAS or a marketplace app it turns out there's a",
    "start": "347560",
    "end": "353020"
  },
  {
    "start": "351000",
    "end": "404000"
  },
  {
    "text": "big architectural difference behind that transition the web was stateless we all",
    "start": "353020",
    "end": "359110"
  },
  {
    "text": "know this right it's built around this great idea that we can have lots of independent horizontally scaled backends",
    "start": "359110",
    "end": "364750"
  },
  {
    "text": "there's no state between the client and the server so therefore any client request can be handled by any server",
    "start": "364750",
    "end": "370150"
  },
  {
    "text": "this gives us a really straightforward path towards scaling and reliability it's basically a request response",
    "start": "370150",
    "end": "376870"
  },
  {
    "text": "paradigm and we're putting screens HTML on the wire very very different now with",
    "start": "376870",
    "end": "382419"
  },
  {
    "text": "apps apps are stateful and I'll talk about why that is in a moment we keep a a WebSocket or some virtual equivalent",
    "start": "382419",
    "end": "389830"
  },
  {
    "text": "of an open connection between the server and the client there's a pub/sub model instead of a request response model",
    "start": "389830",
    "end": "396760"
  },
  {
    "text": "because the server is often initiating the push of data to the client and it's data that we're putting on the",
    "start": "396760",
    "end": "402150"
  },
  {
    "text": "network now not not screens so the architecture is very different and that shouldn't be a big surprise because",
    "start": "402150",
    "end": "408780"
  },
  {
    "start": "404000",
    "end": "504000"
  },
  {
    "text": "we've done this before in the industry in fact we can look back 30 40 years and",
    "start": "408780",
    "end": "414330"
  },
  {
    "text": "see a progression of different technology eras in the computer industry the way we built apps and see these big",
    "start": "414330",
    "end": "421380"
  },
  {
    "text": "shifts from one to the other so for example in the 70s and 80s we wrote software on mainframes the software ran",
    "start": "421380",
    "end": "428070"
  },
  {
    "text": "on a big computer in the data center we used a protocol like 30 to 70 or VT 100 to transfer screens to the user",
    "start": "428070",
    "end": "435300"
  },
  {
    "text": "which sat in a dumb terminal and then with the rise of the cheap PC right the",
    "start": "435300",
    "end": "440460"
  },
  {
    "text": "microprocessor essentially we were able to move the applications to the to the desktop and that gave us the rise of",
    "start": "440460",
    "end": "447180"
  },
  {
    "text": "win32 client-server transaction processing all the technologies from the 80s and 90s that drove that era we",
    "start": "447180",
    "end": "453660"
  },
  {
    "text": "actually carried over very little of what we used in the mainframe era when we built these new apps and then",
    "start": "453660",
    "end": "458850"
  },
  {
    "text": "likewise with the pervasiveness of the internet maybe 15 years ago very quickly",
    "start": "458850",
    "end": "464370"
  },
  {
    "text": "we moved away from the client-server model to a model around delivering applications by giving someone a URL and",
    "start": "464370",
    "end": "470850"
  },
  {
    "text": "the advantages for distribution were so strong that we got the rise of Salesforce and Amazon and all of these",
    "start": "470850",
    "end": "476370"
  },
  {
    "text": "websites that were built again using a completely different set of tools and technologies and languages from what we",
    "start": "476370",
    "end": "483540"
  },
  {
    "text": "used to build win32 client-server software so it really shouldn't surprise us that when we move to this new era of",
    "start": "483540",
    "end": "490530"
  },
  {
    "text": "connected clients we should expect to see a similar degree of disruption and a",
    "start": "490530",
    "end": "496320"
  },
  {
    "text": "similar set of transitions from the technologies we all knew and loved from the web era to technologies for",
    "start": "496320",
    "end": "502800"
  },
  {
    "text": "connected client and here's what drives that so I mentioned stateful there's",
    "start": "502800",
    "end": "508230"
  },
  {
    "start": "504000",
    "end": "617000"
  },
  {
    "text": "actually a few reasons why these apps are stateful one of them is because to",
    "start": "508230",
    "end": "513450"
  },
  {
    "text": "build these slick engaging interfaces think about using uber on your phone or Facebook or Twitter in the browser you",
    "start": "513450",
    "end": "520469"
  },
  {
    "text": "can't afford the cost of a round-trip to the server every time the user interacts with your interface in other words when",
    "start": "520470",
    "end": "526290"
  },
  {
    "text": "you swipe from one part of the app to another or when you change the thing you're doing in the app the data that",
    "start": "526290",
    "end": "531750"
  },
  {
    "text": "you want to show the user has to already be in the device and so inevitably inside all of these apps what",
    "start": "531750",
    "end": "538310"
  },
  {
    "text": "we find is a cache whether that's on your phone inside the browser on an IOT",
    "start": "538310",
    "end": "544250"
  },
  {
    "text": "device there's some cache of information that the server is maintaining so that the client can have a very rich",
    "start": "544250",
    "end": "550340"
  },
  {
    "text": "interactive experience without paying that round-trip back to the server and of course once we have a cache that",
    "start": "550340",
    "end": "555620"
  },
  {
    "text": "implies that the server has to keep track of what's in that cache it is responsible for pushing new data to keep",
    "start": "555620",
    "end": "561050"
  },
  {
    "text": "that cache fresh so inherently it's a stateful architecture not a stateless architecture another example of State in",
    "start": "561050",
    "end": "567320"
  },
  {
    "text": "this picture is that we now have code running on the clients in fact the majority of the code if you count the",
    "start": "567320",
    "end": "572750"
  },
  {
    "text": "lines is probably running on the phone or inside the browser rather than in the cloud so now we have questions of how do",
    "start": "572750",
    "end": "579680"
  },
  {
    "text": "I do a secure update of that code how do I do a continuous deploy when that really means pushing code updates down",
    "start": "579680",
    "end": "585590"
  },
  {
    "text": "the wire into a running mobile device JavaScript container or into a browser here again we need a stateful",
    "start": "585590",
    "end": "593240"
  },
  {
    "text": "understanding of the exact set of clients that are connected to the app and an understanding of exactly which",
    "start": "593240",
    "end": "598490"
  },
  {
    "text": "version of the software they're running so that the server can coordinate that upgrade across the wire so that's the",
    "start": "598490",
    "end": "604460"
  },
  {
    "text": "the key difference here is that we go from stateless to stateful we're gonna push data to the clients in real-time",
    "start": "604460",
    "end": "610370"
  },
  {
    "text": "and that code is going to run on both sides of the wire this is very different from the architecture of the web",
    "start": "610370",
    "end": "617240"
  },
  {
    "start": "617000",
    "end": "665000"
  },
  {
    "text": "here's another more nuanced way to look at the situation if you look inside the way that the most agile companies are",
    "start": "617240",
    "end": "624140"
  },
  {
    "text": "building rich interactive apps that run on multiple devices you see a picture more like this where there's a single",
    "start": "624140",
    "end": "630290"
  },
  {
    "text": "app it spans the network so there are parts of it that run in the cloud and parts that run on the device but it's a",
    "start": "630290",
    "end": "636470"
  },
  {
    "text": "it's a single application owned by one team it talks to micro services so",
    "start": "636470",
    "end": "641600"
  },
  {
    "text": "whether those are internal services for authentication and billing or third-party services for geo or whatnot",
    "start": "641600",
    "end": "647660"
  },
  {
    "text": "those are maintained by separate teams but the the real win and development velocity is if you can have a single",
    "start": "647660",
    "end": "653660"
  },
  {
    "text": "team that owns that app and doesn't have a federation between the group that's",
    "start": "653660",
    "end": "659180"
  },
  {
    "text": "going to do the feature for iOS maybe transferring their skills to the group that's going to do it for Android and so",
    "start": "659180",
    "end": "664610"
  },
  {
    "text": "on and so forth and it turns out JavaScript the ideal language for doing this because it's the one language that runs",
    "start": "664610",
    "end": "670850"
  },
  {
    "start": "665000",
    "end": "687000"
  },
  {
    "text": "in all of the settings that application has to run so if you want to build that",
    "start": "670850",
    "end": "676699"
  },
  {
    "text": "yourself you end up having to solve all these problems right you've got to have that layer that keeps the cache and sync",
    "start": "676699",
    "end": "682339"
  },
  {
    "text": "keeps your screen up-to-date coordinates those hot code pushes across the wire it's all the same in every app and the",
    "start": "682339",
    "end": "689959"
  },
  {
    "start": "687000",
    "end": "703000"
  },
  {
    "text": "concept here is to standardize and centralize those technologies that are the same across all the apps into a",
    "start": "689959",
    "end": "696290"
  },
  {
    "text": "single open source platform allowing teams to build the specific parts relevant to their app so Java scripts",
    "start": "696290",
    "end": "704180"
  },
  {
    "text": "the only reasonable language for doing cross-platform app development we've talked about why the architecture is",
    "start": "704180",
    "end": "709699"
  },
  {
    "text": "different let's talk about the DevOps to support that architecture and how that's different in fact how that's a lot more",
    "start": "709699",
    "end": "715639"
  },
  {
    "text": "complicated and that brings us into galaxy so let's review what we want out",
    "start": "715639",
    "end": "722360"
  },
  {
    "start": "719000",
    "end": "765000"
  },
  {
    "text": "of a cloud environment for a connected client application we've talked about having persistent stateful connections",
    "start": "722360",
    "end": "729079"
  },
  {
    "text": "whether that's a WebSocket or whether that's a series of XA chars or other HTTP requests that mimic a",
    "start": "729079",
    "end": "735350"
  },
  {
    "text": "stateful connection we've talked about pushing code down to the client we've talked a little bit about the idea that",
    "start": "735350",
    "end": "740870"
  },
  {
    "text": "you really want to track those clients you want to be able to count how many there are and understand the performance of each client as it's talking to the",
    "start": "740870",
    "end": "747980"
  },
  {
    "text": "server we've talked about all these micro services in the cloud that somehow I have to get joined together in the",
    "start": "747980",
    "end": "753910"
  },
  {
    "text": "application cloud code and then pushed into the client and there's mobile considerations that we haven't gotten",
    "start": "753910",
    "end": "759589"
  },
  {
    "text": "into around building new versions and pushing those into different containers for the JavaScript execution environment",
    "start": "759589",
    "end": "765519"
  },
  {
    "text": "so when we set out to build galaxy we wanted to address those problems and as",
    "start": "765519",
    "end": "770569"
  },
  {
    "text": "I said we wanted a turnkey environment so it also has to have the basics things like deploying your app with one command",
    "start": "770569",
    "end": "776269"
  },
  {
    "text": "from the command line scaling that app instantly from one container up to",
    "start": "776269",
    "end": "781639"
  },
  {
    "text": "however many you might need we wanted a scalable multi-tenant environment and",
    "start": "781639",
    "end": "786679"
  },
  {
    "text": "for us scalability looks something like a million processes a hundred million active WebSocket connections to handle",
    "start": "786679",
    "end": "793309"
  },
  {
    "text": "the the growing number of applications running in the setting I talked about the desire to serve the teams that don't",
    "start": "793309",
    "end": "800569"
  },
  {
    "text": "have a sophisticated DevOps approach while also being suitable for teams that have more of an expertise and want to be able",
    "start": "800569",
    "end": "807170"
  },
  {
    "text": "to integrate more closely with their environment and one key element of that I think is the smooth path from going",
    "start": "807170",
    "end": "814370"
  },
  {
    "text": "from a meteor managed environment where you don't have to think about any of these questions you push a button in",
    "start": "814370",
    "end": "820160"
  },
  {
    "text": "your apps running in the cloud to a customer managed environment where the",
    "start": "820160",
    "end": "825260"
  },
  {
    "text": "application is running inside your own VPC it's talking to databases services",
    "start": "825260",
    "end": "831260"
  },
  {
    "text": "other parts of the Amazon stack or third-party software you're running in that environment all coordinated by the same Galaxy",
    "start": "831260",
    "end": "837260"
  },
  {
    "text": "technology so we looked for a way to be able to to carry that from the hands-off approach to the deeply embedded in your",
    "start": "837260",
    "end": "844160"
  },
  {
    "text": "existing Amazon investment and we wanted to make sure that the architecture was highly available both in terms of",
    "start": "844160",
    "end": "850580"
  },
  {
    "text": "consumer apps being highly available but also the galaxy infrastructure itself the management layer and the other parts",
    "start": "850580",
    "end": "855620"
  },
  {
    "text": "of the infrastructure that we build so this is the architecture we landed on",
    "start": "855620",
    "end": "862360"
  },
  {
    "start": "857000",
    "end": "893000"
  },
  {
    "text": "galaxy is a layer that sits on top of the infrastructure layer that we get",
    "start": "863410",
    "end": "868670"
  },
  {
    "text": "from the Amazon environment so the infrastructure layer is going to be responsible for the underlying compute",
    "start": "868670",
    "end": "873980"
  },
  {
    "text": "and storage and so forth as well as the container management layer which we'll talk about what we've built sits on top",
    "start": "873980",
    "end": "880399"
  },
  {
    "text": "of that and handles the session management the code deploys the other things that are unique to the stateful",
    "start": "880399",
    "end": "886490"
  },
  {
    "text": "connections between all these different clients that are connected into the system and the underlying common",
    "start": "886490",
    "end": "891920"
  },
  {
    "text": "technology so for us containers was a no-brainer I want to talk just about a couple of",
    "start": "891920",
    "end": "897440"
  },
  {
    "start": "893000",
    "end": "979000"
  },
  {
    "text": "the high points here first of all when you have hundreds of thousands or millions of independent processes that",
    "start": "897440",
    "end": "902660"
  },
  {
    "text": "all look basically the same because they're all running the same node.js JavaScript runtime containers make a lot",
    "start": "902660",
    "end": "907670"
  },
  {
    "text": "of sense there are obviously a lot more efficient than running a full operating system image for each of these the spin",
    "start": "907670",
    "end": "913550"
  },
  {
    "text": "up time is essential it turns out in two respects one is that we want to give a smooth pleasant developer experience and the",
    "start": "913550",
    "end": "920690"
  },
  {
    "text": "ability to spin up an application or to scale that application in a matter of seconds instead of minutes turns out to",
    "start": "920690",
    "end": "926660"
  },
  {
    "text": "be a really important part of creating that pleasant developer experience that drives adoption of the platform it also",
    "start": "926660",
    "end": "932870"
  },
  {
    "text": "lets us build around what I call it a Singh shot model essentially because it's fast",
    "start": "932870",
    "end": "938050"
  },
  {
    "text": "to spin up a container from a known fresh configuration and you'll hear this story in docker in general that allows",
    "start": "938050",
    "end": "944110"
  },
  {
    "text": "us to make some simplifying assumptions and if things aren't as we want if a container is misbehaving or if a virtual",
    "start": "944110",
    "end": "950230"
  },
  {
    "text": "machine is misbehaving the easy answer is simply to reset it to delete it and allow the scheduler to bring up a fresh",
    "start": "950230",
    "end": "955870"
  },
  {
    "text": "copy with a known good state we also find layering really helpful so the ability to have a consistent base that's",
    "start": "955870",
    "end": "964360"
  },
  {
    "text": "driven by our needs around the operating system but then allow users to layer in other pieces of software that sit",
    "start": "964360",
    "end": "971529"
  },
  {
    "text": "between their JavaScript application and the operating system we see that as an ideal path forward to provide that in a",
    "start": "971529",
    "end": "977920"
  },
  {
    "text": "open way so that's the advantage of doctor and containerization when you",
    "start": "977920",
    "end": "982990"
  },
  {
    "start": "979000",
    "end": "1123000"
  },
  {
    "text": "have a million processes you need something more than just the containers you need an orchestration layer and",
    "start": "982990",
    "end": "988270"
  },
  {
    "text": "there's a lot of really exciting options here we look closely at not just elastic",
    "start": "988270",
    "end": "993460"
  },
  {
    "text": "container service but we did a lot of work with kubernetes and bringing Cooper natives to the AWS platform I'm really",
    "start": "993460",
    "end": "1000120"
  },
  {
    "text": "excited about what marathon is doing in the miso space these things are all changing very rapidly for us the",
    "start": "1000120",
    "end": "1007320"
  },
  {
    "text": "decision to go with elastic container service for our galaxy launch this week really came down to the service argument",
    "start": "1007320",
    "end": "1015210"
  },
  {
    "text": "and the tight connections between container management and other parts of the infrastructure layer so if you look",
    "start": "1015210",
    "end": "1021030"
  },
  {
    "text": "back to that diagram I showed a second ago I think of container orchestration as properly being one of the",
    "start": "1021030",
    "end": "1027390"
  },
  {
    "text": "responsibilities of the infrastructure layer of your application and the reason for that is that it's it's so closely",
    "start": "1027390",
    "end": "1033630"
  },
  {
    "text": "connected with the other questions around compute and routing and networking that are in the system so for",
    "start": "1033630",
    "end": "1039360"
  },
  {
    "text": "example the integration with ELB turns out to be a big time saver when using",
    "start": "1039360",
    "end": "1044550"
  },
  {
    "text": "ECS we can define a service the service for example that runs our proxy system",
    "start": "1044550",
    "end": "1050460"
  },
  {
    "text": "is automatically bound to an appropriate ELB endpoint we don't have to build any of that plumbing to make that stuff work",
    "start": "1050460",
    "end": "1057380"
  },
  {
    "text": "another integration example that's really valuable for us and unique to ECS is that a single ECS cluster spans",
    "start": "1057380",
    "end": "1065520"
  },
  {
    "text": "multiple availability zones so we can rely on the ECS scheduler and the",
    "start": "1065520",
    "end": "1071610"
  },
  {
    "text": "task api's and schedule tasks across multiple availability zones both user",
    "start": "1071610",
    "end": "1077790"
  },
  {
    "text": "processes and the processes inside Galaxy itself that need to run in a highly available way that's a really",
    "start": "1077790",
    "end": "1085020"
  },
  {
    "text": "valuable time-saver compared to systems that are that are kept within one availability zone where we'd have to",
    "start": "1085020",
    "end": "1090750"
  },
  {
    "text": "manage the failover or the the transaction logic between the state of the the multiple AZ's and we'll see how",
    "start": "1090750",
    "end": "1097080"
  },
  {
    "text": "that that works the bottom line is it got us to market faster the integration between the different parts of the stack",
    "start": "1097080",
    "end": "1102360"
  },
  {
    "text": "all come together to allow us to focus on delivering a service to our customers and that's the same argument we make",
    "start": "1102360",
    "end": "1109050"
  },
  {
    "text": "about galaxy right the idea of ECS being a service is very similar in my mind to",
    "start": "1109050",
    "end": "1114120"
  },
  {
    "text": "the way we can talk about connected client management as a service we offer and so it makes sense to me that the",
    "start": "1114120",
    "end": "1120060"
  },
  {
    "text": "same advantages apply to us as they do to our customers so let me talk a little bit about the implementation this is the",
    "start": "1120060",
    "end": "1132450"
  },
  {
    "start": "1123000",
    "end": "1270000"
  },
  {
    "text": "slide that were put in his keynote yesterday about galaxy and I want to talk a little bit about what we what we",
    "start": "1132450",
    "end": "1138360"
  },
  {
    "text": "meant by this picture so our architecture is split into a front end",
    "start": "1138360",
    "end": "1143520"
  },
  {
    "text": "and a back end a management layer that covers the user experience and the",
    "start": "1143520",
    "end": "1148590"
  },
  {
    "text": "policy and the back end which is about the underlying scheduling of an",
    "start": "1148590",
    "end": "1154380"
  },
  {
    "text": "execution of user applications inside containers so the galaxy UI on the left",
    "start": "1154380",
    "end": "1160050"
  },
  {
    "text": "of this picture is about the list of applications that a user has pushed into",
    "start": "1160050",
    "end": "1166110"
  },
  {
    "text": "the system the desired configuration of those applications in terms of how many containers what's the size of those",
    "start": "1166110",
    "end": "1172140"
  },
  {
    "text": "containers should it run in an H a configuration what's the configuration",
    "start": "1172140",
    "end": "1177660"
  },
  {
    "text": "information being injected into the application questions like that that's all managed by the galaxy UI and that",
    "start": "1177660",
    "end": "1183840"
  },
  {
    "text": "information is stored in an application state database in our case it's a database which holds you can imagine as",
    "start": "1183840",
    "end": "1191340"
  },
  {
    "text": "a roper application with that desired configuration the clusters so each of",
    "start": "1191340",
    "end": "1198750"
  },
  {
    "text": "these on the right is an end ECS cluster reads and writes from the same application state database so it's",
    "start": "1198750",
    "end": "1206220"
  },
  {
    "text": "a synchronized architecture and I'll show you how that works in a moment between the desired configuration and",
    "start": "1206220",
    "end": "1212880"
  },
  {
    "text": "the actual execution environment to each ECS cluster one of the reasons we're really excited about this direction is",
    "start": "1212880",
    "end": "1219510"
  },
  {
    "text": "that the separation of concerns gives us some really clean stories around availability and reliability the",
    "start": "1219510",
    "end": "1224700"
  },
  {
    "text": "clusters can work independently even if they don't have consistent access to that app state database the other reason",
    "start": "1224700",
    "end": "1231840"
  },
  {
    "text": "is that it gives us a path toward some future directions we want to go so for example while ECS supports multiple",
    "start": "1231840",
    "end": "1238410"
  },
  {
    "text": "availability zones it does run inside a single region so the story for running applications in multiple regions is",
    "start": "1238410",
    "end": "1244380"
  },
  {
    "text": "addressed by having an architecture that supports independent ECS clusters all synchronized against the same desired",
    "start": "1244380",
    "end": "1250860"
  },
  {
    "text": "state configuration or I mentioned running applications inside user environments so we can spin up a nice es",
    "start": "1250860",
    "end": "1257220"
  },
  {
    "text": "cluster inside of a different VPC than our own VPC that works fine and that's a",
    "start": "1257220",
    "end": "1263040"
  },
  {
    "text": "direction we're really excited to go in and think that the the architecture of synchronizing this way gives us a clean",
    "start": "1263040",
    "end": "1269700"
  },
  {
    "text": "path toward so let's dive into one of those clusters so I'm just gonna look at",
    "start": "1269700",
    "end": "1274860"
  },
  {
    "start": "1270000",
    "end": "1294000"
  },
  {
    "text": "one of the example clusters and in in these diagrams I'll just show two AZ's we actually run in more but just to keep",
    "start": "1274860",
    "end": "1280679"
  },
  {
    "text": "the picture simple we'll use two so our starting point here is an application in",
    "start": "1280679",
    "end": "1285690"
  },
  {
    "text": "this example running for containers in an H a configuration simple enough this is the bread and butter of container",
    "start": "1285690",
    "end": "1293010"
  },
  {
    "text": "scheduling and ECS there's some more parts to it we've written a custom proxy",
    "start": "1293010",
    "end": "1298679"
  },
  {
    "text": "tier in go I'll show you how that works our proxy is itself run inside the same",
    "start": "1298679",
    "end": "1305190"
  },
  {
    "text": "containers in the same clusters and it's managed as an EC s service it binds to",
    "start": "1305190",
    "end": "1310230"
  },
  {
    "text": "the ELB and so incoming connections from users run through the ELB into the proxy",
    "start": "1310230",
    "end": "1315600"
  },
  {
    "text": "service that's appropriate and then the proxy routes that WebSocket to an appropriate application container we",
    "start": "1315600",
    "end": "1321540"
  },
  {
    "start": "1320000",
    "end": "1338000"
  },
  {
    "text": "also wrote our own custom scheduler so that runs inside a container in this case exactly one container we'll talk",
    "start": "1321540",
    "end": "1327540"
  },
  {
    "text": "about why and let's also add some other examples of applications or micro services that are running in the multi",
    "start": "1327540",
    "end": "1333750"
  },
  {
    "text": "ten environment some perhaps in an H a configuration some not and finally and",
    "start": "1333750",
    "end": "1340200"
  },
  {
    "start": "1338000",
    "end": "1387000"
  },
  {
    "text": "I'm I'm really fond of this architecture the galaxy UI the application that you",
    "start": "1340200",
    "end": "1345450"
  },
  {
    "text": "use to manage the galaxy environment is itself a meteor app and so we can run it",
    "start": "1345450",
    "end": "1351450"
  },
  {
    "text": "inside its own container inside galaxy it turns out that that's a really nifty way of solving a bunch of the",
    "start": "1351450",
    "end": "1357630"
  },
  {
    "text": "bootstrapping problems it keeps us in a sane environment and cloud formation",
    "start": "1357630",
    "end": "1363120"
  },
  {
    "text": "ends up being very helpful because it allows us to bootstrap this whole environment from scratch including the galaxy server that then manages the",
    "start": "1363120",
    "end": "1369450"
  },
  {
    "text": "environment once it's up and running so an administrator using the galaxy interface is routed through the same",
    "start": "1369450",
    "end": "1375600"
  },
  {
    "text": "exact TLB and proxy tiers into the same kind of container infrastructure as everybody else they stand side by side I",
    "start": "1375600",
    "end": "1383510"
  },
  {
    "text": "want to dig into three particular areas of our architecture the first one is scheduling so I",
    "start": "1383510",
    "end": "1389760"
  },
  {
    "start": "1387000",
    "end": "1516000"
  },
  {
    "text": "mentioned that we wrote a custom scheduler let's talk about why that is so in a multi-tenant application",
    "start": "1389760",
    "end": "1395070"
  },
  {
    "text": "environment we have some particular needs that aren't addressed by the default scheduler so",
    "start": "1395070",
    "end": "1401190"
  },
  {
    "text": "I mentioned the first one we want to be sure that for a che apps the applications are scheduled across",
    "start": "1401190",
    "end": "1407309"
  },
  {
    "text": "multiple AZ's that's available today so that just got announced as part of ECS",
    "start": "1407309",
    "end": "1413570"
  },
  {
    "text": "we found it was actually very easy to do this with our own scheduler but the idea of course is that I want to be sure if a",
    "start": "1413570",
    "end": "1420929"
  },
  {
    "text": "customer expects that that we're not running on container instances that are all in one AZ there's more to it though",
    "start": "1420929",
    "end": "1427770"
  },
  {
    "text": "we also want to be sure that the individual instances are evenly loaded",
    "start": "1427770",
    "end": "1433620"
  },
  {
    "text": "so not only should an app be distributed fairly evenly across the container instances but we want the reverse we",
    "start": "1433620",
    "end": "1439080"
  },
  {
    "text": "want to make sure that the instances themselves all have similar load and the reason for that is that web applications",
    "start": "1439080",
    "end": "1445980"
  },
  {
    "text": "are bursty so what you want is a nice even distribution so that individual",
    "start": "1445980",
    "end": "1451830"
  },
  {
    "text": "application processes can burst to the full core in the machine far beyond the",
    "start": "1451830",
    "end": "1457230"
  },
  {
    "text": "fair share that their container would give them and that works best if you know that there's roughly speaking and even load across the different instances",
    "start": "1457230",
    "end": "1463940"
  },
  {
    "text": "we've also need a fairly nuanced way of thinking about application health because we're not",
    "start": "1463940",
    "end": "1469750"
  },
  {
    "text": "just interested in whether the UNIX process inside the container is terminated or not we're interested in is",
    "start": "1469750",
    "end": "1474940"
  },
  {
    "text": "it healthy is it answering requests is it answering those requests within a given latency or a given turnaround time",
    "start": "1474940",
    "end": "1480909"
  },
  {
    "text": "so the scheduler needs to have some some visibility into that and finally we have an issue where I'll go back to this",
    "start": "1480909",
    "end": "1489250"
  },
  {
    "text": "picture certain tasks here the proxy the scheduler are critical the galaxy UI",
    "start": "1489250",
    "end": "1496120"
  },
  {
    "text": "those have to be scheduled so in a resource-constrained environment if all of our customers scale at once and the",
    "start": "1496120",
    "end": "1502630"
  },
  {
    "text": "instances don't scale up with them to match that rate we need to be sure that we can still run the core processes that",
    "start": "1502630",
    "end": "1509740"
  },
  {
    "text": "make Galaxy itself work and the scheduler doesn't really have a story for how to do that so we found that",
    "start": "1509740",
    "end": "1518230"
  },
  {
    "start": "1516000",
    "end": "1612000"
  },
  {
    "text": "that's okay because ECS is api's are designed in a way that let us go into",
    "start": "1518230",
    "end": "1524380"
  },
  {
    "text": "the lower level the task management level of the API and build our own default scheduler this actually worked",
    "start": "1524380",
    "end": "1529720"
  },
  {
    "text": "very very well for us we've written our first version in production today is about fifteen hundred lines of go and it",
    "start": "1529720",
    "end": "1536260"
  },
  {
    "text": "speaks to the the low level start and stop tasks API is rather than the API is",
    "start": "1536260",
    "end": "1542440"
  },
  {
    "text": "around defining services so we don't run user applications inside services instead we run them as individual tasks",
    "start": "1542440",
    "end": "1549100"
  },
  {
    "text": "one or more and we schedule them ourselves and the scheduler includes a policy so I've put part of that policy",
    "start": "1549100",
    "end": "1554860"
  },
  {
    "text": "and here on the slide and it mirrors what we talked about before schedule apps across a Z's and instances keep",
    "start": "1554860",
    "end": "1561700"
  },
  {
    "text": "instances fairly evenly loaded keep free space on each instance to be able to run",
    "start": "1561700",
    "end": "1567490"
  },
  {
    "text": "the number of processes we know are needed by the galaxy system so it's sort of a blunt instrument for ensuring that",
    "start": "1567490",
    "end": "1574029"
  },
  {
    "text": "we never starve our own system of the resources it needs to manage itself and here's where we also implement rate",
    "start": "1574029",
    "end": "1581380"
  },
  {
    "text": "limiting for example so because we're running untrusted user code we don't really know whether that code is",
    "start": "1581380",
    "end": "1587860"
  },
  {
    "text": "well-behaved or not a user might upload an application where the process spins or it doesn't behave the way you'd",
    "start": "1587860",
    "end": "1593799"
  },
  {
    "text": "expect it to behave so you don't necessarily just want to blindly restart a container if the process exits you",
    "start": "1593799",
    "end": "1599470"
  },
  {
    "text": "actually want to track how many times have we restart this container implements some sort of exponential back-off and then eventually",
    "start": "1599470",
    "end": "1606139"
  },
  {
    "text": "expose that problem to the user by way of the API so we can look at that state",
    "start": "1606139",
    "end": "1614779"
  },
  {
    "start": "1612000",
    "end": "1692000"
  },
  {
    "text": "sink diagram again and what we see is this it's the scheduler that's actually reading from the app state database",
    "start": "1614779",
    "end": "1621919"
  },
  {
    "text": "that's the piece that controls the individual application instances within the cluster and one way to look at that",
    "start": "1621919",
    "end": "1628039"
  },
  {
    "text": "is as a state synchronization process so",
    "start": "1628039",
    "end": "1633200"
  },
  {
    "text": "the scheduler task is reading the desired configuration from that application state database essentially",
    "start": "1633200",
    "end": "1638869"
  },
  {
    "text": "it's tuples of the application process the version will talk about versioning in a little bit the containers the",
    "start": "1638869",
    "end": "1645169"
  },
  {
    "text": "number of containers I want to run should they be in Nha configuration what size container should they be and so on",
    "start": "1645169",
    "end": "1650830"
  },
  {
    "text": "it also calls list tasks and describe tasks from the ECS api so that's how it",
    "start": "1650830",
    "end": "1659779"
  },
  {
    "text": "gathers an understanding of the current state of the EECS cluster and currently we do this by pulling the ECS api for",
    "start": "1659779",
    "end": "1666080"
  },
  {
    "text": "the state of the cluster every so often it adds all that up and combines the policies we talked about to make a plan",
    "start": "1666080",
    "end": "1672200"
  },
  {
    "text": "an execution plan and it writes that plan to the cluster by calling start tasks and stop tasks it also writes back",
    "start": "1672200",
    "end": "1679700"
  },
  {
    "text": "to the app state database this is how we track the status the health of each container and when they exit the exit",
    "start": "1679700",
    "end": "1685999"
  },
  {
    "text": "code of the container so that we can push those into application logs and tell the user what's happened with their application to ensure that the scheduler",
    "start": "1685999",
    "end": "1694219"
  },
  {
    "start": "1692000",
    "end": "1758000"
  },
  {
    "text": "stays alive we've created an ECS service that calls for exactly one scheduler",
    "start": "1694219",
    "end": "1699950"
  },
  {
    "text": "task so here's where the higher-level ECS api is work very well for us the H a",
    "start": "1699950",
    "end": "1705979"
  },
  {
    "text": "story here is well if the scheduler goes down then we won't run that state sync",
    "start": "1705979",
    "end": "1712369"
  },
  {
    "text": "engine so we won't be able to scale containers up or down for a given application users can still ask for",
    "start": "1712369",
    "end": "1717739"
  },
  {
    "text": "those changes they just won't be executed on the backend and if a container were to fail we wouldn't",
    "start": "1717739",
    "end": "1722989"
  },
  {
    "text": "immediately replace it because that's the schedulers job but that's okay because the service for the scheduler",
    "start": "1722989",
    "end": "1730009"
  },
  {
    "text": "will reschedule a new task to run that scheduler process and once it comes back",
    "start": "1730009",
    "end": "1735440"
  },
  {
    "text": "it'll restart the synchronization process and that's an idempotent process so the state of the container will come",
    "start": "1735440",
    "end": "1741740"
  },
  {
    "text": "back to the desired configuration over time that's a reasonable failure mode we think for now what we're considering",
    "start": "1741740",
    "end": "1747889"
  },
  {
    "text": "doing is changing to a model where end schedulers run at a time and we use",
    "start": "1747889",
    "end": "1752899"
  },
  {
    "text": "dynamo to broker a leadership election between them so that we can failover more quickly okay so that's the",
    "start": "1752899",
    "end": "1760460"
  },
  {
    "start": "1758000",
    "end": "1801000"
  },
  {
    "text": "scheduler let's talk about the proxy tier so this is the part of the system that manages the stateful persistent",
    "start": "1760460",
    "end": "1767809"
  },
  {
    "text": "connection between the micro service back-end and the client and it",
    "start": "1767809",
    "end": "1773659"
  },
  {
    "text": "implements what we call stable sessions and coordinated version updates so these are the unique requirements around",
    "start": "1773659",
    "end": "1778970"
  },
  {
    "text": "session management in a connected client application don't really have the same analog in a web app it's a share nothing",
    "start": "1778970",
    "end": "1785929"
  },
  {
    "text": "architecture so we run multiple proxies any proxy can serve any request it's a high availability architecture because",
    "start": "1785929",
    "end": "1792350"
  },
  {
    "text": "you can run multiple proxies in multiple lazy's and here too we schedule it as I said earlier as an ECS service",
    "start": "1792350",
    "end": "1798490"
  },
  {
    "text": "automatically binding to the appropriate ELB so let's let's look at a couple examples of how that works let's talk",
    "start": "1798490",
    "end": "1807289"
  },
  {
    "start": "1801000",
    "end": "2006000"
  },
  {
    "text": "first about what we call stable sessions so this is similar to what some people call sticky sessions in a web",
    "start": "1807289",
    "end": "1813379"
  },
  {
    "text": "architecture I'll show you the difference in a moment the idea here is that once a client is connected to a",
    "start": "1813379",
    "end": "1819919"
  },
  {
    "text": "back-end we need to keep that connection associated with the same back-end throughout the duration of the client",
    "start": "1819919",
    "end": "1826519"
  },
  {
    "text": "session it's that specific back-end process that understands the state of",
    "start": "1826519",
    "end": "1831529"
  },
  {
    "text": "the client it knows what's in the clients data cache it knows the version of the client code so that it can issue a hot code update when the time is right",
    "start": "1831529",
    "end": "1838340"
  },
  {
    "text": "so the initial request from a client comes through the ELB and we run the ELB in in pass-through mode so that we can",
    "start": "1838340",
    "end": "1845600"
  },
  {
    "text": "route WebSockets all the way through the ELB randomly selects one of the proxies",
    "start": "1845600",
    "end": "1850879"
  },
  {
    "text": "in the cluster the proxy consults the app state database this is our service",
    "start": "1850879",
    "end": "1856399"
  },
  {
    "text": "discovery model to determine where the container for that application is running and initially it selects one",
    "start": "1856399",
    "end": "1863509"
  },
  {
    "text": "currently at random in the future of what we'll do is a leased loaded model where it picks the",
    "start": "1863509",
    "end": "1868800"
  },
  {
    "text": "Taner are currently serving the least number of active clients it opens a TCP",
    "start": "1868800",
    "end": "1874200"
  },
  {
    "text": "socket to that particular container and now we have the the session established between the two the proxy also cookies",
    "start": "1874200",
    "end": "1881250"
  },
  {
    "text": "the session that came in to that proxy so that future requests from the same client can identify which back-end",
    "start": "1881250",
    "end": "1889020"
  },
  {
    "text": "container was selected so if the network connection drops and the say the the",
    "start": "1889020",
    "end": "1896210"
  },
  {
    "text": "user is on a mobile device and they drive through a tunnel this happens that's okay the web socket",
    "start": "1896210",
    "end": "1903060"
  },
  {
    "text": "gets reestablished by the client it carries with it this identification of which back-end container",
    "start": "1903060",
    "end": "1908910"
  },
  {
    "text": "it was previously talking to that's an opaque identifier to the client but the proxy understands what that means and so",
    "start": "1908910",
    "end": "1914880"
  },
  {
    "text": "the proxy reroutes that second connection even if it's a different proxy that handles it to the same",
    "start": "1914880",
    "end": "1920490"
  },
  {
    "text": "application back-end process so we call this stable sessions because no matter",
    "start": "1920490",
    "end": "1925890"
  },
  {
    "text": "how many interruptions there are in the connection it will always try to route back to that proxy let's say that",
    "start": "1925890",
    "end": "1932820"
  },
  {
    "text": "container fails and this is a common occurrence in a container orchestration environment maybe its whole instance",
    "start": "1932820",
    "end": "1938310"
  },
  {
    "text": "failed or just that particular container well now we've lost the state so we have to re-establish a connection to a new",
    "start": "1938310",
    "end": "1944550"
  },
  {
    "text": "container the proxy when it sees that new socket come in sees in the app state",
    "start": "1944550",
    "end": "1950520"
  },
  {
    "text": "database that the container is no longer available or perhaps it's running but not marked as healthy and so it excuse",
    "start": "1950520",
    "end": "1957300"
  },
  {
    "text": "me at that point the proxy makes the decision to re-establish a new stateful connection to a new back end and it Rico",
    "start": "1957300",
    "end": "1965400"
  },
  {
    "text": "keys the session so that future network interruptions will now route to the back-end that's running on the right of",
    "start": "1965400",
    "end": "1971190"
  },
  {
    "text": "the picture so we call this stable because you want to route request to the",
    "start": "1971190",
    "end": "1976260"
  },
  {
    "text": "same back-end as long as you can this is different for example from a 12 factor architecture where you're trying to",
    "start": "1976260",
    "end": "1982890"
  },
  {
    "text": "randomly route no matter when the request comes in but once you have made the switch you want to re-establish that",
    "start": "1982890",
    "end": "1989970"
  },
  {
    "text": "new back-end as the process that's going to handle future requests to minimize the number of interruptions to the user",
    "start": "1989970",
    "end": "1996120"
  },
  {
    "text": "the number of times that the screen has to flicker because data is reloaded into the cache or what have you",
    "start": "1996120",
    "end": "2002690"
  },
  {
    "text": "let's look at another scenario coordinated version updates so we talked",
    "start": "2002690",
    "end": "2011250"
  },
  {
    "start": "2006000",
    "end": "2061000"
  },
  {
    "text": "about the clients having versions let's look at what that really means so we have a user here on version 1 of the",
    "start": "2011250",
    "end": "2016679"
  },
  {
    "text": "application and the version is both on the client and the server so I have a client v1 routed through ELB into a",
    "start": "2016679",
    "end": "2023850"
  },
  {
    "text": "proxy routed to a particular back-end just like we saw before what we're gonna need is coordinate the scheduler and the",
    "start": "2023850",
    "end": "2030360"
  },
  {
    "text": "proxy to help make this work so let's say we want to push out a new version of",
    "start": "2030360",
    "end": "2035400"
  },
  {
    "text": "the application the way this works is we're gonna start by running new containers running a new version of the",
    "start": "2035400",
    "end": "2043380"
  },
  {
    "text": "back-end code or the service that's being upgraded so far this looks just like a normal update cycle we wait for",
    "start": "2043380",
    "end": "2050460"
  },
  {
    "text": "those containers to spin up and become healthy so in this example we've got four of the old and four of the new that",
    "start": "2050460",
    "end": "2056429"
  },
  {
    "text": "are running all managed as separate tasks spread across the container instance once we see the health checks",
    "start": "2056429",
    "end": "2064408"
  },
  {
    "start": "2061000",
    "end": "2111000"
  },
  {
    "text": "pass on version 2 of the application then we can start to tear down connections from the old one and move",
    "start": "2064409",
    "end": "2071368"
  },
  {
    "text": "them over to the new one so this is very different if you caught the demo of ECS",
    "start": "2071369",
    "end": "2080220"
  },
  {
    "text": "yesterday one of the things we saw was of Empire which is an open source stack for deploying 12 factor apps on ECS one",
    "start": "2080220",
    "end": "2087300"
  },
  {
    "text": "of the things we saw was during a version update you could actually see the client flipping back and forth",
    "start": "2087300",
    "end": "2092429"
  },
  {
    "text": "between the old container that was running and the new container that was running and this this was a hallmark of",
    "start": "2092429",
    "end": "2098220"
  },
  {
    "text": "that stateless architecture that's horrible in a connected client architecture because you're now running",
    "start": "2098220",
    "end": "2104550"
  },
  {
    "text": "a new version of the client and you need that connection to run to the corresponding new version of the server",
    "start": "2104550",
    "end": "2111300"
  },
  {
    "start": "2111000",
    "end": "2161000"
  },
  {
    "text": "so when we tear down the connection the client is gonna reboot running the new",
    "start": "2111300",
    "end": "2116760"
  },
  {
    "text": "version of its code so we've pushed new code to the client over that web socket and now the client when it makes its new",
    "start": "2116760",
    "end": "2123150"
  },
  {
    "text": "request even though it's cooking for an old version of the container the proxy is going to recognize that a version",
    "start": "2123150",
    "end": "2129750"
  },
  {
    "text": "update is in process so it looks instead at the version of the client record",
    "start": "2129750",
    "end": "2135600"
  },
  {
    "text": "that the clients version mismatches that cookie and and picks now a new back-end",
    "start": "2135600",
    "end": "2141000"
  },
  {
    "text": "from the pool of healthy and available version 2 backends for that application and at this point we've established a",
    "start": "2141000",
    "end": "2148230"
  },
  {
    "text": "stable session and so future Network interruptions will always be routed through any of the proxies back to that",
    "start": "2148230",
    "end": "2154320"
  },
  {
    "text": "same v2 back-end for that particular client so this is called a coordinated",
    "start": "2154320",
    "end": "2159810"
  },
  {
    "text": "version update and that allows us to give users a smooth experience as we go from v1 of the app to v2 of the app the",
    "start": "2159810",
    "end": "2167970"
  },
  {
    "start": "2161000",
    "end": "2370000"
  },
  {
    "text": "logic for that is mixed between the proxy and the scheduler which are the two pieces of custom code that we wrote",
    "start": "2167970",
    "end": "2173460"
  },
  {
    "text": "on top of the generic ECS service the last thing I wanted to talk about here was metrics so application metrics and",
    "start": "2173460",
    "end": "2181110"
  },
  {
    "text": "container metrics are an important part of understanding how your app is operating a couple things to say here so",
    "start": "2181110",
    "end": "2189480"
  },
  {
    "text": "we collect metrics both at an instance level and a container level to display",
    "start": "2189480",
    "end": "2194550"
  },
  {
    "text": "to the user for the container level metrics things like CPU utilization",
    "start": "2194550",
    "end": "2199700"
  },
  {
    "text": "network traffic memory consumption those are collected using the docker remote",
    "start": "2199700",
    "end": "2206430"
  },
  {
    "text": "API we run a collector process one for virtual machine which uses that API to",
    "start": "2206430",
    "end": "2212670"
  },
  {
    "text": "aggregate all of that into one machine that same process also pulls the proxies",
    "start": "2212670",
    "end": "2218010"
  },
  {
    "text": "that are running on that instance and the proxies have the list of which clients are connected to each container",
    "start": "2218010",
    "end": "2223590"
  },
  {
    "text": "so that gives us an active container count for the client there's a single aggregator process and these are both",
    "start": "2223590",
    "end": "2230610"
  },
  {
    "text": "scheduled as services in ACS by the way the aggregator process rolls up all of the information coming out of the",
    "start": "2230610",
    "end": "2237030"
  },
  {
    "text": "collector processes and pushes our metrics into dynamodb we store several",
    "start": "2237030",
    "end": "2242340"
  },
  {
    "text": "different time series of data in dynamo so there's a cycle every 5 seconds of",
    "start": "2242340",
    "end": "2248010"
  },
  {
    "text": "collecting performance information and then we do an aggregate in the aggregator process and store time series",
    "start": "2248010",
    "end": "2254700"
  },
  {
    "text": "on granularities of an hour or a day so that we can show longer ranges of time once that data is in dynamo the galaxy",
    "start": "2254700",
    "end": "2262740"
  },
  {
    "text": "UI can pull that database and we've implemented a real-time meteor database driver for dynamos",
    "start": "2262740",
    "end": "2268890"
  },
  {
    "text": "that we can show users the state of their application in terms of the number of connected clients and the number of",
    "start": "2268890",
    "end": "2276140"
  },
  {
    "text": "ECU units that the application is used I mentioned ECU earlier so Amazon uses",
    "start": "2276140",
    "end": "2282870"
  },
  {
    "text": "ECU as a way to normalize processor performance across different generations of the actual underlying hardware this",
    "start": "2282870",
    "end": "2289590"
  },
  {
    "text": "turns out to be really important the naive way to measure process performance in a container environment is is the",
    "start": "2289590",
    "end": "2296940"
  },
  {
    "text": "same statistics the docker will collect or you'll see if you run PS or top inside the container and the problem is",
    "start": "2296940",
    "end": "2303030"
  },
  {
    "text": "that it's reporting fraction of a core so if you ask how much of my processor am i using you'll get an answer that",
    "start": "2303030",
    "end": "2309600"
  },
  {
    "text": "looks kind of funny because inside the container your individual process is using what turns out to be a very small",
    "start": "2309600",
    "end": "2315780"
  },
  {
    "text": "fraction of the core on the machine what you actually want to show people is a sense of how much of the fair share of",
    "start": "2315780",
    "end": "2323610"
  },
  {
    "text": "your container is being used and what we found is that explaining that in terms",
    "start": "2323610",
    "end": "2329070"
  },
  {
    "text": "of ECU rather than percentages is a good model for people because it helps them understand that you can burst above the",
    "start": "2329070",
    "end": "2335280"
  },
  {
    "text": "the guaranteed amount of ECU that we give you in your container but what we really want to track and count is the",
    "start": "2335280",
    "end": "2341310"
  },
  {
    "text": "the actual number of ECU that your container uses so at launch for example our containers are one gig of memory and",
    "start": "2341310",
    "end": "2348360"
  },
  {
    "text": "half of an ECU but they're running on larger instances so they can burst into",
    "start": "2348360",
    "end": "2354390"
  },
  {
    "text": "2 3 4 ECU at a time up to the maximum amount that one core on the machine can",
    "start": "2354390",
    "end": "2359730"
  },
  {
    "text": "deliver and again that's why we want to be sure to separate the different applications evenly across instances so",
    "start": "2359730",
    "end": "2365550"
  },
  {
    "text": "that there's the most opportunity to burst onto those full-course so as I",
    "start": "2365550",
    "end": "2371490"
  },
  {
    "text": "said we just launched this week our experience so far and ECS has been really good and there's two things in",
    "start": "2371490",
    "end": "2377280"
  },
  {
    "text": "particular I think have worked well for us one of them is the the loosely coupled architecture around",
    "start": "2377280",
    "end": "2382830"
  },
  {
    "text": "synchronizing state between the app state database and the scheduler that's allowed the front-end team on galaxy to",
    "start": "2382830",
    "end": "2390420"
  },
  {
    "text": "be able to build a normal management app in meteor without having to dive into",
    "start": "2390420",
    "end": "2395580"
  },
  {
    "text": "the details of the galaxy ECS integration or the infrastructure-as-a-service",
    "start": "2395580",
    "end": "2401330"
  },
  {
    "text": "configuration the back-end team can start from that app state database and focus on the",
    "start": "2401330",
    "end": "2408000"
  },
  {
    "text": "interchange of data between EC s and n our own application states so that's that's allowed us to move much much faster with the what turns out the bulk",
    "start": "2408000",
    "end": "2415559"
  },
  {
    "text": "of the code and galaxy which is the management layer in the policy the other thing that worked very well for us is high availability we've had some",
    "start": "2415559",
    "end": "2423510"
  },
  {
    "text": "experience with this over the past few weeks so a number of the services we use had outages I guess it was about two",
    "start": "2423510",
    "end": "2430650"
  },
  {
    "text": "weeks ago now that were widely covered all of our applications for our",
    "start": "2430650",
    "end": "2436829"
  },
  {
    "text": "customers stayed up throughout that outage so the EC s infrastructure did what it was supposed to do there were",
    "start": "2436829",
    "end": "2442890"
  },
  {
    "text": "outages in terms of being able to call ec s api's so there were windows of time when we weren't able to scale",
    "start": "2442890",
    "end": "2449099"
  },
  {
    "text": "applications up or down or restart processes that had failed but the applications themselves stayed up the",
    "start": "2449099",
    "end": "2455369"
  },
  {
    "text": "proxy tier and the ELB that routed into that all worked well and users didn't see downtime so we're really delighted",
    "start": "2455369",
    "end": "2461819"
  },
  {
    "text": "with the h.a architecture that we've settled on and the the ability to do that even in a large distributed system",
    "start": "2461819",
    "end": "2468269"
  },
  {
    "text": "where things do fail some directions we want to go here that we're excited about",
    "start": "2468269",
    "end": "2474180"
  },
  {
    "start": "2470000",
    "end": "2575000"
  },
  {
    "text": "I've mentioned the idea of running multiple clusters and the the real drivers here are customers who are",
    "start": "2474180",
    "end": "2480930"
  },
  {
    "text": "asking to run their applications in other regions European customers for example aren't super excited about us",
    "start": "2480930",
    "end": "2486750"
  },
  {
    "text": "East in many cases as well as on Prem so we see run in your VP C as the new on",
    "start": "2486750",
    "end": "2495059"
  },
  {
    "text": "Prem model and we're very excited to be able to take essentially a hundred percent of what we've built in our multi",
    "start": "2495059",
    "end": "2500910"
  },
  {
    "text": "tenant setting and bring that over to an individual customer inside their own Amazon environment there's another",
    "start": "2500910",
    "end": "2506940"
  },
  {
    "text": "interesting area of work around cost optimizations this this came up in the",
    "start": "2506940",
    "end": "2512130"
  },
  {
    "text": "keynote yesterday and I was really happy to hear that so we're really excited about the opportunity to use different",
    "start": "2512130",
    "end": "2517289"
  },
  {
    "text": "kinds of instances for example you could imagine running some of these container instances as spot instances and you can",
    "start": "2517289",
    "end": "2525390"
  },
  {
    "text": "run the scheduler works in spot instances and then you can start to run tasks on these instances because we have",
    "start": "2525390",
    "end": "2531750"
  },
  {
    "text": "embraced the idea of containerization because processes are in some sense expected not",
    "start": "2531750",
    "end": "2536930"
  },
  {
    "text": "to last forever it opens up a lot of doors we think in terms of distributing",
    "start": "2536930",
    "end": "2541970"
  },
  {
    "text": "application load into the most cost-effective places we can serving the needs of our customers are trading off",
    "start": "2541970",
    "end": "2547790"
  },
  {
    "text": "between different levels of instance reliability or instance capacity so",
    "start": "2547790",
    "end": "2554870"
  },
  {
    "text": "again we launched this week the obligatory we're hiring we're really excited to add people to the team",
    "start": "2554870",
    "end": "2561440"
  },
  {
    "text": "working on ECS and building against this stuff I think it's fair to say Amazon's excited about what we're doing and I'm",
    "start": "2561440",
    "end": "2567980"
  },
  {
    "text": "very happy to take your questions thank you",
    "start": "2567980",
    "end": "2572410"
  }
]