[
  {
    "start": "0",
    "end": "15000"
  },
  {
    "text": "In this video, you’ll see how you can \nbuild a Java event-driven serverless",
    "start": "0",
    "end": "3473"
  },
  {
    "text": "application with Amazon CodeWhisperer.",
    "start": "3473",
    "end": "5697"
  },
  {
    "text": "With this machine learning-powered service, \nyou can build applications faster by leveraging",
    "start": "6367",
    "end": "10223"
  },
  {
    "text": "code recommendations and implementing \nAPI calls across popular AWS services.",
    "start": "10223",
    "end": "14901"
  },
  {
    "start": "15000",
    "end": "123000"
  },
  {
    "text": "This is the application that we’re going to \nbuild with the help of Amazon CodeWhisperer.",
    "start": "16276",
    "end": "19929"
  },
  {
    "text": "Users will have two different URLs \nthey can interact with to download",
    "start": "20589",
    "end": "23698"
  },
  {
    "text": "and recognize objects in images.",
    "start": "23698",
    "end": "25456"
  },
  {
    "text": "To achieve this implementation, we’ll \nwork with four different Lambda functions.",
    "start": "25881",
    "end": "29383"
  },
  {
    "text": "We’ll begin by implementing a Lamba \nfunction that downloads an image",
    "start": "30467",
    "end": "33299"
  },
  {
    "text": "using a provided URL and then \nuploads the image to Amazon S3.",
    "start": "33299",
    "end": "36928"
  },
  {
    "text": "For demonstration purposes, we’ve \nalready prepared an application with the",
    "start": "39553",
    "end": "42621"
  },
  {
    "text": "AWS Cloud Development Kit (AWS CDK).",
    "start": "42621",
    "end": "45797"
  },
  {
    "text": "We’ll be using Java to build our application, \nand IntelliJ IDEA by JetBrains as our IDE.",
    "start": "46446",
    "end": "51635"
  },
  {
    "text": "Starting with our first Lambda \nfunction, let’s type a comment that says",
    "start": "52551",
    "end": "55902"
  },
  {
    "text": "Method to download an image \nfrom the web and press Enter.",
    "start": "55902",
    "end": "58754"
  },
  {
    "text": "CodeWhisperer guesses our intent \nand suggests a function name.",
    "start": "59726",
    "end": "62725"
  },
  {
    "text": "We’ll accept the suggestion\nwe want by using our Tab key.",
    "start": "63485",
    "end": "66122"
  },
  {
    "text": "Next, let’s press Enter to see CodeWhisperer’s \nsuggestions for the body of the function.",
    "start": "67150",
    "end": "71089"
  },
  {
    "text": "Once again, we’ll press Tab \nto accept the suggestion",
    "start": "72056",
    "end": "74622"
  },
  {
    "text": "Now we need to upload \nthe image to Amazon S3.",
    "start": "75694",
    "end": "78100"
  },
  {
    "text": "To do this, we’ll enter a comment.",
    "start": "78446",
    "end": "79932"
  },
  {
    "text": "We’ll use our right arrow key to \ncontinue through the suggestions",
    "start": "82133",
    "end": "84643"
  },
  {
    "text": "until we find the one we want to use.",
    "start": "84643",
    "end": "86439"
  },
  {
    "text": "We’ll press Tab to select this one.",
    "start": "87311",
    "end": "89039"
  },
  {
    "text": "Let’s change this to a void method, \nsince we don’t need it to return anything.",
    "start": "90046",
    "end": "93427"
  },
  {
    "text": "Again, we’ll cycle through the \nsuggestions and select the one we want.",
    "start": "95796",
    "end": "98742"
  },
  {
    "text": "Next, we’ll begin to invoke \nthe function we set up.",
    "start": "99702",
    "end": "101950"
  },
  {
    "text": "This format is based on our ImageData class.",
    "start": "109234",
    "end": "111719"
  },
  {
    "text": "Let’s take a quick look at it.",
    "start": "111931",
    "end": "113115"
  },
  {
    "text": "Let’s return to our function.",
    "start": "115015",
    "end": "116255"
  },
  {
    "text": "Now we’ll upload the image.",
    "start": "118132",
    "end": "119551"
  },
  {
    "start": "123000",
    "end": "265000"
  },
  {
    "text": "Now we’ll implement our \nsecond Lambda function.",
    "start": "124232",
    "end": "126270"
  },
  {
    "text": "This function will read an item from the \nAmazon Simple Queue Service (SQS) queue,",
    "start": "126706",
    "end": "131162"
  },
  {
    "text": "use Amazon Rekognition to \nrecognize all the labels from the image,",
    "start": "131162",
    "end": "134242"
  },
  {
    "text": "store the results in Amazon DynamoDB,",
    "start": "134242",
    "end": "136866"
  },
  {
    "text": "and then publish the results to Amazon \nSimple Notification Service (SNS).",
    "start": "136866",
    "end": "140860"
  },
  {
    "text": "Let’s start by entering Method \nto receive a message from SQS.",
    "start": "144849",
    "end": "148120"
  },
  {
    "text": "We’ll use the second suggestion \nfrom CodeWhisperer.",
    "start": "149014",
    "end": "151229"
  },
  {
    "text": "Now let’s cycle through the \nsuggestions for the body of the method.",
    "start": "152090",
    "end": "154819"
  },
  {
    "text": "We’ll use this last suggestion.",
    "start": "155769",
    "end": "157308"
  },
  {
    "text": "Now let’s enter Method to detect \nlabels from image with Rekognition.",
    "start": "158335",
    "end": "161769"
  },
  {
    "text": "We’ll accept the suggested name, \nwhich requires a bucket and key.",
    "start": "162685",
    "end": "165826"
  },
  {
    "text": "We’ll also accept the suggested \nimplementation, which will return",
    "start": "166877",
    "end": "170027"
  },
  {
    "text": "all the labels that are in the image.",
    "start": "170027",
    "end": "171685"
  },
  {
    "text": "Let’s make some edits to this code.",
    "start": "172601",
    "end": "174121"
  },
  {
    "text": "Next, let’s enter Method to \nsave an item on DynamoDB.",
    "start": "180000",
    "end": "183285"
  },
  {
    "text": "We’ll accept the suggested name and \nchoose our preferred implementation.",
    "start": "184245",
    "end": "187342"
  },
  {
    "text": "In this case, CodeWhisperer took \ninto consideration our prior code",
    "start": "190000",
    "end": "193209"
  },
  {
    "text": "that recognizes images from Rekognition \nwhen creating a format and structure",
    "start": "193209",
    "end": "196569"
  },
  {
    "text": "for the items that will be saved.",
    "start": "196569",
    "end": "197931"
  },
  {
    "text": "Once again, we don’t need \nthis method to return anything.",
    "start": "198646",
    "end": "201160"
  },
  {
    "text": "Next, let’s get a CodeWhisperer \nsuggestion by entering the comment",
    "start": "204545",
    "end": "207565"
  },
  {
    "text": "Method to publish item to SNS.",
    "start": "207565",
    "end": "209623"
  },
  {
    "text": "We’ll accept the suggestion and \nchoose our preferred implementation.",
    "start": "210506",
    "end": "213275"
  },
  {
    "text": "Let's edit this code.",
    "start": "215832",
    "end": "216927"
  },
  {
    "text": "Finally, let’s add a method to delete the \nmessage from SQS so we don’t process it twice.",
    "start": "227608",
    "end": "232000"
  },
  {
    "text": "There’s only one method suggestion for this.",
    "start": "234346",
    "end": "236431"
  },
  {
    "text": "Let’s use it.",
    "start": "236431",
    "end": "237098"
  },
  {
    "text": "Let’s review the methods \nthat we just implemented.",
    "start": "238048",
    "end": "240103"
  },
  {
    "text": "Now we’ll start using them.",
    "start": "242829",
    "end": "244088"
  },
  {
    "text": "The second Lambda function is now complete.",
    "start": "261596",
    "end": "263580"
  },
  {
    "start": "265000",
    "end": "324000"
  },
  {
    "text": "Now we’ll implement a third Lambda function.",
    "start": "265546",
    "end": "267565"
  },
  {
    "text": "This function will read the object \nfrom the Amazon SQS queue that was",
    "start": "267912",
    "end": "271029"
  },
  {
    "text": "published by the previous Lambda function.",
    "start": "271029",
    "end": "272889"
  },
  {
    "text": "It will then convert the message from \nJSON to XML and send the message",
    "start": "273370",
    "end": "276655"
  },
  {
    "text": "to an external email server.",
    "start": "276655",
    "end": "278255"
  },
  {
    "text": "Let’s start by entering Method to receive\n and delete a message from SQS queue URL.",
    "start": "282255",
    "end": "286804"
  },
  {
    "text": "We’ll accept CodeWhisperer’s suggestions.",
    "start": "287709",
    "end": "289653"
  },
  {
    "text": "Now we’ll use CodeWhisperer to find \na method to convert JSON to XML.",
    "start": "292346",
    "end": "296088"
  },
  {
    "text": "Next, we need to send the XML message \nto our email server using HTTP POST.",
    "start": "298356",
    "end": "302891"
  },
  {
    "text": "Now let’s call the method and \npass it the appropriate parameters.",
    "start": "305237",
    "end": "308161"
  },
  {
    "start": "324000",
    "end": "364000"
  },
  {
    "text": "Now we’ll implement our \nfourth Lambda function.",
    "start": "325133",
    "end": "327173"
  },
  {
    "text": "This function reads all the items\n from the DynamoDB table and",
    "start": "327575",
    "end": "330424"
  },
  {
    "text": "returns them as JSON objects.",
    "start": "330424",
    "end": "332326"
  },
  {
    "text": "We’ll enter Return all items from a DynamoDB \ntable to get suggestions from CodeWhisperer.",
    "start": "336314",
    "end": "341372"
  },
  {
    "text": "Let’s choose the name my_table_name.",
    "start": "344165",
    "end": "346662"
  },
  {
    "text": "We can return the items by simply calling the \nmethod and passing the table as a parameter.",
    "start": "348695",
    "end": "352636"
  },
  {
    "text": "Based on our comments \nwritten in plain natural language,",
    "start": "353575",
    "end": "356193"
  },
  {
    "text": "CodeWhisperer generated code \nthat matches our patterns and style,",
    "start": "356193",
    "end": "359685"
  },
  {
    "text": "without requiring us to spend \ntime researching methods.",
    "start": "359685",
    "end": "362550"
  },
  {
    "start": "364000",
    "end": "396000"
  },
  {
    "text": "Now let’s test this application with this\nimage of a pug to see what it recognizes.",
    "start": "364550",
    "end": "368600"
  },
  {
    "text": "We’ll invoke the endpoint that we just \ndeployed and then pass the URL for the image.",
    "start": "370802",
    "end": "374624"
  },
  {
    "text": "The image uploaded successfully.",
    "start": "375495",
    "end": "377073"
  },
  {
    "text": "Now we’ll invoke the second API \nGateway endpoint to see the results.",
    "start": "378447",
    "end": "382000"
  },
  {
    "text": "The application labeled our pug image \n“Tiger,” “Wildlife,” “Animal,” “Mammal,”",
    "start": "383117",
    "end": "387459"
  },
  {
    "text": "“Canine,” “Pet,” “Dog,” and so on, proving \nthat our application with the code",
    "start": "387459",
    "end": "391882"
  },
  {
    "text": "generated by CodeWhisperer \nis up and running.",
    "start": "391882",
    "end": "394207"
  },
  {
    "start": "396000",
    "end": "411000"
  },
  {
    "text": "You’ve just seen how to build a Java",
    "start": "397000",
    "end": "398436"
  },
  {
    "text": "event-driven serverless app \nwith Amazon CodeWhisperer.",
    "start": "398436",
    "end": "401436"
  },
  {
    "text": "You can learn more about this topic and \nsign up for the CodeWhisperer preview",
    "start": "402431",
    "end": "405584"
  },
  {
    "text": "in the description and links for this video.",
    "start": "405584",
    "end": "407588"
  },
  {
    "text": "Thanks for watching. Now it’s your turn to try.",
    "start": "407867",
    "end": "409899"
  }
]