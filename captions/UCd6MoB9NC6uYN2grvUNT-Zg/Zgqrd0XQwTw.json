[
  {
    "text": "thanks everyone appreciate you attending this event I know it's it's late in the day late in the week and really happy to",
    "start": "260",
    "end": "6480"
  },
  {
    "text": "see so many people in the room my name is Jamie Kinney I'm the principal product manager for AWS batch and high-performance computing at AWS happy",
    "start": "6480",
    "end": "14009"
  },
  {
    "text": "here to introduce a few my friends and colleagues so we have Davin joining us from from GoPro want to raise your hand",
    "start": "14009",
    "end": "20340"
  },
  {
    "text": "real quick we've got Tom joining us from AWS one of our crystal solutions",
    "start": "20340",
    "end": "25740"
  },
  {
    "text": "architects and Lee from here from the highly autonomous driving division of here system so I hope you've got a great",
    "start": "25740",
    "end": "32308"
  },
  {
    "text": "talk for you I wanted to spend a bit of time today talking about a few things",
    "start": "32309",
    "end": "38489"
  },
  {
    "text": "we're gonna first to be just a quick introduction kind of recap on what what is batch processing what do we mean by that then we're going to talk tom is",
    "start": "38489",
    "end": "45629"
  },
  {
    "text": "going to give us an introduction to Amazon ECS not just introduction but really kind of talk about why is it relevant for for batch processing before",
    "start": "45629",
    "end": "53100"
  },
  {
    "text": "we get into David's presentation on on GoPro and how they use Amazon ECS so easy to container service then they'll",
    "start": "53100",
    "end": "59789"
  },
  {
    "text": "switch gears a bit and I'll focus on AWS batch introduce it to those of you who might not have had a chance to kick the",
    "start": "59789",
    "end": "65158"
  },
  {
    "text": "tires talk about some of our big releases and reinvent and leading up to this conference as well as give you a",
    "start": "65159",
    "end": "70439"
  },
  {
    "text": "glimpse into our relatively near-term roadmap and then here well we'll talk about how Lee we'll talk about how",
    "start": "70439",
    "end": "76590"
  },
  {
    "text": "here's been using AWS patch for autonomous driving and a number of other workloads and we'll save some time for Q&A I",
    "start": "76590",
    "end": "83549"
  },
  {
    "text": "promise so first with the the quick introduction to to batch computing and batch processing so a batch is a really",
    "start": "83549",
    "end": "90329"
  },
  {
    "text": "interesting paradigm that that's been around for for literally decades batch processing allows you to it's kind of",
    "start": "90329",
    "end": "96240"
  },
  {
    "text": "like a TiVo for your work and let's use shift when a given job runs and where a given job runs and in exchange for that",
    "start": "96240",
    "end": "103290"
  },
  {
    "text": "flexibility you can do things like take advantage of compute resources under that are acquired under different",
    "start": "103290",
    "end": "109049"
  },
  {
    "text": "provisioning models or you can run workloads at times a day when you have spot resources might be available at a",
    "start": "109049",
    "end": "115140"
  },
  {
    "text": "lower cost or at higher capacity but in order to take advantage of that flexibility and the many benefits that",
    "start": "115140",
    "end": "120600"
  },
  {
    "text": "come from batch processing you need to think about the sequencing of your jobs and have orchestration systems that keep",
    "start": "120600",
    "end": "127560"
  },
  {
    "text": "track of available resources or are provisioning the right types of resources in a just-in-time manner",
    "start": "127560",
    "end": "132989"
  },
  {
    "text": "and historically yeah this is this is presented some challenges for a lot of",
    "start": "132989",
    "end": "138180"
  },
  {
    "text": "batch work Leslie's tend to be very high scale workloads very bursty workloads",
    "start": "138180",
    "end": "144180"
  },
  {
    "text": "you'll you'll frequently see hundreds of thousands if not millions of jobs coming in over a relatively short period of",
    "start": "144180",
    "end": "149909"
  },
  {
    "text": "time meaning that you need to be able to scale up your your compute resources or at the very least keep track of those",
    "start": "149909",
    "end": "155819"
  },
  {
    "text": "jobs that aren't yet able to run because you don't have that that capacity on hand unless of an issue in the cloud of",
    "start": "155819",
    "end": "161010"
  },
  {
    "text": "course the other thing is that you need to think about concurrency of workloads and and how are you distributing your",
    "start": "161010",
    "end": "166799"
  },
  {
    "text": "available processing across all of the available compute resources and often",
    "start": "166799",
    "end": "172560"
  },
  {
    "text": "times especially Bachelor clothes because these are running asynchronously these are running automatically without human intervention you need to make sure",
    "start": "172560",
    "end": "178680"
  },
  {
    "text": "that you've got error handling things like the ability to retry a job in case of an application failure or in the case",
    "start": "178680",
    "end": "184409"
  },
  {
    "text": "of a part of your infrastructure becoming unavailable the case of spot instances a spot instance termination as",
    "start": "184409",
    "end": "190019"
  },
  {
    "text": "one example and so batch workloads require reliability tools to make sure that you",
    "start": "190019",
    "end": "195689"
  },
  {
    "text": "can automatically retry jobs and that you're able to distribute work across the range of availability zones in the",
    "start": "195689",
    "end": "200760"
  },
  {
    "text": "case of AWS batch workloads benefit from from simplicity batches a pervasive",
    "start": "200760",
    "end": "206370"
  },
  {
    "text": "model of computing it's used by data scientists it's used by life scientists",
    "start": "206370",
    "end": "211620"
  },
  {
    "text": "it's used by media and entertainment by Potamus vehicle systems it's used to",
    "start": "211620",
    "end": "217409"
  },
  {
    "text": "transcode and and do a computer vision and image recognition on video streams",
    "start": "217409",
    "end": "223680"
  },
  {
    "text": "as you'll hear from from GoPro and so because there's so many workloads you want to make it very easy to develop",
    "start": "223680",
    "end": "228959"
  },
  {
    "text": "these tools and deploy them in your batch framework hence the importance of things like container technology and",
    "start": "228959",
    "end": "236030"
  },
  {
    "text": "it's also really important to make sure that you keep the cost of batch processing as as low as possible and so",
    "start": "236030",
    "end": "242519"
  },
  {
    "text": "this is actually one of the reasons that AWS transition to the model of per second billing versus the hourly billing",
    "start": "242519",
    "end": "248069"
  },
  {
    "text": "that we had previously with per second billing you have the possibility to easily scale up a compute resource",
    "start": "248069",
    "end": "254519"
  },
  {
    "text": "that's really precisely tailored to the needs of each of your jobs so that job runs as performant ly as possible while",
    "start": "254519",
    "end": "260370"
  },
  {
    "text": "that compute resource is running but that you stop paying for that resource the moment that it's no longer needed and so if you have jobs that are",
    "start": "260370",
    "end": "266730"
  },
  {
    "text": "or cpu-intensive maybe you're launching c5 instances if you have jobs that need GPUs maybe you're running those on p3",
    "start": "266730",
    "end": "272550"
  },
  {
    "text": "instances or FPGAs with the f1 instances and in doing so we've been able to",
    "start": "272550",
    "end": "278610"
  },
  {
    "text": "orchestrate the the selection of these types of resources you'll need a higher level of infrastructure and so that's",
    "start": "278610",
    "end": "284310"
  },
  {
    "text": "what we'll be talking about in a bit and so cloud makes sense for this because we have a massive amount of capacity we",
    "start": "284310",
    "end": "290520"
  },
  {
    "text": "have a wide range of instance types and with services such as ECS and eks and",
    "start": "290520",
    "end": "297690"
  },
  {
    "text": "AWS batch and Fargate you now have the ability to use these resources even more",
    "start": "297690",
    "end": "303600"
  },
  {
    "text": "efficiently and be able to because we're using docker be able to deploy your applications just as easily on AWS as",
    "start": "303600",
    "end": "309750"
  },
  {
    "text": "you are on your laptop or in your own environment and your own data centers if you have those of course under a pay-as-you-go model and so containers",
    "start": "309750",
    "end": "317280"
  },
  {
    "text": "make sense for for batch processing workloads for it for a number of these reasons it's it's really a polyglot",
    "start": "317280",
    "end": "322680"
  },
  {
    "text": "mechanism within a container you can run a java and are a Python application Fortran code C your C++ application",
    "start": "322680",
    "end": "330090"
  },
  {
    "text": "really the sky's the limit and we have customers that are that are using containers to run this this tremendous",
    "start": "330090",
    "end": "336450"
  },
  {
    "text": "diversity of applications and because you were packaging each of your container your applications within a",
    "start": "336450",
    "end": "342600"
  },
  {
    "text": "container you can easily constrain the amount of resources that you're giving to a specific job while it's running and",
    "start": "342600",
    "end": "348270"
  },
  {
    "text": "this allows you to do things like bin pack multiple jobs onto an ec2 instance giving you even more efficiency in the",
    "start": "348270",
    "end": "354270"
  },
  {
    "text": "way that you run your workloads and then finally it helps make sure that you're not locked into any one platform because",
    "start": "354270",
    "end": "361140"
  },
  {
    "text": "again you can develop on your laptop deploy on Amazon just as easily as you can deploy anywhere else so with that",
    "start": "361140",
    "end": "368130"
  },
  {
    "text": "brief introduction I want to make sure that we focus on a really important a",
    "start": "368130",
    "end": "374150"
  },
  {
    "text": "vision or a tenant of Amazon which that we want to give you as much choice as possible today we're going to be talking",
    "start": "374150",
    "end": "380130"
  },
  {
    "text": "about just two of the many many options that exist for using AWS to run a containerized batch processing workloads",
    "start": "380130",
    "end": "385980"
  },
  {
    "text": "we'll be focusing on ec2 container service and AWS batch and so to focus on",
    "start": "385980",
    "end": "391200"
  },
  {
    "text": "ECS i'm going to hand us off to to tom at this point thank you thanks Jimmy",
    "start": "391200",
    "end": "398250"
  },
  {
    "text": "okay so before we kind of jump into the specific use cases I want to make sure",
    "start": "398250",
    "end": "404250"
  },
  {
    "text": "everybody has a good baseline understanding of elastic container service the container service we provide",
    "start": "404250",
    "end": "411210"
  },
  {
    "text": "that service as a way to bring your docker containers and schedule those resources as tasks right so you're able",
    "start": "411210",
    "end": "417360"
  },
  {
    "text": "to build out the same kind of infrastructures and cluster and scale that the way you always have right with",
    "start": "417360",
    "end": "424320"
  },
  {
    "text": "auto scaling but then there's this additional layer where you're able to take containerized code and schedule it",
    "start": "424320",
    "end": "430680"
  },
  {
    "text": "and then place it there's even very flexible options for placing different types of processing containers on say",
    "start": "430680",
    "end": "437730"
  },
  {
    "text": "GPU based instances or heavy Ram specific type instances are available",
    "start": "437730",
    "end": "443730"
  },
  {
    "text": "for those types of containers because as you define containers and tasks you're specifying what sort of resources are",
    "start": "443730",
    "end": "450210"
  },
  {
    "text": "necessary now they're very fast super agile they can be spun up spun down and then you start to integrate with all the",
    "start": "450210",
    "end": "457020"
  },
  {
    "text": "other native AWS building blocks services so this as a scheduler as a way",
    "start": "457020",
    "end": "463440"
  },
  {
    "text": "to pull together a load balancer for example if you're gonna run a long-running service on it or",
    "start": "463440",
    "end": "469520"
  },
  {
    "text": "integrating it with cloud watch and our event streaming systems that allows you to trigger all kinds of different",
    "start": "469520",
    "end": "476400"
  },
  {
    "text": "execution patterns so batch is another example of a workload that works very",
    "start": "476400",
    "end": "482640"
  },
  {
    "text": "well for containers it's something that Jaime just talked quite a bit about now this is an example where you see",
    "start": "482640",
    "end": "488340"
  },
  {
    "text": "something like s3 become the storage mechanism for input and output when",
    "start": "488340",
    "end": "494160"
  },
  {
    "text": "you're processing and executing a batch job these are different reference architectures that we've seen emerge and",
    "start": "494160",
    "end": "501030"
  },
  {
    "text": "using the container service you schedule out the jobs with the pure algorithmic",
    "start": "501030",
    "end": "506760"
  },
  {
    "text": "code that you want to run against data that's separated another example we actually can go and use triggers right",
    "start": "506760",
    "end": "514169"
  },
  {
    "text": "so this is where these integrations again start to start to really become advantageous now I can trigger a lambda",
    "start": "514169",
    "end": "521070"
  },
  {
    "text": "function that can execute and start up a batch process that batch process being",
    "start": "521070",
    "end": "526830"
  },
  {
    "text": "again a container running in tasks scheduled on top of that in first",
    "start": "526830",
    "end": "531900"
  },
  {
    "text": "structure that infrastructure could scale it could be a scheduled scaling scenario because these batch jobs often",
    "start": "531900",
    "end": "538080"
  },
  {
    "text": "are maybe on a quarterly boundary maybe they're done weekly it's a little bit more predictable than some of the real",
    "start": "538080",
    "end": "544320"
  },
  {
    "text": "kind of hyper scale spiky type workloads in some cases you can actually use all",
    "start": "544320",
    "end": "549750"
  },
  {
    "text": "of those those scheduled api's to do some really interesting work and optimize another example of course",
    "start": "549750",
    "end": "556440"
  },
  {
    "text": "queues right as an intermediary I can start to throw work into a queue and then I can again abstract away the data",
    "start": "556440",
    "end": "564420"
  },
  {
    "text": "persistence and let these tasks get scheduled out and go retrieve the data",
    "start": "564420",
    "end": "569760"
  },
  {
    "text": "for itself to process using the queue essentially as a as a mechanism to maybe",
    "start": "569760",
    "end": "575700"
  },
  {
    "text": "drive more scale maybe to do all kinds of different parameterizations that",
    "start": "575700",
    "end": "580710"
  },
  {
    "text": "could flow through in the messages themselves the concept of a queue in between your processing superpowerful",
    "start": "580710",
    "end": "588000"
  },
  {
    "text": "and you may even see a little something like that when Jamie comes back and talks more about the batch service itself long-running batch jobs this is",
    "start": "588000",
    "end": "596010"
  },
  {
    "text": "where you really can take advantage of things like spot right if you have these",
    "start": "596010",
    "end": "601020"
  },
  {
    "text": "you know item potent workload items where you can retry things get to a",
    "start": "601020",
    "end": "607260"
  },
  {
    "text": "certain point stop snapshot your output and then be able to just restart at any point time",
    "start": "607260",
    "end": "612630"
  },
  {
    "text": "that that lends itself very well to a spot type of a scenario spot often can",
    "start": "612630",
    "end": "618450"
  },
  {
    "text": "give you 50 to 90 percent reduction in cost so you can go kind of one of two directions you can scale it quite a bit",
    "start": "618450",
    "end": "624750"
  },
  {
    "text": "higher so that you can get done faster or pay less right there's all these kinds of options at your fingertips when",
    "start": "624750",
    "end": "632190"
  },
  {
    "text": "you can build these batch jobs schedule them all out and make sure they can all be restarted very gracefully so this is",
    "start": "632190",
    "end": "639780"
  },
  {
    "text": "this is a little bit more about what I was talking about there where spot is super super valuable so just to",
    "start": "639780",
    "end": "647280"
  },
  {
    "text": "summarize the container service docker bring it scheduled it all this kind of",
    "start": "647280",
    "end": "652290"
  },
  {
    "text": "flexibility but but keep in mind a couple of key tenants stay away from incorporating too much local state you",
    "start": "652290",
    "end": "660240"
  },
  {
    "text": "want to have that somewhere else right because now I can I can get much more flex",
    "start": "660240",
    "end": "665430"
  },
  {
    "text": "well it's stateful in the sense that the processing logic is something you can add and remove at will make sure to",
    "start": "665430",
    "end": "672240"
  },
  {
    "text": "minimize dependencies in your task definitions as you start to get these things designed and thought out you can",
    "start": "672240",
    "end": "679410"
  },
  {
    "text": "kind of paint yourself into a corner as to how flexible where where can different workloads actually execute and",
    "start": "679410",
    "end": "685500"
  },
  {
    "text": "run if they had a ton of additional dependencies so be smart about things being small and compact and easy too",
    "start": "685500",
    "end": "692640"
  },
  {
    "text": "easy to run monitor things with the api's so the event stream cloud wash all",
    "start": "692640",
    "end": "698460"
  },
  {
    "text": "those things are there to allow you to make decisions based on the state of the",
    "start": "698460",
    "end": "703890"
  },
  {
    "text": "cluster or the state of the tasks themselves now that you've got these multiple layers of auto scaling",
    "start": "703890",
    "end": "710700"
  },
  {
    "text": "capabilities you can you can do a lot more so so that's that's my piece I want",
    "start": "710700",
    "end": "716490"
  },
  {
    "text": "to hand it off the savin now to talk about a very specific example of using ECS for batch all right hey everybody my",
    "start": "716490",
    "end": "731820"
  },
  {
    "text": "name is Haven I'm with GoPro we are the team at GoPro that's been developing the AWS cloud",
    "start": "731820",
    "end": "738150"
  },
  {
    "text": "platform behind some of our key products for the last several years first using ec2 and auto scaling groups",
    "start": "738150",
    "end": "745260"
  },
  {
    "text": "and now more recently we're using ECS to do both our web and our API layer so",
    "start": "745260",
    "end": "756690"
  },
  {
    "text": "today I'm going to share the team's experience migrating from those ec2 based applications and I'll tell you a",
    "start": "756690",
    "end": "763470"
  },
  {
    "text": "bit about the GoPro plus service and the cloud platform behind it what it looks like what kind of services we run there",
    "start": "763470",
    "end": "769170"
  },
  {
    "text": "and some of the lessons we've learned along the way for those of you considering migrating to container based",
    "start": "769170",
    "end": "774980"
  },
  {
    "text": "a container based paradigm I hope this is somewhat useful to you guys I hope we",
    "start": "774980",
    "end": "781080"
  },
  {
    "text": "believe we will be able to give you some pointers on how to make that transition as smooth as possible but first if",
    "start": "781080",
    "end": "787080"
  },
  {
    "text": "you'll indulge me GoPro turn on I just want to do an extreme selfie since I'm",
    "start": "787080",
    "end": "792390"
  },
  {
    "text": "here GoPro take a photo",
    "start": "792390",
    "end": "796700"
  },
  {
    "text": "awesome so not just to indulge myself",
    "start": "797650",
    "end": "803690"
  },
  {
    "text": "but also to give some context so when one of our customers uploads photos",
    "start": "803690",
    "end": "808730"
  },
  {
    "text": "takes photos and videos they can be uploaded directly to the cloud via GoPro plus in 2016 we launched GoPro plus it's",
    "start": "808730",
    "end": "816620"
  },
  {
    "text": "a subscription service that makes it easy to automatically upload edit store and share your vote your videos and",
    "start": "816620",
    "end": "823010"
  },
  {
    "text": "photos from your GoPro devices it also provides a number of other benefits like discounted GoPro accessories so when",
    "start": "823010",
    "end": "830690"
  },
  {
    "text": "user signs up for the service logs on uses our quip mobile app or desktop app",
    "start": "830690",
    "end": "836120"
  },
  {
    "text": "they're integrating with and they're interacting with our applications on the",
    "start": "836120",
    "end": "842150"
  },
  {
    "text": "cloud platform which are all running in the ec2 container service today we're",
    "start": "842150",
    "end": "848150"
  },
  {
    "text": "running a hundred percent of our production services for GoPro plus on ECS so the platform consists of a number",
    "start": "848150",
    "end": "855290"
  },
  {
    "text": "of different components like ms like I mentioned photo and video processing user and subscription management's",
    "start": "855290",
    "end": "861760"
  },
  {
    "text": "keeping track of devices like cameras and drones and mobile apps and serving",
    "start": "861760",
    "end": "867470"
  },
  {
    "text": "up the user interfaces for the users on the web and the mobile platforms not to mention all the infrastructure support",
    "start": "867470",
    "end": "873650"
  },
  {
    "text": "services that we need to keep the system's healthy something that my team the DevOps team is very interested in I",
    "start": "873650",
    "end": "880010"
  },
  {
    "text": "forgot my graphics there they are so we",
    "start": "880010",
    "end": "886370"
  },
  {
    "text": "have today 60 services in ECS in production we've split into several",
    "start": "886370",
    "end": "892850"
  },
  {
    "text": "different clusters to handle some apps that need a large amount of memory and some that need a large amount of compute",
    "start": "892850",
    "end": "898790"
  },
  {
    "text": "for example doing video transcoding different types of media processing and we have today around 500 ec2 instances",
    "start": "898790",
    "end": "906290"
  },
  {
    "text": "although that is shrinking as we've been moving over to ECS part of the main reason we decided to migrate over and",
    "start": "906290",
    "end": "912880"
  },
  {
    "text": "our platform serves around 100 million requests a day those were API requests",
    "start": "912880",
    "end": "919600"
  },
  {
    "text": "so for us container orchestration was a long time coming and I'd like to give you some sense of the pain points that",
    "start": "919930",
    "end": "925400"
  },
  {
    "text": "we were dealing with before our move to containers some of you may be very familiar with",
    "start": "925400",
    "end": "931020"
  },
  {
    "text": "some of these so for our apps and micro services we used to run this classic",
    "start": "931020",
    "end": "936090"
  },
  {
    "text": "model of just deploying anees so we would deploy our code to an",
    "start": "936090",
    "end": "941280"
  },
  {
    "text": "ami image then create a new auto scaling group off that ami and then create a new",
    "start": "941280",
    "end": "946940"
  },
  {
    "text": "sort of Bluegreen deployment from that new auto scaling group so this works but",
    "start": "946940",
    "end": "953610"
  },
  {
    "text": "it's very slow it has multiple steps to it many places to fail this led to some",
    "start": "953610",
    "end": "960180"
  },
  {
    "text": "very long deployments and some very unhappy developers and QA engineers there's too many steps in this process",
    "start": "960180",
    "end": "966630"
  },
  {
    "text": "too many places to fail as far as our workers doing the asynchronous job queue",
    "start": "966630",
    "end": "974040"
  },
  {
    "text": "work we also had some challenges there so basically it comes down to visibility",
    "start": "974040",
    "end": "980250"
  },
  {
    "text": "control and cost visibility because",
    "start": "980250",
    "end": "985530"
  },
  {
    "text": "orchestration was kind of a black box we used a third-party service that did sort of an MQ managed MQ as a SAS",
    "start": "985530",
    "end": "992160"
  },
  {
    "text": "service in that model all the orchestration logic was hidden from us",
    "start": "992160",
    "end": "998250"
  },
  {
    "text": "it ran in somebody else's infrastructure so for example if a container fails to start that's hard to see we had limit",
    "start": "998250",
    "end": "1006260"
  },
  {
    "text": "limitations in terms of metrics and monitoring and we actually ended up writing some middleware so that we could",
    "start": "1006260",
    "end": "1011330"
  },
  {
    "text": "scrape this third party API just to import the monitoring metrics into cloud watch having fewer sources of data to",
    "start": "1011330",
    "end": "1018470"
  },
  {
    "text": "monitor is always a good thing and so that's one of the things we love about ECS all the stats are right there in",
    "start": "1018470",
    "end": "1024650"
  },
  {
    "text": "cloud watch makes it very easy to alert and final point here we couldn't always",
    "start": "1024650",
    "end": "1032689"
  },
  {
    "text": "rely on the efficiency of the scheduler so again operational overhead it wasn't",
    "start": "1032690",
    "end": "1039079"
  },
  {
    "text": "always very efficient to run these workloads and we didn't have very much control over that so we decided to move",
    "start": "1039080",
    "end": "1047300"
  },
  {
    "text": "over to a orchestration solution what about kubernetes well we learned yesterday that we'll be able to run",
    "start": "1047300",
    "end": "1052640"
  },
  {
    "text": "managed kubernetes on AWS which is pretty cool I'll just share with you some of the reasons that ECS was the",
    "start": "1052640",
    "end": "1058430"
  },
  {
    "text": "best choice for us a few months ago when we started this project both solutions both ECS and kubernetes",
    "start": "1058430",
    "end": "1066299"
  },
  {
    "text": "pretty much meant most of the requirements for us ECS came out ahead however in a few key areas so number one",
    "start": "1066299",
    "end": "1073659"
  },
  {
    "text": "security policy specific to every service running in the EECS cluster this",
    "start": "1073659",
    "end": "1078700"
  },
  {
    "text": "is built in EECS via IM roles they're very familiar we can be sure that every service has only the minimum access that",
    "start": "1078700",
    "end": "1085090"
  },
  {
    "text": "it needs to do its job this is key we found a very familiar set of",
    "start": "1085090",
    "end": "1090580"
  },
  {
    "text": "abstractions that look very much like auto-scaling groups and the same AWS CLI and ap is that we all know so well work",
    "start": "1090580",
    "end": "1097629"
  },
  {
    "text": "very well with dcs as well integration with AWS services like cloud watch and",
    "start": "1097629",
    "end": "1103149"
  },
  {
    "text": "elastic load balancing are there as are the usual Python API is like boto",
    "start": "1103149",
    "end": "1108539"
  },
  {
    "text": "next one for us was really crucial enterprise support so we've been working with our AWS enterprise support team for",
    "start": "1108539",
    "end": "1113919"
  },
  {
    "text": "a number of years now they're really great we really value their support so from the business point of view this was",
    "start": "1113919",
    "end": "1120219"
  },
  {
    "text": "extremely important migrating all of our production services to a brand new platform very important for us to have",
    "start": "1120219",
    "end": "1125679"
  },
  {
    "text": "that kind of level of support which we could get from AWS and finally the last bullet point less cluster maintenance so",
    "start": "1125679",
    "end": "1133570"
  },
  {
    "text": "the only cluster maintenance we've had to do with TCS is really updating that base omni for the ec2 instances and of",
    "start": "1133570",
    "end": "1140109"
  },
  {
    "text": "course now with Fargate you don't even have to do that so that's pretty awesome as well our DevOps team some of which",
    "start": "1140109",
    "end": "1146469"
  },
  {
    "text": "are here today also automated a nice solution for us that goes out and retrieves the most recent optimized ECS",
    "start": "1146469",
    "end": "1153070"
  },
  {
    "text": "optimized ami and automatically rolls it through our GCS clusters with zero touch so pretty much we already made far gate",
    "start": "1153070",
    "end": "1160210"
  },
  {
    "text": "before AWS came up with it that was a joke ok so let's move on and have a look",
    "start": "1160210",
    "end": "1166389"
  },
  {
    "text": "at an example of one of the services we run in ECS there's a high-level architecture diagram of our media",
    "start": "1166389",
    "end": "1172869"
  },
  {
    "text": "service so in this example we have a client over here on the left that could",
    "start": "1172869",
    "end": "1178659"
  },
  {
    "text": "be my GoPro camera it could be a mobile device running our app and it's making calls through and alb",
    "start": "1178659",
    "end": "1184719"
  },
  {
    "text": "to an a player serving the API so the",
    "start": "1184719",
    "end": "1190419"
  },
  {
    "text": "client in this example might receive back from the API a signed URL for upload s3 so it could directly",
    "start": "1190419",
    "end": "1195779"
  },
  {
    "text": "load photos or videos to our s3 buckets after the file is uploaded the media",
    "start": "1195779",
    "end": "1200849"
  },
  {
    "text": "service might kick off a job asynchronously to transcode the video it could pull a frame out of the video it",
    "start": "1200849",
    "end": "1207929"
  },
  {
    "text": "could create a thumbnail out of it there's a lot of things we can do with the raw image or video once we get it so",
    "start": "1207929",
    "end": "1214889"
  },
  {
    "text": "in this example this is a pretty classic pattern of just a decoupled asynchronous kind of architecture so all the",
    "start": "1214889",
    "end": "1220679"
  },
  {
    "text": "long-running jobs the worker tasks there are able to complete take the time that they need and meanwhile the client gets",
    "start": "1220679",
    "end": "1227639"
  },
  {
    "text": "a really fast response from the API layer so this allows the workers to just",
    "start": "1227639",
    "end": "1232769"
  },
  {
    "text": "work out of band and still keep very low latency for that client request another",
    "start": "1232769",
    "end": "1239279"
  },
  {
    "text": "crucial point to note here is that both the apt tasks and the worker tasks scale independently so they could be running",
    "start": "1239279",
    "end": "1244619"
  },
  {
    "text": "on the same UCS cluster they could be running on two different UCS clusters with different Hardware under them key",
    "start": "1244619",
    "end": "1249690"
  },
  {
    "text": "point is we want to be able to scale out those workers to meet the actual demand of the moment to keep our SLA low it",
    "start": "1249690",
    "end": "1256859"
  },
  {
    "text": "also knows we're using sqs cues here this is a key part of the decoupled architecture this means that essentially",
    "start": "1256859",
    "end": "1262379"
  },
  {
    "text": "if one of these micro services is down that's okay because the messages are already on the queue we don't have to",
    "start": "1262379",
    "end": "1268440"
  },
  {
    "text": "block and wait for that service to come back up service comes back up looks at the queue and picks up its messages and keeps",
    "start": "1268440",
    "end": "1274080"
  },
  {
    "text": "going alright so as far as our migration",
    "start": "1274080",
    "end": "1281570"
  },
  {
    "text": "I just share with you some of our key learnings from our migration into ECS",
    "start": "1281570",
    "end": "1289249"
  },
  {
    "text": "hopefully this will help make it relatively painless for those of you undertaking this number one are our main",
    "start": "1289249",
    "end": "1297349"
  },
  {
    "text": "paradigms switch here was moving to infrastructure as code so we chose terraform we use terraform for almost",
    "start": "1297349",
    "end": "1303599"
  },
  {
    "text": "everything everything in this whole stack everything from the VP sees all the way up to the task definitions and",
    "start": "1303599",
    "end": "1310169"
  },
  {
    "text": "the scaling parameters every even deployments TECs can be done with either",
    "start": "1310169",
    "end": "1315749"
  },
  {
    "text": "terraform or cloud formation if you like pretty much equivalent you can do the",
    "start": "1315749",
    "end": "1321330"
  },
  {
    "text": "deployments because deploying to UCS is just updating a task definition with a new docker image name",
    "start": "1321330",
    "end": "1328700"
  },
  {
    "text": "some of our learnings with infrastructure as code our DevOps team maintains base modules that implement",
    "start": "1328700",
    "end": "1334860"
  },
  {
    "text": "that stack that you just saw and our development teams just import those base modules they just have to fill in a few",
    "start": "1334860",
    "end": "1341640"
  },
  {
    "text": "key variables like the service name task definition parameters like CPU",
    "start": "1341640",
    "end": "1346920"
  },
  {
    "text": "allocation memory allocation and some of the alarm thresholds that dictate when",
    "start": "1346920",
    "end": "1351929"
  },
  {
    "text": "the service should scale up when it should scale down so for us for our workers we make use almost exclusively",
    "start": "1351929",
    "end": "1358050"
  },
  {
    "text": "of the sqs maximum queue length size as our metric to scale on so this is one of",
    "start": "1358050",
    "end": "1366210"
  },
  {
    "text": "those paradigm shifting things that DevOps is supposed to be doing we're giving more control and more visibility to the development teams no longer do",
    "start": "1366210",
    "end": "1373080"
  },
  {
    "text": "they have to come to an Operations guy and ask about the scaling parameters they can just look right in their code",
    "start": "1373080",
    "end": "1378600"
  },
  {
    "text": "we check the terraform definitions for the infrastructure in with the same application code and get so everybody",
    "start": "1378600",
    "end": "1385320"
  },
  {
    "text": "can read it and some people can write it too next key point released tagging so",
    "start": "1385320",
    "end": "1390840"
  },
  {
    "text": "in moving a container based workloads really important to keep track of your container image versions we want to make",
    "start": "1390840",
    "end": "1397830"
  },
  {
    "text": "sure that an identical tag is applied to both of the git commit to the docker image and to the task itself running in",
    "start": "1397830",
    "end": "1405210"
  },
  {
    "text": "ECS this makes it very easy to track changes all the way through to production operations QA management can",
    "start": "1405210",
    "end": "1412200"
  },
  {
    "text": "look at the console and know exactly what version of code is running so we use something called semantic versioning",
    "start": "1412200",
    "end": "1417960"
  },
  {
    "text": "to do this applies a very nice major minor point release version tag this is",
    "start": "1417960",
    "end": "1425250"
  },
  {
    "text": "also really nice if you're doing Bluegreen deployments because it's easy to see with ETS console which version of the code is deployed where I'm gonna",
    "start": "1425250",
    "end": "1434820"
  },
  {
    "text": "include the slide in the deck I'm not going to go through it in the interest of time you can look it up on SlideShare this details are released tagging flow",
    "start": "1434820",
    "end": "1442050"
  },
  {
    "text": "in some detail and the next one is on our deployment pipeline just some of the",
    "start": "1442050",
    "end": "1449160"
  },
  {
    "text": "technologies we're using here includes API gateway circle CI and github to get",
    "start": "1449160",
    "end": "1455280"
  },
  {
    "text": "our containers deployed into our V pcs and into ETS so check this out on SlideShare if you're",
    "start": "1455280",
    "end": "1462559"
  },
  {
    "text": "skip that one more I'm gonna go back auto-scaling",
    "start": "1464960",
    "end": "1470940"
  },
  {
    "text": "so a few hints on auto scaling so best",
    "start": "1470940",
    "end": "1476370"
  },
  {
    "text": "practices ECS scales the underlying ec2 cluster out when the sum total of the service resource requirements is more",
    "start": "1476370",
    "end": "1483150"
  },
  {
    "text": "than what's available on the cluster I mentioned we use the queue lengths metric to scale for most of our workers",
    "start": "1483150",
    "end": "1488580"
  },
  {
    "text": "and for almost all the web services we just scale on CPU or memory pretty easy the key difference with dcs is you do",
    "start": "1488580",
    "end": "1496200"
  },
  {
    "text": "want to allow those ECS services to scale vert vertically and you want them",
    "start": "1496200",
    "end": "1501990"
  },
  {
    "text": "to be able to scale down as well so this is one thing ECS is missing it was a little bit of a gap so the long-running",
    "start": "1501990",
    "end": "1508080"
  },
  {
    "text": "process is when they need to scale down they can be interrupted if the ec2 instance underneath goes away you might",
    "start": "1508080",
    "end": "1514050"
  },
  {
    "text": "lose some work there so there's a pattern called container instance draining Amazon publishes the best",
    "start": "1514050",
    "end": "1519270"
  },
  {
    "text": "practice reference architecture for this we implemented it it the long the short",
    "start": "1519270",
    "end": "1525540"
  },
  {
    "text": "version of it is you can use lambda to hook into the auto scaling group lifecycle policies this will tell the",
    "start": "1525540",
    "end": "1532530"
  },
  {
    "text": "containers running on the instance that they're about to be killed and give them a grace period before they are actually",
    "start": "1532530",
    "end": "1539070"
  },
  {
    "text": "killed by auto scaling so you just put a little hook in your code you say when I get the certain signal it's time to shut",
    "start": "1539070",
    "end": "1544440"
  },
  {
    "text": "down gracefully and you set a timeout for the apps to gracefully shut down it's a little bit hard to read the URL",
    "start": "1544440",
    "end": "1551640"
  },
  {
    "text": "for the reference architecture is on the bottom there all right",
    "start": "1551640",
    "end": "1557580"
  },
  {
    "text": "a few high-level lessons learned scale",
    "start": "1557580",
    "end": "1563130"
  },
  {
    "text": "up with a little Headroom applications startup time is a factor even if you're running in containers yes containers are",
    "start": "1563130",
    "end": "1568290"
  },
  {
    "text": "small they're lightweight lightweight we found that in many cases we were just container izing existing legacy",
    "start": "1568290",
    "end": "1574410"
  },
  {
    "text": "applications that still means they need to start up they take time to start up so as a best practice we usually scale",
    "start": "1574410",
    "end": "1581160"
  },
  {
    "text": "up twice as fast as we scale down we'll add two instances or four instances when we scale up our tasks rather and we'll",
    "start": "1581160",
    "end": "1588360"
  },
  {
    "text": "scale down much more slowly one task at a time and finally I mentioned this already scaling custom metrics",
    "start": "1588360",
    "end": "1594600"
  },
  {
    "text": "you're not limited to scaling on CPU and memory you can push your own custom",
    "start": "1594600",
    "end": "1599970"
  },
  {
    "text": "metrics you can use queues queue lengths etc the other thing people talk about",
    "start": "1599970",
    "end": "1606390"
  },
  {
    "text": "when they talk about containerization is immutable infrastructure and immutable images so immutable images are good",
    "start": "1606390",
    "end": "1612950"
  },
  {
    "text": "however they don't solve all your problems your application code will definitely still break for example if",
    "start": "1612950",
    "end": "1619920"
  },
  {
    "text": "you pass in the wrong environment config to it an example of this is you're passing in a variable called deploy",
    "start": "1619920",
    "end": "1627360"
  },
  {
    "text": "environments you think it should be production the application is expecting",
    "start": "1627360",
    "end": "1632820"
  },
  {
    "text": "something like a prod and it turns out that logic is correct but it's hard to test that before you actually get to",
    "start": "1632820",
    "end": "1638760"
  },
  {
    "text": "production right so that'll still break your containers even though it's the exact same application code that was",
    "start": "1638760",
    "end": "1643920"
  },
  {
    "text": "running in your pre-production environment and probably goes without saying but application code will still",
    "start": "1643920",
    "end": "1649920"
  },
  {
    "text": "break if there are environmental differences in your actual VPC so if you're going to use infrastructure as",
    "start": "1649920",
    "end": "1655650"
  },
  {
    "text": "code i recommend that it's it's holistic that it's comprehensive and covers your entire environment otherwise it's almost",
    "start": "1655650",
    "end": "1664200"
  },
  {
    "text": "as good as nothing at all okay so the lesson here post-deployment testing and automated rollback I think",
    "start": "1664200",
    "end": "1670680"
  },
  {
    "text": "my final lesson here is around identity and access management so access policies",
    "start": "1670680",
    "end": "1675960"
  },
  {
    "text": "are tough using cloud formation or using terraform anyone that wants to modify",
    "start": "1675960",
    "end": "1683160"
  },
  {
    "text": "the environment using your terraforming cloud formation scripts probably needs wide access to all of all of the",
    "start": "1683160",
    "end": "1690780"
  },
  {
    "text": "different things in your environment s3 buckets could be RDS instances ECS batch etc so",
    "start": "1690780",
    "end": "1697560"
  },
  {
    "text": "this is fine for your administrators it might not be what you want for all of your developers so this is tricky",
    "start": "1697560",
    "end": "1703860"
  },
  {
    "text": "there's a lot of possible solutions to this one that I recommend is just",
    "start": "1703860",
    "end": "1709260"
  },
  {
    "text": "isolate your environments put your production environment in a separate AWS account altogether that is nice",
    "start": "1709260",
    "end": "1715530"
  },
  {
    "text": "isolation that means hopefully no nightmare scenarios running the wrong",
    "start": "1715530",
    "end": "1720900"
  },
  {
    "text": "command all right again towards the end here benefits that we realized included",
    "start": "1720900",
    "end": "1727980"
  },
  {
    "text": "a really simplified deploy pipeline we can deploy any kind of app that we want using the same pipeline as docker eyes containers",
    "start": "1727980",
    "end": "1735059"
  },
  {
    "text": "and we experience very great efficiency",
    "start": "1735059",
    "end": "1741169"
  },
  {
    "text": "increases in our deploy time we were taking 30 minutes to roll out those auto scaling groups in the old days we can",
    "start": "1741169",
    "end": "1747720"
  },
  {
    "text": "deploy two ECS in 30 seconds or less we do that all the time now finally",
    "start": "1747720",
    "end": "1753570"
  },
  {
    "text": "predictability visibility I mentioned most of that promoting docker images",
    "start": "1753570",
    "end": "1759570"
  },
  {
    "text": "from our staging environment to production is now very clear-cut because we're using the same tagging for our",
    "start": "1759570",
    "end": "1766289"
  },
  {
    "text": "images and our get code and our ECS tasks so overall simplified operations so",
    "start": "1766289",
    "end": "1773610"
  },
  {
    "text": "that's about all the time I have thank you all appreciate it",
    "start": "1773610",
    "end": "1778919"
  },
  {
    "text": "and I think I hand it back to Jamie thanks a ton good job",
    "start": "1778919",
    "end": "1785480"
  },
  {
    "text": "okay for the next portion of the talk I'd like to switch gears now and focus",
    "start": "1788020",
    "end": "1793309"
  },
  {
    "text": "on AWS batch so Atos batch had a quick show of hands how many folks have had a chance to kick the tires on the service",
    "start": "1793309",
    "end": "1799790"
  },
  {
    "text": "or looked at that at the service yeah we we launched batch last year at reinvent",
    "start": "1799790",
    "end": "1805250"
  },
  {
    "text": "and we've actually had a number of releases over the past year but before I get into the capabilities of batch I",
    "start": "1805250",
    "end": "1811700"
  },
  {
    "text": "wanted to first talk a little bit about what it is and what was the motivation for creating the service so historically",
    "start": "1811700",
    "end": "1818450"
  },
  {
    "text": "if you were if you were to deploy batch computing infrastructure on premise you would you would start by provisioning a",
    "start": "1818450",
    "end": "1824330"
  },
  {
    "text": "large number of relatively homogenous resources you would pick these the the",
    "start": "1824330",
    "end": "1830090"
  },
  {
    "text": "instance type or the virtual or physical machine size based on the the typical deed of the jobs that you would want to run in your environment and you keep",
    "start": "1830090",
    "end": "1836929"
  },
  {
    "text": "that infrastructure around for for a few years and then and then go through a refresh cycle and in doing so you'd have",
    "start": "1836929",
    "end": "1843620"
  },
  {
    "text": "to kind of shoehorn your jobs as the the requirements for those jobs evolved over that that that multi-year process into",
    "start": "1843620",
    "end": "1849169"
  },
  {
    "text": "fitting into the resources that you've provisioned now obviously the cloud simplifies this but in order to take advantage of things",
    "start": "1849169",
    "end": "1854929"
  },
  {
    "text": "like many instance types and instead have resources compute resources instance types and containers be",
    "start": "1854929",
    "end": "1860780"
  },
  {
    "text": "provisioned in response to the needs of your jobs needed to build a lot of automation you need the stitch together probably bout a",
    "start": "1860780",
    "end": "1866480"
  },
  {
    "text": "dozen different AWS services and so the few folks myself included helped a lot of our customers go through the process",
    "start": "1866480",
    "end": "1873679"
  },
  {
    "text": "of organizing all of these different services building these assembly these building blocks to create a system",
    "start": "1873679",
    "end": "1879679"
  },
  {
    "text": "whereby you could eventually submit your first job to the queue this was taking a lot of our customers a few months just to get to the point of that that first",
    "start": "1879679",
    "end": "1885799"
  },
  {
    "text": "successful job submission and so we wanted to simplify that and offer a fully managed service and so that that",
    "start": "1885799",
    "end": "1892010"
  },
  {
    "text": "was the first tenant or design goal for AWS batch give you a managed service that provides batch computing primitives",
    "start": "1892010",
    "end": "1898010"
  },
  {
    "text": "so you focus on submitting jobs to Hughes let us pick the right resources and run your workloads for you the",
    "start": "1898010",
    "end": "1904070"
  },
  {
    "text": "second thing we wanted to do and and and they even talked about this the importance of being able to specify a",
    "start": "1904070",
    "end": "1909620"
  },
  {
    "text": "role for the for the work that's happening so you have fine-grained permissions you want to make it very easy for your",
    "start": "1909620",
    "end": "1914809"
  },
  {
    "text": "batch processing workloads to make calls to recognition or dynamo or s3 and do so without having to bed",
    "start": "1914809",
    "end": "1920540"
  },
  {
    "text": "denzel's within your applications and so tight integration with with Identity and Access Management was important for us",
    "start": "1920540",
    "end": "1925930"
  },
  {
    "text": "and then thirdly we wanted to help our customers reduce the cost of using AWS for batch processing and so that meant",
    "start": "1925930",
    "end": "1932600"
  },
  {
    "text": "that we wanted to make spot a first-class citizen we wanted to simplify automated retries of workloads",
    "start": "1932600",
    "end": "1939020"
  },
  {
    "text": "in response to just about terminations or other things that might interrupt your work and so we built that into the",
    "start": "1939020",
    "end": "1944480"
  },
  {
    "text": "service - and so what patch does is it gives you a way to submit your jobs which run within a docker container and",
    "start": "1944480",
    "end": "1951530"
  },
  {
    "text": "each of your jobs will have a predetermined to that by you I'm not a CPU and memory that you allocate to",
    "start": "1951530",
    "end": "1957260"
  },
  {
    "text": "those jobs you submit those jobs which are based on a job definition or a template similar to an ECS task",
    "start": "1957260",
    "end": "1962540"
  },
  {
    "text": "definition which tells us the container that you'd like to use the the command you'd like to run within the container",
    "start": "1962540",
    "end": "1968150"
  },
  {
    "text": "environment variables and parameters and things along along those lines including the Identity and Access Management ball and you submit your job to a job queue",
    "start": "1968150",
    "end": "1975500"
  },
  {
    "text": "within your account you could have multiple job queues and these job queues can have a priority relative to each other so for example you might have a",
    "start": "1975500",
    "end": "1982100"
  },
  {
    "text": "production job queue and a development job queue and you might have a job queue specifically for GPU jobs that that's",
    "start": "1982100",
    "end": "1988400"
  },
  {
    "text": "really optimized in terms of what resources it has access to and mapped to",
    "start": "1988400",
    "end": "1993560"
  },
  {
    "text": "these job queues is something called a compute environment the compute environment is a logical set of rules where you tell us how big and how small",
    "start": "1993560",
    "end": "1999530"
  },
  {
    "text": "yam envy CPU is equals zero max V CPUs equals 10,000 and you tell us the",
    "start": "1999530",
    "end": "2005080"
  },
  {
    "text": "instance types that you'd like us to be able to choose from and it can be very prescriptive and say use P three instances or P three extra large or be",
    "start": "2005080",
    "end": "2013060"
  },
  {
    "text": "as general as optimal and we'll pick from any of the CM or our instance families and then you map these compute",
    "start": "2013060",
    "end": "2018760"
  },
  {
    "text": "environments I'm also specifying whether you want us to use on-demand or spot to your job queues and then we will",
    "start": "2018760",
    "end": "2025440"
  },
  {
    "text": "provision resources we'll choose from the range of instance types that are available that you've given us permission to launch on your behalf and",
    "start": "2025440",
    "end": "2031810"
  },
  {
    "text": "launch the right quantity and the right distribution of instance types based on the needs of the jobs that are running",
    "start": "2031810",
    "end": "2037390"
  },
  {
    "text": "or are ready to run and well we'll launch those instances very quickly especially with per second billing and",
    "start": "2037390",
    "end": "2044140"
  },
  {
    "text": "then as your work finishes if there's no more jobs if there are no more jobs I can take advantage of that already launched instance will very quickly turn",
    "start": "2044140",
    "end": "2050409"
  },
  {
    "text": "it off for you typically within a minute or two of the the job finishing if not sooner and then the",
    "start": "2050410",
    "end": "2056480"
  },
  {
    "text": "aw patch scheduler is the part of a TBS batch that's responsible for sequencing",
    "start": "2056480",
    "end": "2061760"
  },
  {
    "text": "your jobs and making sure that we're running jobs in your high priority queue before jobs in the low priority queue if they have a common set of compute",
    "start": "2061760",
    "end": "2068240"
  },
  {
    "text": "resources that they're contending for making sure that if you have multiple jobs a B and C such that C depends on B",
    "start": "2068240",
    "end": "2075020"
  },
  {
    "text": "B depends on a that we run those in the right order and that if a fails we don't try to run B and C and said we let you",
    "start": "2075020",
    "end": "2081020"
  },
  {
    "text": "go fix that and make sure that you're notified that there's been a failure so that you can correct that issue so now",
    "start": "2081020",
    "end": "2086510"
  },
  {
    "text": "talking about a little bit about what's happened since this time last year so when we launched batch we had one region",
    "start": "2086510",
    "end": "2092360"
  },
  {
    "text": "we supported us east one we're now in nine regions around the world and in early 2018 you can expect that we'll be",
    "start": "2092360",
    "end": "2098870"
  },
  {
    "text": "in the remaining regions that we don't yet support today that includes the the commercial regions that we aren't",
    "start": "2098870",
    "end": "2104030"
  },
  {
    "text": "covering as well as AG of cloud and some of the other non-public regions we added",
    "start": "2104030",
    "end": "2109970"
  },
  {
    "text": "support for custom machine images so by default we'll use the e CS optimized machine image but if you'd like you can",
    "start": "2109970",
    "end": "2116180"
  },
  {
    "text": "use your own machine image and we'll launch many instances based on that machine image and so that's useful if",
    "start": "2116180",
    "end": "2121970"
  },
  {
    "text": "you want to auto mount elastic file systems so that you could have that file system be mounted as slash data or slash",
    "start": "2121970",
    "end": "2127460"
  },
  {
    "text": "input or output in your in your container instances as your job is running gives you the ability to easily run an FPGA",
    "start": "2127460",
    "end": "2133010"
  },
  {
    "text": "or GPU accelerated workloads it also allows you to provision storage and in a",
    "start": "2133010",
    "end": "2139010"
  },
  {
    "text": "way that's more optimal for the type of work that you're running maybe moving with to larger or faster or different",
    "start": "2139010",
    "end": "2144110"
  },
  {
    "text": "types of EBS volumes we added support for the new instance types as they've launched c5 support launched on Tuesday",
    "start": "2144110",
    "end": "2151160"
  },
  {
    "text": "and fives coming very soon and then in response to per second building instead of more gradually scaling up instances",
    "start": "2151160",
    "end": "2158630"
  },
  {
    "text": "because we didn't know yet how long your jobs might run and we would wait and see okay are these resources fully utilized",
    "start": "2158630",
    "end": "2164330"
  },
  {
    "text": "or are they gonna be sitting idle we used a whole lot of instances for the majority of your building our in case additional work arrived but with the",
    "start": "2164330",
    "end": "2171440"
  },
  {
    "text": "transition to per second billing what we can do now is immediately go to eleven when you you give us a ton of jobs you",
    "start": "2171440",
    "end": "2177110"
  },
  {
    "text": "submit 10,000 jobs a hundred thousand jobs and you've given us max B CPUs in your computer Biman set to a reasonably",
    "start": "2177110",
    "end": "2183860"
  },
  {
    "text": "high value we will scale up as as high as we need to go to run as many those jobs concurrently as we can and",
    "start": "2183860",
    "end": "2189059"
  },
  {
    "text": "then once the work finishes we'll scale back down to min V CPUs ideally zero and it's what most of our users specify for",
    "start": "2189059",
    "end": "2196710"
  },
  {
    "text": "that particular parameter and then we added support for tagging of spot instances manageability and performance",
    "start": "2196710",
    "end": "2203039"
  },
  {
    "text": "features we're really important for our end users and so we added the ability to automatically retry jobs if you have a",
    "start": "2203039",
    "end": "2209250"
  },
  {
    "text": "spot termination or if your application has a non zero of x''x code failure we",
    "start": "2209250",
    "end": "2214589"
  },
  {
    "text": "can automatically retry your job up to the number of times that you specify when you submit the job well maybe your job back to the head of the queue and",
    "start": "2214589",
    "end": "2220559"
  },
  {
    "text": "we'll run it on the next available instance either one that already exists or one that we launched to replace a",
    "start": "2220559",
    "end": "2225660"
  },
  {
    "text": "failed ec2 instance when we initially launched AWS batch we designed it to",
    "start": "2225660",
    "end": "2231720"
  },
  {
    "text": "support jobs that lasted for fifteen minutes or longer and on day one we had a ton of users that were running jobs",
    "start": "2231720",
    "end": "2237390"
  },
  {
    "text": "that lasted for a fraction of a second and in order to handle resource provisioning and make sure that we're",
    "start": "2237390",
    "end": "2243030"
  },
  {
    "text": "getting the highest possible utilization of your compute resources you take very different approaches with long-running versus short running jobs and so we've",
    "start": "2243030",
    "end": "2250230"
  },
  {
    "text": "done a lot of work over the past year to ensure that we can just as easily run to second or five second long jobs in in",
    "start": "2250230",
    "end": "2257190"
  },
  {
    "text": "order to in a way that that gets you 90 percent or higher utilization of your underlying compute resources we've added",
    "start": "2257190",
    "end": "2263819"
  },
  {
    "text": "support to batch in cloud formation terraform also supports AWS patch and a",
    "start": "2263819",
    "end": "2269430"
  },
  {
    "text": "very recent an important launch is the ability to use a ventra VIN architecture so as your jobs transition from one",
    "start": "2269430",
    "end": "2275970"
  },
  {
    "text": "state to another from submitted to pending to runnable starting running etc we now emit cloud watch events as at",
    "start": "2275970",
    "end": "2282930"
  },
  {
    "text": "each of those state transitions so that you can track and set up filters and and understand that a job based on a",
    "start": "2282930",
    "end": "2288900"
  },
  {
    "text": "particular job definition just failed with a following reason and automatically handle that in a way",
    "start": "2288900",
    "end": "2294150"
  },
  {
    "text": "that's different from jobs that have succeeded added support for HIPAA compliant workloads and an area that",
    "start": "2294150",
    "end": "2302220"
  },
  {
    "text": "we've seen very recent innovation is around workflows and pipelines and submission of jobs that have a large",
    "start": "2302220",
    "end": "2308369"
  },
  {
    "text": "number of copies so when we designed the service we originally designed it in a way that we didn't wanna be too",
    "start": "2308369",
    "end": "2313890"
  },
  {
    "text": "opinionated about how workflows would would operate so if you want to tell us about the dependencies of your jobs you",
    "start": "2313890",
    "end": "2319529"
  },
  {
    "text": "can do that you can submit job a B and see and tell us the relationship that exists between these jobs or if you",
    "start": "2319529",
    "end": "2325499"
  },
  {
    "text": "prefer you could use a workflow system maybe it's step functions or airflow or Luigi or Pegasus or a number of other",
    "start": "2325499",
    "end": "2331499"
  },
  {
    "text": "commercial and open source workflow systems and instead have them submit a job to batch listen for the success or",
    "start": "2331499",
    "end": "2338880"
  },
  {
    "text": "the failure of that job and then proceed to the next stage in your workflow both of those models work equally well within a TBS and you can combine them too for",
    "start": "2338880",
    "end": "2346019"
  },
  {
    "text": "those of you who'd like to integrate step functions at AWS batch we have a reference architecture the links here to",
    "start": "2346019",
    "end": "2352739"
  },
  {
    "text": "the to the github repo and in the readme file that github repo we have links to the forepart blog post that walk you",
    "start": "2352739",
    "end": "2358289"
  },
  {
    "text": "through an architecture that you can see here that that shows how you would use",
    "start": "2358289",
    "end": "2364229"
  },
  {
    "text": "step functions in this case to submit jobs to be a Spach through an AWS lambda",
    "start": "2364229",
    "end": "2370440"
  },
  {
    "text": "function using a template that we have in the lambda console your jobs of course running images stored in ECR or",
    "start": "2370440",
    "end": "2376440"
  },
  {
    "text": "docker hub or your own private repo and your jobs can of course interact with services like s3 now a feature that we",
    "start": "2376440",
    "end": "2383309"
  },
  {
    "text": "just added on Tuesday is array jobs and array jobs or the ability to submit not",
    "start": "2383309",
    "end": "2388799"
  },
  {
    "text": "just one job but many copies of a job with a single API call so initially we support submitting jobs that have 10,000",
    "start": "2388799",
    "end": "2395670"
  },
  {
    "text": "copies or up to 10,000 copies will be increasing that pretty quickly and you could use this for example to have a job",
    "start": "2395670",
    "end": "2402569"
  },
  {
    "text": "that's running the same command maybe it's a transcoding job against a thousand objects that reside in an s3",
    "start": "2402569",
    "end": "2408839"
  },
  {
    "text": "bucket each copy of the job will be identical in the command the the CPU the docker image is using the the memory",
    "start": "2408839",
    "end": "2414749"
  },
  {
    "text": "that we allocate to it and we'll give you an extra environment variable that tells you the index within that array for that particular child within the job",
    "start": "2414749",
    "end": "2421619"
  },
  {
    "text": "will manage the degree of concurrency of execution for you and then each of those jobs can can perform they're part of a",
    "start": "2421619",
    "end": "2428549"
  },
  {
    "text": "much larger piece of work that needs to be done with this we're also updating that the dependency model between jobs",
    "start": "2428549",
    "end": "2434489"
  },
  {
    "text": "so you can express in this case of job a job B with many copies and job C that",
    "start": "2434489",
    "end": "2440489"
  },
  {
    "text": "job B is dependent upon job a and that job C should only be started once all elements of job B have completed",
    "start": "2440489",
    "end": "2446519"
  },
  {
    "text": "successfully we've added the support to the console and you'll see that for example we have different dependency",
    "start": "2446519",
    "end": "2452819"
  },
  {
    "text": "models like end to end dependencies which we'll get into just a moment this is the syntax fairly",
    "start": "2452819",
    "end": "2458240"
  },
  {
    "text": "straightforward actually the the big changes around array properties and telling us the size of the array job in",
    "start": "2458240",
    "end": "2464810"
  },
  {
    "text": "this case we're submitting a 10,000 wide array job and every child job will have the same job ID with an additional feel",
    "start": "2464810",
    "end": "2472700"
  },
  {
    "text": ": 0 through 99999 in this case this is",
    "start": "2472700",
    "end": "2478310"
  },
  {
    "text": "how you would submit jobs with with different dependencies between arrays and non array jobs we have an array job",
    "start": "2478310",
    "end": "2483500"
  },
  {
    "text": "a once all of the elements have been completed by expressing a dependency on the the parent job ID you'll be able to",
    "start": "2483500",
    "end": "2489620"
  },
  {
    "text": "then proceed to job B if you call describe jobs on an array job with 10,000 copies you'll be able to see a",
    "start": "2489620",
    "end": "2496310"
  },
  {
    "text": "summary of how many of the children are in each status how many of these are in a pending state how many rentable how",
    "start": "2496310",
    "end": "2501800"
  },
  {
    "text": "many have succeeded how many have failed and then you can call describe jobs on individual child elements within that",
    "start": "2501800",
    "end": "2507500"
  },
  {
    "text": "that broader array job you can also use the list jobs API to to get a listing of all the jobs in a particular state in",
    "start": "2507500",
    "end": "2513710"
  },
  {
    "text": "this case we have an array job that depends on an on or a job you can also have a really interesting model which is",
    "start": "2513710",
    "end": "2519140"
  },
  {
    "text": "the end-to-end dependency model so say you have a processing pipeline maybe it's an image processing pipeline where",
    "start": "2519140",
    "end": "2526070"
  },
  {
    "text": "the first stage you need to be first validate that the the file wasn't corrupted in transit maybe the the",
    "start": "2526070",
    "end": "2531590"
  },
  {
    "text": "second stage is to do a rectilinear correction and the third stage you're going to make recognition calls or or",
    "start": "2531590",
    "end": "2537680"
  },
  {
    "text": "try to do some computer vision analysis of this you could easily submit that and process 10,000 images by just making 3",
    "start": "2537680",
    "end": "2545120"
  },
  {
    "text": "API calls one for each of those different commands so you'd like to operate and in doing so by expressing an",
    "start": "2545120",
    "end": "2551510"
  },
  {
    "text": "end-to-end dependency as element 42 of job a completes then element 42 of job B",
    "start": "2551510",
    "end": "2557870"
  },
  {
    "text": "will be considered rentable we can proceed on to that even if there's some stragglers in job a if you have a",
    "start": "2557870",
    "end": "2564110"
  },
  {
    "text": "sequential processing you can express a sequential relationship between the",
    "start": "2564110",
    "end": "2569180"
  },
  {
    "text": "elements within a single array job will process element 0 then 1 then 2 and 3 and so forth",
    "start": "2569180",
    "end": "2574550"
  },
  {
    "text": "and you can express dependencies on individual elements of an array job 37 and 42 only once those have completed",
    "start": "2574550",
    "end": "2580580"
  },
  {
    "text": "then move on to the to the next stage and this becomes really useful when you",
    "start": "2580580",
    "end": "2586190"
  },
  {
    "text": "have pipelines where each stage is not only running in command but might also require different CPU or memory or GPU or FPGA",
    "start": "2586190",
    "end": "2593289"
  },
  {
    "text": "configurations and so in this model as we complete job a the initial setup job",
    "start": "2593289",
    "end": "2599269"
  },
  {
    "text": "and we proceed to a network i/o intensive job will run those on what instance type and maybe the second stage",
    "start": "2599269",
    "end": "2604839"
  },
  {
    "text": "will start to scale down these instances as quickly as this work is completed and then move on to a c5 instance to run",
    "start": "2604839",
    "end": "2610940"
  },
  {
    "text": "these workloads and then maybe we'll move on to an m5 or it or an hour for instance and before we have our final",
    "start": "2610940",
    "end": "2618049"
  },
  {
    "text": "cleanup tasks and in doing so you you can submit these workloads without having to tell us which instance type",
    "start": "2618049",
    "end": "2623660"
  },
  {
    "text": "your job is running on well we'll pick all of that for you if you want us to of course have the ability to tell us the",
    "start": "2623660",
    "end": "2628700"
  },
  {
    "text": "instance types if you prefer that so just summarizing with that with the",
    "start": "2628700",
    "end": "2633950"
  },
  {
    "text": "the roadmap and what you can expect from us going forward so we've invested heavily in our web development team for",
    "start": "2633950",
    "end": "2640249"
  },
  {
    "text": "the a dispatch console so in addition to having a parody with the api's for a TBS batch we're going to be adding a number",
    "start": "2640249",
    "end": "2646880"
  },
  {
    "text": "of capabilities that give you additional telemetry the ability to see more holistically what's happening and your job queues and your compute environments",
    "start": "2646880",
    "end": "2653239"
  },
  {
    "text": "adding a number of other capabilities making the console far easier to use we're going to give you the ability to",
    "start": "2653239",
    "end": "2658759"
  },
  {
    "text": "have the other half of event urban architectures the ability to automatically submit a job to AWS batch",
    "start": "2658759",
    "end": "2664309"
  },
  {
    "text": "to a particular job queue using a pre-selected job definition when events matching a particular cloud a particular",
    "start": "2664309",
    "end": "2671239"
  },
  {
    "text": "filter are emitted to cloud watch so for example object arrives in s3",
    "start": "2671239",
    "end": "2676359"
  },
  {
    "text": "automatically submit a job to production queue running the the image processing",
    "start": "2676359",
    "end": "2681710"
  },
  {
    "text": "command or image processing job definition we will also be extending a",
    "start": "2681710",
    "end": "2688700"
  },
  {
    "text": "batch to support cloud trail auditing of our api's we already support cloud trail auditing of the underlying services that",
    "start": "2688700",
    "end": "2694220"
  },
  {
    "text": "we manage on your behalf and consumable resources a super interesting feature if",
    "start": "2694220",
    "end": "2699380"
  },
  {
    "text": "you're using if you're running jobs that have a dependency on license software or",
    "start": "2699380",
    "end": "2704809"
  },
  {
    "text": "if you have jobs that are you have thousands of compute resources at your disposal but you have jobs that might be",
    "start": "2704809",
    "end": "2710989"
  },
  {
    "text": "connecting to a database that can only handle so many connections so the consumable resource feature will allow you to specify an integer that",
    "start": "2710989",
    "end": "2717950"
  },
  {
    "text": "corresponds to the maximum number of jobs that can run at any given time that have a dependency on this consumable resource as we start the job",
    "start": "2717950",
    "end": "2725170"
  },
  {
    "text": "we decrement as we finish the job we increment that consumable resource and make sure that we don't start your job",
    "start": "2725170",
    "end": "2730359"
  },
  {
    "text": "until until that resource is available and that we don't waste any compute resources needlessly trying to run jobs",
    "start": "2730359",
    "end": "2736839"
  },
  {
    "text": "that are never going to be able to succeed we'll be moving to support multi node parallel jobs so give MPI",
    "start": "2736839",
    "end": "2742150"
  },
  {
    "text": "applications you'd like us to provision a cluster and run your job across many machines with low latency high bandwidth",
    "start": "2742150",
    "end": "2747519"
  },
  {
    "text": "connectivity between those instances that'll be coming to batch very soon and finally we'll finish out the regional",
    "start": "2747519",
    "end": "2753910"
  },
  {
    "text": "expansion so sharing a couple of links which you can you can see if you look at the slides on SlideShare let you quickly",
    "start": "2753910",
    "end": "2760089"
  },
  {
    "text": "take a picture if you like and then I'd like to hand things off to Lee from from here to talk about how here is using a",
    "start": "2760089",
    "end": "2767289"
  },
  {
    "text": "TBS batch for their autonomous driving systems thank you",
    "start": "2767289",
    "end": "2771690"
  },
  {
    "text": "[Applause] thanks Jamie my name is Lee Baker I'm a",
    "start": "2773400",
    "end": "2779369"
  },
  {
    "text": "senior architect with the highly automated driving division for here technologies now a lot",
    "start": "2779369",
    "end": "2786480"
  },
  {
    "text": "of people may not know who we are but",
    "start": "2786480",
    "end": "2791599"
  },
  {
    "text": "odds are you interact with our products quite often four out of five in vehicle",
    "start": "2791599",
    "end": "2798270"
  },
  {
    "text": "navigation systems use our maps and we generate this map data we have four",
    "start": "2798270",
    "end": "2805680"
  },
  {
    "text": "hundred cars around the world driving around collecting high-resolution imagery GPS lidar etc",
    "start": "2805680",
    "end": "2814849"
  },
  {
    "text": "and that generates 28 terabytes of of map data per day so we provide a lot of",
    "start": "2814849",
    "end": "2824849"
  },
  {
    "text": "products to a lot of different companies in a lot of different industries with",
    "start": "2824849",
    "end": "2830190"
  },
  {
    "text": "the one common thread being location in fact we just launched the open location",
    "start": "2830190",
    "end": "2837660"
  },
  {
    "text": "platform to to to some customers and it",
    "start": "2837660",
    "end": "2842730"
  },
  {
    "text": "will be it will be opened coming soon so if you're interested in that check it",
    "start": "2842730",
    "end": "2848010"
  },
  {
    "text": "out here calm ok so the use case I want to talk to you today about is occupancy",
    "start": "2848010",
    "end": "2854880"
  },
  {
    "text": "grid now at a high level what we do is translate a lidar point cloud into",
    "start": "2854880",
    "end": "2862200"
  },
  {
    "text": "what's called an occupancy grid and as you can see the the purple cubes that is",
    "start": "2862200",
    "end": "2868170"
  },
  {
    "text": "the Aachen secret that it indicates when something is occupying that space and",
    "start": "2868170",
    "end": "2875720"
  },
  {
    "text": "this is very useful for self-driving cars for obvious reasons so they don't",
    "start": "2875720",
    "end": "2881310"
  },
  {
    "text": "run into things so we had to create a pipeline for this and basically how this",
    "start": "2881310",
    "end": "2889470"
  },
  {
    "text": "goes is a customer submits a route or many routes but a route is then",
    "start": "2889470",
    "end": "2894750"
  },
  {
    "text": "partitioned into equal sizes and we can process each of those in parallel so",
    "start": "2894750",
    "end": "2901349"
  },
  {
    "text": "this is kind of an embarrassingly parallel problem some of the",
    "start": "2901349",
    "end": "2907230"
  },
  {
    "text": "requirements we had is a one-month deadline the previous architecture just wasn't scaling and",
    "start": "2907230",
    "end": "2913950"
  },
  {
    "text": "they came to us and they had one month until the first customer deliverable we",
    "start": "2913950",
    "end": "2921390"
  },
  {
    "text": "also we didn't want a hamper research or productivity we wanted to get everything",
    "start": "2921390",
    "end": "2926760"
  },
  {
    "text": "out of their way so they can just focus on developing the algorithm we also wanted to make it generic for other",
    "start": "2926760",
    "end": "2933090"
  },
  {
    "text": "teams occupancy grid is pretty typical of the workloads we run so if this",
    "start": "2933090",
    "end": "2941010"
  },
  {
    "text": "worked well we could apply this to other projects we needed to support many",
    "start": "2941010",
    "end": "2947940"
  },
  {
    "text": "different languages occupancy grid is C++ we run a lot of Scala a lot of",
    "start": "2947940",
    "end": "2954750"
  },
  {
    "text": "Python some Java some go I'm sure there's other languages I'm not even",
    "start": "2954750",
    "end": "2959940"
  },
  {
    "text": "aware we're using around the company and then of course we wanted it to auto",
    "start": "2959940",
    "end": "2965250"
  },
  {
    "text": "scale so this this is a very bursty workload customers will submit many",
    "start": "2965250",
    "end": "2975000"
  },
  {
    "text": "routes at once these will need to be turned around very quickly sometimes within a day and then maybe it's idle",
    "start": "2975000",
    "end": "2982410"
  },
  {
    "text": "for a few days until we get the next batch so we didn't want to pay for idle capacity obviously scale down to zero in",
    "start": "2982410",
    "end": "2990810"
  },
  {
    "text": "the minimal care and feeding we wanted to be able to just hand this off have it just work without a whole lot of",
    "start": "2990810",
    "end": "2996930"
  },
  {
    "text": "centralized infrastructure and really minimize the things that could go wrong so one common question we have is why",
    "start": "2996930",
    "end": "3004880"
  },
  {
    "text": "isn't this on a deep learning framework well deep learning frameworks are actually better for structured data like",
    "start": "3004880",
    "end": "3012410"
  },
  {
    "text": "images lidar point clouds are unstructured so it just it's not a good",
    "start": "3012410",
    "end": "3018770"
  },
  {
    "text": "fit as of now they're working they're working on that but but for now it",
    "start": "3018770",
    "end": "3024290"
  },
  {
    "text": "doesn't work but more importantly it was the researchers decision we don't want to impose anything so also spark spark",
    "start": "3024290",
    "end": "3031670"
  },
  {
    "text": "really shines at parallel processing spark doesn't have native C++ support",
    "start": "3031670",
    "end": "3037760"
  },
  {
    "text": "though you can use the pipe operator and make",
    "start": "3037760",
    "end": "3044200"
  },
  {
    "text": "it work that way but you quickly run into memory issues because sparks not",
    "start": "3044200",
    "end": "3049240"
  },
  {
    "text": "aware of what's going on in that process so we ruled that out so containers are the logical way to go",
    "start": "3049240",
    "end": "3055390"
  },
  {
    "text": "so we looked at ECS just kind of vanilla UCS and ECS is great but you still need",
    "start": "3055390",
    "end": "3064990"
  },
  {
    "text": "to deal with manual auto scaling tuning instance type optimization so you if you",
    "start": "3064990",
    "end": "3072820"
  },
  {
    "text": "have varying if you have jobs of varying sizes you end up having to kind of pick the largest instance so that your jobs",
    "start": "3072820",
    "end": "3080200"
  },
  {
    "text": "won't fail and queue management we still would have had to solve that problem as well so we kept looking kubernetes was",
    "start": "3080200",
    "end": "3088870"
  },
  {
    "text": "another thing simply we didn't have the team experience and felt it would be too risky with such a tight timeline so we",
    "start": "3088870",
    "end": "3097060"
  },
  {
    "text": "were aware of batch and decided to give it a try and this is what we came up",
    "start": "3097060",
    "end": "3102700"
  },
  {
    "text": "with I really struggled with the set with this slide because it's so simple",
    "start": "3102700",
    "end": "3107830"
  },
  {
    "text": "but I think that actually kind of illustrates how easy it was for us so",
    "start": "3107830",
    "end": "3113950"
  },
  {
    "text": "the operator submits all the jobs onto the batch queue and batch handles the",
    "start": "3113950",
    "end": "3120490"
  },
  {
    "text": "rest so we use a managed batch compute environment it picks the instance types",
    "start": "3120490",
    "end": "3127240"
  },
  {
    "text": "and best for our resource requirements and it actually it actually learns and",
    "start": "3127240",
    "end": "3136060"
  },
  {
    "text": "gets better over time so we did run into some some challenges",
    "start": "3136060",
    "end": "3142290"
  },
  {
    "text": "but luckily we had Tom who helped us out with all those he's gonna walk you",
    "start": "3142290",
    "end": "3148480"
  },
  {
    "text": "through this",
    "start": "3148480",
    "end": "3150690"
  },
  {
    "text": "no okay yeah so let's just talk a little bit about some of the things that were a challenge I'm a solution architect so I",
    "start": "3155819",
    "end": "3162430"
  },
  {
    "text": "get to really get into the into the weeds with the customer and actually",
    "start": "3162430",
    "end": "3167500"
  },
  {
    "text": "here I've been with for almost two years now so lots of different types of projects lots of things going on this",
    "start": "3167500",
    "end": "3173589"
  },
  {
    "text": "one was really fun the story kind of starts early this calendar year and it starts with a data scientist just asking",
    "start": "3173589",
    "end": "3179680"
  },
  {
    "text": "how do we make this easy right I really want the simplicity of I'm gonna write my algorithm on my machine and then I",
    "start": "3179680",
    "end": "3186339"
  },
  {
    "text": "just wanted to hit a button and it just all runs and leaves doing a lot of work gathering those requirements understanding the different services and",
    "start": "3186339",
    "end": "3192970"
  },
  {
    "text": "I'm on the back end trying to work with our different teams and make sure they're making the right decision now",
    "start": "3192970",
    "end": "3198280"
  },
  {
    "text": "along the way we had some some I mean I won't say it false starts I'll just say",
    "start": "3198280",
    "end": "3205030"
  },
  {
    "text": "you learn by doing right you go in and you you feel it out and try to see if it",
    "start": "3205030",
    "end": "3210160"
  },
  {
    "text": "fits exactly what you're trying to accomplish so the the big one was orchestration we spent a lot of time on",
    "start": "3210160",
    "end": "3216220"
  },
  {
    "text": "this we did different pocs we saw some things that were successful in some things that",
    "start": "3216220",
    "end": "3221950"
  },
  {
    "text": "weren't the one thing this this concept of array jobs and please keep this in mind right the the we talked about",
    "start": "3221950",
    "end": "3227380"
  },
  {
    "text": "earlier the only constant is change so a lot of the things that you're gonna deal with our appoint time decision-making",
    "start": "3227380",
    "end": "3232900"
  },
  {
    "text": "and at this time array jobs wasn't an available feature so I mean we'll continue to reassess but right now at",
    "start": "3232900",
    "end": "3240549"
  },
  {
    "text": "early this year you could really only set up 20 dependencies on the jobs and they were thinking they wanted to scale",
    "start": "3240549",
    "end": "3246849"
  },
  {
    "text": "this to thousands and thousands we were orders of magnitude out of out of balance here so we had to come up with",
    "start": "3246849",
    "end": "3252240"
  },
  {
    "text": "some better way to orchestrate the the scale at the fan out and fan in of their",
    "start": "3252240",
    "end": "3257740"
  },
  {
    "text": "pipeline so spark was an option that was considered the the spark kind of felt a",
    "start": "3257740",
    "end": "3263980"
  },
  {
    "text": "little bit like overkill and it had some of those limitations that Lee mentioned like not be able to run the C++ native",
    "start": "3263980",
    "end": "3270520"
  },
  {
    "text": "stuff so that was kind of whacked out the the step functions project was",
    "start": "3270520",
    "end": "3276369"
  },
  {
    "text": "really interesting because we took step functions and ran lambda shims on top of you know executing batch processes and",
    "start": "3276369",
    "end": "3283599"
  },
  {
    "text": "then you know you'd have to build kind of a lot of these polar to check and this is again before you",
    "start": "3283599",
    "end": "3289119"
  },
  {
    "text": "had these wired up events that now can come through and actually rehydrate and",
    "start": "3289119",
    "end": "3294760"
  },
  {
    "text": "keep the keep the pipelines running so it just didn't feel it felt like the custom activities and and the amount of",
    "start": "3294760",
    "end": "3300970"
  },
  {
    "text": "kind of work that was necessary to orchestrate these jobs was too cumbersome and then airflow ends up",
    "start": "3300970",
    "end": "3306700"
  },
  {
    "text": "being very very nice tight fit to what they were doing and they're they're continuing to use that today so that was",
    "start": "3306700",
    "end": "3313030"
  },
  {
    "text": "orchestration it's like you know the batch service the architecture diagram that Lee showed is is really simple like",
    "start": "3313030",
    "end": "3318579"
  },
  {
    "text": "dropping them on there is is and watching its scale and manage the resources all those were outside like no",
    "start": "3318579",
    "end": "3324250"
  },
  {
    "text": "longer a problem area but just driving it from from start to finish and tracking it was something that still had",
    "start": "3324250",
    "end": "3330460"
  },
  {
    "text": "to be solved and they did that with with their flow so then the other big one is like the the data scientists didn't want",
    "start": "3330460",
    "end": "3337180"
  },
  {
    "text": "to write as three code they don't want to have to you know have a completely sort of different mechanism for storing",
    "start": "3337180",
    "end": "3343990"
  },
  {
    "text": "input and output data they wanted to be able to run it and then just like I said move it hit a button and just go so how",
    "start": "3343990",
    "end": "3350290"
  },
  {
    "text": "are we gonna accomplish that well the first idea was let's just include libraries and data all alright they're",
    "start": "3350290",
    "end": "3358390"
  },
  {
    "text": "packaged but it in the image it just got to the point where you know every time",
    "start": "3358390",
    "end": "3363490"
  },
  {
    "text": "data was changing you had a new image the versioning was was problematic similar here with a base docker image",
    "start": "3363490",
    "end": "3370510"
  },
  {
    "text": "was another attempt that also became too difficult to manage all of the different",
    "start": "3370510",
    "end": "3376329"
  },
  {
    "text": "versioning and maintenance there was flexibility issues and and it was risky and that you know that that base that",
    "start": "3376329",
    "end": "3381790"
  },
  {
    "text": "base image was wasn't gonna be potentially a problem and then EFS because now we've got this idea of a",
    "start": "3381790",
    "end": "3388420"
  },
  {
    "text": "shared state it's not like you have to rewrite the code it's just like normal the normal same semantics of accessing",
    "start": "3388420",
    "end": "3394750"
  },
  {
    "text": "the data and writing the data the challenge with with EFS was that we we kind of had a difficult time running",
    "start": "3394750",
    "end": "3401859"
  },
  {
    "text": "long sustain jobs and and at that point we're really there was no way to get like your EBS volume a PI ops model",
    "start": "3401859",
    "end": "3409660"
  },
  {
    "text": "right so you kind of had to know and this data is very transient so we sort of show up and if you know EFS the the",
    "start": "3409660",
    "end": "3415720"
  },
  {
    "text": "elastic file system it gives you the performance based on the size right so you kind of had to",
    "start": "3415720",
    "end": "3421390"
  },
  {
    "text": "go in and do a lot it you had to do a lot of manipulating it to get it to the performance levels that they were",
    "start": "3421390",
    "end": "3427000"
  },
  {
    "text": "looking for so in the end it ends up being a runner model container that has",
    "start": "3427000",
    "end": "3432880"
  },
  {
    "text": "secondary containers so that docker and you know could spin up secondary containers and link those reference",
    "start": "3432880",
    "end": "3439930"
  },
  {
    "text": "those and now the data is separate and so that just ends up being part of the architecture of what they included in",
    "start": "3439930",
    "end": "3446200"
  },
  {
    "text": "their application a couple of other small challenges just the storage like auto scaling EBS volumes so you kind of",
    "start": "3446200",
    "end": "3452470"
  },
  {
    "text": "similar to the the scenario described where you got to have the largest instance you kind of have to think about",
    "start": "3452470",
    "end": "3457570"
  },
  {
    "text": "having the largest amount of data available for a varying levels of potential ingest so that's it that's a",
    "start": "3457570",
    "end": "3464890"
  },
  {
    "text": "bit of a challenge so right now it's it's over scaled and we're gonna work on coming up with some ways to fix that so",
    "start": "3464890",
    "end": "3472210"
  },
  {
    "text": "that it's a little bit better from a cost perspective and then manage versus unmanaged compute environments you",
    "start": "3472210",
    "end": "3477940"
  },
  {
    "text": "really want to make sure you let Jamie's team do their thing with their software and and scale that down to zero you know",
    "start": "3477940",
    "end": "3484810"
  },
  {
    "text": "it can be can very easily and quickly be out of bounds from a cost profile",
    "start": "3484810",
    "end": "3490990"
  },
  {
    "text": "perspective if you don't set that up to to go ahead and auto manage so you won't",
    "start": "3490990",
    "end": "3496240"
  },
  {
    "text": "talk about next steps or no all right so now so like you said array jobs it was",
    "start": "3496240",
    "end": "3501460"
  },
  {
    "text": "actually Jamie came out and talked to them in Chicago the whole team they were really excited about array jobs and",
    "start": "3501460",
    "end": "3506500"
  },
  {
    "text": "continued to be excited about array job so will will be looking at that you know going into early next year and there's a",
    "start": "3506500",
    "end": "3513100"
  },
  {
    "text": "lot of other projects so there's definitely more opportunity to keep building this I have actually met with",
    "start": "3513100",
    "end": "3518620"
  },
  {
    "text": "quite a few other teams that are building similar concepts adhere and and this model that they've got is really",
    "start": "3518620",
    "end": "3524500"
  },
  {
    "text": "ideal it's server list it's it's not a lot of heavy maintenance so there we're looking forward to bringing in other",
    "start": "3524500",
    "end": "3529930"
  },
  {
    "text": "players in the company you wrap up yeah",
    "start": "3529930",
    "end": "3536650"
  },
  {
    "text": "one more comment so with regards to storage at the job level this is another area where we're gonna be innovating in",
    "start": "3536650",
    "end": "3541780"
  },
  {
    "text": "a two Bs batch give you the ability in your job definition to express the storage requirements of your job in the",
    "start": "3541780",
    "end": "3547930"
  },
  {
    "text": "meantime though I would recommend that you take a look at the batshit project which we we covered in the the CMP three",
    "start": "3547930",
    "end": "3553990"
  },
  {
    "text": "to three session to genomics open-source capabilities so that when they're submitting their batch",
    "start": "3553990",
    "end": "3560350"
  },
  {
    "text": "jobs they have a little wrapper that will actually provision an EBS volume for that job and then and then get rid",
    "start": "3560350",
    "end": "3565750"
  },
  {
    "text": "of it once the the workloads done can also conceive of using this to pass EBS volumes from job to job if you have",
    "start": "3565750",
    "end": "3572170"
  },
  {
    "text": "dependency chains something to look into but well let's we playing a more active role there too we're a little bit short on time so",
    "start": "3572170",
    "end": "3579400"
  },
  {
    "text": "we're gonna wrap up with the main presentation now but we're the last session in this room happy to stick",
    "start": "3579400",
    "end": "3585010"
  },
  {
    "text": "around and if you have any questions I'd love to take the bow so thanks again for all of your time today thanks to as Aven",
    "start": "3585010",
    "end": "3591130"
  },
  {
    "text": "Lee and Tom really appreciate it good job guys thank you",
    "start": "3591130",
    "end": "3596280"
  }
]