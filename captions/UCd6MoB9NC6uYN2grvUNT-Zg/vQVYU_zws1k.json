[
  {
    "text": "hi everyone and welcome to dev 302 tips tricks and best practices for the AWS",
    "start": "5810",
    "end": "14040"
  },
  {
    "text": "SDK for Java my name is David Murray and I'm a software developer on the SDKs and",
    "start": "14040",
    "end": "20070"
  },
  {
    "text": "tools team at Amazon Web Services my team builds software libraries and",
    "start": "20070",
    "end": "25260"
  },
  {
    "text": "developer tools that help developers like you quickly and easily build really great applications on the AWS cloud in",
    "start": "25260",
    "end": "33290"
  },
  {
    "text": "this session I'd like to introduce you to the AWS SDK for Java and give you",
    "start": "33290",
    "end": "39480"
  },
  {
    "text": "some tips tricks and best practices for working with it in your applications the",
    "start": "39480",
    "end": "46920"
  },
  {
    "text": "AWS SDK for Java can be split up into three main architectural layers in this",
    "start": "46920",
    "end": "52920"
  },
  {
    "text": "session we'll be covering each of them in turn from the bottom up the core of the SDK is a set of generated service",
    "start": "52920",
    "end": "61410"
  },
  {
    "text": "clients that directly map the api's of each AWS service and make it really easy",
    "start": "61410",
    "end": "66960"
  },
  {
    "text": "to call those service api's and parse the responses built on top of this core",
    "start": "66960",
    "end": "73650"
  },
  {
    "text": "layer the SDK includes a layer of higher level utilities that take targeted",
    "start": "73650",
    "end": "78780"
  },
  {
    "text": "application scenarios and make them really easy to implement on the AWS",
    "start": "78780",
    "end": "83850"
  },
  {
    "text": "cloud finally we'll take a look at some cool libraries and frameworks built on",
    "start": "83850",
    "end": "90479"
  },
  {
    "text": "top of the SDK available through our AWS labs github organization for some other",
    "start": "90479",
    "end": "96180"
  },
  {
    "text": "more special case use cases as I said we'll begin with the core layer of the",
    "start": "96180",
    "end": "102509"
  },
  {
    "text": "SDK almost all AWS services expose an HTTP API that allows you to provision",
    "start": "102509",
    "end": "110040"
  },
  {
    "text": "and manage or AWS resources from anywhere at any time the core layer of",
    "start": "110040",
    "end": "117030"
  },
  {
    "text": "the SDK contains service clients that make it easy for developers working in",
    "start": "117030",
    "end": "122490"
  },
  {
    "text": "Java to interact with these api's the",
    "start": "122490",
    "end": "127500"
  },
  {
    "text": "core layer of the SDK includes service client classes the",
    "start": "127500",
    "end": "133140"
  },
  {
    "text": "directly map the services API and include methods for each of the operations that the service exposes it",
    "start": "133140",
    "end": "141030"
  },
  {
    "text": "includes strongly-typed pojos that model the requests that the service expects to",
    "start": "141030",
    "end": "146910"
  },
  {
    "text": "receive and the responses that it returns to you this makes it easy to",
    "start": "146910",
    "end": "153690"
  },
  {
    "text": "code against the api's giving you content assist hints in your IDE and compile time validation that you haven't",
    "start": "153690",
    "end": "160740"
  },
  {
    "text": "type out a parameter name the SDKs client objects take care of the details",
    "start": "160740",
    "end": "167130"
  },
  {
    "text": "of the wire protocol format for each of the services so you don't have to worry",
    "start": "167130",
    "end": "172320"
  },
  {
    "text": "about whether the service is JSON or XML they also transparently handle signing",
    "start": "172320",
    "end": "179220"
  },
  {
    "text": "requests with your AWS access keys and details like connection pooling and retrying with exponential back-off",
    "start": "179220",
    "end": "186000"
  },
  {
    "text": "making it really easy to write scalable applications using AWS it's really easy",
    "start": "186000",
    "end": "195510"
  },
  {
    "text": "to get started using the SDK you can download it from our website you can",
    "start": "195510",
    "end": "200549"
  },
  {
    "text": "pull it in as a dependency from maven central or you can add it to your project using the AWS toolkit for",
    "start": "200549",
    "end": "206549"
  },
  {
    "text": "eclipse one cool tip with the SDK if",
    "start": "206549",
    "end": "213239"
  },
  {
    "text": "you're depending on it from maven central is that you can add dependencies on individual service artifacts if",
    "start": "213239",
    "end": "220830"
  },
  {
    "text": "you're writing an application that only uses one or two AWS services this is an",
    "start": "220830",
    "end": "225959"
  },
  {
    "text": "easy way to cut down on the size of your application distributable for example this is a pom dot XML snippet that",
    "start": "225959",
    "end": "232680"
  },
  {
    "text": "depends on the dynamo DB and s3 artifacts from the SDK and nothing else",
    "start": "232680",
    "end": "237739"
  },
  {
    "text": "if optimizing your application size isn't a big priority you can continue to",
    "start": "237739",
    "end": "243420"
  },
  {
    "text": "depend on the AWS Java SDK artifact which pulls in matching versions of all",
    "start": "243420",
    "end": "249239"
  },
  {
    "text": "of the different service artifacts to keep dependency management really simple another quick tip if you're a maven user",
    "start": "249239",
    "end": "256290"
  },
  {
    "text": "you can use the AWS Java SDK archetype to quickly set up a project that has a",
    "start": "256290",
    "end": "262200"
  },
  {
    "text": "dependency on the SDK and includes a little bit of sample code showing how to and use a couple different clients once",
    "start": "262200",
    "end": "272730"
  },
  {
    "text": "you've got the SDK included in your application the first thing you'll need to do is configure it with a set of AWS",
    "start": "272730",
    "end": "278400"
  },
  {
    "text": "access keys almost all calls to AWS api's must be authenticated using an AWS",
    "start": "278400",
    "end": "285000"
  },
  {
    "text": "access key and secure management of your eight of us access keys is a really important part of building a secure",
    "start": "285000",
    "end": "291300"
  },
  {
    "text": "application AWS access keys are provided to the SDK by an implementation of the AWS",
    "start": "291300",
    "end": "298650"
  },
  {
    "text": "credentials provider interface in the SDK the SDK includes a number of default",
    "start": "298650",
    "end": "303870"
  },
  {
    "text": "implementations of this interface for helping you implement best practices for",
    "start": "303870",
    "end": "309150"
  },
  {
    "text": "securely managing your credentials and a handful of different common application deployment scenarios for local",
    "start": "309150",
    "end": "316230"
  },
  {
    "text": "development and testing of your application we recommend using the profile credentials provider this",
    "start": "316230",
    "end": "322860"
  },
  {
    "text": "provider loads credentials from a file stored in your home directory the same",
    "start": "322860",
    "end": "329010"
  },
  {
    "text": "file is used by other tools like the AWS CLI and toolkit for eclipse as well as",
    "start": "329010",
    "end": "334470"
  },
  {
    "text": "the alt as well as all of the other AWS SDKs this makes it easy to configure",
    "start": "334470",
    "end": "339540"
  },
  {
    "text": "credentials on your dev box what's and then seamlessly reuse them across all of",
    "start": "339540",
    "end": "344760"
  },
  {
    "text": "the tools you use to interact with AWS keeping your credentials in a central",
    "start": "344760",
    "end": "351030"
  },
  {
    "text": "profile in your home directory also helps you avoid and unfortunately all",
    "start": "351030",
    "end": "356580"
  },
  {
    "text": "too common mistake of checking your credentials into test code and then",
    "start": "356580",
    "end": "361650"
  },
  {
    "text": "committing that code to public source code repositories and leaking those credentials out for everyone to see when",
    "start": "361650",
    "end": "369960"
  },
  {
    "text": "you're ready to move on to deploy your application into the cloud we recommend using the instance profile credentials",
    "start": "369960",
    "end": "375480"
  },
  {
    "text": "provider this provider loads credentials from the instance profile for the Amazon",
    "start": "375480",
    "end": "380970"
  },
  {
    "text": "Elastic Compute cloud instances that your application runs on using the AWS",
    "start": "380970",
    "end": "387120"
  },
  {
    "text": "Identity and Access Management Service you can define a role for your application configuring the permissions",
    "start": "387120",
    "end": "394170"
  },
  {
    "text": "that your application needs to be able to run with launching ec2 instances to",
    "start": "394170",
    "end": "399810"
  },
  {
    "text": "run your application you can associate them with this role AWS handles seamlessly and securely",
    "start": "399810",
    "end": "406330"
  },
  {
    "text": "transferring credentials for the role two-year ec2 instances and storing them",
    "start": "406330",
    "end": "413770"
  },
  {
    "text": "in the instance profile for your application to access they're available for your application to use without any",
    "start": "413770",
    "end": "419860"
  },
  {
    "text": "additional work on your part the SDK also includes a number of other",
    "start": "419860",
    "end": "425710"
  },
  {
    "text": "implementations of the AWS credentials provider interface for more advanced scenarios like identity Federation and",
    "start": "425710",
    "end": "432250"
  },
  {
    "text": "cross'd account access what implementation that you'll definitely want to check out is the AWS credentials",
    "start": "432250",
    "end": "438669"
  },
  {
    "text": "provider chain which gives you an easy way to string together multiple other providers selecting credentials from the",
    "start": "438669",
    "end": "445930"
  },
  {
    "text": "first provider to respond by default the SDKs client objects use a credentials",
    "start": "445930",
    "end": "452680"
  },
  {
    "text": "provider chain that includes the local profile credentials provider and instance profile credentials provider",
    "start": "452680",
    "end": "458200"
  },
  {
    "text": "that I just talked about this makes it easy to write code that you'll develop",
    "start": "458200",
    "end": "464830"
  },
  {
    "text": "and test locally using local profile credential provider and then to play",
    "start": "464830",
    "end": "470770"
  },
  {
    "text": "that application out into the cloud without having to make any code changes and it'll seamlessly switch over to",
    "start": "470770",
    "end": "476470"
  },
  {
    "text": "using the instance profile credential provider for more advanced scenarios you",
    "start": "476470",
    "end": "481690"
  },
  {
    "text": "can pass an implementation of the AWS credentials provider interface to the constructors of any of the SDKs client",
    "start": "481690",
    "end": "488860"
  },
  {
    "text": "objects and of course you can write your own implementation of the interface for",
    "start": "488860",
    "end": "494020"
  },
  {
    "text": "really fancy scenarios where you're integrating with an external key management system after making sure that",
    "start": "494020",
    "end": "502720"
  },
  {
    "text": "your application is secure the next most important thing for many developers is",
    "start": "502720",
    "end": "507880"
  },
  {
    "text": "operational performance is my application available and is it meeting my goals for latency and throughput many",
    "start": "507880",
    "end": "516459"
  },
  {
    "text": "AWS services publish server-side performance metrics through Amazon Cloud",
    "start": "516459",
    "end": "521529"
  },
  {
    "text": "Watch giving you visibility into the operational performance of the cloud infrastructure components that your",
    "start": "521529",
    "end": "528010"
  },
  {
    "text": "application depends on this is really cool but it gives you only a partial view of your entire system",
    "start": "528010",
    "end": "534810"
  },
  {
    "text": "another cool feature of the SDK is that it supports client-side metrics",
    "start": "534810",
    "end": "540700"
  },
  {
    "text": "collection and aggregation into Amazon CloudWatch when you turn it on the SDK will collect",
    "start": "540700",
    "end": "547480"
  },
  {
    "text": "a bunch of different metrics about the performance of your application everything from client-side Layton sees",
    "start": "547480",
    "end": "554200"
  },
  {
    "text": "that you're observing on calls you make to AWS api's to things like the total",
    "start": "554200",
    "end": "560890"
  },
  {
    "text": "amount of memory that your JVM is consuming and the number of threads that are running this combination of",
    "start": "560890",
    "end": "567640"
  },
  {
    "text": "client-side and server-side metrics makes it really easy to get visibility into the performance of your application",
    "start": "567640",
    "end": "574120"
  },
  {
    "text": "and quickly troubleshoot it when things go wrong you can pull the raw data for",
    "start": "574120",
    "end": "581110"
  },
  {
    "text": "these client-side metrics from the cloud watch API or you can view graphs in the",
    "start": "581110",
    "end": "586720"
  },
  {
    "text": "cloud watch console here's a graph that I generated from an application that I",
    "start": "586720",
    "end": "592990"
  },
  {
    "text": "was running from home we can see three metrics here the green line at the bottom is a server-side latency reported",
    "start": "592990",
    "end": "601480"
  },
  {
    "text": "for calls that my application is making to Amazon DynamoDB the top two lines are client-side",
    "start": "601480",
    "end": "608230"
  },
  {
    "text": "metrics reported by the SDK running inside of my application the top line is",
    "start": "608230",
    "end": "614200"
  },
  {
    "text": "a total average latency for calls that I'm making to DynamoDB viewed from the",
    "start": "614200",
    "end": "619510"
  },
  {
    "text": "client-side and the orange line just underneath it is a client side view of",
    "start": "619510",
    "end": "625060"
  },
  {
    "text": "the HTTP request time for calls that I'm making to the service not counting time",
    "start": "625060",
    "end": "630160"
  },
  {
    "text": "spent marshaling and on marshalling requests in the SDK as you can see",
    "start": "630160",
    "end": "635790"
  },
  {
    "text": "dynamodb is reporting a really low average latency of just a couple milliseconds but the latency that my",
    "start": "635790",
    "end": "642280"
  },
  {
    "text": "application is seeing is significantly higher the combination of client-side and server-side metrics makes it really",
    "start": "642280",
    "end": "649120"
  },
  {
    "text": "easy to see that the difference is time that the request is spending transiting the network if I moved my application",
    "start": "649120",
    "end": "655570"
  },
  {
    "text": "into an AWS data center closer to where my dynamodb table is hosted I could",
    "start": "655570",
    "end": "660760"
  },
  {
    "text": "probably cut this latency down significantly you can enable client-side metrics in",
    "start": "660760",
    "end": "666070"
  },
  {
    "text": "code using the AWS SDK Tricks class you can also enable and",
    "start": "666070",
    "end": "671380"
  },
  {
    "text": "configure it dynamically when starting individual instances of your application with system properties you can even",
    "start": "671380",
    "end": "678700"
  },
  {
    "text": "enable it dynamically on running processes using JMX to troubleshoot emergent issues that's",
    "start": "678700",
    "end": "688000"
  },
  {
    "text": "it for our tour of the core layer of the AWS SDK to briefly recap we saw that the",
    "start": "688000",
    "end": "694030"
  },
  {
    "text": "core layer of the SDK includes generated service clients for each of the AWS",
    "start": "694030",
    "end": "699490"
  },
  {
    "text": "services it also includes functionality that helps you securely manage your AWS",
    "start": "699490",
    "end": "704800"
  },
  {
    "text": "access keys used to authenticate requests that you make and can optionally collect performance metrics",
    "start": "704800",
    "end": "710830"
  },
  {
    "text": "about your application and aggregate them into cloud watch next let's talk",
    "start": "710830",
    "end": "716500"
  },
  {
    "text": "about some of the higher-level utilities built into the SDK this layer of the SDK",
    "start": "716500",
    "end": "722710"
  },
  {
    "text": "takes common application scenarios like database access and data encryption and",
    "start": "722710",
    "end": "728910"
  },
  {
    "text": "provides utilities that make it really easy to implement these scenarios on AWS",
    "start": "728910",
    "end": "734020"
  },
  {
    "text": "in this section we'll take a look at a couple real-world use cases and see how",
    "start": "734020",
    "end": "739750"
  },
  {
    "text": "higher-level utilities in the SDK make it really easy for me to implement them",
    "start": "739750",
    "end": "744780"
  },
  {
    "text": "throughout this section we'll be using as an example a cool new application that I've been working on in my spare",
    "start": "744780",
    "end": "750340"
  },
  {
    "text": "time called cat face cat face is poised to become the world's leading feline",
    "start": "750340",
    "end": "756970"
  },
  {
    "text": "social network here you can see my cat Sammis profile page to run an",
    "start": "756970",
    "end": "763150"
  },
  {
    "text": "application like cat face at internet scale I need to be able to store huge amounts of data and access it with low",
    "start": "763150",
    "end": "769780"
  },
  {
    "text": "latency and high availability to meet these requirements cat face stores most",
    "start": "769780",
    "end": "776140"
  },
  {
    "text": "of its data using Amazon DynamoDB dynamodb is a fully managed cloud no",
    "start": "776140",
    "end": "782680"
  },
  {
    "text": "sequel database designed from the ground up to offer practically infinite scalability as well as predictable",
    "start": "782680",
    "end": "791050"
  },
  {
    "text": "single-digit latencies and high availability the dynamodb client from",
    "start": "791050",
    "end": "798550"
  },
  {
    "text": "the core SDK provides a direct mapping of dynamodb API this direct mapping of the API can",
    "start": "798550",
    "end": "807220"
  },
  {
    "text": "be important for some power users who need to directly control exactly what's going across the wire but for many use",
    "start": "807220",
    "end": "813520"
  },
  {
    "text": "cases this code ends up being really verbose as you are marshalling from the",
    "start": "813520",
    "end": "819100"
  },
  {
    "text": "Java types that you're used to working with like strings and integers and DynamoDB is attribute value data model",
    "start": "819100",
    "end": "824890"
  },
  {
    "text": "the DynamoDB document API is a higher-level utility built into the SDK",
    "start": "824890",
    "end": "830560"
  },
  {
    "text": "that makes it easier to work with Amazon DynamoDB like the client it exposes the",
    "start": "830560",
    "end": "838960"
  },
  {
    "text": "full breadth of the DynamoDB interface so you can use all of the operations that DynamoDB exposes however it also",
    "start": "838960",
    "end": "846670"
  },
  {
    "text": "adds easy type conversions between the Java types that you're using your",
    "start": "846670",
    "end": "852700"
  },
  {
    "text": "application and DynamoDB x' attribute value datatypes so it cuts down on",
    "start": "852700",
    "end": "858310"
  },
  {
    "text": "boilerplate type conversion in your code let's quickly drop into eclipse and take",
    "start": "858310",
    "end": "865270"
  },
  {
    "text": "a look at a new feature that I'd like to add to cat face that the dynamodb document API will help me take care of",
    "start": "865270",
    "end": "874019"
  },
  {
    "text": "figured that yay I've already got the basic skeleton of",
    "start": "876210",
    "end": "881320"
  },
  {
    "text": "cat face up and running as you can see here's again my cat Sammis profile it's",
    "start": "881320",
    "end": "886390"
  },
  {
    "text": "got her picture a brief biography and some posts from a couple of her friends",
    "start": "886390",
    "end": "891930"
  },
  {
    "text": "the first feature that I'd like to add to cat face is the ability for users to lick posts that they're particularly",
    "start": "891930",
    "end": "898870"
  },
  {
    "text": "fond of all of cat faces post data is stored in an Amazon DynamoDB table as I",
    "start": "898870",
    "end": "907570"
  },
  {
    "text": "expect the number of posts that my application needs to store will grow very very large as my application",
    "start": "907570",
    "end": "913690"
  },
  {
    "text": "becomes more popular we can take a look at the cat face posts dynamodb table",
    "start": "913690",
    "end": "919870"
  },
  {
    "text": "using the AWS toolkit for eclipses DynamoDB table view I've got a row here",
    "start": "919870",
    "end": "927400"
  },
  {
    "text": "for each post on the site and each row has a number of attributes describing",
    "start": "927400",
    "end": "933310"
  },
  {
    "text": "the poem the primary key of the table is the post ID attribute here and dynamodb will use",
    "start": "933310",
    "end": "940980"
  },
  {
    "text": "this also called the hash key attribute to partition data out so I can scale my",
    "start": "940980",
    "end": "946140"
  },
  {
    "text": "table up to store a practically infinite amount of data to store the set of users",
    "start": "946140",
    "end": "953280"
  },
  {
    "text": "who have licked a particular post I'm going to add an attribute to this table that will store a set of strings",
    "start": "953280",
    "end": "960060"
  },
  {
    "text": "containing the user IDs of each of the users who have licked the post DynamoDB",
    "start": "960060",
    "end": "966840"
  },
  {
    "text": "x' flexible schema-less data model makes this really easy this is the back end",
    "start": "966840",
    "end": "972240"
  },
  {
    "text": "code that gets called when a user clicks on the lick link on the site I'll use",
    "start": "972240",
    "end": "978330"
  },
  {
    "text": "the dynamo DD document api's update item method to atomically insert the user ID",
    "start": "978330",
    "end": "986370"
  },
  {
    "text": "of the Licking user into the set of users who have licked this particular post when a user clicks on the link",
    "start": "986370",
    "end": "994310"
  },
  {
    "text": "DynamoDB update item api takes care of all of the synchronization details for me so I don't have to worry about what",
    "start": "994310",
    "end": "1001070"
  },
  {
    "text": "happens if multiple users lick a post at the same time to get started using the",
    "start": "1001070",
    "end": "1008210"
  },
  {
    "text": "document API I first create an instance of the dynamodb type this serves as my",
    "start": "1008210",
    "end": "1013730"
  },
  {
    "text": "entry point for working with data in DynamoDB and gives me some top-level methods for creating new tables and",
    "start": "1013730",
    "end": "1020000"
  },
  {
    "text": "deleting tables and all of that kind of stuff I don't need to worry about any of that here so I'll just call the get",
    "start": "1020000",
    "end": "1026780"
  },
  {
    "text": "table method which will return me a table object representing my cat-faced posts table the table object is",
    "start": "1026780",
    "end": "1034790"
  },
  {
    "text": "thread-safe so I'll store a static instance and reuse it for all of the calls that I make to dynamodb this is",
    "start": "1034790",
    "end": "1044060"
  },
  {
    "text": "the code that gets run when a user clicks on the lick link I parse the post ID of the post they've licked and the",
    "start": "1044060",
    "end": "1050030"
  },
  {
    "text": "user ID of the user who performed a lick out of the request I'll then make a call",
    "start": "1050030",
    "end": "1055370"
  },
  {
    "text": "to the tables update item method to write the user ID into the table",
    "start": "1055370",
    "end": "1063820"
  },
  {
    "text": "come on Eclipse you can do it there we go",
    "start": "1066600",
    "end": "1071700"
  },
  {
    "text": "the overload that I'm interested in takes three arguments the first is the",
    "start": "1071700",
    "end": "1077590"
  },
  {
    "text": "hash name of the hash key for the table which is post ID the second is the value",
    "start": "1077590",
    "end": "1085450"
  },
  {
    "text": "of the hash key for the item that I'd like to update that's just the post ID that I parsed out of the request and the",
    "start": "1085450",
    "end": "1092950"
  },
  {
    "text": "last is a list of updates that I'd like atomically applied to this item I'll",
    "start": "1092950",
    "end": "1098409"
  },
  {
    "text": "pass in just a single attribute update",
    "start": "1098409",
    "end": "1103260"
  },
  {
    "text": "I'll call my new attribute Lix notice I don't have to do any complicated schema",
    "start": "1106139",
    "end": "1112149"
  },
  {
    "text": "migration here I just start writing this attribute into the table and it appears",
    "start": "1112149",
    "end": "1117840"
  },
  {
    "text": "and then the operation I'd like to make to this attribute is that I'd like to",
    "start": "1117840",
    "end": "1122860"
  },
  {
    "text": "add a new element to a set type and I'll add the user ID if I could type notice I",
    "start": "1122860",
    "end": "1132820"
  },
  {
    "text": "passed both post ID and user ID here as the plain old Java types that I'm using",
    "start": "1132820",
    "end": "1137860"
  },
  {
    "text": "in my application integers and strings the document API takes care of all of the details of marshaling these to the",
    "start": "1137860",
    "end": "1145059"
  },
  {
    "text": "appropriate DynamoDB type to be sent across the wire now that that's done",
    "start": "1145059",
    "end": "1152799"
  },
  {
    "text": "I'd like to modify the code that renders list of posts onto the user's profile",
    "start": "1152799",
    "end": "1158169"
  },
  {
    "text": "page to display the set of users who have licked a particular post when I'm",
    "start": "1158169",
    "end": "1163179"
  },
  {
    "text": "rendering it again I've got a instance of the DynamoDB type I get the cat face",
    "start": "1163179",
    "end": "1170980"
  },
  {
    "text": "posts table and then I use the tables get index method to retrieve an index",
    "start": "1170980",
    "end": "1176049"
  },
  {
    "text": "object representing a secondary index I have defined on the table that allows me to query posts by the user ID of the",
    "start": "1176049",
    "end": "1185169"
  },
  {
    "text": "profile page that they appear on when",
    "start": "1185169",
    "end": "1190179"
  },
  {
    "text": "this code gets invoked to render a user's profile page I use the indexes",
    "start": "1190179",
    "end": "1195850"
  },
  {
    "text": "query method to query the ten most recent posts made on this particular users page",
    "start": "1195850",
    "end": "1204100"
  },
  {
    "text": "the value I get back is an item collection as I let's show that the",
    "start": "1204100",
    "end": "1213320"
  },
  {
    "text": "collection is iterable and as i inter ate through it it will call DynamoDB potentially multiple times if needed to",
    "start": "1213320",
    "end": "1220519"
  },
  {
    "text": "retrieve the full set of results for the query so I don't have to manually worry about doing pagination myself each",
    "start": "1220519",
    "end": "1228350"
  },
  {
    "text": "element that I get back while iterating is an instance of the item type representing a single row in the",
    "start": "1228350",
    "end": "1233870"
  },
  {
    "text": "database the item type has friendly methods for reading attributes of the",
    "start": "1233870",
    "end": "1239690"
  },
  {
    "text": "item as convenient Java types so I can parse out the post ID the user who made",
    "start": "1239690",
    "end": "1245570"
  },
  {
    "text": "the post and the text of the post to render on to the page to render the set",
    "start": "1245570",
    "end": "1251059"
  },
  {
    "text": "of users who have licked this post I'll just call post dot get string set",
    "start": "1251059",
    "end": "1257980"
  },
  {
    "text": "set please and give it the name of my licks attribute that I was writing to",
    "start": "1259990",
    "end": "1266450"
  },
  {
    "text": "earlier and this will return me an instance of the set of string type in",
    "start": "1266450",
    "end": "1276529"
  },
  {
    "text": "Java if this attribute is present in this",
    "start": "1276529",
    "end": "1285850"
  },
  {
    "text": "item I'll loop through it and render the list of users out onto the page",
    "start": "1285850",
    "end": "1293289"
  },
  {
    "text": "easy let's quickly rebuild and test this",
    "start": "1313530",
    "end": "1318780"
  },
  {
    "text": "out I'm building using maven",
    "start": "1318780",
    "end": "1325910"
  },
  {
    "text": "which makes it easy for me to pull in a dependency on the SDK and I'm deploying",
    "start": "1325910",
    "end": "1331110"
  },
  {
    "text": "this locally using the jetty maven plug-in and pulling credentials for accessing AWS from my local credentials",
    "start": "1331110",
    "end": "1337650"
  },
  {
    "text": "profile that's done will refresh and now",
    "start": "1337650",
    "end": "1346170"
  },
  {
    "text": "when I click on the lick link the page will get updated and will see that Samy has licked this post flipping back into",
    "start": "1346170",
    "end": "1355260"
  },
  {
    "text": "Eclipse we can refresh this and we see the new licks attribute appears and that",
    "start": "1355260",
    "end": "1361320"
  },
  {
    "text": "this post has in fact been licked by Samy the DynamoDB document API is great",
    "start": "1361320",
    "end": "1371460"
  },
  {
    "text": "because it gives you full access to the dynamo DB API allowing you to use",
    "start": "1371460",
    "end": "1376580"
  },
  {
    "text": "operations like update item another",
    "start": "1376580",
    "end": "1382470"
  },
  {
    "text": "higher-level utility built into the SDK for accessing data in dynamo DB is the",
    "start": "1382470",
    "end": "1387510"
  },
  {
    "text": "dynamo DB mapper the dynamo DB mapper takes the approach of the document API a",
    "start": "1387510",
    "end": "1393060"
  },
  {
    "text": "step further and allows you to define your own pojo objects representing a",
    "start": "1393060",
    "end": "1398190"
  },
  {
    "text": "schema for the data that you have stored in dynamo DB and gives you an easy way to store instances of these objects into",
    "start": "1398190",
    "end": "1406740"
  },
  {
    "text": "the database and then read the back out taking care of all of the details of serialization and deserialization for",
    "start": "1406740",
    "end": "1413310"
  },
  {
    "text": "you let's drop back into eclipse and look at another feature that I'd like to add to catface that the dynamo DB mapper",
    "start": "1413310",
    "end": "1421140"
  },
  {
    "text": "will be well-suited for",
    "start": "1421140",
    "end": "1424520"
  },
  {
    "text": "the feature that I'd like to add is the ability for users to change the taste of",
    "start": "1430580",
    "end": "1435600"
  },
  {
    "text": "their profile pages Sammy being from Seattle would really love it if her profile page could taste like",
    "start": "1435600",
    "end": "1442590"
  },
  {
    "text": "salmon all of the profile data for cat face is stored in another DynamoDB table",
    "start": "1442590",
    "end": "1449850"
  },
  {
    "text": "called cat face profiles and I've got a profile object defined in my application",
    "start": "1449850",
    "end": "1455549"
  },
  {
    "text": "that represents a user's profile to all of my business logic the dynamodb mapper",
    "start": "1455549",
    "end": "1461460"
  },
  {
    "text": "gives me an easy way to store profiles into DynamoDB and then load them back",
    "start": "1461460",
    "end": "1467460"
  },
  {
    "text": "out to get this set up I just had to add a couple annotations to my profile type",
    "start": "1467460",
    "end": "1474590"
  },
  {
    "text": "the dynamodb table annotation here tells the mapper which DynamoDB table to store",
    "start": "1474590",
    "end": "1481289"
  },
  {
    "text": "instances of the profile type in in my case cat face profiles the dynamodb hash",
    "start": "1481289",
    "end": "1488639"
  },
  {
    "text": "key annotation on the gate user ID method marks it as the hash key for the table so I don't have to explicitly",
    "start": "1488639",
    "end": "1495059"
  },
  {
    "text": "mention this whatever I'm loading or storing data into the table the mapper",
    "start": "1495059",
    "end": "1503159"
  },
  {
    "text": "picks up all of the other getter methods defined on the type and stores their values into dynamodb when I save an",
    "start": "1503159",
    "end": "1510779"
  },
  {
    "text": "instance of the profile type then uses the setter methods to rehydrate a profile object when I load that object",
    "start": "1510779",
    "end": "1517740"
  },
  {
    "text": "from dynamodb this even works recursively now for other POJO objects",
    "start": "1517740",
    "end": "1526289"
  },
  {
    "text": "like biography using dynamo DB's new document support features which is really cool to store the taste of a",
    "start": "1526289",
    "end": "1537419"
  },
  {
    "text": "user's profile I'll simply add a new member to my profile type create getter",
    "start": "1537419",
    "end": "1546509"
  },
  {
    "text": "and setter methods for it",
    "start": "1546509",
    "end": "1549529"
  },
  {
    "text": "and away we go the code that renders",
    "start": "1552710",
    "end": "1557930"
  },
  {
    "text": "users profile pages is here you can see we've got an instance of the dynamo DB",
    "start": "1557930",
    "end": "1564440"
  },
  {
    "text": "mapper that serves as our entry point for working with data in the cat face profiles table like the table objects",
    "start": "1564440",
    "end": "1574040"
  },
  {
    "text": "from the document API it's thread-safe so we'll store a single static instance here and we use that for all of our",
    "start": "1574040",
    "end": "1580130"
  },
  {
    "text": "calls to dynamo dB when this code gets invoked to render a",
    "start": "1580130",
    "end": "1585290"
  },
  {
    "text": "profile page we call mapper dot load passing in the profile type so the",
    "start": "1585290",
    "end": "1590390"
  },
  {
    "text": "mapper knows how we'd like the data parsed and the hash key value for the",
    "start": "1590390",
    "end": "1595730"
  },
  {
    "text": "item that we'd like to read the in in this case the user ID of the profile",
    "start": "1595730",
    "end": "1600950"
  },
  {
    "text": "that we're about to render the mapper gives us back an instance of the profile type with all of the data from the users",
    "start": "1600950",
    "end": "1607820"
  },
  {
    "text": "profile loaded in we can then use that",
    "start": "1607820",
    "end": "1613940"
  },
  {
    "text": "profile object throughout the rest of this code as we would any other plain old Java objects to render the profile",
    "start": "1613940",
    "end": "1621970"
  },
  {
    "text": "I've got a hook here where I'll render the taste of the profile if it's set",
    "start": "1622120",
    "end": "1628929"
  },
  {
    "text": "so I'll check if this profile has a taste and if it does I'll render it out onto the page using my very top-secret",
    "start": "1635080",
    "end": "1643050"
  },
  {
    "text": "HTML taste rendering technology",
    "start": "1643050",
    "end": "1647220"
  },
  {
    "text": "cool the last thing we want to do is give users the ability to change the",
    "start": "1655480",
    "end": "1661240"
  },
  {
    "text": "taste of their profile the code that gets executed on the back end when a",
    "start": "1661240",
    "end": "1667210"
  },
  {
    "text": "user edits their profile is here again we've got a static instance of the mapper and when a request is made to",
    "start": "1667210",
    "end": "1674080"
  },
  {
    "text": "this code we parse all of the new profile information out of the request create a new instance of the profile",
    "start": "1674080",
    "end": "1680980"
  },
  {
    "text": "type fill in all of that information onto the profile pojo and then call",
    "start": "1680980",
    "end": "1687010"
  },
  {
    "text": "mapper dot Save storing this profile object into the database the mapper will",
    "start": "1687010",
    "end": "1692410"
  },
  {
    "text": "automatically pick up the hash key value to use since we've set the user ID of",
    "start": "1692410",
    "end": "1697540"
  },
  {
    "text": "the profile object to store the taste we'll just want to make sure that we're",
    "start": "1697540",
    "end": "1702550"
  },
  {
    "text": "setting a taste on the profile before we call save let's again do a rebuildin",
    "start": "1702550",
    "end": "1712630"
  },
  {
    "text": "we'll test this out I'm deploying this",
    "start": "1712630",
    "end": "1718060"
  },
  {
    "text": "locally for the purpose of this demo but it's also really easy to deploy web",
    "start": "1718060",
    "end": "1723550"
  },
  {
    "text": "applications like this into the cloud using services like Amazon Elastic Beanstalk there we go",
    "start": "1723550",
    "end": "1732390"
  },
  {
    "text": "well edit Sammy's profile change her favorite taste to be salmon and this",
    "start": "1732390",
    "end": "1741970"
  },
  {
    "text": "value would now be written into the database and when the page updates we can see that her page tastes like salmon",
    "start": "1741970",
    "end": "1747420"
  },
  {
    "text": "she's going to be so excited",
    "start": "1747420",
    "end": "1751920"
  },
  {
    "text": "dynamodb is great for storing structured data like posts and user profiles",
    "start": "1760159",
    "end": "1766129"
  },
  {
    "text": "another scenario that came up an awful lot while I was building catface is the",
    "start": "1766129",
    "end": "1771210"
  },
  {
    "text": "need to store large binary objects like images videos and application log files",
    "start": "1771210",
    "end": "1777229"
  },
  {
    "text": "the Amazon simple storage service is a highly available and highly durable cloud store for large binary objects",
    "start": "1777229",
    "end": "1785249"
  },
  {
    "text": "that was a great fit for catface the Amazon s3 clients from the core SDK",
    "start": "1785249",
    "end": "1790979"
  },
  {
    "text": "directly Maps the s3 API allowing you to upload and download large binary binary",
    "start": "1790979",
    "end": "1798029"
  },
  {
    "text": "objects and control some different configuration settings like object versioning and automatic expiration one",
    "start": "1798029",
    "end": "1806849"
  },
  {
    "text": "of the things that catface stores in Amazon s3 is clickstream logs from all of my front-end web servers cats are",
    "start": "1806849",
    "end": "1814019"
  },
  {
    "text": "notorious for being real excited about their privacy so it was really important",
    "start": "1814019",
    "end": "1819239"
  },
  {
    "text": "to me that I keep these logs encrypted the Amazon s3 encryption client is an",
    "start": "1819239",
    "end": "1825239"
  },
  {
    "text": "easy higher-level utility built into the SDK that allows me to add client-side",
    "start": "1825239",
    "end": "1831809"
  },
  {
    "text": "encryption of data that I'm storing in s3 it implements the same interface as",
    "start": "1831809",
    "end": "1837659"
  },
  {
    "text": "the Amazon s3 client so it's really easy to use as a drop-in replacement when I",
    "start": "1837659",
    "end": "1843149"
  },
  {
    "text": "need to add encryption to my application it uses a process known as envelope",
    "start": "1843149",
    "end": "1848789"
  },
  {
    "text": "encryption ensuring that each object is encrypted using a unique randomly",
    "start": "1848789",
    "end": "1853950"
  },
  {
    "text": "generated symmetric key this unique per object key is then itself encrypted",
    "start": "1853950",
    "end": "1860249"
  },
  {
    "text": "using a master key encrypting key that you provide the key encrypting key never",
    "start": "1860249",
    "end": "1866940"
  },
  {
    "text": "leaves your application so you retain complete control over the security of",
    "start": "1866940",
    "end": "1872039"
  },
  {
    "text": "all of your data another cool tip is that the s3 encryption client also",
    "start": "1872039",
    "end": "1878099"
  },
  {
    "text": "supports authenticated encryption using the AES GCM algorithm this algorithm",
    "start": "1878099",
    "end": "1884369"
  },
  {
    "text": "calculates a cryptographic hash of your data as it's being encrypted ensuring",
    "start": "1884369",
    "end": "1890249"
  },
  {
    "text": "the integrity of the data as well as keeping it secret these two features of the encryption",
    "start": "1890249",
    "end": "1897119"
  },
  {
    "text": "client encryption and authentication are really important defense-in-depth features for catface they ensure that an",
    "start": "1897119",
    "end": "1903719"
  },
  {
    "text": "attacker even one who is somehow able to compromise my AWS access key and gain",
    "start": "1903719",
    "end": "1908969"
  },
  {
    "text": "access to my s3 bucket can neither read nor tamper with my click stream logs",
    "start": "1908969",
    "end": "1915769"
  },
  {
    "text": "that wraps up our tour of the high-level api's in the AWS SDK for Java we looked",
    "start": "1915769",
    "end": "1922409"
  },
  {
    "text": "at two utilities for accessing data in dynamo dB the dynamodb document api which provides",
    "start": "1922409",
    "end": "1929820"
  },
  {
    "text": "a flexible schema list method for accessing data in dynamo DB and the",
    "start": "1929820",
    "end": "1935309"
  },
  {
    "text": "dynamo DB mapper which allows you to access more strongly schema data in",
    "start": "1935309",
    "end": "1941009"
  },
  {
    "text": "dynamo DB using an ORM style model the SDK also includes higher-level utilities",
    "start": "1941009",
    "end": "1947339"
  },
  {
    "text": "for many other services such as the Amazon simple queue service Amazon",
    "start": "1947339",
    "end": "1952469"
  },
  {
    "text": "simple email service and Amazon simple workflow service and many more I'm so",
    "start": "1952469",
    "end": "1958409"
  },
  {
    "text": "excited about this last section where we get to talk about some of the exciting new extensions to the SDK being",
    "start": "1958409",
    "end": "1964919"
  },
  {
    "text": "developed as part of AWS labs AWS labs is an incubator for Amazon sponsored",
    "start": "1964919",
    "end": "1972869"
  },
  {
    "text": "open source projects that help developers work with Amazon Web Services when we have a new idea for a developer",
    "start": "1972869",
    "end": "1980669"
  },
  {
    "text": "tool that doesn't necessarily fit directly into one of the existing SDKs we'll put it up on AWS labs this gets it",
    "start": "1980669",
    "end": "1988649"
  },
  {
    "text": "out into people's hands to start playing with so they can use it and so we can",
    "start": "1988649",
    "end": "1993929"
  },
  {
    "text": "gather feedback about how useful the tool is in this section we'll take a look at two of the really cool projects",
    "start": "1993929",
    "end": "2001070"
  },
  {
    "text": "that are currently available on AWS labs the first is the Amazon Kinesis client",
    "start": "2001070",
    "end": "2007940"
  },
  {
    "text": "library real-time processing of big data is a huge topic there's a bunch of other",
    "start": "2007940",
    "end": "2014299"
  },
  {
    "text": "sessions about it at this conference and it's something that I'm really excited about Amazon Kinesis is a fully managed",
    "start": "2014299",
    "end": "2020869"
  },
  {
    "text": "service for collecting and routing streams of real-time big data to your application and the Kinesis client",
    "start": "2020869",
    "end": "2027680"
  },
  {
    "text": "very provides the other half of this equation it's a framework that makes it really easy to write scalable",
    "start": "2027680",
    "end": "2034190"
  },
  {
    "text": "distributed applications that process real time big data from Amazon Kinesis",
    "start": "2034190",
    "end": "2040060"
  },
  {
    "text": "the framework takes care of all of the tricky details of coordinating multiple",
    "start": "2040060",
    "end": "2045440"
  },
  {
    "text": "worker nodes to efficiently and reliably process data from a Kinesis stream all",
    "start": "2045440",
    "end": "2052669"
  },
  {
    "text": "you need to do is write your business logic that processes individual events as they happen and point the Kinesis",
    "start": "2052670",
    "end": "2059870"
  },
  {
    "text": "client library at your Kinesis stream using the KCl your business logic lives",
    "start": "2059870",
    "end": "2066980"
  },
  {
    "text": "in an implementation of the I record processor interface the KCl notifies you via this interface whenever new data is",
    "start": "2066980",
    "end": "2075100"
  },
  {
    "text": "available to be processed once you've written your record processor simply",
    "start": "2075100",
    "end": "2081110"
  },
  {
    "text": "fire up one or more workers ideally on multiple machines multiple workers will",
    "start": "2081110",
    "end": "2087409"
  },
  {
    "text": "coordinate with each other using Amazon DynamoDB to load balanced processing",
    "start": "2087410",
    "end": "2093139"
  },
  {
    "text": "work across the cluster and provide fault tolerance when individual workers fail using tools like auto scaling you",
    "start": "2093140",
    "end": "2101030"
  },
  {
    "text": "can elastically add capacity to your cluster when there's lots of work to be done then scale back down to keep costs low",
    "start": "2101030",
    "end": "2107950"
  },
  {
    "text": "when there isn't much to do the other",
    "start": "2107950",
    "end": "2113720"
  },
  {
    "text": "project I'd like to highlight for you today is a much newer addition to AWS labs the AWS resource API is for Java",
    "start": "2113720",
    "end": "2121720"
  },
  {
    "text": "this is a really cool new library that provides an object-oriented abstraction of the cloud resources that AWS gives",
    "start": "2121720",
    "end": "2129170"
  },
  {
    "text": "you access to this object-oriented approach makes it easy to write clean",
    "start": "2129170",
    "end": "2134360"
  },
  {
    "text": "expressive code that manages your AWS resources one of the really cool things",
    "start": "2134360",
    "end": "2141980"
  },
  {
    "text": "that developing on the cloud enables is the ability to write integration and",
    "start": "2141980",
    "end": "2147170"
  },
  {
    "text": "load tests that run on the exact same infrastructure as your production service to make sure that the results",
    "start": "2147170",
    "end": "2153740"
  },
  {
    "text": "you get in test will exactly match what will happen when you deploy to production because AWS api is like",
    "start": "2153740",
    "end": "2161720"
  },
  {
    "text": "Amazon ec2 allow you to provision new infrastructure with just a couple API calls and then shut it down when you're",
    "start": "2161720",
    "end": "2169010"
  },
  {
    "text": "done it's easy and cheap to spin up a temporary copy of your production infrastructure for quick tasks like",
    "start": "2169010",
    "end": "2175340"
  },
  {
    "text": "integration tests and load tests let's drop back into eclipse one more time and",
    "start": "2175340",
    "end": "2180890"
  },
  {
    "text": "take a look at how the resource API for ec2 makes it really easy for me to write",
    "start": "2180890",
    "end": "2186590"
  },
  {
    "text": "these kinds of tests for catface",
    "start": "2186590",
    "end": "2190330"
  },
  {
    "text": "catface runs on amazon ec2 instances spread across three availability zones",
    "start": "2201540",
    "end": "2207190"
  },
  {
    "text": "for fault tolerance to spin up a temporary copy of this infrastructure to",
    "start": "2207190",
    "end": "2214270"
  },
  {
    "text": "use in an integration test that will test out this fault tolerance I need to",
    "start": "2214270",
    "end": "2219339"
  },
  {
    "text": "create a couple different AWS resources first I'll create a virtual private",
    "start": "2219339",
    "end": "2224619"
  },
  {
    "text": "cloud to contain my tests and separate it from the rest of my production infrastructure I'll create three subnets",
    "start": "2224619",
    "end": "2232650"
  },
  {
    "text": "each one in a different availability zone and then I'll launch a couple ec2 instances to run my application in each",
    "start": "2232650",
    "end": "2240700"
  },
  {
    "text": "subnet I've already got the code written for setting this all up using the",
    "start": "2240700",
    "end": "2246280"
  },
  {
    "text": "resource API for ec2 I start out by creating an instance of the ec2 type",
    "start": "2246280",
    "end": "2252750"
  },
  {
    "text": "which serves as my entry point for working with the resource API the ec2",
    "start": "2252750",
    "end": "2259450"
  },
  {
    "text": "object exposes some top-level methods for bootstrapping me into the resource system for example I can call create VPC",
    "start": "2259450",
    "end": "2267400"
  },
  {
    "text": "to create a new virtual private cloud the result that I get back here is a VPC",
    "start": "2267400",
    "end": "2275140"
  },
  {
    "text": "resource object which represents the VPC that was just created resource objects",
    "start": "2275140",
    "end": "2281440"
  },
  {
    "text": "make it easy for me to get information about the state of the resource follow references to related resources and call",
    "start": "2281440",
    "end": "2289810"
  },
  {
    "text": "service api's to operate on these resources I can use getter methods on",
    "start": "2289810",
    "end": "2297520"
  },
  {
    "text": "the VPC resource object to access information about its state and then I",
    "start": "2297520",
    "end": "2303040"
  },
  {
    "text": "can call action methods on the VPC resource object to operate on it for",
    "start": "2303040",
    "end": "2310359"
  },
  {
    "text": "example creating new subnets within it",
    "start": "2310359",
    "end": "2315750"
  },
  {
    "text": "the create subnet method takes the same create subnet request from the core SDK",
    "start": "2315750",
    "end": "2324040"
  },
  {
    "text": "client for ec2 but I don't have to explicitly mention which VPC I'd like to",
    "start": "2324040",
    "end": "2329200"
  },
  {
    "text": "create this subnet in that's automatically filled in for me based on which VPC resource object I call",
    "start": "2329200",
    "end": "2334910"
  },
  {
    "text": "this method on I get back an instance of a subnet resource object which makes it",
    "start": "2334910",
    "end": "2341299"
  },
  {
    "text": "easy for me to chain on calls for example to create instances running",
    "start": "2341299",
    "end": "2346910"
  },
  {
    "text": "within that subnet again without having to pass around VPC IDs and subnet ids I",
    "start": "2346910",
    "end": "2353799"
  },
  {
    "text": "get back a list of instance resource objects which I can iterate through to",
    "start": "2353799",
    "end": "2358880"
  },
  {
    "text": "access information about these new instances that I've just provisioned once all of my infrastructure is set up",
    "start": "2358880",
    "end": "2366609"
  },
  {
    "text": "I'll run my test which as you can see is very thorough when it's done",
    "start": "2366609",
    "end": "2373819"
  },
  {
    "text": "I'd like to clean up after myself so I don't have to keep paying for all of this stuff that I've just spun up I'll",
    "start": "2373819",
    "end": "2380329"
  },
  {
    "text": "write that code using the resource API now I saved the VPC object that I use to",
    "start": "2380329",
    "end": "2386750"
  },
  {
    "text": "create all of this stuff so I'll reuse it here and call its get subnet method",
    "start": "2386750",
    "end": "2392960"
  },
  {
    "text": "to access the collection of subnets within this VPC similar to the item",
    "start": "2392960",
    "end": "2401960"
  },
  {
    "text": "collection that we saw with the dynamodb document api as i ate through this collection i will automatically handle",
    "start": "2401960",
    "end": "2408829"
  },
  {
    "text": "calling the service multiple times if need be to access all of the subnets within this VPC handling pagination for",
    "start": "2408829",
    "end": "2416569"
  },
  {
    "text": "me",
    "start": "2416569",
    "end": "2418690"
  },
  {
    "text": "each element I get back is a subnet resource object so I can easily chain to get all of the instances within that",
    "start": "2431890",
    "end": "2438250"
  },
  {
    "text": "subnet",
    "start": "2438250",
    "end": "2440670"
  },
  {
    "text": "for each instance all again print out its private DNS name for good measure",
    "start": "2449550",
    "end": "2456059"
  },
  {
    "text": "and then I'll call the terminate action on it to terminate the instance I don't",
    "start": "2460349",
    "end": "2470890"
  },
  {
    "text": "have to pass in any additional arguments here because the instance knows everything it needs to in order to be able to terminate itself when the",
    "start": "2470890",
    "end": "2478630"
  },
  {
    "text": "instances are all terminated I'll delete the subnet and when all of the subnets",
    "start": "2478630",
    "end": "2485710"
  },
  {
    "text": "are deleted I'll delete the VPC",
    "start": "2485710",
    "end": "2489150"
  },
  {
    "text": "hopefully this code is really easy for you to understand it was very quick for me to write so",
    "start": "2490829",
    "end": "2497079"
  },
  {
    "text": "this is a really easy way to manage your AWS resources for a quick comparison here's that same code to clean",
    "start": "2497079",
    "end": "2503980"
  },
  {
    "text": "everything up written directly against the ec2 API as you can see there's a lot",
    "start": "2503980",
    "end": "2509290"
  },
  {
    "text": "more boilerplate for handling pagination and marshaling around subnet IDs and VPC",
    "start": "2509290",
    "end": "2514569"
  },
  {
    "text": "IDs the resource api's are currently in",
    "start": "2514569",
    "end": "2522880"
  },
  {
    "text": "a developer preview mode so please head out to github check them out and let us",
    "start": "2522880",
    "end": "2528700"
  },
  {
    "text": "know what you think this is a really cool opportunity to get involved and help us build tools that will be really",
    "start": "2528700",
    "end": "2535000"
  },
  {
    "text": "useful for you we currently have resource api's for Amazon ec2 AWS",
    "start": "2535000",
    "end": "2540520"
  },
  {
    "text": "Identity and Access Management and Amazon glacier and we'll be working on adding support for many more in the",
    "start": "2540520",
    "end": "2546880"
  },
  {
    "text": "coming weeks and months I'm running out of time there are a bunch of other cool",
    "start": "2546880",
    "end": "2552430"
  },
  {
    "text": "projects and AWS labs that I didn't have time to talk about but head out to AWS labs and check them out they're all",
    "start": "2552430",
    "end": "2559240"
  },
  {
    "text": "really cool that wraps up our talk we looked at the core of the SDK which has",
    "start": "2559240",
    "end": "2565380"
  },
  {
    "text": "clients that directly map the services API we looked at higher level utilities in the SDK that take common application",
    "start": "2565380",
    "end": "2572410"
  },
  {
    "text": "scenarios and make them really easy and we looked at projects available on AWS labs that provide an easy way to",
    "start": "2572410",
    "end": "2582740"
  },
  {
    "text": "process real-time big data and to easily",
    "start": "2582740",
    "end": "2588029"
  },
  {
    "text": "manage your a Tobias resources for more info check out our blog come find us on",
    "start": "2588029",
    "end": "2594210"
  },
  {
    "text": "github at AWS github.com slash AWS and slash AWS labs which is the link that i",
    "start": "2594210",
    "end": "2600660"
  },
  {
    "text": "should have given you earlier when i was talking about a Tobias labs and find us on Twitter at AWS for java to keep up to",
    "start": "2600660",
    "end": "2607259"
  },
  {
    "text": "date with all of the latest news about the sdk and java development on AWS one",
    "start": "2607259",
    "end": "2612930"
  },
  {
    "text": "last thing i really want to highlight for you in the last minute that i have is that all of these tools are developed",
    "start": "2612930",
    "end": "2618059"
  },
  {
    "text": "as open-source projects please come out find us on github check out the source",
    "start": "2618059",
    "end": "2623430"
  },
  {
    "text": "for these tools and engage with us in the broader community on how we can build really great tools to help you",
    "start": "2623430",
    "end": "2629519"
  },
  {
    "text": "build really great applications on AWS we love hearing from users via github",
    "start": "2629519",
    "end": "2635039"
  },
  {
    "text": "issues about what's important to them and as Andy Jesse said in the keynote",
    "start": "2635039",
    "end": "2640859"
  },
  {
    "text": "this morning that's a really big part of what drives our priorities for what to work on next we also love getting pull",
    "start": "2640859",
    "end": "2646829"
  },
  {
    "text": "requests if you have the time and motivation to directly contribute to making the SDKs better that's all I have",
    "start": "2646829",
    "end": "2653910"
  },
  {
    "text": "I'm just on time I'll be out in the hallway I guess for Q&A afterwards",
    "start": "2653910",
    "end": "2660119"
  },
  {
    "text": "swing by our booth in the Expo Center and say hi and come find us on github",
    "start": "2660119",
    "end": "2666509"
  },
  {
    "text": "that's all thank you very much",
    "start": "2666509",
    "end": "2670069"
  }
]