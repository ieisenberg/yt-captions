[
  {
    "text": "Welcome to 'This is My Architecture'. I \nam Gerardo and I'm joined today by Shane from  ",
    "start": "681",
    "end": "8280"
  },
  {
    "text": "Ticketmaster. Welcome Shane.\n- Thank you for having me.\n- So Shane, what does Ticketmaster do? ",
    "start": "8280",
    "end": "12420"
  },
  {
    "text": "Ticketmaster is a ticketing services company that provides an \nonline marketplace where fans can purchase tickets  ",
    "start": "12420",
    "end": "16740"
  },
  {
    "text": "to live events.\n- Awesome so what architecture from \nTicketmaster are you telling us about? ",
    "start": "16740",
    "end": "21720"
  },
  {
    "text": "So my team is the checkout team. We manage the the page \nwhere folks actually purchase the tickets, put in  ",
    "start": "21720",
    "end": "27119"
  },
  {
    "text": "their payment information, choose their options, \nand get their order in their tickets.",
    "start": "27120",
    "end": "31560"
  },
  {
    "text": "So every time tickets go on sale, I'm guessing the system \nis put under a lot of stress.\n- Yeah. ",
    "start": "31560",
    "end": "36360"
  },
  {
    "text": "So can you walk me through what are the components of the architecture?\n- Yeah so when a request comes in to  ",
    "start": "36360",
    "end": "42240"
  },
  {
    "text": "render a web page, that goes to a web app that \nwe have built in next.js that's running on EKS,",
    "start": "42240",
    "end": "49620"
  },
  {
    "text": "that's what does all the page rendering. When any API endpoint happens that goes to our AppSync layer.",
    "start": "49620",
    "end": "54600"
  },
  {
    "text": "Okay so your API is centralized on AppSync. \n- Yep.\n- Are you using the GraphQL component of it?",
    "start": "54600",
    "end": "61140"
  },
  {
    "text": "Yeah, so we use GraphQL and AppSync to basically \nexpose those queries and mutations, and those  ",
    "start": "61140",
    "end": "66840"
  },
  {
    "text": "queries and mutations then hit the other layers. \nFor stuff that maybe is is a quick load query  ",
    "start": "66840",
    "end": "72719"
  },
  {
    "text": "retrieve data, it might hit an AppSync and then \nthat might go down to DynamoDB to load the data  ",
    "start": "72720",
    "end": "77940"
  },
  {
    "text": "and retrieve it return it back. For something that \ntakes longer like the purchase mutation, that might  ",
    "start": "77940",
    "end": "83520"
  },
  {
    "text": "go down to hit the Step Function. Execute that \npurchase and then return the result. ",
    "start": "83520",
    "end": "88920"
  },
  {
    "text": "Okay so can you give this a couple of examples of the \ntype of information that's moving around here  ",
    "start": "88920",
    "end": "93479"
  },
  {
    "text": "so is this event information maybe? \n- Yeah there's a lot of different types of information, but yeah  ",
    "start": "93480",
    "end": "99060"
  },
  {
    "text": "event information as well as information about the session.\n- Okay so how do you  ",
    "start": "99060",
    "end": "104579"
  },
  {
    "text": "make the differentiation between what goes to a single Lambda being executed, or when do you need  ",
    "start": "104580",
    "end": "109860"
  },
  {
    "text": "it to be processed by Step Functions?\n- Yeah so Step Functions are better for larger or more complex  ",
    "start": "109860",
    "end": "116040"
  },
  {
    "text": "operations things that require a lot of steps, Lambdas are better for single step operations - ",
    "start": "116040",
    "end": "121080"
  },
  {
    "text": "things that might retrieve data and transform \nor call an external service. So those things go  ",
    "start": "121080",
    "end": "126300"
  },
  {
    "text": "through our Lambdas, multiple step processes go \nthrough this Step Function. In the case of the  ",
    "start": "126300",
    "end": "130979"
  },
  {
    "text": "purchase, it might be something like for example \ncollecting the payment, processing the order, all  ",
    "start": "130980",
    "end": "137280"
  },
  {
    "text": "of those things would go through the Step Function. \n- That makes sense. Now how do you handle waiting at  ",
    "start": "137280",
    "end": "141840"
  },
  {
    "text": "the API level? Because supposedly this could take a second or two.\n- Yeah, so we use the web sockets  ",
    "start": "141840",
    "end": "149220"
  },
  {
    "text": "within AppSync. So the websockets basically allow \nthe client browser to handle this asynchronously  ",
    "start": "149220",
    "end": "155160"
  },
  {
    "text": "so the client submits the mutation and then when \nanything takes longer than a second using that  ",
    "start": "155160",
    "end": "160920"
  },
  {
    "text": "subscription. It'll send the response back and that websocket will send that back to the client.  ",
    "start": "160920",
    "end": "165300"
  },
  {
    "text": "Brilliant, so web sockets for calls that take more than one second. \n- Yep and GraphQL for the rest.  ",
    "start": "165300",
    "end": "171000"
  },
  {
    "text": "Yeah well GraphQL for everything. Websocket subscriptions for those responses.   ",
    "start": "171000",
    "end": "177660"
  },
  {
    "text": "Brilliant okay, so I can see you have this concept of Regions here \nin the architecture, what is this about? ",
    "start": "177660",
    "end": "182760"
  },
  {
    "text": "Yeah, so we've got a copy of this whole architecture running in multiple regions, including using  ",
    "start": "182760",
    "end": "188340"
  },
  {
    "text": "DynamoDB Global Tables to basically replicate \nthe data between those regions to keep it all in sync.",
    "start": "188340",
    "end": "195239"
  },
  {
    "text": "Great, so it's an active-active multi-region approach. How do you route traffic among the regions?",
    "start": "195240",
    "end": "200520"
  },
  {
    "text": "Yeah so at the CDN layer, we have logic \nto basically use first latency or geo-routing  ",
    "start": "200520",
    "end": "207180"
  },
  {
    "text": "to basically send fans to the closest region for \nthem, to give them the best performance, but also  ",
    "start": "207180",
    "end": "212819"
  },
  {
    "text": "recognizing the health of a given region so that \nif we need to route traffic away from a Region we  ",
    "start": "212820",
    "end": "218220"
  },
  {
    "text": "can and still keep everything up and running. \n- Great, so you could in theory have one customer reserving  ",
    "start": "218220",
    "end": "223020"
  },
  {
    "text": "a ticket in one region, and then checking out in another?\n- Yeah.\n- How would that work?  ",
    "start": "223020",
    "end": "228480"
  },
  {
    "text": "So as they go through the steps in the process, they reserve, \nthey fill out the data, and then they submit  ",
    "start": "228480",
    "end": "232620"
  },
  {
    "text": "the purchase. If there is an issue the DynamoDB\nis basically keeping the data in sync between  ",
    "start": "232620",
    "end": "237780"
  },
  {
    "text": "the Regions and that CDN routing will basically \non the subsequent request, send the request over  ",
    "start": "237780",
    "end": "243480"
  },
  {
    "text": "to the other regions that are able to handle it.\n- Shane, this is a great architecture thank  ",
    "start": "243480",
    "end": "247800"
  },
  {
    "text": "you for sharing it with us. I love how \nyou're improving our experience when we're buying  ",
    "start": "247800",
    "end": "252120"
  },
  {
    "text": "tickets by using serverless architecture \ninside of a multi-region approach.\n- Thank you.  ",
    "start": "252120",
    "end": "256199"
  },
  {
    "text": "And thank you for watching 'This is My Architecture'. \nWe'll see you next time.",
    "start": "257040",
    "end": "265541"
  }
]