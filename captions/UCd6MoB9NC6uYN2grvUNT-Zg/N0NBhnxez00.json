[
  {
    "text": "- Hi, I'm Andrea from AWS.",
    "start": "480",
    "end": "3600"
  },
  {
    "text": "There's no question that when\nit comes to our customers,",
    "start": "3600",
    "end": "6711"
  },
  {
    "text": "AWS cloud technologies is\nkey to handling big data.",
    "start": "6711",
    "end": "10440"
  },
  {
    "text": "At the same time,",
    "start": "10440",
    "end": "11580"
  },
  {
    "text": "that means that all that data\nhas to be clearly understood.",
    "start": "11580",
    "end": "15059"
  },
  {
    "text": "Let's take a look at how some",
    "start": "15060",
    "end": "16770"
  },
  {
    "text": "of our customers are\nusing AWS analytics tools",
    "start": "16770",
    "end": "20130"
  },
  {
    "text": "to gain deep, meaningful insights.",
    "start": "20130",
    "end": "22679"
  },
  {
    "text": "San Diego Gas & Electric\nis using image recognition",
    "start": "22680",
    "end": "26700"
  },
  {
    "text": "and machine learning to\nreduce wildfire risks.",
    "start": "26700",
    "end": "30570"
  },
  {
    "text": "- So this is where IAP really\nstarts to deliver value.",
    "start": "30570",
    "end": "33420"
  },
  {
    "text": "So we first process the images",
    "start": "33420",
    "end": "36449"
  },
  {
    "text": "in our S3 bucket using\nStep Function workflows.",
    "start": "36450",
    "end": "39720"
  },
  {
    "text": "That image processing\ninvolves things like resizing,",
    "start": "39720",
    "end": "42240"
  },
  {
    "text": "generating thumbnails\nand extracting metadata,",
    "start": "42240",
    "end": "44850"
  },
  {
    "text": "like the capture angle and\ncapture source of the images.",
    "start": "44850",
    "end": "48269"
  },
  {
    "text": "- So what's the business\nlogic for the capture source?",
    "start": "48270",
    "end": "51150"
  },
  {
    "text": "Can you walk us through that?",
    "start": "51150",
    "end": "52020"
  },
  {
    "text": "- Sure, so the capture source\nis different depending on",
    "start": "52020",
    "end": "54900"
  },
  {
    "text": "or the business logic\nis different depending",
    "start": "54900",
    "end": "56700"
  },
  {
    "text": "on the capture source.",
    "start": "56700",
    "end": "57780"
  },
  {
    "text": "So for drones, we have many images taken",
    "start": "57780",
    "end": "61110"
  },
  {
    "text": "from many different angles\nof a known utility asset.",
    "start": "61110",
    "end": "64170"
  },
  {
    "text": "For the mobile phones and fleet vehicles,",
    "start": "64170",
    "end": "66210"
  },
  {
    "text": "we have images taken\nfrom a consistent angle",
    "start": "66210",
    "end": "68580"
  },
  {
    "text": "of an unknown asset.",
    "start": "68580",
    "end": "69690"
  },
  {
    "text": "So we need some business logic\nto derive what that asset is.",
    "start": "69690",
    "end": "73170"
  },
  {
    "text": "- So how does Rekognition\nand Lookout for Vision",
    "start": "73170",
    "end": "75780"
  },
  {
    "text": "support those use cases?",
    "start": "75780",
    "end": "77850"
  },
  {
    "text": "- Yeah, so for the first use\ncase, we have asset detection.",
    "start": "77850",
    "end": "82140"
  },
  {
    "text": "The second use case is damage detection.",
    "start": "82140",
    "end": "84180"
  },
  {
    "text": "We found that Rekognition works well",
    "start": "84180",
    "end": "85860"
  },
  {
    "text": "for detecting large assets,\nso things like utility poles,",
    "start": "85860",
    "end": "89160"
  },
  {
    "text": "and cross arms, but it's not\nso effective for small assets.",
    "start": "89160",
    "end": "92700"
  },
  {
    "text": "So in that case, we pass the images",
    "start": "92700",
    "end": "94560"
  },
  {
    "text": "from Rekognition to Lookout for Vision",
    "start": "94560",
    "end": "97079"
  },
  {
    "text": "and Lookout for Vision is\nable to identify small assets",
    "start": "97080",
    "end": "99750"
  },
  {
    "text": "in the images like arresters and bushings.",
    "start": "99750",
    "end": "101970"
  },
  {
    "text": "- Oh, interesting.",
    "start": "101970",
    "end": "103110"
  },
  {
    "text": "And then where do you\nstore this information?",
    "start": "103110",
    "end": "105270"
  },
  {
    "text": "- Yeah, so we write the\nresults out to an S3 bucket",
    "start": "105270",
    "end": "109409"
  },
  {
    "text": "from Rekognition and Lookout for Vision,",
    "start": "109410",
    "end": "111240"
  },
  {
    "text": "and then we query those\nresults using Athena",
    "start": "111240",
    "end": "114000"
  },
  {
    "text": "and combine them",
    "start": "114000",
    "end": "114930"
  },
  {
    "text": "with business rules to\nrefine our predictions.",
    "start": "114930",
    "end": "118530"
  },
  {
    "text": "- Okay, so let's assume\nyou have a false positive",
    "start": "118530",
    "end": "122010"
  },
  {
    "text": "and how do you address that?",
    "start": "122010",
    "end": "123900"
  },
  {
    "text": "- Sure, I'll have to talk a little bit",
    "start": "123900",
    "end": "125040"
  },
  {
    "text": "about this flow down here to get there.",
    "start": "125040",
    "end": "126600"
  },
  {
    "text": "So what we do is we bring\nthe raw inference results",
    "start": "126600",
    "end": "130440"
  },
  {
    "text": "from Athena into Aurora, which\nis a Postgres database for us",
    "start": "130440",
    "end": "134220"
  },
  {
    "text": "and serves as a database for\nthe rest of the application.",
    "start": "134220",
    "end": "138780"
  },
  {
    "text": "We then make the data\navailable from Aurora",
    "start": "138780",
    "end": "141540"
  },
  {
    "text": "out to knowledgeable end users.",
    "start": "141540",
    "end": "143913"
  },
  {
    "text": "The end users are able to\nidentify false positives",
    "start": "145050",
    "end": "148020"
  },
  {
    "text": "and false negatives in the predictions,",
    "start": "148020",
    "end": "150420"
  },
  {
    "text": "which we then feed back to\nthe model training process.",
    "start": "150420",
    "end": "153209"
  },
  {
    "text": "- Analytics can also power farming.",
    "start": "153210",
    "end": "156090"
  },
  {
    "text": "Here's how Halter is building the future",
    "start": "156090",
    "end": "158370"
  },
  {
    "text": "of farming using IoT-enabled livestock",
    "start": "158370",
    "end": "161760"
  },
  {
    "text": "and pasture management.",
    "start": "161760",
    "end": "163620"
  },
  {
    "text": "- And how do you ingest\nand process all this data",
    "start": "163620",
    "end": "165989"
  },
  {
    "text": "from your devices?",
    "start": "165990",
    "end": "167640"
  },
  {
    "text": "- We need to combine the data\ncoming from the two sources.",
    "start": "167640",
    "end": "170100"
  },
  {
    "text": "So the first thing we do is putting that",
    "start": "170100",
    "end": "172740"
  },
  {
    "text": "on the Kinesis Stream.",
    "start": "172740",
    "end": "174000"
  },
  {
    "text": "So this is the raw stream of data.",
    "start": "174000",
    "end": "178230"
  },
  {
    "text": "So the data here is in a binary\nformat and can be duplicated",
    "start": "178230",
    "end": "181379"
  },
  {
    "text": "because it comes from\ntwo different sources.",
    "start": "181380",
    "end": "183630"
  },
  {
    "text": "Then we have a Lambda function\nthat consumes the data",
    "start": "183630",
    "end": "186300"
  },
  {
    "text": "from here, dedupes the\ndata, and also decodes it",
    "start": "186300",
    "end": "189300"
  },
  {
    "text": "and makes it a lot more digestible\nto the upstream services.",
    "start": "189300",
    "end": "193140"
  },
  {
    "text": "So we ship it as a JSON to\nthe next Kinesis Stream.",
    "start": "193140",
    "end": "197190"
  },
  {
    "text": "So this is the processed\nKinesis Stream data",
    "start": "197190",
    "end": "201070"
  },
  {
    "text": "and this one is the main\nstream in the system.",
    "start": "202770",
    "end": "205710"
  },
  {
    "text": "So we have lots of different parts",
    "start": "205710",
    "end": "207210"
  },
  {
    "text": "of the backend consuming data from here.",
    "start": "207210",
    "end": "210090"
  },
  {
    "text": "One of them is an Apache Flink\napplication that runs on top",
    "start": "210090",
    "end": "214410"
  },
  {
    "text": "of Kinesis Analytics.",
    "start": "214410",
    "end": "215550"
  },
  {
    "text": "So what this application does",
    "start": "215550",
    "end": "217230"
  },
  {
    "text": "is aggregating this like cow location data",
    "start": "217230",
    "end": "220650"
  },
  {
    "text": "into buckets of 10 minutes.",
    "start": "220650",
    "end": "223079"
  },
  {
    "text": "And we also enrich the\ndata with a geo index",
    "start": "223080",
    "end": "225780"
  },
  {
    "text": "and we use this geo index\nlater on to do aggregation.",
    "start": "225780",
    "end": "228480"
  },
  {
    "text": "So once the data is ready,\nwe just ship as a file",
    "start": "228480",
    "end": "232560"
  },
  {
    "text": "to S3 and we use farm ID and data",
    "start": "232560",
    "end": "237120"
  },
  {
    "text": "as the partition keys in\norder to avoid hot partitions.",
    "start": "237120",
    "end": "241590"
  },
  {
    "text": "- Awesome. There must be a lot of data.",
    "start": "241590",
    "end": "243390"
  },
  {
    "text": "How does farmers actually\nmake use of this data?",
    "start": "243390",
    "end": "245910"
  },
  {
    "text": "- Sure, we have a feature in our app,",
    "start": "245910",
    "end": "247650"
  },
  {
    "text": "which is a cow location heat map.",
    "start": "247650",
    "end": "249870"
  },
  {
    "text": "So this shows where cows have been",
    "start": "249870",
    "end": "251940"
  },
  {
    "text": "like on the last six or 12 months.",
    "start": "251940",
    "end": "254280"
  },
  {
    "text": "So when the farmer wants\nto request that report,",
    "start": "254280",
    "end": "257100"
  },
  {
    "text": "the app sends a request to our backend,",
    "start": "257100",
    "end": "259350"
  },
  {
    "text": "which is hosted on ECS Fargate",
    "start": "259350",
    "end": "261540"
  },
  {
    "text": "and the ECS Fargate will\ndo the orchestration",
    "start": "261540",
    "end": "264030"
  },
  {
    "text": "on acquiring the data.",
    "start": "264030",
    "end": "265290"
  },
  {
    "text": "The data is stored on S3 as I mentioned.",
    "start": "265290",
    "end": "267180"
  },
  {
    "text": "So we use Athena to do\nthe actual querying.",
    "start": "267180",
    "end": "270600"
  },
  {
    "text": "So this is a classic MapReduce problem",
    "start": "270600",
    "end": "273570"
  },
  {
    "text": "where you have to go like through a lot",
    "start": "273570",
    "end": "275070"
  },
  {
    "text": "of data points and\naggregate it and count it.",
    "start": "275070",
    "end": "277620"
  },
  {
    "text": "So Athena does a great job at it.",
    "start": "277620",
    "end": "280169"
  },
  {
    "text": "We can process roughly\n25 million data points",
    "start": "280170",
    "end": "284910"
  },
  {
    "text": "in roughly 10 seconds,\nand then when the result",
    "start": "284910",
    "end": "289910"
  },
  {
    "text": "of the query is done, the ECS\nFargate application will go",
    "start": "289920",
    "end": "293670"
  },
  {
    "text": "to S3, get the data, and then send it back",
    "start": "293670",
    "end": "297270"
  },
  {
    "text": "to the app and the app can\nrender a nice heat map.",
    "start": "297270",
    "end": "301319"
  },
  {
    "text": "- Finally, let's see how\nMobileye is processing data",
    "start": "301320",
    "end": "304680"
  },
  {
    "text": "from 70 million cars\ndriving around the world.",
    "start": "304680",
    "end": "308190"
  },
  {
    "text": "- So let's dive into the architecture.",
    "start": "308190",
    "end": "309900"
  },
  {
    "text": "So you collected the data.",
    "start": "309900",
    "end": "311520"
  },
  {
    "text": "Move it to the on prem.",
    "start": "311520",
    "end": "313050"
  },
  {
    "text": "What do you do with this data?",
    "start": "313050",
    "end": "314370"
  },
  {
    "text": "- So as I mentioned before,\ndata is stored in S3.",
    "start": "314370",
    "end": "316979"
  },
  {
    "text": "From there, it is being pulled",
    "start": "316980",
    "end": "318840"
  },
  {
    "text": "to SQS and then being\nprocessed by EKS workers.",
    "start": "318840",
    "end": "323699"
  },
  {
    "text": "Those EKS workers actually\nscans automatically according",
    "start": "323700",
    "end": "327060"
  },
  {
    "text": "to the relevant SQS queue size",
    "start": "327060",
    "end": "328919"
  },
  {
    "text": "and can scale up to 800% during the day.",
    "start": "328920",
    "end": "332310"
  },
  {
    "text": "At the next phase, we pre-process, format,",
    "start": "332310",
    "end": "337310"
  },
  {
    "text": "store the data in S3",
    "start": "337680",
    "end": "339600"
  },
  {
    "text": "and then send it to a set\nof algorithms implemented",
    "start": "339600",
    "end": "343170"
  },
  {
    "text": "by Step Functions executing\nmultiple Lambda functions.",
    "start": "343170",
    "end": "346713"
  },
  {
    "text": "- Can you give you an example\nfor one of those functions?",
    "start": "347700",
    "end": "349860"
  },
  {
    "text": "- Yes, of course, Boaz.",
    "start": "349860",
    "end": "350879"
  },
  {
    "text": "So one example for an\nalgorithm can be the extraction",
    "start": "350880",
    "end": "354030"
  },
  {
    "text": "of potential construction\nzones from vehicles.",
    "start": "354030",
    "end": "356553"
  },
  {
    "text": "- Okay. Then what?",
    "start": "357390",
    "end": "359730"
  },
  {
    "text": "- Then the results are being exposed",
    "start": "359730",
    "end": "364020"
  },
  {
    "text": "to the rest of the system's components.",
    "start": "364020",
    "end": "366449"
  },
  {
    "text": "For example, a sophisticated\nclustering mechanism,",
    "start": "366450",
    "end": "369540"
  },
  {
    "text": "which combines observations",
    "start": "369540",
    "end": "370800"
  },
  {
    "text": "of different vehicles\ninto clustered events.",
    "start": "370800",
    "end": "373710"
  },
  {
    "text": "Another example can be\na aggregation mechanism,",
    "start": "373710",
    "end": "377009"
  },
  {
    "text": "which aggregates data by\ntime and road segments.",
    "start": "377010",
    "end": "382010"
  },
  {
    "text": "- Cool, so you already\ncollected some data,",
    "start": "383310",
    "end": "385470"
  },
  {
    "text": "got some insights.",
    "start": "385470",
    "end": "386340"
  },
  {
    "text": "What are you doing with these insights?",
    "start": "386340",
    "end": "387510"
  },
  {
    "text": "- So for example, if I'm a city planner,",
    "start": "387510",
    "end": "390090"
  },
  {
    "text": "the platform can provide\nme accurate hourly data",
    "start": "390090",
    "end": "393180"
  },
  {
    "text": "regarding pedestrian and bicycle traffic,",
    "start": "393180",
    "end": "395580"
  },
  {
    "text": "which allows me to plan\nbetter roads and cities.",
    "start": "395580",
    "end": "398729"
  },
  {
    "text": "- Okay. And how can I get\nthis data from the system?",
    "start": "398730",
    "end": "402390"
  },
  {
    "text": "- So after the data was calculated,",
    "start": "402390",
    "end": "406470"
  },
  {
    "text": "we save it into Elasticsearch\nand CockroachDB.",
    "start": "406470",
    "end": "409950"
  },
  {
    "text": "At the next phase, we service this data",
    "start": "409950",
    "end": "412140"
  },
  {
    "text": "to our customers using an EKS cluster.",
    "start": "412140",
    "end": "414783"
  },
  {
    "text": "This EKS cluster is\nserving a secured REST API",
    "start": "416880",
    "end": "420760"
  },
  {
    "text": "and web application\nwhich our users are using",
    "start": "421680",
    "end": "426680"
  },
  {
    "text": "to consume the data.",
    "start": "427110",
    "end": "428490"
  },
  {
    "text": "- Okay, so I can actually\nget the insights from this.",
    "start": "428490",
    "end": "431699"
  },
  {
    "text": "I wonder how many events\nthe system can process.",
    "start": "431700",
    "end": "434430"
  },
  {
    "text": "- So today we use between\n100 to 800 EKS workers",
    "start": "434430",
    "end": "439410"
  },
  {
    "text": "in order to process around 10\nmillion observations per day.",
    "start": "439410",
    "end": "442360"
  },
  {
    "text": "- Okay, 10 million observation\nper day doesn't sound much,",
    "start": "442360",
    "end": "444960"
  },
  {
    "text": "like you have 70 million cars\ndriving all over the world,",
    "start": "444960",
    "end": "447240"
  },
  {
    "text": "the amount of data each car can produce.",
    "start": "447240",
    "end": "449490"
  },
  {
    "text": "Why is that?",
    "start": "449490",
    "end": "450323"
  },
  {
    "text": "- That's an excellent question, Boaz.",
    "start": "450323",
    "end": "451650"
  },
  {
    "text": "We actively limit the amount",
    "start": "451650",
    "end": "453110"
  },
  {
    "text": "of data flowing into the system\nin order to control costs",
    "start": "453110",
    "end": "457110"
  },
  {
    "text": "and allow a pay per use model.",
    "start": "457110",
    "end": "459120"
  },
  {
    "text": "- We hope you enjoyed looking",
    "start": "459120",
    "end": "460620"
  },
  {
    "text": "at how our customers are using analytics",
    "start": "460620",
    "end": "463110"
  },
  {
    "text": "in their AWS cloud solutions.",
    "start": "463110",
    "end": "465120"
  },
  {
    "text": "Find out more by watching\nthe full episodes",
    "start": "465120",
    "end": "467610"
  },
  {
    "text": "from the links in the description",
    "start": "467610",
    "end": "469620"
  },
  {
    "text": "and keep watching \"This\nIs My Architecture\".",
    "start": "469620",
    "end": "472436"
  }
]