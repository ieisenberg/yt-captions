[
  {
    "start": "0",
    "end": "79000"
  },
  {
    "text": "thanks for coming out I'm Jeff Hoffman I'm the director of the AWS elastic beanstalk team with me as other Roger",
    "start": "0",
    "end": "6120"
  },
  {
    "text": "Singh he's a senior product manager also with Beanstalk and we're here to talk to you today about scaling web applications",
    "start": "6120",
    "end": "12150"
  },
  {
    "text": "with us elastic beanstalk let's talk a little bit about what we're going to cover today",
    "start": "12150",
    "end": "18140"
  },
  {
    "text": "I'm going to start with an introduction for those of you who are already familiar with Beanstalk I'll go through this at a reasonably high level but I",
    "start": "18140",
    "end": "25650"
  },
  {
    "text": "don't want to leave anybody behind I want to make sure we level set everybody gets a good understanding of what we do and what were for so we'll talk about",
    "start": "25650",
    "end": "31830"
  },
  {
    "text": "that we'll talk about how you would use Beanstalk in favor of what I call DIY in",
    "start": "31830",
    "end": "37050"
  },
  {
    "text": "this case when I mean do-it-yourself I mean we're still with AWS I'm not talking",
    "start": "37050",
    "end": "42390"
  },
  {
    "text": "about making your own servers racking and mounting things so it's still going",
    "start": "42390",
    "end": "47670"
  },
  {
    "text": "to be what Beanstalk does versus what you could do yourself with all of the same services within AWS we'll talk a",
    "start": "47670",
    "end": "55110"
  },
  {
    "text": "little bit about how you get started with Beanstalk that should be again pretty simple and straightforward and then I'm",
    "start": "55110",
    "end": "61379"
  },
  {
    "text": "going to turn it over to adhiraj and he's going to actually show us a working demo of a somewhat complex but not crazy",
    "start": "61379",
    "end": "69659"
  },
  {
    "text": "complex Beanstalk app and he's going to use that as a springboard to go through a whole host of best practices and that",
    "start": "69659",
    "end": "75390"
  },
  {
    "text": "actually is probably gonna be the meat of our discussion today so why did we make",
    "start": "75390",
    "end": "81170"
  },
  {
    "start": "79000",
    "end": "79000"
  },
  {
    "text": "Beanstalk we really wanted to address",
    "start": "81170",
    "end": "86250"
  },
  {
    "text": "what we saw in the market as a host of challenges for customers so you can see",
    "start": "86250",
    "end": "93360"
  },
  {
    "text": "that that we believe one of the things that customers deal with a lot is either complexity or for those of you who are",
    "start": "93360",
    "end": "100170"
  },
  {
    "text": "feeling kind of a little more sophisticated have done this lot they're kind of repetitiveness of deploying code",
    "start": "100170",
    "end": "106979"
  },
  {
    "text": "provisioning and managing infrastructure every time you want to do something with a web app the expertise or time again on",
    "start": "106979",
    "end": "113880"
  },
  {
    "text": "that spectrum of how sophisticated you feel like to actually manage and configure all of the infrastructure that",
    "start": "113880",
    "end": "120000"
  },
  {
    "text": "goes into hosting a web app how to actually do auto scaling or manage the scaling of the infrastructure",
    "start": "120000",
    "end": "126360"
  },
  {
    "text": "itself and then even if you master all of that even if you've got that all down if you're a big organization you don't",
    "start": "126360",
    "end": "132720"
  },
  {
    "text": "want to relearn those lessons you don't want to do it differently for each team that's going to have to go through these same steps so consistency across team is",
    "start": "132720",
    "end": "139560"
  },
  {
    "text": "something else that we wanted to address what is the lastic Beanstalk for those who have never seen this before it's we",
    "start": "139560",
    "end": "147300"
  },
  {
    "start": "141000",
    "end": "141000"
  },
  {
    "text": "think of it as the easiest way to deploy and manage web services of any kind in AWS that's",
    "start": "147300",
    "end": "156150"
  },
  {
    "text": "our goal so it doesn't do anything magical that you couldn't do with AWS any other way well maybe it's a little",
    "start": "156150",
    "end": "161760"
  },
  {
    "text": "bit magical but it's it's all open you can actually figure out everything that we're doing and extend it and we'll talk",
    "start": "161760",
    "end": "168270"
  },
  {
    "text": "a little bit about that as we go what do you manage within a dubious",
    "start": "168270",
    "end": "174570"
  },
  {
    "start": "171000",
    "end": "171000"
  },
  {
    "text": "elastic Beanstalk versus doing this all yourself that top little box is your code our",
    "start": "174570",
    "end": "180960"
  },
  {
    "text": "goal if we do it right is that at least on an ongoing basis that's the only piece that you worry about with elastic",
    "start": "180960",
    "end": "187770"
  },
  {
    "text": "Beanstalk we take care of for you once you choose what we think of as kind of a supported platform everything else",
    "start": "187770",
    "end": "193860"
  },
  {
    "text": "that's below that box so we we handle the HTTP server the app",
    "start": "193860",
    "end": "199709"
  },
  {
    "text": "server the language interpreter if there is one for that language the OS and then",
    "start": "199709",
    "end": "204990"
  },
  {
    "text": "of course underneath that there's still the same infrastructure you're used to from ec2 there's a host all of that",
    "start": "204990",
    "end": "210270"
  },
  {
    "text": "stuff is managed as part of what Beanstalk will do for you if we zoom out one level from that",
    "start": "210270",
    "end": "216270"
  },
  {
    "text": "there's actually another layer of kind of management that we do so beyond just the stack that's running your code",
    "start": "216270",
    "end": "222120"
  },
  {
    "text": "there's a whole host of other infrastructure pieces that you would expect to want for any kind of a well",
    "start": "222120",
    "end": "227790"
  },
  {
    "text": "provisioned app so we have a couple different options as to how will let you deploy you can either do a single",
    "start": "227790",
    "end": "233700"
  },
  {
    "text": "instance we'll talk about what that means it's great for kind of dev tests low cost or if you don't want to do a",
    "start": "233700",
    "end": "240330"
  },
  {
    "text": "lot with load balancers or auto scaling and then we have a more production centric kind of mode of operating where",
    "start": "240330",
    "end": "245490"
  },
  {
    "text": "we'll offer load balancing options where you will set up auto scaling for you we",
    "start": "245490",
    "end": "250500"
  },
  {
    "text": "do offer both a web and a worker tier I'll talk a little bit more about what that means in a minute and then you can",
    "start": "250500",
    "end": "255840"
  },
  {
    "text": "see kind of this example of some of the infrastructure we might stand up for you including all the way through to RDS",
    "start": "255840",
    "end": "261510"
  },
  {
    "text": "databases at the back that doesn't have to be the way that your infrastructure looks actually very flexible you can choose a",
    "start": "261510",
    "end": "267930"
  },
  {
    "text": "lot of very cool like under the covers kind of configuration things with something",
    "start": "267930",
    "end": "274259"
  },
  {
    "text": "called DB extensions which I'll only tease you about right now and let out a rush show you a little bit more about that later and we even do all of this",
    "start": "274259",
    "end": "282150"
  },
  {
    "text": "through to providing a domain for you actually give you a cname that's unique",
    "start": "282150",
    "end": "287280"
  },
  {
    "text": "to your app of course if you have your own most people do when they get to a production level you can provide that as well and we'll manage that with it",
    "start": "287280",
    "end": "294740"
  },
  {
    "start": "294000",
    "end": "294000"
  },
  {
    "text": "so what you're going to get from this we hope is a very easy to start with",
    "start": "294740",
    "end": "300570"
  },
  {
    "text": "process for those of you who just want to kind of experiment or if you're in dev test mode or you really are intimidated by the variety of things",
    "start": "300570",
    "end": "307050"
  },
  {
    "text": "that you can do with AWS this is still the way that I think is easiest to get started with our eye on making the developers as",
    "start": "307050",
    "end": "314639"
  },
  {
    "text": "productive and agile as we possibly can but our goal really is to be impossible to outgrow we don't want this to ever be",
    "start": "314639",
    "end": "321419"
  },
  {
    "text": "a service that we think of as the kind of the only the for the low end of the",
    "start": "321419",
    "end": "326580"
  },
  {
    "text": "spectrum that's not our goal and so to that end we provide you complete control",
    "start": "326580",
    "end": "331860"
  },
  {
    "text": "over your resources even though we make it easy to get started you can actually reach into the way that Beanstalk does",
    "start": "331860",
    "end": "338940"
  },
  {
    "text": "management of infrastructure and again we'll tease you a little bit with that later on that note at the bottom is also",
    "start": "338940",
    "end": "345570"
  },
  {
    "text": "important there's no additional cost for using a tab us Beanstalk II that's only the resources that we're provisioning on",
    "start": "345570",
    "end": "351389"
  },
  {
    "text": "your behalf that you're paying for this is a service that we provide on top of that for free so what do people use us for as you kind",
    "start": "351389",
    "end": "359130"
  },
  {
    "start": "357000",
    "end": "357000"
  },
  {
    "text": "of guessed from my language so far it's mostly a lot of web applications its websites its API backends mobile",
    "start": "359130",
    "end": "365880"
  },
  {
    "text": "backends but we do have the support for kind of a worker model of synchronous workers and we'll show a little bit how",
    "start": "365880",
    "end": "372690"
  },
  {
    "text": "you choose that in a minute how do you get started with it that's a great question that I asked myself so",
    "start": "372690",
    "end": "378919"
  },
  {
    "start": "378000",
    "end": "378000"
  },
  {
    "text": "this is all you need you need to provide your code and then answer a few kind of questions you decide exactly how you",
    "start": "378919",
    "end": "385830"
  },
  {
    "text": "want to walk through the process of standing up your application you pick a",
    "start": "385830",
    "end": "391229"
  },
  {
    "text": "region we're in every public region Beanstalk is among the very first to",
    "start": "391229",
    "end": "396870"
  },
  {
    "text": "deploy so as the region grow we hope to always be there near launch you pick what we call here a stack type",
    "start": "396870",
    "end": "404249"
  },
  {
    "text": "or a container type you can see the supported platforms on the right we support Java both in Tomcat mode and a",
    "start": "404249",
    "end": "410789"
  },
  {
    "text": "native just raw Java container node php.net with iis python ruby and go and",
    "start": "410789",
    "end": "418619"
  },
  {
    "text": "you'll notice docker nested in the middle there if you want some kind of control beyond any of our like very",
    "start": "418619",
    "end": "425399"
  },
  {
    "text": "prescribed stacks you can choose either a single kind of what we think of as like a native docker instance where we",
    "start": "425399",
    "end": "431219"
  },
  {
    "text": "we push out a container that just has support for docker and that's the only assumption we make everything else you",
    "start": "431219",
    "end": "436349"
  },
  {
    "text": "add to it is up to you or we have integration with pcs you can actually do multi container kind of deployments",
    "start": "436349",
    "end": "442379"
  },
  {
    "text": "through a doctor interface all the way to dcs is the backend you choose whether",
    "start": "442379",
    "end": "447659"
  },
  {
    "text": "you want to do a single instance or load balanced auto scaled kind of environment and again the decision there is really how what's my trade-off between cost and",
    "start": "447659",
    "end": "455249"
  },
  {
    "text": "speed of deploying this thing versus stability kind of reliability that's the",
    "start": "455249",
    "end": "461519"
  },
  {
    "text": "thing that you get with a load balanced auto scaled environment and then you'll notice I have an optional RDS piece at",
    "start": "461519",
    "end": "466619"
  },
  {
    "text": "the bottom it's actually pretty easy from our interface to say as I stand up this application infrastructure go ahead",
    "start": "466619",
    "end": "472619"
  },
  {
    "text": "and create an RDS database for me as well that's great if you're doing dev tests but I want to give you a caveat on that the lifecycle of the RDS database",
    "start": "472619",
    "end": "480300"
  },
  {
    "text": "did you create this way in this example is tied to the lifecycle of that environment that you're creating so",
    "start": "480300",
    "end": "486240"
  },
  {
    "text": "again great for dev tests where you want to stand up a set of data to test against and then tear it down when you",
    "start": "486240",
    "end": "491490"
  },
  {
    "text": "throw that version away not great if that's what you're trying to do for production data we do have ways",
    "start": "491490",
    "end": "496709"
  },
  {
    "text": "obviously to tie into other production data environments whether it's RDS",
    "start": "496709",
    "end": "501740"
  },
  {
    "text": "dynamo pretty much anything that you can think of behind the scenes we can actually offer a way to integrate that",
    "start": "501740",
    "end": "507509"
  },
  {
    "text": "into a beanstalk environment so some basic terminology that will help",
    "start": "507509",
    "end": "513388"
  },
  {
    "start": "511000",
    "end": "511000"
  },
  {
    "text": "you understand kind of the rest of what we talked about everything within elastic Beanstalk starts with an application and that's",
    "start": "513389",
    "end": "519899"
  },
  {
    "text": "just a generic way of grouping together a whole host of deployed versions of a single app and when you create an",
    "start": "519899",
    "end": "526860"
  },
  {
    "text": "application the first time you upload any code to us the first time you provide us something to deploy boy you",
    "start": "526860",
    "end": "532500"
  },
  {
    "text": "name it you pick an application version for that and it doesn't have to be v1 v2",
    "start": "532500",
    "end": "538230"
  },
  {
    "text": "it could be anything that you want it to be you can actually name it based off of a good branch you can do whatever you want with it and that flows directly",
    "start": "538230",
    "end": "544949"
  },
  {
    "text": "into any number of environments that you have the cool thing is each environment",
    "start": "544949",
    "end": "549990"
  },
  {
    "text": "and really we don't were not very opinionated about what you use your environments for but you can imagine a",
    "start": "549990",
    "end": "555389"
  },
  {
    "text": "typical use cases dev test you know staging prod something like that each",
    "start": "555389",
    "end": "561779"
  },
  {
    "text": "one of those versions are independently deployed to each of those environments and the coolest thing of all is that you can say okay when this is tested and",
    "start": "561779",
    "end": "568769"
  },
  {
    "text": "proven say integration testing I can take that exact same deployed application version by name and move it",
    "start": "568769",
    "end": "575279"
  },
  {
    "text": "into prod you don't reapplied anything there's no chance to incorporate untested changes it just moves that one",
    "start": "575279",
    "end": "581129"
  },
  {
    "text": "into another environment for you and I don't I say move but it doesn't even have to move it actually be copies you",
    "start": "581129",
    "end": "586649"
  },
  {
    "text": "can have the same environment versions running our application versions running multiple environments if you want",
    "start": "586649",
    "end": "592490"
  },
  {
    "text": "how do you deploy them let's take a look there's a lot of methods you can do it through our console we have a full web",
    "start": "592490",
    "end": "599279"
  },
  {
    "start": "593000",
    "end": "593000"
  },
  {
    "text": "console as you would expect for any AWS service we also have toolkits for Eclipse and visual studio so if you want",
    "start": "599279",
    "end": "605759"
  },
  {
    "text": "to you can do deploys directly from your IDE and really helpful for fast turn kind of iterations within dev test cycle",
    "start": "605759",
    "end": "612410"
  },
  {
    "text": "we have obviously support in the AWS SDK and the AWS CLI so if you want to",
    "start": "612410",
    "end": "617699"
  },
  {
    "text": "automate some of this stuff or if you have kind of a pipeline that you want to bake into a EB deploy you certainly can",
    "start": "617699",
    "end": "623699"
  },
  {
    "text": "but we also have our own CLI and the EDC lies what I'm going to show you a little bit of you'll actually see a glimpse of",
    "start": "623699",
    "end": "629550"
  },
  {
    "text": "it a little bit when adhiraj does his demo as well it's very rich and we're going to walk",
    "start": "629550",
    "end": "635370"
  },
  {
    "text": "through a little bit of what you get with that in just a second but any of these things will do the same kind of work under the covers so again I've",
    "start": "635370",
    "end": "642930"
  },
  {
    "start": "641000",
    "end": "641000"
  },
  {
    "text": "mentioned we'll do a little run-through here of what you can do with the CLI with our EB CLI including how to install",
    "start": "642930",
    "end": "648899"
  },
  {
    "text": "it very easy to get started you can also just download it if you want to you don't have to do a pip install we assume",
    "start": "648899",
    "end": "655110"
  },
  {
    "text": "in this case you're going to start with some kind of a cloned sample app but again you know could be your own code you can start something that you already",
    "start": "655110",
    "end": "661019"
  },
  {
    "text": "had and get or whatever repository you you'll see on number three there we're",
    "start": "661019",
    "end": "666569"
  },
  {
    "text": "doing an EB and it what this does is like an interactive session of walking you through all of those decisions I talked about three or four slides ago so",
    "start": "666569",
    "end": "673379"
  },
  {
    "text": "it says tell me which region you want name this application tell me whether it's single instance or if it's load",
    "start": "673379",
    "end": "679290"
  },
  {
    "text": "balanced auto scaled and once that's all done once you've walked through those steps it actually does the deploy for",
    "start": "679290",
    "end": "686069"
  },
  {
    "text": "you when you say eb create you're off and running and then from that point",
    "start": "686069",
    "end": "691230"
  },
  {
    "text": "let's say you want to iterate on this as you would you can continually go in a cycle of updating your code committing",
    "start": "691230",
    "end": "697439"
  },
  {
    "start": "692000",
    "end": "692000"
  },
  {
    "text": "your changes and just it could be as simple as saying eb deploy and by default we pull the latest committed",
    "start": "697439",
    "end": "703470"
  },
  {
    "text": "change and we deploy it with the same name that you've given that commit again you can override any of this the EBC li",
    "start": "703470",
    "end": "709649"
  },
  {
    "text": "is very rich I encourage you there's links at the end of this that we'll go into more detail for everything that",
    "start": "709649",
    "end": "715110"
  },
  {
    "text": "we're covering including what entourage is going to get to later but the EB CLI offers a lot of additional kind of",
    "start": "715110",
    "end": "722959"
  },
  {
    "text": "command lines which is that you can put in there to kind of tailor exactly what you want it to do we even give you a",
    "start": "722959",
    "end": "728339"
  },
  {
    "text": "shortcut to just hop straight to a browser session with whatever cname we've set set aside for that deployed",
    "start": "728339",
    "end": "735449"
  },
  {
    "text": "out so having said that what we're going to",
    "start": "735449",
    "end": "741720"
  },
  {
    "text": "walk through next is the sample app that shows everything kind of that I've described that it takes it one step",
    "start": "741720",
    "end": "747269"
  },
  {
    "text": "further and what we're going to do is talk about how to take the basics of what EB can do and then tailor it",
    "start": "747269",
    "end": "754439"
  },
  {
    "text": "configure it or customize it a little bit more so again I mentioned before this concept called EB extensions that's",
    "start": "754439",
    "end": "760499"
  },
  {
    "text": "a way for us to kind of plumb through additional AWS resources in a way that",
    "start": "760499",
    "end": "765749"
  },
  {
    "text": "it makes very easy for your code to consume or references to those resources",
    "start": "765749",
    "end": "771389"
  },
  {
    "text": "without having to hard-code anything so you get a glimpse of that when under-eyes shows that sample app in this",
    "start": "771389",
    "end": "777209"
  },
  {
    "text": "case we're going to show how to tie you in a dynamo DB SNS and SQS so we're going well beyond what the kind of",
    "start": "777209",
    "end": "783389"
  },
  {
    "text": "initial sample app might have done and with that I'll turn it over to Josh",
    "start": "783389",
    "end": "789810"
  },
  {
    "text": "thank you thank you Jeff",
    "start": "789810",
    "end": "793620"
  },
  {
    "text": "so to avoid any network issues I created a video for the",
    "start": "797730",
    "end": "803260"
  },
  {
    "text": "sample app this is essentially a launch P signup",
    "start": "803260",
    "end": "810220"
  },
  {
    "text": "app which is filled in node the application let me activate this",
    "start": "810220",
    "end": "818910"
  },
  {
    "text": "okay so the application stores data in so essentially the customer would come",
    "start": "822329",
    "end": "828070"
  },
  {
    "text": "in and they would given the name and their email address and it will sign",
    "start": "828070",
    "end": "833440"
  },
  {
    "text": "them up this data would be stored in Amazon DynamoDB and published",
    "start": "833440",
    "end": "839200"
  },
  {
    "text": "notifications to Amazon simple notification service when a customer fills in the form the sample application",
    "start": "839200",
    "end": "844899"
  },
  {
    "text": "is using Express framework and bootstrap to build the simple application",
    "start": "844899",
    "end": "850350"
  },
  {
    "text": "now let's look at some of the application components which this",
    "start": "850350",
    "end": "857500"
  },
  {
    "text": "application is using let's give it a second",
    "start": "857500",
    "end": "863430"
  },
  {
    "text": "okay so if you see here this is the sample application these are all the",
    "start": "865860",
    "end": "871510"
  },
  {
    "text": "subfolders and files in it first thing to define is the dependencies of an application user we use standard",
    "start": "871510",
    "end": "878589"
  },
  {
    "text": "dependency frameworks this is a node app so if you see here you would have the",
    "start": "878589",
    "end": "884020"
  },
  {
    "text": "dependencies you should not it is highly recommended that you do not use latest you should hard code your dependencies",
    "start": "884020",
    "end": "890770"
  },
  {
    "text": "here we are using shrink-wrap dot JSON which essentially",
    "start": "890770",
    "end": "897760"
  },
  {
    "text": "is a dependency manager file for node applications this locks down excuse me this locks down the version of package",
    "start": "897760",
    "end": "904660"
  },
  {
    "text": "dependency so that you can control exactly which version of a dependencies would be used when a package is",
    "start": "904660",
    "end": "910570"
  },
  {
    "text": "installed so by default NPM recursively installs target dependencies",
    "start": "910570",
    "end": "916890"
  },
  {
    "text": "now let's look at DB extensions that Jeff",
    "start": "916890",
    "end": "922230"
  },
  {
    "text": "mentioned EB Extension is a great framework which you can use to modify and customize the applications or",
    "start": "922230",
    "end": "928790"
  },
  {
    "text": "configuration stack configuration files are Yammer format documents with a.com file extension that",
    "start": "928790",
    "end": "936150"
  },
  {
    "text": "you place in a folder named EB extension as you can see in your application source bundle two of the most important",
    "start": "936150",
    "end": "942050"
  },
  {
    "text": "components of EB extensions are option settings and resources now let's look at",
    "start": "942050",
    "end": "947850"
  },
  {
    "text": "the option settings you configure so this helps you to configure different",
    "start": "947850",
    "end": "953070"
  },
  {
    "text": "options in this case we are configuring two tables one is startup startup sign",
    "start": "953070",
    "end": "959670"
  },
  {
    "text": "up table and other is the new sign up topic",
    "start": "959670",
    "end": "964550"
  },
  {
    "text": "it is also recommended that you use reference and avoid hard coding in these files",
    "start": "965750",
    "end": "970820"
  },
  {
    "text": "another section is the resource configurations I'm defining create DynamoDB table and create SNS topic so",
    "start": "970820",
    "end": "979230"
  },
  {
    "text": "which is essentially what's going to do is whenever someone signs up the admin is going to get an email based on those",
    "start": "979230",
    "end": "986570"
  },
  {
    "text": "notifications in addition to that this has an eye on policy defined you have to create an",
    "start": "986570",
    "end": "994460"
  },
  {
    "text": "instance profile name I named it AWS elastic Beanstalk sample roll with the",
    "start": "994460",
    "end": "1000260"
  },
  {
    "text": "policy which has been defined in this file this allows Eevee to communicate with",
    "start": "1000260",
    "end": "1005420"
  },
  {
    "text": "dynamodb an SNS service on behalf of the customer I'll be using EB CLI for this",
    "start": "1005420",
    "end": "1013240"
  },
  {
    "text": "so I use DBA net sorry it was a little quick and",
    "start": "1013240",
    "end": "1019000"
  },
  {
    "text": "when you do any B in it it will ask for different options you select the right",
    "start": "1019000",
    "end": "1024199"
  },
  {
    "text": "region I selected one that is Virginia and then I selected an application I",
    "start": "1024200",
    "end": "1031220"
  },
  {
    "text": "wanted to create my own so I created a sample app one it is going to create a sample application and it will ask you",
    "start": "1031220",
    "end": "1037699"
  },
  {
    "text": "for the platform version and if you see here I'll probably pause it if you look",
    "start": "1037700",
    "end": "1044240"
  },
  {
    "text": "here we have recently added support for code comic where you can store your deposit fees and store your code so I",
    "start": "1044240",
    "end": "1051770"
  },
  {
    "text": "have for repose I'm using three in it we reinvent so if you see",
    "start": "1051770",
    "end": "1061429"
  },
  {
    "text": "I'm choosing master for the branch and the SNS SSN and the key pair",
    "start": "1061429",
    "end": "1070869"
  },
  {
    "text": "oops",
    "start": "1070869",
    "end": "1073869"
  },
  {
    "text": "okay so I choose the repository there I have the sample application and I give other",
    "start": "1081930",
    "end": "1089430"
  },
  {
    "text": "information related to branch and the SSN SSH sorry and they keep their",
    "start": "1089430",
    "end": "1098540"
  },
  {
    "text": "okay now once this has been done I'm all my",
    "start": "1103610",
    "end": "1112350"
  },
  {
    "text": "initialization is done so I can now go ahead and create an application for that I will use an EB create",
    "start": "1112350",
    "end": "1119450"
  },
  {
    "text": "hopefully it will come up okay perfect so I'm using an EB create",
    "start": "1119450",
    "end": "1124950"
  },
  {
    "text": "I'm using an instance profile that we just discussed and and once you",
    "start": "1124950",
    "end": "1131809"
  },
  {
    "text": "initiate this we will start creating Alaska Vince I will start creating an application version with distance",
    "start": "1131809",
    "end": "1138239"
  },
  {
    "text": "profile giving us the capability of interacting with dynamo DB and the SNS",
    "start": "1138239",
    "end": "1144618"
  },
  {
    "text": "if you see it's asked for the default I choose all the default options for the C",
    "start": "1144739",
    "end": "1149820"
  },
  {
    "text": "name I use the classic load balancer and it will start creating the application",
    "start": "1149820",
    "end": "1156029"
  },
  {
    "text": "for you now just to quickly get to the end of it",
    "start": "1156029",
    "end": "1163230"
  },
  {
    "text": "I have fast forwarded it and we have you can see the application getting deployed",
    "start": "1163230",
    "end": "1169340"
  },
  {
    "text": "on elastic Beanstalk through the console if you see it this is a dashboard the -",
    "start": "1169340",
    "end": "1176070"
  },
  {
    "text": "good would have the status the recent events the running and the node now and",
    "start": "1176070",
    "end": "1183570"
  },
  {
    "text": "the kind of application that is running and",
    "start": "1183570",
    "end": "1189320"
  },
  {
    "text": "there is URL if you click on the URL it will take you to the application that we just deployed and you can quickly test",
    "start": "1189379",
    "end": "1196440"
  },
  {
    "text": "it and you can put in the information of the name and the email address and let's",
    "start": "1196440",
    "end": "1204659"
  },
  {
    "text": "quickly check what happened here so this is the dynamo DB table that we",
    "start": "1204659",
    "end": "1211619"
  },
  {
    "text": "created dynamo DB table name the start of signup table it has this entry",
    "start": "1211619",
    "end": "1218299"
  },
  {
    "text": "and same would be for the SNS topic that was",
    "start": "1218299",
    "end": "1225119"
  },
  {
    "text": "created",
    "start": "1225119",
    "end": "1227570"
  },
  {
    "start": "1234000",
    "end": "1234000"
  },
  {
    "text": "okay so this was a quick run-through our sample app now I'll cover biggest",
    "start": "1234040",
    "end": "1240250"
  },
  {
    "text": "section of our presentation which is referring to the best practices that we recommend for using elastic Beanstalk we",
    "start": "1240250",
    "end": "1248200"
  },
  {
    "text": "have many deployment options and managed platform updates that was recently launched we also will touch upon auto",
    "start": "1248200",
    "end": "1254590"
  },
  {
    "text": "scaling and some reference to load testing and other smaller tips",
    "start": "1254590",
    "end": "1261000"
  },
  {
    "text": "so we recently I'll give it a minute for you to absorb this slide essentially we provide",
    "start": "1261000",
    "end": "1269350"
  },
  {
    "text": "different options for deploying your application or your platform configuration it is based on either you",
    "start": "1269350",
    "end": "1275980"
  },
  {
    "text": "have a single instance environment or a load balance and auto scale instance auto scale environment based on if it is",
    "start": "1275980",
    "end": "1283240"
  },
  {
    "text": "an application deployment or a platform configuration deployment you have different options if you see immutable",
    "start": "1283240",
    "end": "1288370"
  },
  {
    "text": "in single instances they have been recently added in fact last week we launched immutable deployments for",
    "start": "1288370",
    "end": "1293440"
  },
  {
    "text": "single incidents and we will discuss some of these options going forward",
    "start": "1293440",
    "end": "1300300"
  },
  {
    "text": "now let's discuss all it wants EB deploys the new version of all instance",
    "start": "1302610",
    "end": "1308140"
  },
  {
    "text": "simultaneously so all instances in your environment are out of service for a short time while the deployment occurs",
    "start": "1308140",
    "end": "1314530"
  },
  {
    "text": "by default the environment uses all at once deployment if you create it with a different client like API SDK or if you",
    "start": "1314530",
    "end": "1321850"
  },
  {
    "text": "CLI if you see here the the instances are getting updated to version v2 and",
    "start": "1321850",
    "end": "1328320"
  },
  {
    "text": "v2 is successfully deployed and your application is up and running",
    "start": "1328320",
    "end": "1334470"
  },
  {
    "start": "1334000",
    "end": "1334000"
  },
  {
    "text": "now let's discuss about rolling rolling this essentially deploys the new version",
    "start": "1334470",
    "end": "1340060"
  },
  {
    "text": "in touches each batch is taken out of service within these instances during a",
    "start": "1340060",
    "end": "1345580"
  },
  {
    "text": "deployment phase which reduces your own online capacity to number of instances in the batch",
    "start": "1345580",
    "end": "1351930"
  },
  {
    "text": "so if you see here so you can define the bath size by the number of instances or",
    "start": "1351930",
    "end": "1357520"
  },
  {
    "text": "the percentage so here let's say it is 50 or two based on percentage or numbers",
    "start": "1357520",
    "end": "1362970"
  },
  {
    "text": "we deploy we take these down we deploy v2 to two instances and they come up by",
    "start": "1362970",
    "end": "1370139"
  },
  {
    "text": "default your load balance and auto-scaling environment uses rolling four application deployment if you",
    "start": "1370139",
    "end": "1376359"
  },
  {
    "text": "create it with the console or the eb CLI",
    "start": "1376359",
    "end": "1380700"
  },
  {
    "text": "if you see here then the next two instances which were not updated they are updated and it's available",
    "start": "1384659",
    "end": "1391919"
  },
  {
    "text": "so one of the big because downside of using rolling is that if you",
    "start": "1391919",
    "end": "1399340"
  },
  {
    "text": "are running traffic on this application your capacity would be reduced because you're",
    "start": "1399340",
    "end": "1404529"
  },
  {
    "text": "taking some of the instances down within the instances that you have in that environment now let's talk about rolling",
    "start": "1404529",
    "end": "1410830"
  },
  {
    "start": "1409000",
    "end": "1409000"
  },
  {
    "text": "with additional batches which solves some of these problems during deployment with batches deploys the new version in",
    "start": "1410830",
    "end": "1417519"
  },
  {
    "text": "batches but first they launch new set of instances based on the bath size that",
    "start": "1417519",
    "end": "1424269"
  },
  {
    "text": "you have defined if you see here we launch let's say you have defined as",
    "start": "1424269",
    "end": "1430269"
  },
  {
    "text": "batch size 2 or 50% it will launch two new instances which are getting deployed",
    "start": "1430269",
    "end": "1436809"
  },
  {
    "text": "with version 2 and once they're up the traffic is routed to",
    "start": "1436809",
    "end": "1442149"
  },
  {
    "text": "them so at this instance you would have little higher capacity at that moment once they are up we bring two of the",
    "start": "1442149",
    "end": "1450729"
  },
  {
    "text": "existing instances down and bring them up with the new version of",
    "start": "1450729",
    "end": "1456479"
  },
  {
    "text": "application you bring it up and once we already have v2s on to instance or four",
    "start": "1456479",
    "end": "1461979"
  },
  {
    "text": "instances that was the original bath size we take down the rest of the two",
    "start": "1461979",
    "end": "1468369"
  },
  {
    "text": "instances that were already there so this essentially is the final look that you update",
    "start": "1468369",
    "end": "1474330"
  },
  {
    "start": "1474000",
    "end": "1474000"
  },
  {
    "text": "now let's look at immutable so immutable immutable of this essentially even the",
    "start": "1474330",
    "end": "1482619"
  },
  {
    "text": "the issue of turning down the existing instances is also taken care off so",
    "start": "1482619",
    "end": "1488080"
  },
  {
    "text": "immutable gives you new instances all together in fact it creates a completely",
    "start": "1488080",
    "end": "1493419"
  },
  {
    "text": "all together a new auto scaling group it's temporary once the the instances",
    "start": "1493419",
    "end": "1499989"
  },
  {
    "text": "are up and running it says the traffic is diverted to the auto scaling group the new artery scaling group and the",
    "start": "1499989",
    "end": "1505390"
  },
  {
    "text": "previous one is taken down so with the first instance pass if they",
    "start": "1505390",
    "end": "1510850"
  },
  {
    "text": "pass so yeah so there are two steps essentially so first we bring one instance within the auto scaling group and once that is successful in our",
    "start": "1510850",
    "end": "1518230"
  },
  {
    "text": "health checks then we go ahead and add other instances which essentially",
    "start": "1518230",
    "end": "1524440"
  },
  {
    "text": "replicates the Bo capacity in your application",
    "start": "1524440",
    "end": "1529530"
  },
  {
    "text": "so during a mutable environment update the capacity of the environment doubles",
    "start": "1529530",
    "end": "1534640"
  },
  {
    "text": "for short line when the instance instances in the new auto scaling group starts serving requests and before the",
    "start": "1534640",
    "end": "1541270"
  },
  {
    "text": "original auto scaling group instances are terminated if your environment has many instances or instances with a low",
    "start": "1541270",
    "end": "1546640"
  },
  {
    "text": "on demand limit ensure that you have enough capacity to perform the immutable environment update if you are nearing a",
    "start": "1546640",
    "end": "1552340"
  },
  {
    "text": "limit service limit consider using rolling update instead immutable update requires an ass health reporting to",
    "start": "1552340",
    "end": "1559060"
  },
  {
    "text": "evaluate your health or your applications health so if like you see",
    "start": "1559060",
    "end": "1564730"
  },
  {
    "text": "here it will take down the auto scaling group which was already there and you haven't completely new artists getting",
    "start": "1564730",
    "end": "1570280"
  },
  {
    "text": "grouped with new instances this has a lot of advantages of over",
    "start": "1570280",
    "end": "1577860"
  },
  {
    "text": "your rolling and rolling the batches because it completely eliminates the possibility of any issues during",
    "start": "1578370",
    "end": "1584530"
  },
  {
    "text": "deployment if the deployment doesn't work it can quickly rollback by taking down the new instance sorry the new auto",
    "start": "1584530",
    "end": "1591880"
  },
  {
    "text": "scaling group which was temporary anyway and it reverts back to the previous auto",
    "start": "1591880",
    "end": "1598030"
  },
  {
    "start": "1597000",
    "end": "1597000"
  },
  {
    "text": "scaling now let's look at blue green so we have a dns-based blue green option for you in",
    "start": "1598030",
    "end": "1605080"
  },
  {
    "text": "case you want to ensure that your application should not have any downtime",
    "start": "1605080",
    "end": "1610210"
  },
  {
    "text": "at all this is the best way for doing but it requires some manual steps",
    "start": "1610210",
    "end": "1615870"
  },
  {
    "text": "just because last abuse or performs an in-place update for for your update your application versions your application",
    "start": "1615870",
    "end": "1622480"
  },
  {
    "text": "may become unavailable for users of short for short time so what we do in Bluegreen is you have an",
    "start": "1622480",
    "end": "1629980"
  },
  {
    "text": "existing environment that this auto scaling group you go ahead this is but from the console",
    "start": "1629980",
    "end": "1636720"
  },
  {
    "text": "you go ahead and click on actions do a clone so elastic Beanstalk will create a",
    "start": "1636720",
    "end": "1642610"
  },
  {
    "text": "clone environment for this current and mana that you have and will give it a",
    "start": "1642610",
    "end": "1648400"
  },
  {
    "text": "new name I mean you have to give a new name to it so that it can distinguish so once you have this new",
    "start": "1648400",
    "end": "1653790"
  },
  {
    "text": "cloned environment available you go ahead and",
    "start": "1653790",
    "end": "1659669"
  },
  {
    "text": "on the new environment you go ahead and click on actions and do a swap",
    "start": "1659669",
    "end": "1664690"
  },
  {
    "text": "environment URL and you would have the screen you can select",
    "start": "1664690",
    "end": "1669700"
  },
  {
    "text": "which environment you want to swap in terms of the URL and once you do that the URLs are swapped so I missed one",
    "start": "1669700",
    "end": "1676900"
  },
  {
    "text": "thing which I should point here so you have to manually update this new environment with the new version the v2",
    "start": "1676900",
    "end": "1685330"
  },
  {
    "text": "version that you have so once that is available in the he'll check surpassed then you can go ahead and do the swap so",
    "start": "1685330",
    "end": "1690940"
  },
  {
    "text": "essentially you are not you don't have any downtime so you swap this and as you",
    "start": "1690940",
    "end": "1696370"
  },
  {
    "text": "can see the the old URL you can continue to use and and you have the latest",
    "start": "1696370",
    "end": "1702460"
  },
  {
    "text": "versions of applications to plant on the instances so what are the posts the pros are fast",
    "start": "1702460",
    "end": "1708730"
  },
  {
    "text": "rollback because the previous environment is still running so if it if it doesn't work then you can always",
    "start": "1708730",
    "end": "1713919"
  },
  {
    "text": "switch back and the cons are slow",
    "start": "1713919",
    "end": "1719100"
  },
  {
    "text": "because it takes we have to create a new environment altogether so it takes a little longer and there are there is a",
    "start": "1719100",
    "end": "1725200"
  },
  {
    "text": "potential of DNS caching by mobile clients after CNN swaps so this is this",
    "start": "1725200",
    "end": "1731290"
  },
  {
    "start": "1730000",
    "end": "1730000"
  },
  {
    "text": "slice essentially summarizes different deployment options application deployment options if I may emphasize",
    "start": "1731290",
    "end": "1738540"
  },
  {
    "text": "so some of these are also used for configuration but we have a brand new",
    "start": "1738540",
    "end": "1743970"
  },
  {
    "text": "option for you to use application configuration deployments let's discuss",
    "start": "1743970",
    "end": "1749410"
  },
  {
    "text": "about these options here if you see in the column impact on failed deployments all at once has expected downtime",
    "start": "1749410",
    "end": "1756760"
  },
  {
    "text": "rolling would have downtime but again it would be it will be based on error",
    "start": "1756760",
    "end": "1761919"
  },
  {
    "text": "scenarios on rolling with additional patches it is really minimized it's if",
    "start": "1761919",
    "end": "1768390"
  },
  {
    "text": "the first patch failed otherwise it can have issues if the subsequent batches have issues than",
    "start": "1768390",
    "end": "1774600"
  },
  {
    "text": "it would have problems up during deployment an immutable it minimizes your downtime and blue/green has no",
    "start": "1774600",
    "end": "1781350"
  },
  {
    "text": "downtime all together but I still use minimum because things can go wrong in terms of the deployment times you can",
    "start": "1781350",
    "end": "1787440"
  },
  {
    "text": "see all at once is is the fastest Google takes the longest rolling and rolling",
    "start": "1787440",
    "end": "1793290"
  },
  {
    "text": "with additional batches it's essentially based on the size of Thea",
    "start": "1793290",
    "end": "1798780"
  },
  {
    "text": "your instances and the development complexity based on that it will take",
    "start": "1798780",
    "end": "1804440"
  },
  {
    "text": "lesser amount of time in terms of rollback if you have to roll back if",
    "start": "1804440",
    "end": "1810630"
  },
  {
    "text": "anything goes wrong in any of these scenarios most of them most of the scenarios you have to do what redeploy only in Bluegreen you can essentially do",
    "start": "1810630",
    "end": "1819090"
  },
  {
    "text": "a swap back of the URL and if you see all at once rolling it uses",
    "start": "1819090",
    "end": "1826950"
  },
  {
    "text": "existing instances so the probability of something going wrong could be higher in terms of rolling with additional batches",
    "start": "1826950",
    "end": "1833640"
  },
  {
    "text": "and immutable we use new instances but immutable it uses all together new instances Bluegreen again it's a totally",
    "start": "1833640",
    "end": "1840150"
  },
  {
    "text": "new environment now let's look at manage platform updates earlier this year we launched",
    "start": "1840150",
    "end": "1847230"
  },
  {
    "start": "1842000",
    "end": "1842000"
  },
  {
    "text": "manage platform updates which is essentially giving you the ability to configure your environments to",
    "start": "1847230",
    "end": "1852810"
  },
  {
    "text": "automatically upgrade to the latest version of a platform during a scheduled maintenance window so until reavie ously",
    "start": "1852810",
    "end": "1859560"
  },
  {
    "text": "recently you needed to initiate a manage update to update your application elastic beanstalk environment to the new",
    "start": "1859560",
    "end": "1866490"
  },
  {
    "text": "version of the platform so manish platform updates gives you the ability",
    "start": "1866490",
    "end": "1871800"
  },
  {
    "text": "to configure your environment automatically upgrade to the latest version some of the key components to know about",
    "start": "1871800",
    "end": "1878270"
  },
  {
    "text": "this functionality is that you need to still need the permissions elastic Beanstalk needs to initiate a platform",
    "start": "1878270",
    "end": "1885210"
  },
  {
    "text": "update on your behalf so you use the default service so so the console adds",
    "start": "1885210",
    "end": "1890370"
  },
  {
    "text": "the required permissions when you enable manage updates if you don't use the default service role you can manually go",
    "start": "1890370",
    "end": "1896040"
  },
  {
    "text": "ahead and do that maintain is milder so maintenance windows are sensitive wards long",
    "start": "1896040",
    "end": "1902450"
  },
  {
    "text": "elastic Beanstalk starts to schedule update during the maintenance window but the update might not complete until",
    "start": "1902450",
    "end": "1908880"
  },
  {
    "text": "during that time so this is our best guess that it would take it generally takes about 20-25 minutes or could be",
    "start": "1908880",
    "end": "1915720"
  },
  {
    "text": "less based on the complexity of your environment but if it taking more than 2 hours then there's something wrong",
    "start": "1915720",
    "end": "1922140"
  },
  {
    "text": "what kind of deployments that we do you can configure",
    "start": "1922140",
    "end": "1928740"
  },
  {
    "text": "your Nano to automatically apply patch version updates or both patch or minor version updates manage platform updates",
    "start": "1928740",
    "end": "1934830"
  },
  {
    "text": "don't support major version updates as of yet which may be introduced later",
    "start": "1934830",
    "end": "1940909"
  },
  {
    "text": "let's look at some of the key benefits now so we talked about autumn a automated",
    "start": "1940909",
    "end": "1948840"
  },
  {
    "text": "upgrades this essentially gives you the freehand to schedule it and forget about it",
    "start": "1948840",
    "end": "1955169"
  },
  {
    "text": "instead of because we keep on adding new features updates to the environment of",
    "start": "1955169",
    "end": "1960779"
  },
  {
    "text": "the configurations so you don't have to worry about being at the latest versions with the manage update we ensure that",
    "start": "1960779",
    "end": "1967320"
  },
  {
    "text": "our application remains in service during update process there's no reduction in capacity so because",
    "start": "1967320",
    "end": "1972659"
  },
  {
    "text": "essentially underneath it's using immutable deployments so this gives you the complete capacity of your",
    "start": "1972659",
    "end": "1977909"
  },
  {
    "text": "application so very good for even your production environments if for any",
    "start": "1977909",
    "end": "1983580"
  },
  {
    "text": "reason the update isn't successful the platform is rolled back to the previous version without impacting the capacity",
    "start": "1983580",
    "end": "1989220"
  },
  {
    "text": "so one thing which is good about a manager platform updates is that we ensure that your your application is",
    "start": "1989220",
    "end": "1997020"
  },
  {
    "text": "always up and running so even if the update doesn't happen we roll it back and to the previous version that you",
    "start": "1997020",
    "end": "2002570"
  },
  {
    "text": "have so as I discussed there was no there's",
    "start": "2002570",
    "end": "2010190"
  },
  {
    "text": "minimum downtime and the impact on capacity is also minimized you also have the flexibility of manually updating so",
    "start": "2010190",
    "end": "2017029"
  },
  {
    "text": "you have scheduled it but if you realize that your application has an unscheduled",
    "start": "2017029",
    "end": "2022159"
  },
  {
    "text": "downtime or you want to update it you can still do it using manage update and it also gives you the flexibility of",
    "start": "2022159",
    "end": "2028730"
  },
  {
    "text": "doing an instance relation what that means is when you should--you or manage update you can select an option of",
    "start": "2028730",
    "end": "2034760"
  },
  {
    "text": "instance replacement so even if when there is no available update you can",
    "start": "2034760",
    "end": "2040070"
  },
  {
    "text": "still refresh your instances essentially have new set of instances so this gives you a lot of flexibility in terms of",
    "start": "2040070",
    "end": "2046250"
  },
  {
    "text": "refreshing your fleet every now and then although some of the important things I",
    "start": "2046250",
    "end": "2052490"
  },
  {
    "text": "would like to know that is part of the best practices you've got to be careful about coordinating manage updates with",
    "start": "2052490",
    "end": "2058940"
  },
  {
    "text": "time based scaling if you're using time based scaling the number of instances are zero we will talk about time-based scaling",
    "start": "2058940",
    "end": "2066020"
  },
  {
    "text": "later in the next section so you've got you have to be a little careful that manage",
    "start": "2066020",
    "end": "2071929"
  },
  {
    "text": "updates may not work should not conflict with time based scaling in terms of service limits the manage updates are",
    "start": "2071929",
    "end": "2078710"
  },
  {
    "text": "immutable deployments so it is recommended not to should you manage update for multiple environments at the same time because you may end up running",
    "start": "2078710",
    "end": "2086120"
  },
  {
    "text": "into your service limits especially auto scaling groups",
    "start": "2086120",
    "end": "2091240"
  },
  {
    "text": "all right I have a small demo for manage updates is again a video just to save",
    "start": "2091240",
    "end": "2097840"
  },
  {
    "text": "time and not to rely on the network",
    "start": "2097840",
    "end": "2103180"
  },
  {
    "text": "so this is a single instance environment this is a single environment it's if you",
    "start": "2104890",
    "end": "2112820"
  },
  {
    "text": "see the configuration it says that there is a new version available",
    "start": "2112820",
    "end": "2119290"
  },
  {
    "text": "so I don't want to go ahead and do the change I want to schedule it and I want to automate this process",
    "start": "2119320",
    "end": "2125980"
  },
  {
    "text": "so you enable manage updates how do you do that you go ahead and click on",
    "start": "2125980",
    "end": "2131630"
  },
  {
    "text": "configuration you go to manage updates enable and you can define a window",
    "start": "2131630",
    "end": "2138920"
  },
  {
    "text": "starting window and is essentially two hours so you don't you define the end so",
    "start": "2138920",
    "end": "2144650"
  },
  {
    "text": "we will start at the start of this window that you have defined you can choose it as starting time on a date so",
    "start": "2144650",
    "end": "2152060"
  },
  {
    "text": "this essentially would start doing it every week at this time and if you see there are update level minor a patch",
    "start": "2152060",
    "end": "2158660"
  },
  {
    "text": "which you can define what kind of updates you want to actually deploy",
    "start": "2158660",
    "end": "2163900"
  },
  {
    "text": "automatically and then you have the option of instance replacement which we",
    "start": "2163900",
    "end": "2169010"
  },
  {
    "text": "discuss that even if there is no updates you can still go ahead and refresh the",
    "start": "2169010",
    "end": "2174070"
  },
  {
    "text": "instances that you already have or essentially get a new fleet of instances so I'll go ahead and apply",
    "start": "2174070",
    "end": "2181680"
  },
  {
    "text": "so this takes a few minutes to configure so if you see it will at the",
    "start": "2181680",
    "end": "2188200"
  },
  {
    "text": "top it would say elastic Beanstalk is updating your environment and you can look at the",
    "start": "2188200",
    "end": "2195480"
  },
  {
    "text": "so so that's the benefit of using a video so so you can see I clicked on the",
    "start": "2195480",
    "end": "2202420"
  },
  {
    "text": "the manage action is so manage updates have been scheduled but because it",
    "start": "2202420",
    "end": "2208119"
  },
  {
    "text": "hasn't should you next week so what I'll do it now is I'll do an apply now using",
    "start": "2208119",
    "end": "2213790"
  },
  {
    "text": "manage update so it will still consider that as a manage update and use underneath immutable deployment",
    "start": "2213790",
    "end": "2221130"
  },
  {
    "text": "let's do an apply now okay so this you get a confirmation and",
    "start": "2221130",
    "end": "2227589"
  },
  {
    "text": "tells you about more information if you want to know and it tells you about from",
    "start": "2227589",
    "end": "2232930"
  },
  {
    "text": "what platform version to what platform version we are going to so if you do a deploy",
    "start": "2232930",
    "end": "2238530"
  },
  {
    "text": "it will go ahead and it takes it takes a few seconds to",
    "start": "2238530",
    "end": "2244420"
  },
  {
    "text": "configure and start the deployment so it will do the deployment and",
    "start": "2244420",
    "end": "2250109"
  },
  {
    "text": "if you see you can always see the recent events at the dashboard or also there is an event tab",
    "start": "2254550",
    "end": "2261210"
  },
  {
    "text": "now if you see here the the the configuration has been updated and if you go to manage update it will tell you",
    "start": "2261210",
    "end": "2267640"
  },
  {
    "text": "the timestamp the duration that it took what took about 14 minutes and the the",
    "start": "2267640",
    "end": "2273670"
  },
  {
    "text": "platform version - what - what and it was completed success so this was a successful video",
    "start": "2273670",
    "end": "2282119"
  },
  {
    "text": "okay all right now let's talk about auto scaling",
    "start": "2288660",
    "end": "2294180"
  },
  {
    "start": "2290000",
    "end": "2290000"
  },
  {
    "text": "so auto scaling is a web service designed to automatically launch a dominate ec2 instances in an auto",
    "start": "2294420",
    "end": "2300069"
  },
  {
    "text": "scaling group based on parameters that you define this helps you to seamlessly deal with",
    "start": "2300069",
    "end": "2306130"
  },
  {
    "text": "traffic changes to your application elastic Beanstalk supports auto scaling",
    "start": "2306130",
    "end": "2312939"
  },
  {
    "text": "for load-balanced auto scaling environments if you see at the start of the tree of",
    "start": "2312939",
    "end": "2319509"
  },
  {
    "text": "the root of the tree you have few default configuration elements minimum",
    "start": "2319509",
    "end": "2324789"
  },
  {
    "text": "maximum instances availability zone scaling cooldown so allows auto scaling works with cloud",
    "start": "2324789",
    "end": "2333160"
  },
  {
    "text": "watch to relieve the matrix for the instances running our application and also monitor the health of each instance",
    "start": "2333160",
    "end": "2341400"
  },
  {
    "text": "so the minimum instance counted maximista Scouse is essentially you define the size of your auto scaling",
    "start": "2342809",
    "end": "2349630"
  },
  {
    "text": "group so at what moment of time you want to have what instances you can control",
    "start": "2349630",
    "end": "2355239"
  },
  {
    "text": "it by an upper limit and a lower limit to maintain a fixed number of this is easy to instance you can also have same",
    "start": "2355239",
    "end": "2362739"
  },
  {
    "text": "number of minimum and maximum this ensures that you have a consistent number of instances but again that's not auto",
    "start": "2362739",
    "end": "2369400"
  },
  {
    "text": "scaling auto scaling auto scaling settings can",
    "start": "2369400",
    "end": "2376359"
  },
  {
    "text": "impact rolling updates if you configure rolling updates and rolling updates cannot happen if the minimum number of",
    "start": "2376359",
    "end": "2382839"
  },
  {
    "text": "instances in in service for rolling updates is larger than the maximum size of the auto scaling group so you must",
    "start": "2382839",
    "end": "2388539"
  },
  {
    "text": "change the value of either the minimum instance in the serving service settings of the rolling updates or the maximum",
    "start": "2388539",
    "end": "2393729"
  },
  {
    "text": "instances then you have the availability zone so that that lets you specify the",
    "start": "2393729",
    "end": "2399189"
  },
  {
    "text": "number of availability zones in which you want elastic Beanstalk to larger instances we highly recommend that you",
    "start": "2399189",
    "end": "2405009"
  },
  {
    "text": "choose multiple availability zones so that instances can be launched in another AZ if one zone becomes",
    "start": "2405009",
    "end": "2411670"
  },
  {
    "text": "unavailable which makes your application fault tolerant and the scaling scale on",
    "start": "2411670",
    "end": "2417630"
  },
  {
    "text": "scaling cooldown specifies how long the auto scaling will wait before zooming any scaling activity so if by the time",
    "start": "2417630",
    "end": "2425380"
  },
  {
    "text": "kulan period elapses your environment has the appropriate level of resources to keep the cloud watch alarm from",
    "start": "2425380",
    "end": "2431220"
  },
  {
    "text": "continuing to fire the new instances now let's talk about trigger based scaling",
    "start": "2431220",
    "end": "2438190"
  },
  {
    "text": "now trigger as an event name suggests you can define the triggers for the auto scaling to happen",
    "start": "2438190",
    "end": "2444460"
  },
  {
    "text": "some of them has been noted here like CP utilization network traffic disk activity or instance health",
    "start": "2444460",
    "end": "2452520"
  },
  {
    "text": "so Amazon so you can configure these triggers to fire an ec2 instance or the",
    "start": "2452640",
    "end": "2459010"
  },
  {
    "text": "load balance matrix and and it is pushed to Amazon",
    "start": "2459010",
    "end": "2464890"
  },
  {
    "text": "CloudWatch and it determines whether the condition you specified have been met or not when the upper and the lower",
    "start": "2464890",
    "end": "2470410"
  },
  {
    "text": "thresholds of the conditions for the the matrix have been breached for the",
    "start": "2470410",
    "end": "2475840"
  },
  {
    "text": "specific period of time time the trigger launches a scaling activity so you can",
    "start": "2475840",
    "end": "2480940"
  },
  {
    "text": "choose the trigger measurement so trigger measurement set a setting is essentially",
    "start": "2480940",
    "end": "2486790"
  },
  {
    "text": "to specify the matrix for your triggers as we discussed so there is",
    "start": "2486790",
    "end": "2493860"
  },
  {
    "text": "trigger statistics so trigger statistics is the minimum maximum sum of the or the average what you want to use as a",
    "start": "2493860",
    "end": "2500770"
  },
  {
    "text": "measurement you want to use an average of the data or the sum or minimum maximum",
    "start": "2500770",
    "end": "2507600"
  },
  {
    "text": "so my journal period specifies how frequently the Amazon Cloud watch might",
    "start": "2507600",
    "end": "2512620"
  },
  {
    "text": "use the matrix for the trigger default is essentially generally 5 minutes",
    "start": "2512620",
    "end": "2518430"
  },
  {
    "text": "then there is breech duration is the amount of time a matrix can extend",
    "start": "2520050",
    "end": "2525700"
  },
  {
    "text": "beyond its defined limit upper and lower breech scale increments",
    "start": "2525700",
    "end": "2531510"
  },
  {
    "text": "specify how many Amazon ec2 instances to add or remove when performing a scaling",
    "start": "2531510",
    "end": "2536620"
  },
  {
    "text": "activity default is 1 and minus 1",
    "start": "2536620",
    "end": "2541800"
  },
  {
    "text": "you will notice that there is a dotted line between time-based scaling and the basic",
    "start": "2543810",
    "end": "2550480"
  },
  {
    "text": "configuration that's because time-based scaling overrides the basic configuration",
    "start": "2550480",
    "end": "2557589"
  },
  {
    "text": "settings that you have for auto-scaling so if your elastic Beanstalk application has predictable needs for scaling",
    "start": "2557589",
    "end": "2566349"
  },
  {
    "text": "then you can use time based scaling it is not recommended when you don't you're",
    "start": "2566349",
    "end": "2572060"
  },
  {
    "text": "not sure about the kind of traffic that your application is taking if you are very sure that okay your application is",
    "start": "2572060",
    "end": "2578150"
  },
  {
    "text": "generally used over the weekend or it's a test environment where you are sure of the the kind of scaling needs that you have time with scaling is a good option",
    "start": "2578150",
    "end": "2586030"
  },
  {
    "text": "so if you see at the different option settings that we have we have the course the name and minimum maximum instances",
    "start": "2586030",
    "end": "2592730"
  },
  {
    "text": "this essentially overrides the default configuration that you may have in the basic auto scaling and that's where it",
    "start": "2592730",
    "end": "2598400"
  },
  {
    "text": "can also conflict with manage updates because if the minimum if you define minimum as zero you can define minimum",
    "start": "2598400",
    "end": "2605060"
  },
  {
    "text": "as zero that at certain point you can actually reduce the number of its tezur0 saving you money at that moment managed",
    "start": "2605060",
    "end": "2611390"
  },
  {
    "text": "update will not happen because it needs instances to be able to to be able to continue so that you need to be able to",
    "start": "2611390",
    "end": "2619430"
  },
  {
    "text": "understand some of the dependencies there in addition to that",
    "start": "2619430",
    "end": "2624730"
  },
  {
    "text": "occurrence so if it is time you need to define the time frame of the or the",
    "start": "2624730",
    "end": "2631849"
  },
  {
    "text": "starting point of the time-based scaling you can choose a one-time or a recurrent",
    "start": "2631849",
    "end": "2637849"
  },
  {
    "text": "one-time could be you can define a specific duration of the of the day month week and from there on it will do",
    "start": "2637849",
    "end": "2645770"
  },
  {
    "text": "the action one-time action that you defined in the time-based scaling or you can do a recurring recurring can be",
    "start": "2645770",
    "end": "2652190"
  },
  {
    "text": "weekly monthly you can define the regular frequency in the recurring you can define rectly you can define it as a",
    "start": "2652190",
    "end": "2659180"
  },
  {
    "text": "cron expression like here we have it's so 38 Schloss or 3 which is essentially",
    "start": "2659180",
    "end": "2666680"
  },
  {
    "text": "Wednesday at 8:30 p.m.",
    "start": "2666680",
    "end": "2670510"
  },
  {
    "text": "one node of advice be careful with time-based scaling because it can as a",
    "start": "2674710",
    "end": "2680720"
  },
  {
    "text": "toad it can it can conflict with other auto-scaling configurations so it is not",
    "start": "2680720",
    "end": "2686270"
  },
  {
    "text": "recommended to use both some Dainius li unless you are doing some tests",
    "start": "2686270",
    "end": "2693920"
  },
  {
    "start": "2693000",
    "end": "2693000"
  },
  {
    "text": "these are some of the other tips that I have for you",
    "start": "2694280",
    "end": "2700170"
  },
  {
    "text": "you should always enable log rotation to automatically push locks to s3 this",
    "start": "2700170",
    "end": "2705600"
  },
  {
    "text": "saves you the hassle of looking for logs and you have slow location where you can",
    "start": "2705600",
    "end": "2711780"
  },
  {
    "text": "extract the logs that you want to how you want to use it so it's also advisable to to",
    "start": "2711780",
    "end": "2718170"
  },
  {
    "text": "understand the available matrix for the environments and what they mean so that you can use them wisely like in case of",
    "start": "2718170",
    "end": "2724080"
  },
  {
    "text": "auto scaling and other cloud watch related logs also I recommend using alarms to",
    "start": "2724080",
    "end": "2732570"
  },
  {
    "text": "automatically monitor critical matrix and send notifications when the matrix out of normal operation operating range",
    "start": "2732570",
    "end": "2738540"
  },
  {
    "text": "so you can always set an email notification for yourself and also",
    "start": "2738540",
    "end": "2745320"
  },
  {
    "text": "enable Amazon route 3 health check and alarms another important feature is tag",
    "start": "2745320",
    "end": "2751650"
  },
  {
    "text": "tagging if you don't know what tagging is it essentially is a way of managing your",
    "start": "2751650",
    "end": "2758790"
  },
  {
    "text": "resources or at least tracking them you can also track the usage of those",
    "start": "2758790",
    "end": "2763800"
  },
  {
    "text": "resources in terms of the number of people that they may be using that being used by those people or it could be in",
    "start": "2763800",
    "end": "2770700"
  },
  {
    "text": "terms of the financial impact that those resources have so you can use the cost allocated reports to track the usage for",
    "start": "2770700",
    "end": "2776790"
  },
  {
    "text": "AWS resources the reports include both tagging and untagging resources but they",
    "start": "2776790",
    "end": "2782340"
  },
  {
    "text": "aggregate cost according to the tags elastic beanstalk recently updated the",
    "start": "2782340",
    "end": "2787920"
  },
  {
    "text": "number of tags that you can use from 7 to 47 three of them are retained by us which",
    "start": "2787920",
    "end": "2795420"
  },
  {
    "text": "includes environment name and rank ID",
    "start": "2795420",
    "end": "2799460"
  },
  {
    "text": "add a little bit of color here so just just to kind of this feel like very",
    "start": "2802040",
    "end": "2807780"
  },
  {
    "text": "disparate almost random like best practices when they're presented this way but I want to give you one example",
    "start": "2807780",
    "end": "2813570"
  },
  {
    "text": "by like kind of weaving one thread through everything that auto Rajas is walk through just to give you a sense of",
    "start": "2813570",
    "end": "2819810"
  },
  {
    "text": "how these can be interconnect why it's important to really keep all of these kinds of things in mind so let's take",
    "start": "2819810",
    "end": "2824849"
  },
  {
    "text": "the example early on in the sample app a taraji of showing you that he had a not",
    "start": "2824849",
    "end": "2830010"
  },
  {
    "text": "best practice kind of a something to avoid in the first example of how he was not pinning",
    "start": "2830010",
    "end": "2837030"
  },
  {
    "text": "versions in his node app and he mentioned correctly don't do this and he",
    "start": "2837030",
    "end": "2842099"
  },
  {
    "text": "talked a little bit about how it's better to kind of like bake the versions in in that case he's using shrink wrap",
    "start": "2842099",
    "end": "2847349"
  },
  {
    "text": "that there's really equivalents in other language platforms to take that example and then now imagine what happens if you",
    "start": "2847349",
    "end": "2853890"
  },
  {
    "text": "don't do that when you couple it with some of the other deployment methodologies that we looked at in particular if you're doing manage",
    "start": "2853890",
    "end": "2859829"
  },
  {
    "text": "platform updates so think about how let's say I'm migrating a minor version",
    "start": "2859829",
    "end": "2865170"
  },
  {
    "text": "or even a patch level version of node the node platform should be relatively safe should be relatively low",
    "start": "2865170",
    "end": "2873089"
  },
  {
    "text": "impact but I've always said draw the latest version of all my dependencies middle of you're kind of defined",
    "start": "2873089",
    "end": "2881630"
  },
  {
    "text": "window of time in the middle of night sometime we deploy the new version and",
    "start": "2881630",
    "end": "2886849"
  },
  {
    "text": "it pulls latest versions of dependencies down you've not tested those combinations and maybe not surprisingly",
    "start": "2886849",
    "end": "2893670"
  },
  {
    "text": "you actually have something that breaks you can see why there would be a problem now think about how in manage plot from",
    "start": "2893670",
    "end": "2900720"
  },
  {
    "text": "update I don't know if you actually you may be mentioned this in there but managed platform updates always uses the immutable deploy technique the one that",
    "start": "2900720",
    "end": "2907290"
  },
  {
    "text": "we went through that showed creating an entire second auto scaling group and making sure that we do kind of almost",
    "start": "2907290",
    "end": "2912569"
  },
  {
    "text": "like a one box deploy within that auto scaling group we watch the health of that run there's a reason we do it that",
    "start": "2912569",
    "end": "2918329"
  },
  {
    "text": "way and we were the reason we don't even let you override that in even those cases we test that one box make sure",
    "start": "2918329",
    "end": "2925260"
  },
  {
    "text": "that it actually appears to be running helpfully and the way we do that we haven't talked too much about our",
    "start": "2925260",
    "end": "2930869"
  },
  {
    "text": "enhanced health feature but we actually watch for traffic flowing watch the return codes that were resulting from",
    "start": "2930869",
    "end": "2936900"
  },
  {
    "text": "that so if the app is throwing 500s we're actually going to abandon any attempts to deploy not only that but all",
    "start": "2936900",
    "end": "2943829"
  },
  {
    "text": "of your original version is still running we leave those completely alone so we actually just tear down that one",
    "start": "2943829",
    "end": "2949109"
  },
  {
    "text": "box and you're left with kind of the original capacity in the original service version still intact",
    "start": "2949109",
    "end": "2955880"
  },
  {
    "text": "it gives you a sense of kind of how there's like a connections between some of these best",
    "start": "2955880",
    "end": "2961800"
  },
  {
    "text": "practices that may not be a parent right up upfront I'll also mention another one I don't",
    "start": "2961800",
    "end": "2969089"
  },
  {
    "text": "know if this was in here but you never ever ever baked state into your instances is by the way not a Bienstock",
    "start": "2969089",
    "end": "2975540"
  },
  {
    "text": "best practice is kind of a cloud best practice if you are doing something with local file systems if you're counting on",
    "start": "2975540",
    "end": "2982380"
  },
  {
    "text": "something that exists within instances that you've deployed you can want to spend some some serious minutes thinking",
    "start": "2982380",
    "end": "2989369"
  },
  {
    "text": "about why that is and you want to avoid that and we actually put in again in the manage bot from update that you saw",
    "start": "2989369",
    "end": "2995670"
  },
  {
    "text": "there's a checkbox to allow for instance refresh and basically on every scheduled",
    "start": "2995670",
    "end": "3001130"
  },
  {
    "text": "window whether or not there's a platform update will let you kind of wipe through the entire set of",
    "start": "3001130",
    "end": "3006220"
  },
  {
    "text": "recorded instances we're basically offering you a way to guarantee that you're not building up State on those instances",
    "start": "3006220",
    "end": "3012640"
  },
  {
    "text": "again best practice and it actually has repercussions throughout all of these things if you're counting on state if",
    "start": "3012640",
    "end": "3018890"
  },
  {
    "text": "you're counting on variable or if you're not counting on a fixed version you'll",
    "start": "3018890",
    "end": "3024079"
  },
  {
    "text": "you might even have problems outside of manage platform updates let's say you have an auto scaling event you're going to pull up the latest versions of",
    "start": "3024079",
    "end": "3031190"
  },
  {
    "text": "whatever dependencies you might have for let's say your node app so again a lot of these best practices kind",
    "start": "3031190",
    "end": "3038750"
  },
  {
    "text": "of you want to think of as like a you're weaving them throughout your planning in your architecture it's not I like that",
    "start": "3038750",
    "end": "3044690"
  },
  {
    "text": "one so I'll do that but I don't care about this other one so I'm not going to do it not to say you can't have success if you don't follow every one of these",
    "start": "3044690",
    "end": "3050720"
  },
  {
    "text": "but you should at least be considering a lot of these things as part of the total story",
    "start": "3050720",
    "end": "3057010"
  },
  {
    "text": "this essentially brings us to the end of the session d here are some of the key",
    "start": "3058839",
    "end": "3064069"
  },
  {
    "text": "links which were referred to during the session which includes the resources for",
    "start": "3064069",
    "end": "3069290"
  },
  {
    "text": "sample application deployment options manage updates we did not cover load testing because it's lack of time but I",
    "start": "3069290",
    "end": "3075710"
  },
  {
    "text": "have some sample links which you can use for using locust for load testing with",
    "start": "3075710",
    "end": "3081500"
  },
  {
    "text": "elastic beanstalk and some information without entangled well I'll say one other thing before we",
    "start": "3081500",
    "end": "3086740"
  },
  {
    "text": "finish - we will have these throughout the week we're going to be at the expo",
    "start": "3086740",
    "end": "3093010"
  },
  {
    "text": "floor you can find sometimes odd row sometimes other members of my team there so if you have questions certainly stop",
    "start": "3093010",
    "end": "3098260"
  },
  {
    "text": "by the WS booth there and ask those questions we have a repeat of this session Thursday Colorstay two o'clock",
    "start": "3098260",
    "end": "3105340"
  },
  {
    "text": "and what else should we mentioned I guess that's probably good so the versions of",
    "start": "3105340",
    "end": "3111760"
  },
  {
    "text": "this presentation will be made available to everybody so you'll be able to kind of get these links the easy way click on",
    "start": "3111760",
    "end": "3117520"
  },
  {
    "text": "them instead of try to copy them all down thanks everybody for coming really appreciate your time",
    "start": "3117520",
    "end": "3124070"
  },
  {
    "text": "[Applause]",
    "start": "3124070",
    "end": "3126139"
  }
]