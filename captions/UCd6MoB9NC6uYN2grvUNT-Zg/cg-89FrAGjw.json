[
  {
    "start": "0",
    "end": "97000"
  },
  {
    "text": "afternoon and welcome to the last session of the day this is another day another billion packets my name is Steve",
    "start": "0",
    "end": "7649"
  },
  {
    "text": "Seymour I am a principal Solutions Architect with AWS and I'm one of our networking specialists working with",
    "start": "7649",
    "end": "13889"
  },
  {
    "text": "customers across Europe Middle East and Africa for the next 45 minutes I want to take",
    "start": "13889",
    "end": "20039"
  },
  {
    "text": "you through the journey that packets go on on the AWS network and in fact it might be more accurate to say I'm going",
    "start": "20039",
    "end": "26130"
  },
  {
    "text": "to explaining how packets flow from the edge of our network right the way through to an ec2 instance and give you",
    "start": "26130",
    "end": "33149"
  },
  {
    "text": "an idea of some of the things that we thought about when we built V PC virtual private cloud so you've probably seen",
    "start": "33149",
    "end": "41309"
  },
  {
    "text": "diagrams like this if you've been in sessions today I'm sure you've seen many of them this is a very simple architecture diagram and it illustrates",
    "start": "41309",
    "end": "47670"
  },
  {
    "text": "all of the components languor to be talking through so we're starting with connectivity from your data center your",
    "start": "47670",
    "end": "54570"
  },
  {
    "text": "colocation environment your office using services such as AWS Direct Connect or",
    "start": "54570",
    "end": "60469"
  },
  {
    "text": "VPNs Virtual Private Networks we're also going to take a look at cloud from our content delivery network and how that is",
    "start": "60469",
    "end": "67260"
  },
  {
    "text": "used to provide content to your users to your customers how does that thing connect back using the Amazon global",
    "start": "67260",
    "end": "73770"
  },
  {
    "text": "network to our regions and then within a region what actually makes up a region our availability zones how do you",
    "start": "73770",
    "end": "80520"
  },
  {
    "text": "configure subnets within those availability zones and finally launching ec2 instances where you actually run",
    "start": "80520",
    "end": "86520"
  },
  {
    "text": "your workloads so let's start with the connectivity from your data center your",
    "start": "86520",
    "end": "92579"
  },
  {
    "text": "environment into AWS how does Direct Connect fit into things so first of all",
    "start": "92579",
    "end": "97680"
  },
  {
    "start": "97000",
    "end": "97000"
  },
  {
    "text": "what is Direct Connect well it's a service that we have that enables you to establish a dedicated private connection",
    "start": "97680",
    "end": "103439"
  },
  {
    "text": "from your network into AWS you can provision one gig connections 10 gig",
    "start": "103439",
    "end": "109200"
  },
  {
    "text": "connections or multiples of one and 10 gig connections into various Direct",
    "start": "109200",
    "end": "114509"
  },
  {
    "text": "Connect locations around the world which are then associated with our AWS regions they enable you to provide connectivity",
    "start": "114509",
    "end": "121439"
  },
  {
    "text": "into your V PC your virtual private cloud or to our other public services and it enables you to have consistent",
    "start": "121439",
    "end": "128429"
  },
  {
    "text": "network performance with high bandwidth we currently have",
    "start": "128429",
    "end": "133740"
  },
  {
    "text": "Steen regions and we have 60 Direct Connect locations as of yesterday around the world these Direct Connect locations",
    "start": "133740",
    "end": "141060"
  },
  {
    "text": "are associated with particular regions and just as a bit of a snapshot here I want you to show you some of the Direct",
    "start": "141060",
    "end": "146310"
  },
  {
    "text": "Connect locations across some of the European regions and you can see there the three AWS regions associated with",
    "start": "146310",
    "end": "152370"
  },
  {
    "text": "them all of these Direct Connect locations then use the Amazon global network to connect back to the Associated AWS",
    "start": "152370",
    "end": "159510"
  },
  {
    "text": "region so now let's look at it from a slightly different perspective what about your users your customers that are",
    "start": "159510",
    "end": "166230"
  },
  {
    "text": "consuming content that actually you would like to cache at the edge of our network this is where cloud front fits",
    "start": "166230",
    "end": "172580"
  },
  {
    "text": "so cloud front is our content delivery network it's optimized for providing performance and has huge scale to enable",
    "start": "172580",
    "end": "180630"
  },
  {
    "start": "173000",
    "end": "173000"
  },
  {
    "text": "the ability to provide your content close to your users we have 88 edge",
    "start": "180630",
    "end": "187350"
  },
  {
    "text": "locations around the world for cloud front 77 of those are actual points of presence and 11 of those are what we",
    "start": "187350",
    "end": "193110"
  },
  {
    "text": "call regional edge caches you can see a list of them on the screen here and most of those are also connected to the",
    "start": "193110",
    "end": "198960"
  },
  {
    "text": "Amazon global network reaching back into the Associated reach excuse me regions where your content is being held so I've",
    "start": "198960",
    "end": "208200"
  },
  {
    "text": "mentioned the Amazon global network a couple of times there well what actually is it so this is the Amazon global",
    "start": "208200",
    "end": "214470"
  },
  {
    "text": "network it shows you some of the connectivity that we have around the world linking together these various",
    "start": "214470",
    "end": "219600"
  },
  {
    "text": "Direct Connect locations cloud front pops and of course the AWS regions themselves all of this infrastructure",
    "start": "219600",
    "end": "226350"
  },
  {
    "text": "that you see on the screen here is managed by one company it's managed by AWS it's under our administrative",
    "start": "226350",
    "end": "231660"
  },
  {
    "text": "control so why do we have a global network it perhaps seems like an obvious",
    "start": "231660",
    "end": "237990"
  },
  {
    "text": "concept but actually this is all about improving the latency reducing packet",
    "start": "237990",
    "end": "243120"
  },
  {
    "text": "loss and the overall quality of service we can deliver to customers connecting between our regions and those various",
    "start": "243120",
    "end": "248730"
  },
  {
    "text": "points of presence that I mentioned if your traffic is flowing between two AWS regions or between any of those",
    "start": "248730",
    "end": "254490"
  },
  {
    "text": "locations that I mentioned it's flowing over the AWS global backbone",
    "start": "254490",
    "end": "261259"
  },
  {
    "text": "these are obviously not small connections these are multiple hundred gig connections we have a huge amount of",
    "start": "262570",
    "end": "270010"
  },
  {
    "text": "resiliency built into the AWS global network and it means that should there be a failure or some maintenance in any",
    "start": "270010",
    "end": "276460"
  },
  {
    "text": "particular part of this network that's completely invisible to you our customers so we have huge amounts of",
    "start": "276460",
    "end": "282790"
  },
  {
    "text": "capacity linking together all of these regions across the globe so now that",
    "start": "282790",
    "end": "289270"
  },
  {
    "text": "we've got our traffic to the AWS region what happens here so let's take a look",
    "start": "289270",
    "end": "294370"
  },
  {
    "start": "294000",
    "end": "294000"
  },
  {
    "text": "at an actual AWS region this is one of the the 16 regions around the world that we have and within that region we have",
    "start": "294370",
    "end": "300640"
  },
  {
    "text": "availability zones all of our regions have at least two availability zones and we actually have decided the new builds",
    "start": "300640",
    "end": "307480"
  },
  {
    "text": "are probably always going to be three availability zones that seems to be the right number for new regions some of our",
    "start": "307480",
    "end": "314140"
  },
  {
    "text": "regions though have many more than three so we have a region for example with three availability zones and this is",
    "start": "314140",
    "end": "319780"
  },
  {
    "text": "what makes up the core components of an AWS region so other important things",
    "start": "319780",
    "end": "325240"
  },
  {
    "start": "324000",
    "end": "324000"
  },
  {
    "text": "that we have inside an AWS region and these are the transit centers when the transit centers are there to provide",
    "start": "325240",
    "end": "330850"
  },
  {
    "text": "connectivity to the rest of the world so they provide connectivity to the Amazon global network they provide connectivity",
    "start": "330850",
    "end": "337060"
  },
  {
    "text": "to our peers to our transit providers and obviously over that global network to our direct connects locations as well",
    "start": "337060",
    "end": "345870"
  },
  {
    "text": "so now that we've got our region let's go in a little bit closer inside that region and look at an availability zone",
    "start": "346440",
    "end": "351820"
  },
  {
    "text": "so in this example I'm showing two availability zones a and B and this is how it looks on your architecture",
    "start": "351820",
    "end": "357010"
  },
  {
    "text": "diagrams what does it look like in reality so again this is a real example that we're",
    "start": "357010",
    "end": "363130"
  },
  {
    "start": "360000",
    "end": "360000"
  },
  {
    "text": "working through here this is actually one of the AWS regions and the first thing to mention is an availability zone",
    "start": "363130",
    "end": "369100"
  },
  {
    "text": "actually can be one or many data centers we have some availability zones that",
    "start": "369100",
    "end": "374590"
  },
  {
    "text": "have as many as eight data centers making up that particular availability zone the connectivity within that",
    "start": "374590",
    "end": "381640"
  },
  {
    "text": "availability zone in between the data centers is highly redundant and just to give you an idea of the kind of scale we",
    "start": "381640",
    "end": "386830"
  },
  {
    "text": "have some availability zones with over 300,000 servers in them",
    "start": "386830",
    "end": "392280"
  },
  {
    "start": "393000",
    "end": "393000"
  },
  {
    "text": "so we've got these data centers we've got these availability zones within the AWS region we now need to connect them",
    "start": "393910",
    "end": "400420"
  },
  {
    "text": "together so the first thing to do is let's connect all those buildings together in the infrastructure in the individual availability zones we now",
    "start": "400420",
    "end": "407110"
  },
  {
    "text": "need to connect those availability zones to each other we would recommend that when you deploy services onto AWS you",
    "start": "407110",
    "end": "413920"
  },
  {
    "text": "deploy them in a highly available fashion across multiple availability zones and you're going to be using this network to exchange traffic between them",
    "start": "413920",
    "end": "420810"
  },
  {
    "text": "from there of course you want to be able to talk to the wider global network and out to the internet that's where the",
    "start": "420810",
    "end": "427150"
  },
  {
    "text": "transit centers fit in so in this particular example as I say of a real AWS region there are 126 unique spans of",
    "start": "427150",
    "end": "434800"
  },
  {
    "text": "connectivity over 240,000 individual fiber strands providing the connectivity",
    "start": "434800",
    "end": "440500"
  },
  {
    "text": "in this one region alone and again just to give you a little bit more detail about the infrastructure that's involved",
    "start": "440500",
    "end": "445600"
  },
  {
    "text": "here we have some cables that carry over 3,000 fibers in an individual cable so",
    "start": "445600",
    "end": "452080"
  },
  {
    "text": "this is the the scale of an AWS region and how we build the infrastructure to connect those data centers and those",
    "start": "452080",
    "end": "457360"
  },
  {
    "text": "availability zones together so now that we're inside the availability zone let's",
    "start": "457360",
    "end": "463810"
  },
  {
    "start": "460000",
    "end": "460000"
  },
  {
    "text": "take a look at how we provide connectivity through to the rest of the infrastructure itself so obviously if we",
    "start": "463810",
    "end": "470470"
  },
  {
    "text": "go back a good number of years we took a look at old-school Reuters and we actually decided that this is not the",
    "start": "470470",
    "end": "476320"
  },
  {
    "text": "path that we want to take old-school rooters are typically quite complex they have lots of features that we don't",
    "start": "476320",
    "end": "482200"
  },
  {
    "text": "actually need and as a result they can be potentially unreliable they're often",
    "start": "482200",
    "end": "487270"
  },
  {
    "text": "quite expensive and huge pieces of equipment and if an issue is found typically in a feature that we're not",
    "start": "487270",
    "end": "493419"
  },
  {
    "text": "even using actually it can take up to six months to get that particular issue fixed or investigated and resolved so we",
    "start": "493419",
    "end": "501520"
  },
  {
    "text": "took a slightly different approach and we decided that we would custom build our rooters so the example that's on the screen here is a top-of-rack form factor",
    "start": "501520",
    "end": "508570"
  },
  {
    "text": "and this is hardware that is built to our specification it is our team that",
    "start": "508570",
    "end": "513789"
  },
  {
    "text": "have written the software that runs within this piece of equipment so we're in full control and it only provides the",
    "start": "513789",
    "end": "519430"
  },
  {
    "text": "features that we need to actually operate VPC we also made some decisions",
    "start": "519430",
    "end": "525940"
  },
  {
    "text": "quite early on that we would standard I on 25 gig connectivity the industry was",
    "start": "525940",
    "end": "531310"
  },
  {
    "text": "actually looking at pretty standard 10 gig connections and 40 gig but actually 40 gig is simply four times 10 for waves",
    "start": "531310",
    "end": "539800"
  },
  {
    "text": "on a particular piece of fiber and what we realized is that we could actually deliver 25 gig connectivity with a",
    "start": "539800",
    "end": "545860"
  },
  {
    "text": "single wave and only a slight increase in the cost of the optics within this particular hardware so as a result we",
    "start": "545860",
    "end": "552910"
  },
  {
    "text": "standardized on 25 gig so we're now within a particular data center within a",
    "start": "552910",
    "end": "560170"
  },
  {
    "text": "particular availability zone and we now need to have a bit of a closer look at the ec2 instances themselves so those",
    "start": "560170",
    "end": "566230"
  },
  {
    "text": "ec2 instances are running on physical hardware how do we provide connectivity",
    "start": "566230",
    "end": "571269"
  },
  {
    "text": "to that well from the beginning we've obviously been involved in providing software-defined networking that that's",
    "start": "571269",
    "end": "576850"
  },
  {
    "start": "575000",
    "end": "575000"
  },
  {
    "text": "the definition of VP see it's what we we need to be able to provide so right the",
    "start": "576850",
    "end": "581890"
  },
  {
    "text": "way back at the beginning of ec2 we actually looked at this and said there's a whole bunch of functions that are being provided currently within the",
    "start": "581890",
    "end": "589180"
  },
  {
    "text": "hypervisor that we could offload so what we did is we actually developed a custom",
    "start": "589180",
    "end": "594760"
  },
  {
    "text": "10 gig neck NIC network interface card and we offloaded the virtualization of the network onto that card this meant",
    "start": "594760",
    "end": "602440"
  },
  {
    "text": "that we freed up resources on the actual server itself we had cause then available that could be used by",
    "start": "602440",
    "end": "607660"
  },
  {
    "text": "customers and actually it gave us the ability to deliver services such as SR IO V and enhanced networking it enables",
    "start": "607660",
    "end": "615399"
  },
  {
    "text": "features such as much lower latency because we're actually processing this now in hardware rather than in software",
    "start": "615399",
    "end": "620520"
  },
  {
    "text": "so this was back in 2012 when we did this and there's an example on the screen there of the kinds of 10-gig NICs",
    "start": "620520",
    "end": "626560"
  },
  {
    "text": "that we were putting into our servers at the time if we fast forward to 2016 we",
    "start": "626560",
    "end": "633880"
  },
  {
    "start": "630000",
    "end": "630000"
  },
  {
    "text": "actually now have custom silicon we are delivering 25 gig connections to these",
    "start": "633880",
    "end": "638890"
  },
  {
    "text": "individual servers and we have custom Asics here to do all of this processing",
    "start": "638890",
    "end": "644230"
  },
  {
    "text": "for us in the hardware this enabled the second generation of enhanced networking",
    "start": "644230",
    "end": "649420"
  },
  {
    "text": "and it means that we are now in full control of everything from the hardware right the way through to the software stack even within the individual servers",
    "start": "649420",
    "end": "656620"
  },
  {
    "text": "that are providing this offload of the virtualization",
    "start": "656620",
    "end": "661470"
  },
  {
    "start": "663000",
    "end": "663000"
  },
  {
    "text": "okay so these cards and these Asics are within servers so here's an example of",
    "start": "663400",
    "end": "668630"
  },
  {
    "text": "one of our previous generations of servers that we have within the AWS data centers as you can see it's actually are",
    "start": "668630",
    "end": "674960"
  },
  {
    "text": "pretty simple 1u server there's nothing particularly special about it except that we have",
    "start": "674960",
    "end": "680300"
  },
  {
    "text": "built these based on data we know that actually this is the most efficient use",
    "start": "680300",
    "end": "685400"
  },
  {
    "text": "at the time of space within our data centers you might think that there's a whole lot of empty space there we could",
    "start": "685400",
    "end": "690890"
  },
  {
    "text": "fit on whole nother server in there but actually this is the most efficient way to run servers in the data centers the",
    "start": "690890",
    "end": "697010"
  },
  {
    "text": "power supplies and the voltage regulators run at over 90% efficiency and obviously these have now evolved and",
    "start": "697010",
    "end": "703070"
  },
  {
    "text": "we have newer generations of these designs but it's quite interesting to see that this compares really quite well",
    "start": "703070",
    "end": "708470"
  },
  {
    "text": "to some of the the other cloud servers that have been published fairly recently in the press so back to our architecture",
    "start": "708470",
    "end": "716150"
  },
  {
    "text": "diagram we now need to have a bit of a closer look at V PC itself now on the",
    "start": "716150",
    "end": "721280"
  },
  {
    "text": "diagram here you can see that I have a V PC I have a side arranged a block of IP addresses assigned to this V PC",
    "start": "721280",
    "end": "727240"
  },
  {
    "text": "individuals smaller ranges of IP addresses assigned to the subnets within this V PC and then finally of course our",
    "start": "727240",
    "end": "733160"
  },
  {
    "text": "ec2 instances have an IP address so how did we build V PC what we'll be",
    "start": "733160",
    "end": "738290"
  },
  {
    "text": "considering when we put together this particular solution well the requirements for V PC were",
    "start": "738290",
    "end": "744470"
  },
  {
    "start": "742000",
    "end": "742000"
  },
  {
    "text": "actually fairly simple first of all we wanted to build a network where customers could choose their IP",
    "start": "744470",
    "end": "749960"
  },
  {
    "text": "addresses where they were in full control of what happened within that V PC in terms of their networking and",
    "start": "749960",
    "end": "756080"
  },
  {
    "text": "their routing we wanted to enable simple routing from other remote network so if",
    "start": "756080",
    "end": "761900"
  },
  {
    "text": "you're going to connect your V PC back to your on-premises network you don't want to install hundreds of small",
    "start": "761900",
    "end": "767390"
  },
  {
    "text": "individual routes for individual ec2 instances you want a nice simple aggregated route announcement that you",
    "start": "767390",
    "end": "773780"
  },
  {
    "text": "can then install into your route tables and the V PC just becomes an extension of your network we also wanted the",
    "start": "773780",
    "end": "780170"
  },
  {
    "text": "concepts to be fairly familiar to our customers so we wanted to conform to the idea of existing network designs at",
    "start": "780170",
    "end": "785600"
  },
  {
    "text": "established practices so terms like subnets networking teams are familiar with those terms but we also didn't want",
    "start": "785600",
    "end": "792350"
  },
  {
    "text": "to limit the size of those subnets to we say slash 24s and actually this is something that we heard from one of our",
    "start": "792350",
    "end": "798800"
  },
  {
    "text": "early customers that their current infrastructure was set up to purely manage their network based on slash 24",
    "start": "798800",
    "end": "804980"
  },
  {
    "text": "networks that's fine you can do that in V PC but if you want to go smaller down to say s 28 that's also fine so let's",
    "start": "804980",
    "end": "814339"
  },
  {
    "start": "813000",
    "end": "813000"
  },
  {
    "text": "take a look at the components that make up V PC itself and the connectivity elements that we're going to talk through for the rest of the session the",
    "start": "814339",
    "end": "821480"
  },
  {
    "text": "example we have here is a corporate data center it's using 192 168 slash 16 as",
    "start": "821480",
    "end": "826880"
  },
  {
    "text": "its network address range and that's very simple in terms of routing inside that data center all of the routes is in",
    "start": "826880",
    "end": "833089"
  },
  {
    "text": "the equipment have an entry that says if you're trying to send traffic to 192 168 stay here you don't need to go out of",
    "start": "833089",
    "end": "839779"
  },
  {
    "text": "the the data center out of the network itself remember our goal though was to",
    "start": "839779",
    "end": "845510"
  },
  {
    "text": "then be able to define another network where the customer can define the IP address range so the first thing to consider is we don't want these IP",
    "start": "845510",
    "end": "851870"
  },
  {
    "text": "addresses to overlap so in this case the customer has chosen a 1 7 2.30 1/18",
    "start": "851870",
    "end": "857449"
  },
  {
    "text": "sized network okay that's the definition of the virtual private cloud that they've created we want to connect that",
    "start": "857449",
    "end": "864470"
  },
  {
    "text": "back so we're going to have to have some sort of gateway on our V PC so this is the the virtual private gateway and it's",
    "start": "864470",
    "end": "871130"
  },
  {
    "text": "used to provide connectivity over VPNs and over Direct Connect back to corporate data centers we need a way to",
    "start": "871130",
    "end": "878329"
  },
  {
    "text": "refer to the piece of equipment that sits on the other end of this connection so we refer to this as the customer",
    "start": "878329",
    "end": "883399"
  },
  {
    "text": "gateway and we haven't yet got an API call that can cause a Rooter to just appear in a customer data center but",
    "start": "883399",
    "end": "889790"
  },
  {
    "text": "this is the the object that we use to represent it in the AWS console in our api's so now we have two ends of a",
    "start": "889790",
    "end": "896480"
  },
  {
    "text": "connection as you can expect the next logical step is we need to connect them together and in this case going back to",
    "start": "896480",
    "end": "901730"
  },
  {
    "text": "the early days of V PC this was intended that it could be a VPN connection so a standard IPSec VPN to connect the",
    "start": "901730",
    "end": "908569"
  },
  {
    "text": "Virtual Private Gateway to the customer gateway so let's go back into the V PC",
    "start": "908569",
    "end": "913910"
  },
  {
    "text": "itself we've got this new address range that we've created this 172 31 range how do we configure the routing well because",
    "start": "913910",
    "end": "920480"
  },
  {
    "text": "it's one single Sider block it's really easy within the customers data center you'd simply have a route that says if",
    "start": "920480",
    "end": "927649"
  },
  {
    "text": "I'm in traffic to 1/7 2.30 1/18 send it over the VPN connection one single route that",
    "start": "927649",
    "end": "934550"
  },
  {
    "text": "represents all of that customer infrastructure that is running inside the V PC now let's divide the V PC down",
    "start": "934550",
    "end": "942230"
  },
  {
    "text": "a little bit further let's create those subnets so in this case I'm using a fairly standard stash 24 a lot of customers do this they take their 172 31",
    "start": "942230",
    "end": "949670"
  },
  {
    "text": "Network that they've created and create a couple of subnets so here they are once we've got our subnets we can now",
    "start": "949670",
    "end": "955820"
  },
  {
    "text": "launch ec2 instances and when this instance launches it comes up and it has an IP address 1 7 2 31 1.7 fantastic",
    "start": "955820",
    "end": "963500"
  },
  {
    "text": "this is where all customers start they launch their first ec2 instance then",
    "start": "963500",
    "end": "968630"
  },
  {
    "text": "hopefully they launch another one and another one and the environment keeps growing but at some point they might",
    "start": "968630",
    "end": "974180"
  },
  {
    "text": "then wish to terminate some of those instances perhaps scale down some of the infrastructure after they've dealt with some peak load for their particular",
    "start": "974180",
    "end": "980570"
  },
  {
    "text": "business so some of those instances go away but overall you can see we've not",
    "start": "980570",
    "end": "986150"
  },
  {
    "text": "had to change any of the routing that we configured nothing about the VPN has changed nothing about the on-premises routing it's still 1:7 231 routing over",
    "start": "986150",
    "end": "993890"
  },
  {
    "text": "this VPN connection so we no longer have to make these huge amounts of routing",
    "start": "993890",
    "end": "999260"
  },
  {
    "text": "table updates in a customer environment we're not putting individual / 32 routes into the customers data centers we've",
    "start": "999260",
    "end": "1005380"
  },
  {
    "text": "solved this problem but actually if we just pause there for a second doesn't this just sound like virtual networking",
    "start": "1005380",
    "end": "1012310"
  },
  {
    "start": "1008000",
    "end": "1008000"
  },
  {
    "text": "that we've had for quite a long time these are not unfamiliar concepts you know a subnet actually you could",
    "start": "1012310",
    "end": "1018490"
  },
  {
    "text": "consider something like a VLAN in a traditional data center it's not quite the same but but similar a VPC itself",
    "start": "1018490",
    "end": "1026290"
  },
  {
    "text": "isn't that just a vrf a virtual routing and forwarding instance and if you're not familiar with what that is it's effectively a very similar thing to a",
    "start": "1026290",
    "end": "1033040"
  },
  {
    "text": "VLAN but at layer 3 so we've got these concepts but there's actually a few",
    "start": "1033040",
    "end": "1040000"
  },
  {
    "text": "issues with this and the first one to consider is scaling let's take VLANs as our starting point",
    "start": "1040000",
    "end": "1047350"
  },
  {
    "start": "1043000",
    "end": "1043000"
  },
  {
    "text": "VLAN IDs it's made up from a 12 bit identifier that means we can have 4096",
    "start": "1047350",
    "end": "1052570"
  },
  {
    "text": "VLANs now we've publicly said we have millions of customers and a million is larger",
    "start": "1052570",
    "end": "1058270"
  },
  {
    "text": "than 4096 so this doesn't quite work for us even if we look at vrf now brf's they",
    "start": "1058270",
    "end": "1065030"
  },
  {
    "text": "canned we can support quite a few of those on some of those large traditional rooters that I mentioned perhaps a couple of thousand of them that's still",
    "start": "1065030",
    "end": "1071390"
  },
  {
    "text": "less than we need to be able to support so this isn't going to work there's also",
    "start": "1071390",
    "end": "1076610"
  },
  {
    "text": "quite generally a fixed ratio here between the amount of VLANs that you can have associated with a particular vrf",
    "start": "1076610",
    "end": "1083170"
  },
  {
    "text": "overall this is not going to be a fit for VPC so then we step back and",
    "start": "1083170",
    "end": "1090080"
  },
  {
    "start": "1088000",
    "end": "1088000"
  },
  {
    "text": "considered what are our actual requirements for VPC again and overall we simplified this down to the fact that",
    "start": "1090080",
    "end": "1095300"
  },
  {
    "text": "we wanted to be able to scale VPC to be able to support millions of environments that are the size of amazon.com we",
    "start": "1095300",
    "end": "1103130"
  },
  {
    "text": "wanted any server anywhere in a region to be able to host customer ec2 instances on any subnet in that VPC and",
    "start": "1103130",
    "end": "1110510"
  },
  {
    "text": "be able to communicate with each other so let's dive into the detail of how we",
    "start": "1110510",
    "end": "1117500"
  },
  {
    "start": "1114000",
    "end": "1114000"
  },
  {
    "text": "actually built this so a couple of concepts first here we're looking at a",
    "start": "1117500",
    "end": "1122960"
  },
  {
    "text": "particular set of servers in a V PC or that make up the components of the V PC",
    "start": "1122960",
    "end": "1128230"
  },
  {
    "text": "so these are the underlying physical servers running the virtual machines the ec2 instances physical hosts within",
    "start": "1128230",
    "end": "1134840"
  },
  {
    "text": "Amazon data centers they have IP addresses on our substrate network this is 192 168 and the example shown on the",
    "start": "1134840",
    "end": "1141500"
  },
  {
    "text": "screen here and these servers can all communicate with each other we then have",
    "start": "1141500",
    "end": "1146540"
  },
  {
    "text": "customers ec2 instances and you will have seen the ec2 instances are associated with a V PC identifier so in",
    "start": "1146540",
    "end": "1153710"
  },
  {
    "text": "this case we've got a customer ec2 instance running on 10.00 2 it's running",
    "start": "1153710",
    "end": "1159380"
  },
  {
    "text": "in a blue V PC that's the the term we're going to use here rather than putting identifiers on the screen and this",
    "start": "1159380",
    "end": "1165050"
  },
  {
    "text": "customer is actually running multiple ec2 instances and when they've launched they've actually launched onto different",
    "start": "1165050",
    "end": "1171170"
  },
  {
    "text": "underlying servers within our data centers so we've got three ec2 instances running here all owned by the same",
    "start": "1171170",
    "end": "1176870"
  },
  {
    "text": "customer all in the blue V PC now we've also got some other customers running on",
    "start": "1176870",
    "end": "1182630"
  },
  {
    "text": "these servers as I'm showing you here so we have the green V PC which has two ec2 instances running again on different",
    "start": "1182630",
    "end": "1188600"
  },
  {
    "text": "underlying servers and we also have the gray V PC in this case two instances happen to be running on the same",
    "start": "1188600",
    "end": "1194420"
  },
  {
    "text": "underlying the other core component of VPC is not",
    "start": "1194420",
    "end": "1199429"
  },
  {
    "text": "something that we exposed to you as a customer so you can't access this directly but it's absolutely a critical component of VPC and it's the mapping",
    "start": "1199429",
    "end": "1206870"
  },
  {
    "text": "service the mapping service keeps track of ec2 instances associated with",
    "start": "1206870",
    "end": "1213080"
  },
  {
    "text": "particular VP C's and it Maps those and it provides that information to the underlying servers that make up the vp c",
    "start": "1213080",
    "end": "1220010"
  },
  {
    "text": "environment so I'm just going to pause there to explain a concept around how",
    "start": "1220010",
    "end": "1225320"
  },
  {
    "start": "1223000",
    "end": "1223000"
  },
  {
    "text": "layer 2 Ethernet actually works this is back in a traditional environment this is how things have been done for many",
    "start": "1225320",
    "end": "1231260"
  },
  {
    "text": "many years and it's probably a fairly familiar concept to you if you've done anything with networking we've got two",
    "start": "1231260",
    "end": "1236720"
  },
  {
    "text": "servers here they're on the 10 network they're in the same subnet 10.00 2 and",
    "start": "1236720",
    "end": "1243049"
  },
  {
    "text": "1000 3 they're connected to a simple Ethernet switch if those two servers",
    "start": "1243049",
    "end": "1248299"
  },
  {
    "text": "want to exchange traffic there's a process they have to go through and let's assume these have all just been turned on this is a fresh environment",
    "start": "1248299",
    "end": "1255940"
  },
  {
    "text": "what actually happens is that first server says I want to send some traffic to 1000 3 and it does something called",
    "start": "1255940",
    "end": "1264169"
  },
  {
    "text": "up address resolution protocol what actually happens here is we take the MAC",
    "start": "1264169",
    "end": "1269210"
  },
  {
    "text": "address the physical address of that server on the left hand side the 1000 - and we do a broadcast that's what the",
    "start": "1269210",
    "end": "1276139"
  },
  {
    "text": "ffff is that's shown here on the screen so we do a broadcast and say where is 1000 3 how do I get to it where is its",
    "start": "1276139",
    "end": "1283070"
  },
  {
    "text": "physical address on this Ethernet network the Ethernet switch which has also recently just been booted up says I",
    "start": "1283070",
    "end": "1288980"
  },
  {
    "text": "don't know so it floods the network and it's passes on that request to every port on it on that device the server",
    "start": "1288980",
    "end": "1296750"
  },
  {
    "text": "that is 1000 3 actually reply isn't it says yes I'm over here and here's my MAC address here's how you can send traffic",
    "start": "1296750",
    "end": "1302539"
  },
  {
    "text": "to me over the physical network the Ethernet switch captures that stores it but it then passes the reply back to",
    "start": "1302539",
    "end": "1309409"
  },
  {
    "text": "1000 - and says parse your traffic over the network to this MAC address this is",
    "start": "1309409",
    "end": "1315049"
  },
  {
    "text": "how normal operating systems expect to work in a traditional environment and obviously those same operating systems",
    "start": "1315049",
    "end": "1321169"
  },
  {
    "text": "are used within AWS so now once we have this our entry resolved we",
    "start": "1321169",
    "end": "1329159"
  },
  {
    "text": "now send traffic we can send ICMP TCP UDP no problem between these two servers on our traditional network but how does",
    "start": "1329159",
    "end": "1336029"
  },
  {
    "text": "that actually work inside VPC so let's go back to our environment here it's the",
    "start": "1336029",
    "end": "1341909"
  },
  {
    "start": "1339000",
    "end": "1339000"
  },
  {
    "text": "same environment we were looking at earlier we've got the underlying servers running some ec2 instances we've got our",
    "start": "1341909",
    "end": "1347970"
  },
  {
    "text": "server here at the top 1000 - it wants to send some traffic to 1000 3 it's the",
    "start": "1347970",
    "end": "1353099"
  },
  {
    "text": "exact same scenario we looked at on the traditional Ethernet network the operating system ARP sprut that's what",
    "start": "1353099",
    "end": "1359099"
  },
  {
    "text": "it expects to do it's the same operating system however at this point what we actually do is we take that request and",
    "start": "1359099",
    "end": "1365909"
  },
  {
    "text": "we pass it on to the mapping service so the underlying server sends a request to the mapping service that says I'm",
    "start": "1365909",
    "end": "1372299"
  },
  {
    "text": "hosting an ec2 instance and I have traffic that I need to send to blue V PC",
    "start": "1372299",
    "end": "1377460"
  },
  {
    "text": "because that's my V PC and I want to send it to the instance that has the address 1000 3 can you tell me where",
    "start": "1377460",
    "end": "1384570"
  },
  {
    "text": "that is so the mapping service replies and it's quite simple it says yep I know where that is I've got a mapping for it",
    "start": "1384570",
    "end": "1391289"
  },
  {
    "text": "it's actually running over on the physical host 192 168 1.4 so that goes",
    "start": "1391289",
    "end": "1397169"
  },
  {
    "text": "back to the underlying hypervisor for ec2 we then pass that back to the",
    "start": "1397169",
    "end": "1402299"
  },
  {
    "text": "instance so now as far as the ec2 instance is concerned it got what appears to be a completely normal",
    "start": "1402299",
    "end": "1407999"
  },
  {
    "text": "ARP reply we give it a MAC address for that remote instance and everyone is happy on there you'll notice that a no",
    "start": "1407999",
    "end": "1414330"
  },
  {
    "text": "point was there communication with that destination instance so it's an interesting element from traditional",
    "start": "1414330",
    "end": "1420599"
  },
  {
    "text": "networks it turns out you don't actually need to see those are ProQuest's on the destination server so now we need sensin",
    "start": "1420599",
    "end": "1428070"
  },
  {
    "text": "traffic so okay we've got our our instance again 1000 - let's send that",
    "start": "1428070",
    "end": "1433109"
  },
  {
    "text": "traffic so we now address it to the MAC address for 1000 three just like we would on a traditional network and we",
    "start": "1433109",
    "end": "1439499"
  },
  {
    "text": "send that packet this is our ICMP our TCP traffic across the network what",
    "start": "1439499",
    "end": "1444989"
  },
  {
    "text": "actually happens here though is the underlying server that's running this ec2 instance wraps that packet so it",
    "start": "1444989",
    "end": "1452129"
  },
  {
    "text": "wraps it with a label on it that says this is blue this is the blue V PC and because of that mapping service lookup",
    "start": "1452129",
    "end": "1459119"
  },
  {
    "text": "that we did earlier it knows what to do with it so it then puts on top of that and you destination for this wrapped packet",
    "start": "1459119",
    "end": "1465749"
  },
  {
    "text": "and it says pass it across the network to the server that is 192 168 1.4 great",
    "start": "1465749",
    "end": "1472200"
  },
  {
    "text": "that traffic flows across the underlying ec2 Network and arrives on that remote server now we don't actually deliver it",
    "start": "1472200",
    "end": "1479249"
  },
  {
    "text": "at this point what actually happens is that server says I just need to validate this so that server checks in with the",
    "start": "1479249",
    "end": "1485340"
  },
  {
    "text": "mapping service again and it says I've just received a packet that came from a blue V PC and the address on the source",
    "start": "1485340",
    "end": "1493139"
  },
  {
    "text": "of that packet was 1000 - can you just confirm for me that that ec2 instance",
    "start": "1493139",
    "end": "1498570"
  },
  {
    "text": "exists on that source server and the mapping services yes that's absolutely a valid mapping you can accept that packet",
    "start": "1498570",
    "end": "1505820"
  },
  {
    "text": "so now the hypervisor passes that packet onto the ec2 instance and you receive it inside your operating system so now we",
    "start": "1505820",
    "end": "1513539"
  },
  {
    "text": "have traffic flowing between two ec2 instances that are on the same subnet and that's the analogy back to the the",
    "start": "1513539",
    "end": "1519269"
  },
  {
    "text": "traditional Ethernet based network okay",
    "start": "1519269",
    "end": "1525239"
  },
  {
    "start": "1523000",
    "end": "1523000"
  },
  {
    "text": "what about isolation inside V PC so here I am down in the gray V PC now I've got",
    "start": "1525239",
    "end": "1531330"
  },
  {
    "text": "1000 4 and I decide I want to send some traffic to 1000 3 now there are no ec2",
    "start": "1531330",
    "end": "1537330"
  },
  {
    "text": "instances on this network that have the address 1000 3 in the gray V PC but ok",
    "start": "1537330",
    "end": "1545519"
  },
  {
    "text": "so the underlying hypervisor says VI I see that you want to send this packet I'll check in with the mapping service mapping service can you tell me where",
    "start": "1545519",
    "end": "1552539"
  },
  {
    "text": "gray 1000 3 is the mapping service says ok gray yep I can look that up this is a",
    "start": "1552539",
    "end": "1560039"
  },
  {
    "text": "corrupt mapping this is not something that you should be trying to send and even though the fact that you tried to",
    "start": "1560039",
    "end": "1565980"
  },
  {
    "text": "send it in the first place something's gone wrong here so at that point we deny the mapping and we will",
    "start": "1565980",
    "end": "1571499"
  },
  {
    "text": "notify an operator to have a look into what happened here this is not a situation that should ever occur so the",
    "start": "1571499",
    "end": "1577230"
  },
  {
    "text": "mapping services present prevented that packet from flowing anywhere ok so we",
    "start": "1577230",
    "end": "1585119"
  },
  {
    "text": "now have another broadcast happening here it's saying I would like to find the ec2 instance 1000 3 again so I do",
    "start": "1585119",
    "end": "1593190"
  },
  {
    "text": "the broadcast go back to the mapping service and let's say this case something actually got corrupted on the way and for whatever",
    "start": "1593190",
    "end": "1599539"
  },
  {
    "text": "reason this now says I'm actually looking for blue so I tried to send a packet to grey 10003 but actually the",
    "start": "1599539",
    "end": "1607100"
  },
  {
    "text": "query rents the mapping services blue 1000 3 the mapping service says hang on",
    "start": "1607100",
    "end": "1612590"
  },
  {
    "text": "a second 192 168 0 for the underlying server doesn't host any instances in the blue V",
    "start": "1612590",
    "end": "1618740"
  },
  {
    "text": "PC therefore again this is wrong this mapping is denied and an alarm will get",
    "start": "1618740",
    "end": "1624289"
  },
  {
    "text": "raised again for investigation this is something that should never occur but is built into the mapping service to",
    "start": "1624289",
    "end": "1629600"
  },
  {
    "text": "validate these packets ok so let's",
    "start": "1629600",
    "end": "1636620"
  },
  {
    "text": "assume that we did get a valid mapping you know I'm stacking up very very improbable unlikely things here let's",
    "start": "1636620",
    "end": "1642799"
  },
  {
    "text": "say we did get a response so we got a response that said yeah ok we're going to wrap this in the blue V PC we're",
    "start": "1642799",
    "end": "1648769"
  },
  {
    "text": "going to send it across the network and we're sending it to 192 168 1.4 so I'm now trying to get from a gray V PC to a",
    "start": "1648769",
    "end": "1654440"
  },
  {
    "text": "blue V PC ok so that packet tries to flow get sent across the network the",
    "start": "1654440",
    "end": "1661580"
  },
  {
    "text": "underlying server that hosts blue 1000 3 remember what it did before it checks back in with the mapping service and it",
    "start": "1661580",
    "end": "1668809"
  },
  {
    "text": "says I just want to validate the fact do you have a blue 1000 for at that original server and the answer of course",
    "start": "1668809",
    "end": "1675500"
  },
  {
    "text": "is no this is an invalid mapping therefore once again let's raise an alarm this is something that should not",
    "start": "1675500",
    "end": "1681529"
  },
  {
    "text": "happen that packet never gets delivered to the underlying ec2 instance it",
    "start": "1681529",
    "end": "1687350"
  },
  {
    "text": "stopped by the hypervisor this is the isolation that V PC provides and the multiple layers that we have in place to",
    "start": "1687350",
    "end": "1693139"
  },
  {
    "text": "prevent these packets flowing if they should not make it to the destination ec2 instance ok so we've talked about",
    "start": "1693139",
    "end": "1700279"
  },
  {
    "start": "1700000",
    "end": "1700000"
  },
  {
    "text": "traffic flowing within the same subnet what about if we're going between two different subnets so layer 3 routing so",
    "start": "1700279",
    "end": "1706309"
  },
  {
    "text": "similar scenario here we have a server in a traditional network running on 1000 - and it's trying to send traffic to",
    "start": "1706309",
    "end": "1712309"
  },
  {
    "text": "1001 3 now in a traditional environment what would happen here is 1000 - knows",
    "start": "1712309",
    "end": "1718549"
  },
  {
    "text": "that it can't reach 1001 3 directly it's not on the same subnet so instead it",
    "start": "1718549",
    "end": "1723649"
  },
  {
    "text": "knows that it needs to find the default gateway so we go through the similar dance that we did before we talk to the Ethernet switch but instead of look",
    "start": "1723649",
    "end": "1730100"
  },
  {
    "text": "for 1001 3 while we're now looking for is the default gateway to get out of this particular subnet so we this time",
    "start": "1730100",
    "end": "1737299"
  },
  {
    "text": "we art for 1000 won our default gateway out of this particular subnet the Ethernet switch floods the network or",
    "start": "1737299",
    "end": "1743539"
  },
  {
    "text": "perhaps it already has an existing entry in its ARP table and it provides a reply and it says 1000 won yeah that's located",
    "start": "1743539",
    "end": "1750440"
  },
  {
    "text": "over here on this physical address for the Rooter find so we can now send a",
    "start": "1750440",
    "end": "1755450"
  },
  {
    "text": "packet from our source server on 1000 - and we at layer 3 know we want to",
    "start": "1755450",
    "end": "1762470"
  },
  {
    "text": "address it to 1001 3 we know it's trying to get to this destination but the first hop we have to get through is that",
    "start": "1762470",
    "end": "1768830"
  },
  {
    "text": "physical Rooter so the MAC address that we send this traffic to is actually the interface on that Rooter so now we're at",
    "start": "1768830",
    "end": "1775490"
  },
  {
    "text": "the Rooter fantastic the Rooter then does its job and it changes that source MAC address and passes onto the other",
    "start": "1775490",
    "end": "1782120"
  },
  {
    "text": "segment of the network passes it down to the Ethernet switch and onto that server so this is how layer 3 routing works in",
    "start": "1782120",
    "end": "1788990"
  },
  {
    "text": "a traditional network how does that work inside VPC so let's go back to this very",
    "start": "1788990",
    "end": "1794299"
  },
  {
    "start": "1793000",
    "end": "1793000"
  },
  {
    "text": "familiar diagram now that you've seen a few times we've got the same ec2 instance at the top but this time is",
    "start": "1794299",
    "end": "1799850"
  },
  {
    "text": "trying to send a packet to 10001 first because that's what it thinks is its default gateway",
    "start": "1799850",
    "end": "1805490"
  },
  {
    "text": "remember it's trying to send something outside of its subnet so as far as the operating system is concerned it needs",
    "start": "1805490",
    "end": "1810919"
  },
  {
    "text": "to do the same thing as it would do in a traditional environment what happens here of course is the underlying server",
    "start": "1810919",
    "end": "1816770"
  },
  {
    "text": "checks in with the mapping service and says I have a query for blue 1000 1 the mapping service says yep I know what",
    "start": "1816770",
    "end": "1823940"
  },
  {
    "text": "you're looking for here here's a MAC address for it doesn't actually need to go and talk to anyone else and the",
    "start": "1823940",
    "end": "1829400"
  },
  {
    "text": "underlying hypervisor passes that back to the ec2 instance everything's good these two instance then says fantastic I",
    "start": "1829400",
    "end": "1835640"
  },
  {
    "text": "will send my packet and I know that I need to send it to the MAC address for the router on my network that's the the",
    "start": "1835640",
    "end": "1841610"
  },
  {
    "text": "image that it has of the network so here we are we have a source address here the MAC address of the ec2 instance we have",
    "start": "1841610",
    "end": "1848630"
  },
  {
    "text": "a source IP address destination address again it's in a different subnet the destination MAC address is on my same",
    "start": "1848630",
    "end": "1855980"
  },
  {
    "text": "segment it's a physical MAC address that I'm sending to as far as the instance is concerned what actually happens is the",
    "start": "1855980",
    "end": "1862520"
  },
  {
    "text": "underlying hypervisor kind of ignores that it says where did you actually want to send this traffic",
    "start": "1862520",
    "end": "1867530"
  },
  {
    "text": "you wanted to send it to ten zero one three we care about the layer three IP address here in the different subnet we",
    "start": "1867530",
    "end": "1874640"
  },
  {
    "text": "go to the mapping service we actually ask where is that IP address we get a response and the traffic can now flow",
    "start": "1874640",
    "end": "1881540"
  },
  {
    "text": "directly across the network it never touched a Rooter it was passed across the network in exactly the same way that",
    "start": "1881540",
    "end": "1888290"
  },
  {
    "text": "layer to traffic is passed this means that our layer three virtual topology is actually totally decoupled from the",
    "start": "1888290",
    "end": "1895010"
  },
  {
    "text": "physical infrastructure it's decoupled from that traditional image of the way that a network should behave and it",
    "start": "1895010",
    "end": "1901880"
  },
  {
    "text": "means that we can deliver very fast performance equally at layer 3 or layer two across our network in that sense so",
    "start": "1901880",
    "end": "1911059"
  },
  {
    "text": "here's our packet we can now wrap it in our blue label that we said we're going to pass it across the substrate we're",
    "start": "1911059",
    "end": "1916340"
  },
  {
    "text": "going to pass it across to 192 168 dot one dot four once again we're going to check in with the mapping service we",
    "start": "1916340",
    "end": "1922580"
  },
  {
    "text": "need to validate that this packet was allowed to come from that source host server and be passed on to this",
    "start": "1922580",
    "end": "1927679"
  },
  {
    "text": "particular destination server the mapping service says yes this is a valid mapping please deliver that packet",
    "start": "1927679",
    "end": "1933760"
  },
  {
    "text": "nowhere in there did we actually hit a Rooter within the environment but the operating systems believe that it",
    "start": "1933760",
    "end": "1939080"
  },
  {
    "text": "behaved in perfectly normal way exactly as it would have in a traditional network okay now it's probably quite",
    "start": "1939080",
    "end": "1946490"
  },
  {
    "text": "clear here that the mapping service potentially represents a point of failure within this environment now",
    "start": "1946490",
    "end": "1951799"
  },
  {
    "start": "1948000",
    "end": "1948000"
  },
  {
    "text": "that's clearly not the case also you might consider that every time we do those lookups",
    "start": "1951799",
    "end": "1957140"
  },
  {
    "text": "actually that's introducing some latency into the packet flow and that goes against some of our design goals for VPC",
    "start": "1957140",
    "end": "1963520"
  },
  {
    "text": "the thing is the mapping service has full visibility into where things are placed within the environment and these",
    "start": "1963520",
    "end": "1969980"
  },
  {
    "text": "are organized into topics and published such these underlying servers can consume them well that means in reality is that we",
    "start": "1969980",
    "end": "1977210"
  },
  {
    "text": "actually deploy a cache onto these underlying servers and actually these",
    "start": "1977210",
    "end": "1982700"
  },
  {
    "text": "trashes actually contain all the mappings for the ec2 instances involved in the V pcs and these two instances",
    "start": "1982700",
    "end": "1989240"
  },
  {
    "text": "running on that particular server and that means we actually didn't implement a cache miss path here everything is",
    "start": "1989240",
    "end": "1995300"
  },
  {
    "text": "queried against that local cache which sourced from the topics provided by the mapping service itself so they are",
    "start": "1995300",
    "end": "2002820"
  },
  {
    "text": "populated the caches subscribed to that mapping service receive the updates so whenever you make changes to your V PC",
    "start": "2002820",
    "end": "2008429"
  },
  {
    "text": "whenever you launch new ec2 instances the mapping service is updated as are those local caches so we can now go back",
    "start": "2008429",
    "end": "2017520"
  },
  {
    "text": "to our original concept here we have our V PC with our instances running inside that particular V PC but you'll remember",
    "start": "2017520",
    "end": "2023730"
  },
  {
    "text": "we said this needs to be connected back to our existing corporate network in this example we were using a VPN so how",
    "start": "2023730",
    "end": "2030899"
  },
  {
    "text": "does that work everything we've talked about in terms of packet flow within our V PC is all inside the V PC itself so we",
    "start": "2030899",
    "end": "2038159"
  },
  {
    "text": "can do this quite easily we can send traffic from one instance to another we can even send it between subnets and different availability zones but how do",
    "start": "2038159",
    "end": "2045090"
  },
  {
    "text": "we get home how do we get back to that data center if we had a packet inside",
    "start": "2045090",
    "end": "2050878"
  },
  {
    "text": "our V PC and we this time address it to a 172 address so in this case 170 2.16",
    "start": "2050879",
    "end": "2058260"
  },
  {
    "text": "is outside of our V PC this is the corporate data center what is the",
    "start": "2058260",
    "end": "2063480"
  },
  {
    "text": "mapping service do with it it says I want to send standard ICMP UDP TCP traffic from an instance to this IP",
    "start": "2063480",
    "end": "2069960"
  },
  {
    "text": "address that is not within the V PC it gets wrapped in the blue headers again",
    "start": "2069960",
    "end": "2075510"
  },
  {
    "text": "so okay we know it came from a blue V PC still not any closer to actually getting out of this environment what we really",
    "start": "2075510",
    "end": "2082830"
  },
  {
    "text": "want to do here though is send it somewhere else so what is the destination for this packet it's no longer going to another server it no",
    "start": "2082830",
    "end": "2090240"
  },
  {
    "text": "longer is going to another ec2 instance so this is where the concept of edges comes in so within our V PC and edge is",
    "start": "2090240",
    "end": "2097740"
  },
  {
    "text": "represented just the same as those are the server's an edge has an IP address in this case 191 6 a 4.3 and 4.4 when",
    "start": "2097740",
    "end": "2105750"
  },
  {
    "text": "our ec2 instance wants to send a packet to an address that is outside the V PC",
    "start": "2105750",
    "end": "2110960"
  },
  {
    "text": "we look that up with the mapping service and we realized that due to the VPN configuration we can reach this over the",
    "start": "2110960",
    "end": "2118020"
  },
  {
    "text": "VPN the mapping service says ok what you need to do here is pass that traffic",
    "start": "2118020",
    "end": "2123270"
  },
  {
    "text": "over to one of the edges so here's our are familiar dance again we have the",
    "start": "2123270",
    "end": "2128880"
  },
  {
    "text": "packet leaving the instance destined for that remote IP address it goes across the network having checked",
    "start": "2128880",
    "end": "2134970"
  },
  {
    "text": "in with the mapping service as normal and it now arrives at the edge it's got the blue wrapper around it and it was",
    "start": "2134970",
    "end": "2141300"
  },
  {
    "text": "destined to this particular edge and this edge is handling VPN connections so what do we want to do with a VPN piece",
    "start": "2141300",
    "end": "2147750"
  },
  {
    "text": "of traffic well what we want to do of course is use that edge to remove anything that is not valid on a VPN",
    "start": "2147750",
    "end": "2155010"
  },
  {
    "text": "connection and replace it with everything that is so in this particular case once it hits the edge what we do is",
    "start": "2155010",
    "end": "2160500"
  },
  {
    "text": "we strip off that wrapper that said this came from a blue a blue VPC IPSec VPNs",
    "start": "2160500",
    "end": "2165630"
  },
  {
    "text": "don't know anything about our V pcs and what the edge does is it replaces it with a whole bunch of IPSec stuff",
    "start": "2165630",
    "end": "2171590"
  },
  {
    "text": "encryption all the things you need to be able to send this packet across the IPSec VPN it changes the source and",
    "start": "2171590",
    "end": "2178710"
  },
  {
    "text": "destination because if you're going across the the VPN you now need to be sending it to the customer gateway on the other side which will then decrypt",
    "start": "2178710",
    "end": "2185280"
  },
  {
    "text": "the packet and deliver it onto the local network so this is what a VPN edge does",
    "start": "2185280",
    "end": "2190880"
  },
  {
    "text": "what about Direct Connect I mentioned that at the very beginning of the talk Direct Connect is that physical connection back to your data center the",
    "start": "2190880",
    "end": "2197730"
  },
  {
    "start": "2192000",
    "end": "2192000"
  },
  {
    "text": "way Direct Connect works is you provision what are called virtual interfaces these use VLANs you can have",
    "start": "2197730",
    "end": "2203340"
  },
  {
    "text": "all of the VLANs available to a particular customer on an individual port so there's no real limitations",
    "start": "2203340",
    "end": "2208859"
  },
  {
    "text": "there but in this case when we receive a packet at the edge for Direct Connect what we need to do is remove that blue",
    "start": "2208859",
    "end": "2215040"
  },
  {
    "text": "wrapper and this time encapsulate it with a dot1q VPN a VLAN header we also",
    "start": "2215040",
    "end": "2222210"
  },
  {
    "text": "then change the next hop for the packet and we pass it down that direct connect to the customers router so that's what a",
    "start": "2222210",
    "end": "2227760"
  },
  {
    "text": "Direct Connect edge does within VPC so this is great we can get traffic home",
    "start": "2227760",
    "end": "2232859"
  },
  {
    "text": "but actually it's quite common for customers to want to be able to send traffic to them from the internet so how",
    "start": "2232859",
    "end": "2238170"
  },
  {
    "text": "does the internet gateway work when you create an Internet gateway in your V PC and you attach it it's an object that",
    "start": "2238170",
    "end": "2243960"
  },
  {
    "text": "you attach it's available to the hold of that V PC but how does it actually work well once again that's an edge so the",
    "start": "2243960",
    "end": "2250560"
  },
  {
    "start": "2248000",
    "end": "2248000"
  },
  {
    "text": "internet gateway in the underlying V PC infrastructure is represented by an edge we take our blue rat packet here we pass",
    "start": "2250560",
    "end": "2257310"
  },
  {
    "text": "it to the edge now this is where things are a little bit different because out on the internet we don't care about",
    "start": "2257310",
    "end": "2262740"
  },
  {
    "text": "VLANs we don't care about eye second Krypton and therefore what do we do with this particular packet we",
    "start": "2262740",
    "end": "2269430"
  },
  {
    "text": "currently have a source address of a private IP address inside our V PC 1000 - but we're sending it to a public IP",
    "start": "2269430",
    "end": "2276030"
  },
  {
    "text": "address out on the Internet what we actually want to do here is remove anything else around this packet we want",
    "start": "2276030",
    "end": "2281910"
  },
  {
    "text": "this to be a standard IP packet when it goes out to the Internet but there's still a problem that's source IP address",
    "start": "2281910",
    "end": "2287600"
  },
  {
    "text": "that's not valid out on the internet it's a private IP address so what the",
    "start": "2287600",
    "end": "2292680"
  },
  {
    "text": "internet gateway does here is it replaces that with a public IP address this might be an elastic IP for example",
    "start": "2292680",
    "end": "2299220"
  },
  {
    "text": "you've assigned to the ec2 instance or just a public IP that you chose to enable when you launched it so the",
    "start": "2299220",
    "end": "2304680"
  },
  {
    "text": "Internet gateway edge replaces those IP addresses effectively does that translation for you so there's an",
    "start": "2304680",
    "end": "2312540"
  },
  {
    "start": "2312000",
    "end": "2312000"
  },
  {
    "text": "example there of three different edges a VPN edge Direct Connect and the internet gateway but I also just briefly wanted",
    "start": "2312540",
    "end": "2319530"
  },
  {
    "text": "to mention VPC endpoints so we have V PC endpoints 4s3 we have V PC endpoints currently in",
    "start": "2319530",
    "end": "2326070"
  },
  {
    "text": "preview for DynamoDB they work in exactly the same way traffic is passed to an edge it is then encapsulated as",
    "start": "2326070",
    "end": "2333660"
  },
  {
    "text": "needed to then be delivered to those other AWS services so what have we",
    "start": "2333660",
    "end": "2339750"
  },
  {
    "start": "2339000",
    "end": "2339000"
  },
  {
    "text": "actually now created well we have a V PC but this is actually a platform where you can launch other services these are",
    "start": "2339750",
    "end": "2346800"
  },
  {
    "text": "not just ec2 instances that you choose to launch in your account you might decide that you want to use normal ec2",
    "start": "2346800",
    "end": "2352710"
  },
  {
    "text": "instances but alongside that you want an RDS environment a relational database now RDS is a managed service by AWS but",
    "start": "2352710",
    "end": "2359850"
  },
  {
    "text": "you wanted to have an IP address inside your V PC that's fine V PC enables you",
    "start": "2359850",
    "end": "2364950"
  },
  {
    "text": "to do that you might decide that you need to use redshift and again that can have a presence inside your V PC and the",
    "start": "2364950",
    "end": "2372690"
  },
  {
    "text": "advantage is because these are inside your V PC you can also reach them from that on-premises network this",
    "start": "2372690",
    "end": "2378330"
  },
  {
    "text": "environment is an extension of your existing data center and existing infrastructure so with that go back to",
    "start": "2378330",
    "end": "2386490"
  },
  {
    "text": "the original architecture we started with we've taught through the traffic flow path from your data center over",
    "start": "2386490",
    "end": "2392160"
  },
  {
    "text": "direct connect into your V PC and back again using the edges we've talked about",
    "start": "2392160",
    "end": "2398010"
  },
  {
    "text": "traffic flow over the Amazon global network from our cloud front pops right the way through into the ec2 instances that",
    "start": "2398010",
    "end": "2404760"
  },
  {
    "text": "might be acting as the origins for your content for cloud from I mean in the V PC itself we've got our ec2 instances",
    "start": "2404760",
    "end": "2410790"
  },
  {
    "text": "that can communicate with each other across availability zones using their private IP addresses and this is an",
    "start": "2410790",
    "end": "2416670"
  },
  {
    "text": "isolated environment for each individual customer so with that I think we've met",
    "start": "2416670",
    "end": "2422010"
  },
  {
    "text": "the requirements of describing the flow of billions of packets across the AWS network I hope that's been useful to you",
    "start": "2422010",
    "end": "2428220"
  },
  {
    "text": "and provides a bit of an insight into how we operate our environment thank you very much [Applause]",
    "start": "2428220",
    "end": "2436580"
  }
]