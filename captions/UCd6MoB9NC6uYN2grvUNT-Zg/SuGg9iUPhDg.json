[
  {
    "text": "hello everyone uh welcome to another",
    "start": "0",
    "end": "2639"
  },
  {
    "text": "video in the AWS syrup series here we",
    "start": "2639",
    "end": "6299"
  },
  {
    "text": "discuss the AWS Cloud databases uh some",
    "start": "6299",
    "end": "9720"
  },
  {
    "text": "of its really cool features and how to",
    "start": "9720",
    "end": "11940"
  },
  {
    "text": "implement these in your own application",
    "start": "11940",
    "end": "13980"
  },
  {
    "text": "environment my name is renisha marar and",
    "start": "13980",
    "end": "16859"
  },
  {
    "text": "I'm a Solutions architect specializing",
    "start": "16859",
    "end": "19140"
  },
  {
    "text": "in database Technologies here at AWS",
    "start": "19140",
    "end": "21840"
  },
  {
    "text": "well today we're going to discuss one",
    "start": "21840",
    "end": "24300"
  },
  {
    "text": "such AWS Cloud database uh that is",
    "start": "24300",
    "end": "27000"
  },
  {
    "text": "quantum lecture database or Amazon qldb",
    "start": "27000",
    "end": "30000"
  },
  {
    "text": "and one of its most important and really",
    "start": "30000",
    "end": "33059"
  },
  {
    "text": "cool feature that is qldb streaming with",
    "start": "33059",
    "end": "35880"
  },
  {
    "text": "sense near real-time feed of data from",
    "start": "35880",
    "end": "38280"
  },
  {
    "text": "qldb into a purpose built Downstream",
    "start": "38280",
    "end": "41219"
  },
  {
    "text": "database so we'll quickly review about",
    "start": "41219",
    "end": "43739"
  },
  {
    "text": "this qldb streaming feature and then",
    "start": "43739",
    "end": "46500"
  },
  {
    "text": "spend majority of the time doing an",
    "start": "46500",
    "end": "48780"
  },
  {
    "text": "actual demo of the scene so with that",
    "start": "48780",
    "end": "51360"
  },
  {
    "text": "let's get started",
    "start": "51360",
    "end": "54260"
  },
  {
    "text": "so the agenda for this video is going to",
    "start": "56640",
    "end": "58800"
  },
  {
    "text": "be as follows we will briefly go over",
    "start": "58800",
    "end": "60960"
  },
  {
    "text": "the qldb streaming capability which is",
    "start": "60960",
    "end": "63600"
  },
  {
    "text": "one of the most important and primary",
    "start": "63600",
    "end": "66240"
  },
  {
    "text": "mechanism for Downstream integration",
    "start": "66240",
    "end": "68340"
  },
  {
    "text": "with any other database then we'll",
    "start": "68340",
    "end": "70740"
  },
  {
    "text": "review a very common qldb streaming",
    "start": "70740",
    "end": "73619"
  },
  {
    "text": "architecture or workflow that's",
    "start": "73619",
    "end": "75659"
  },
  {
    "text": "leveraged by majority of our customers",
    "start": "75659",
    "end": "77820"
  },
  {
    "text": "and lastly we'll briefly go over the",
    "start": "77820",
    "end": "80700"
  },
  {
    "text": "demo steps and then we'll jump into the",
    "start": "80700",
    "end": "83340"
  },
  {
    "text": "actual demo which will be the majority",
    "start": "83340",
    "end": "85380"
  },
  {
    "text": "part of this video",
    "start": "85380",
    "end": "88280"
  },
  {
    "text": "so qldb offers a streaming capability",
    "start": "88860",
    "end": "91320"
  },
  {
    "text": "and what that allows you to do is to",
    "start": "91320",
    "end": "94020"
  },
  {
    "text": "pair your qldp Ledger with a Kinesis",
    "start": "94020",
    "end": "96659"
  },
  {
    "text": "data stream and every time you commit a",
    "start": "96659",
    "end": "98939"
  },
  {
    "text": "transaction in qldb qldb will push that",
    "start": "98939",
    "end": "101759"
  },
  {
    "text": "data into the Kinesis data stream and",
    "start": "101759",
    "end": "104040"
  },
  {
    "text": "there's an at least once delivery",
    "start": "104040",
    "end": "105780"
  },
  {
    "text": "guarantee of the data into the stream so",
    "start": "105780",
    "end": "108360"
  },
  {
    "text": "you never need to worry about dropping",
    "start": "108360",
    "end": "110040"
  },
  {
    "text": "or losing your data now what this allows",
    "start": "110040",
    "end": "112619"
  },
  {
    "text": "you to do is to drive event driven logic",
    "start": "112619",
    "end": "114899"
  },
  {
    "text": "you can write Lambda functions that",
    "start": "114899",
    "end": "116880"
  },
  {
    "text": "respond to events occurring in The",
    "start": "116880",
    "end": "119159"
  },
  {
    "text": "Ledger it also allows you to drive a",
    "start": "119159",
    "end": "121740"
  },
  {
    "text": "real-time analytics and lastly it also",
    "start": "121740",
    "end": "125159"
  },
  {
    "text": "allows you to push data from qldb into",
    "start": "125159",
    "end": "127740"
  },
  {
    "text": "one or more Downstream purpose-built",
    "start": "127740",
    "end": "129780"
  },
  {
    "text": "databases or customer internal systems",
    "start": "129780",
    "end": "132239"
  },
  {
    "text": "so this is a really popular feature",
    "start": "132239",
    "end": "134640"
  },
  {
    "text": "streaming is a very important part of",
    "start": "134640",
    "end": "136920"
  },
  {
    "text": "most qldb architectures where the most",
    "start": "136920",
    "end": "139800"
  },
  {
    "text": "common use case is to push the data from",
    "start": "139800",
    "end": "141900"
  },
  {
    "text": "qldb into a secondary database to",
    "start": "141900",
    "end": "144780"
  },
  {
    "text": "support different read access patterns",
    "start": "144780",
    "end": "149459"
  },
  {
    "text": "foreign",
    "start": "149459",
    "end": "152120"
  },
  {
    "text": "we model a typical architecture used by",
    "start": "153080",
    "end": "156120"
  },
  {
    "text": "majority of our customers where they",
    "start": "156120",
    "end": "158280"
  },
  {
    "text": "leverage qldb as a system of record so",
    "start": "158280",
    "end": "161099"
  },
  {
    "text": "see your application will interact with",
    "start": "161099",
    "end": "162840"
  },
  {
    "text": "some form of compute say for example ec2",
    "start": "162840",
    "end": "165300"
  },
  {
    "text": "and that compute is going to interact",
    "start": "165300",
    "end": "167160"
  },
  {
    "text": "with qldb now what it's going to do is",
    "start": "167160",
    "end": "170459"
  },
  {
    "text": "it's going to write data into qldb and",
    "start": "170459",
    "end": "173400"
  },
  {
    "text": "then qldb will stream the data into",
    "start": "173400",
    "end": "175620"
  },
  {
    "text": "Kinesis data stream and then from this",
    "start": "175620",
    "end": "177900"
  },
  {
    "text": "Kinesis stream the data will be consumed",
    "start": "177900",
    "end": "180300"
  },
  {
    "text": "by a Lambda function and ultimately that",
    "start": "180300",
    "end": "183420"
  },
  {
    "text": "Lambda function will push it into a",
    "start": "183420",
    "end": "185580"
  },
  {
    "text": "downstream database say for example",
    "start": "185580",
    "end": "187680"
  },
  {
    "text": "Amazon Aurora well it's important to",
    "start": "187680",
    "end": "190560"
  },
  {
    "text": "understand that the primary mechanism",
    "start": "190560",
    "end": "192420"
  },
  {
    "text": "for getting data from qldb into a",
    "start": "192420",
    "end": "195239"
  },
  {
    "text": "secondary database is through Kinesis",
    "start": "195239",
    "end": "197220"
  },
  {
    "text": "and through a Lambda function as a",
    "start": "197220",
    "end": "199379"
  },
  {
    "text": "consumer so what this allows you to do",
    "start": "199379",
    "end": "201659"
  },
  {
    "text": "is to use qledb as an authoritative",
    "start": "201659",
    "end": "204480"
  },
  {
    "text": "system of record because you're writing",
    "start": "204480",
    "end": "207120"
  },
  {
    "text": "data first into qldb and qldb's",
    "start": "207120",
    "end": "209760"
  },
  {
    "text": "transaction history is immutable and it",
    "start": "209760",
    "end": "211739"
  },
  {
    "text": "also allows you to build your read",
    "start": "211739",
    "end": "213540"
  },
  {
    "text": "models in one or more other systems or",
    "start": "213540",
    "end": "216420"
  },
  {
    "text": "Downstream databases now it's it's a",
    "start": "216420",
    "end": "219540"
  },
  {
    "text": "pretty airtight workflow over here qldb",
    "start": "219540",
    "end": "222659"
  },
  {
    "text": "like I mentioned offers an at least once",
    "start": "222659",
    "end": "224640"
  },
  {
    "text": "delivery guarantee so anytime you commit",
    "start": "224640",
    "end": "226920"
  },
  {
    "text": "a transaction and qldb the",
    "start": "226920",
    "end": "228900"
  },
  {
    "text": "responsibility of not dropping updates",
    "start": "228900",
    "end": "231000"
  },
  {
    "text": "falls on the AWS infrastructure however",
    "start": "231000",
    "end": "234480"
  },
  {
    "text": "if for some reason say the Lambda",
    "start": "234480",
    "end": "236760"
  },
  {
    "text": "function cannot push that event into the",
    "start": "236760",
    "end": "239459"
  },
  {
    "text": "downstream database and a transfer of",
    "start": "239459",
    "end": "241799"
  },
  {
    "text": "the message age or the number of defined",
    "start": "241799",
    "end": "244200"
  },
  {
    "text": "retries then it'll push that message",
    "start": "244200",
    "end": "246299"
  },
  {
    "text": "into an sqs dead letter queue and that",
    "start": "246299",
    "end": "249000"
  },
  {
    "text": "way you're guaranteed not to drop any",
    "start": "249000",
    "end": "250980"
  },
  {
    "text": "data well as part of this demo we will",
    "start": "250980",
    "end": "254040"
  },
  {
    "text": "be implementing this same architecture",
    "start": "254040",
    "end": "255959"
  },
  {
    "text": "except for configuring the dead letter",
    "start": "255959",
    "end": "258239"
  },
  {
    "text": "queue however it's recommended as a best",
    "start": "258239",
    "end": "260760"
  },
  {
    "text": "practice to configure a dead letter",
    "start": "260760",
    "end": "262440"
  },
  {
    "text": "queue when working with qldb streaming",
    "start": "262440",
    "end": "264840"
  },
  {
    "text": "in your production environment",
    "start": "264840",
    "end": "268520"
  },
  {
    "text": "so the demo basically demonstrates how",
    "start": "269460",
    "end": "272040"
  },
  {
    "text": "easily streaming of qldb data into",
    "start": "272040",
    "end": "274440"
  },
  {
    "text": "Amazon Aurora can be achieved well the",
    "start": "274440",
    "end": "277560"
  },
  {
    "text": "first step of the demo would be to",
    "start": "277560",
    "end": "279240"
  },
  {
    "text": "deploy a cloud formation template now",
    "start": "279240",
    "end": "281639"
  },
  {
    "text": "what this uh cloud formation template",
    "start": "281639",
    "end": "283800"
  },
  {
    "text": "provision says it's it Provisions a",
    "start": "283800",
    "end": "285840"
  },
  {
    "text": "couple of resources that's required as",
    "start": "285840",
    "end": "287520"
  },
  {
    "text": "part of the demo so it'll create an",
    "start": "287520",
    "end": "289560"
  },
  {
    "text": "aurora serverless mySQL database cluster",
    "start": "289560",
    "end": "292139"
  },
  {
    "text": "it will create two IM roles required by",
    "start": "292139",
    "end": "294900"
  },
  {
    "text": "the qldb stream and the Lambda function",
    "start": "294900",
    "end": "297540"
  },
  {
    "text": "that we would be creating in the further",
    "start": "297540",
    "end": "299340"
  },
  {
    "text": "steps of the demo and lastly it will",
    "start": "299340",
    "end": "302160"
  },
  {
    "text": "also upload some Lambda layers that's",
    "start": "302160",
    "end": "304800"
  },
  {
    "text": "required for the Lambda function to",
    "start": "304800",
    "end": "306900"
  },
  {
    "text": "function appropriately and we'll see",
    "start": "306900",
    "end": "309660"
  },
  {
    "text": "that in a bit",
    "start": "309660",
    "end": "311160"
  },
  {
    "text": "the second step is to create a quantum",
    "start": "311160",
    "end": "313500"
  },
  {
    "text": "Ledger database and create an audio",
    "start": "313500",
    "end": "315360"
  },
  {
    "text": "stable within this database uh the third",
    "start": "315360",
    "end": "318900"
  },
  {
    "text": "step is after creating the table uh",
    "start": "318900",
    "end": "322380"
  },
  {
    "text": "within the Ledger",
    "start": "322380",
    "end": "323940"
  },
  {
    "text": "so after creating the table within the",
    "start": "323940",
    "end": "326580"
  },
  {
    "text": "Ledger we will set up a qldb stream from",
    "start": "326580",
    "end": "330120"
  },
  {
    "text": "the same Ledger and Associate it with a",
    "start": "330120",
    "end": "332699"
  },
  {
    "text": "newly created Kinesis data stream uh",
    "start": "332699",
    "end": "335340"
  },
  {
    "text": "then we'll go ahead and create an orders",
    "start": "335340",
    "end": "337440"
  },
  {
    "text": "table with a predefined schema within",
    "start": "337440",
    "end": "339419"
  },
  {
    "text": "the Amazon Aurora mySQL database cluster",
    "start": "339419",
    "end": "342680"
  },
  {
    "text": "uh the second last step is to create the",
    "start": "342680",
    "end": "346080"
  },
  {
    "text": "Lambda function and set the",
    "start": "346080",
    "end": "348740"
  },
  {
    "text": "aforementioned or Kinesis data stream as",
    "start": "348740",
    "end": "351720"
  },
  {
    "text": "the trigger for this particular Lambda",
    "start": "351720",
    "end": "353940"
  },
  {
    "text": "function as well as set up the",
    "start": "353940",
    "end": "356220"
  },
  {
    "text": "connection to the downstream Aurora",
    "start": "356220",
    "end": "358139"
  },
  {
    "text": "database cluster also within this Lambda",
    "start": "358139",
    "end": "360479"
  },
  {
    "text": "function and lastly in order to verify",
    "start": "360479",
    "end": "363600"
  },
  {
    "text": "the end-to-end flow of data streaming",
    "start": "363600",
    "end": "365520"
  },
  {
    "text": "from qledb ledgers orders table to",
    "start": "365520",
    "end": "368039"
  },
  {
    "text": "ultimately Amazon Aurora's orders table",
    "start": "368039",
    "end": "370020"
  },
  {
    "text": "we will insert a record into qldb",
    "start": "370020",
    "end": "373020"
  },
  {
    "text": "ledgers orders table and query for the",
    "start": "373020",
    "end": "374940"
  },
  {
    "text": "same record or data from Amazon Aurora's",
    "start": "374940",
    "end": "377460"
  },
  {
    "text": "Auto stable so I'll be showing each of",
    "start": "377460",
    "end": "379979"
  },
  {
    "text": "these steps in a detailed manner as part",
    "start": "379979",
    "end": "382380"
  },
  {
    "text": "of the demo so here's the fundamental",
    "start": "382380",
    "end": "385319"
  },
  {
    "text": "Downstream integration mechanism that is",
    "start": "385319",
    "end": "388319"
  },
  {
    "text": "to write into qldb stream it out through",
    "start": "388319",
    "end": "391560"
  },
  {
    "text": "Kinesis consume with Lambda and push it",
    "start": "391560",
    "end": "394319"
  },
  {
    "text": "onto a downstream database Aurora",
    "start": "394319",
    "end": "396900"
  },
  {
    "text": "database",
    "start": "396900",
    "end": "398100"
  },
  {
    "text": "so with that let's move on to the demo",
    "start": "398100",
    "end": "400740"
  },
  {
    "text": "and get started with the demo",
    "start": "400740",
    "end": "404180"
  },
  {
    "text": "the objective of this demo is to stream",
    "start": "404460",
    "end": "406919"
  },
  {
    "text": "and replicate The qldb Ledger data to a",
    "start": "406919",
    "end": "409740"
  },
  {
    "text": "downstream Aurora serverless mySQL",
    "start": "409740",
    "end": "411780"
  },
  {
    "text": "database so to begin with we'll be",
    "start": "411780",
    "end": "414539"
  },
  {
    "text": "creating an aurora serverless mySQL",
    "start": "414539",
    "end": "416759"
  },
  {
    "text": "database cluster with the help of a",
    "start": "416759",
    "end": "418979"
  },
  {
    "text": "cloud formation template that you can",
    "start": "418979",
    "end": "421020"
  },
  {
    "text": "access from the description box below",
    "start": "421020",
    "end": "424259"
  },
  {
    "text": "now as a first step let's search for the",
    "start": "424259",
    "end": "427020"
  },
  {
    "text": "cloud formation service on the AWS",
    "start": "427020",
    "end": "429720"
  },
  {
    "text": "Management console in order to deploy",
    "start": "429720",
    "end": "432180"
  },
  {
    "text": "our cloud formation template",
    "start": "432180",
    "end": "436039"
  },
  {
    "text": "so click on stacks on the left hand side",
    "start": "437660",
    "end": "440460"
  },
  {
    "text": "then select the create stack option now",
    "start": "440460",
    "end": "444419"
  },
  {
    "text": "choose the uploader template file option",
    "start": "444419",
    "end": "446520"
  },
  {
    "text": "as the template source and select the",
    "start": "446520",
    "end": "448500"
  },
  {
    "text": "appropriate cloud formation template",
    "start": "448500",
    "end": "450960"
  },
  {
    "text": "then click on next",
    "start": "450960",
    "end": "454099"
  },
  {
    "text": "now let's assign an appropriate name for",
    "start": "455460",
    "end": "458099"
  },
  {
    "text": "this stack let's see Aurora serverless",
    "start": "458099",
    "end": "460699"
  },
  {
    "text": "under the parameter section we have some",
    "start": "460699",
    "end": "463680"
  },
  {
    "text": "default values or leave them as is to",
    "start": "463680",
    "end": "466860"
  },
  {
    "text": "keep things simple for this demo I've",
    "start": "466860",
    "end": "468780"
  },
  {
    "text": "hard-coded certain parameter values in",
    "start": "468780",
    "end": "470819"
  },
  {
    "text": "the cloud formation for example the DB",
    "start": "470819",
    "end": "473280"
  },
  {
    "text": "username parameter has a value username",
    "start": "473280",
    "end": "475560"
  },
  {
    "text": "however it's always recommended to",
    "start": "475560",
    "end": "477840"
  },
  {
    "text": "access the password programmatically",
    "start": "477840",
    "end": "479759"
  },
  {
    "text": "from AWS Secrets manager service",
    "start": "479759",
    "end": "482940"
  },
  {
    "text": "the cloud formation template also",
    "start": "482940",
    "end": "485280"
  },
  {
    "text": "creates two IM roles that we would need",
    "start": "485280",
    "end": "487740"
  },
  {
    "text": "further ahead in the demo however I just",
    "start": "487740",
    "end": "490560"
  },
  {
    "text": "wanted to mention that this uploaded",
    "start": "490560",
    "end": "492180"
  },
  {
    "text": "cloud formation template takes care of",
    "start": "492180",
    "end": "494220"
  },
  {
    "text": "it for you",
    "start": "494220",
    "end": "495360"
  },
  {
    "text": "then we click on next",
    "start": "495360",
    "end": "498240"
  },
  {
    "text": "skip this section for now and again",
    "start": "498240",
    "end": "500280"
  },
  {
    "text": "click on next review the details and",
    "start": "500280",
    "end": "503160"
  },
  {
    "text": "scroll to the bottom and check the box",
    "start": "503160",
    "end": "505259"
  },
  {
    "text": "at the very bottom of the page and",
    "start": "505259",
    "end": "507300"
  },
  {
    "text": "lastly click on submit",
    "start": "507300",
    "end": "510180"
  },
  {
    "text": "now this cloud formation template would",
    "start": "510180",
    "end": "512459"
  },
  {
    "text": "take around 7 to 10 minutes to provision",
    "start": "512459",
    "end": "514620"
  },
  {
    "text": "as it Provisions a couple of resources",
    "start": "514620",
    "end": "516779"
  },
  {
    "text": "for us click on the refresh option in",
    "start": "516779",
    "end": "519719"
  },
  {
    "text": "order to see the status of your cloud",
    "start": "519719",
    "end": "522539"
  },
  {
    "text": "formation deployment well once it gets",
    "start": "522539",
    "end": "525540"
  },
  {
    "text": "deployed take a look at the resources",
    "start": "525540",
    "end": "527220"
  },
  {
    "text": "provisioned under the resources tab you",
    "start": "527220",
    "end": "530279"
  },
  {
    "text": "can take a look at all the provision",
    "start": "530279",
    "end": "532260"
  },
  {
    "text": "resources such as a DB cluster database",
    "start": "532260",
    "end": "534839"
  },
  {
    "text": "cluster IM roles as well as the Lambda",
    "start": "534839",
    "end": "537420"
  },
  {
    "text": "layers that's required in the further",
    "start": "537420",
    "end": "539339"
  },
  {
    "text": "steps of the demo now that we have all",
    "start": "539339",
    "end": "542160"
  },
  {
    "text": "our resources provisioned we can move on",
    "start": "542160",
    "end": "544740"
  },
  {
    "text": "to the next step of the demo which is",
    "start": "544740",
    "end": "546420"
  },
  {
    "text": "creating a qled villager by going into",
    "start": "546420",
    "end": "548700"
  },
  {
    "text": "Amazon qldb service click on ledgers",
    "start": "548700",
    "end": "551700"
  },
  {
    "text": "click on create Ledger option give this",
    "start": "551700",
    "end": "555060"
  },
  {
    "text": "qldb Ledger and appropriate name say",
    "start": "555060",
    "end": "558180"
  },
  {
    "text": "streaming lab and leave the rest of the",
    "start": "558180",
    "end": "560760"
  },
  {
    "text": "configurations as this and hit on create",
    "start": "560760",
    "end": "563760"
  },
  {
    "text": "Ledger",
    "start": "563760",
    "end": "564839"
  },
  {
    "text": "now this should create your Ledger in",
    "start": "564839",
    "end": "567240"
  },
  {
    "text": "around two minutes uh well as you can",
    "start": "567240",
    "end": "569519"
  },
  {
    "text": "see The Ledger is now active and so we",
    "start": "569519",
    "end": "572339"
  },
  {
    "text": "can go ahead and create a table within",
    "start": "572339",
    "end": "574860"
  },
  {
    "text": "the Ledger now for that on the left",
    "start": "574860",
    "end": "577260"
  },
  {
    "text": "under the qldb menu click on the",
    "start": "577260",
    "end": "579060"
  },
  {
    "text": "particul editor",
    "start": "579060",
    "end": "580560"
  },
  {
    "text": "select streaming lab from the drop down",
    "start": "580560",
    "end": "583260"
  },
  {
    "text": "menu under choose a ledger or this is",
    "start": "583260",
    "end": "585660"
  },
  {
    "text": "the one that we just created as you",
    "start": "585660",
    "end": "588120"
  },
  {
    "text": "would notice currently there are no",
    "start": "588120",
    "end": "589620"
  },
  {
    "text": "tables being displayed under the table",
    "start": "589620",
    "end": "591180"
  },
  {
    "text": "section so let's create a table under",
    "start": "591180",
    "end": "593760"
  },
  {
    "text": "this Ledger by running a create table",
    "start": "593760",
    "end": "596940"
  },
  {
    "text": "orders statement so on running this",
    "start": "596940",
    "end": "599880"
  },
  {
    "text": "query the table ID gets displayed in the",
    "start": "599880",
    "end": "602459"
  },
  {
    "text": "output section at the very bottom of the",
    "start": "602459",
    "end": "604560"
  },
  {
    "text": "page which confirms that the query was",
    "start": "604560",
    "end": "606959"
  },
  {
    "text": "completed successfully lastly we can",
    "start": "606959",
    "end": "609240"
  },
  {
    "text": "click on the refresh button and verify",
    "start": "609240",
    "end": "611160"
  },
  {
    "text": "if the table got created successfully",
    "start": "611160",
    "end": "615259"
  },
  {
    "text": "now for the third step from the left",
    "start": "615540",
    "end": "617459"
  },
  {
    "text": "side of the screen click on streams",
    "start": "617459",
    "end": "619680"
  },
  {
    "text": "under Amazon qldb menu and then click on",
    "start": "619680",
    "end": "622680"
  },
  {
    "text": "create qldb stream",
    "start": "622680",
    "end": "625080"
  },
  {
    "text": "in the Stream information block let's",
    "start": "625080",
    "end": "627540"
  },
  {
    "text": "enter the stream name as streaming lab",
    "start": "627540",
    "end": "630600"
  },
  {
    "text": "hyphen qldb stream",
    "start": "630600",
    "end": "632940"
  },
  {
    "text": "in the source data block uh we'll select",
    "start": "632940",
    "end": "635459"
  },
  {
    "text": "the streaming lab Ledger that we just",
    "start": "635459",
    "end": "637140"
  },
  {
    "text": "created in the previous step the start",
    "start": "637140",
    "end": "639180"
  },
  {
    "text": "date and time shows the current time in",
    "start": "639180",
    "end": "641399"
  },
  {
    "text": "UTC and the end date and time field can",
    "start": "641399",
    "end": "644339"
  },
  {
    "text": "be left blank in fact these are the",
    "start": "644339",
    "end": "646380"
  },
  {
    "text": "default settings now under the write",
    "start": "646380",
    "end": "648899"
  },
  {
    "text": "data to Kinesis data stream block click",
    "start": "648899",
    "end": "651300"
  },
  {
    "text": "on create Kinesis stream",
    "start": "651300",
    "end": "654180"
  },
  {
    "text": "so this takes us to the create data",
    "start": "654180",
    "end": "656640"
  },
  {
    "text": "stream page for Kinesis in the data",
    "start": "656640",
    "end": "659519"
  },
  {
    "text": "stream configuration block let's enter",
    "start": "659519",
    "end": "661500"
  },
  {
    "text": "streaming lab hyphen Kinesis stream as",
    "start": "661500",
    "end": "664320"
  },
  {
    "text": "the data stream name",
    "start": "664320",
    "end": "667019"
  },
  {
    "text": "now under the data stream capacity block",
    "start": "667019",
    "end": "669720"
  },
  {
    "text": "let's select the provisioned radio",
    "start": "669720",
    "end": "671880"
  },
  {
    "text": "button option and enter 2 for the number",
    "start": "671880",
    "end": "674459"
  },
  {
    "text": "of provision shots for this particular",
    "start": "674459",
    "end": "676320"
  },
  {
    "text": "demo so then click on create data stream",
    "start": "676320",
    "end": "679860"
  },
  {
    "text": "at the bottom of the page",
    "start": "679860",
    "end": "682079"
  },
  {
    "text": "after a few seconds this panel here",
    "start": "682079",
    "end": "684600"
  },
  {
    "text": "indicates successful creation of the",
    "start": "684600",
    "end": "686700"
  },
  {
    "text": "stream so head back to the open tab",
    "start": "686700",
    "end": "688560"
  },
  {
    "text": "where the qledb stream was being",
    "start": "688560",
    "end": "690000"
  },
  {
    "text": "configured click on browse click on",
    "start": "690000",
    "end": "692279"
  },
  {
    "text": "refresh to see and select the newly",
    "start": "692279",
    "end": "694440"
  },
  {
    "text": "created Kinesis stream now for",
    "start": "694440",
    "end": "696600"
  },
  {
    "text": "convenience the necessary IM role for",
    "start": "696600",
    "end": "698700"
  },
  {
    "text": "qldbstream was created through the cloud",
    "start": "698700",
    "end": "700620"
  },
  {
    "text": "formation template in the first step so",
    "start": "700620",
    "end": "703440"
  },
  {
    "text": "over here use select the use an existing",
    "start": "703440",
    "end": "706200"
  },
  {
    "text": "service role select the role from the",
    "start": "706200",
    "end": "708899"
  },
  {
    "text": "drop down menu and you can view the role",
    "start": "708899",
    "end": "711000"
  },
  {
    "text": "from the link over here",
    "start": "711000",
    "end": "712880"
  },
  {
    "text": "after this click on create qledb stream",
    "start": "712880",
    "end": "718640"
  },
  {
    "text": "so now we have our qldb stream which is",
    "start": "720480",
    "end": "723480"
  },
  {
    "text": "active and all set up",
    "start": "723480",
    "end": "726000"
  },
  {
    "text": "so now navigate to the RDS console by",
    "start": "726000",
    "end": "729000"
  },
  {
    "text": "typing RDS in the search bar at the top",
    "start": "729000",
    "end": "731100"
  },
  {
    "text": "from the RDS service homepage let's",
    "start": "731100",
    "end": "734160"
  },
  {
    "text": "click on databases that's on the left",
    "start": "734160",
    "end": "735959"
  },
  {
    "text": "and click on the Aurora database cluster",
    "start": "735959",
    "end": "738839"
  },
  {
    "text": "that was deployed through the cloud",
    "start": "738839",
    "end": "740100"
  },
  {
    "text": "formation template and take a note of",
    "start": "740100",
    "end": "742380"
  },
  {
    "text": "the endpoint of this database cluster as",
    "start": "742380",
    "end": "745680"
  },
  {
    "text": "well as the network configurations",
    "start": "745680",
    "end": "747060"
  },
  {
    "text": "including VPC subnets and Security Group",
    "start": "747060",
    "end": "750060"
  },
  {
    "text": "associated with this database cluster",
    "start": "750060",
    "end": "753300"
  },
  {
    "text": "now let's click on the query editor on",
    "start": "753300",
    "end": "755279"
  },
  {
    "text": "the left hand side as it's a first time",
    "start": "755279",
    "end": "757019"
  },
  {
    "text": "using the query editor we'll have to",
    "start": "757019",
    "end": "758579"
  },
  {
    "text": "connect to the database",
    "start": "758579",
    "end": "760140"
  },
  {
    "text": "So within the connect database block",
    "start": "760140",
    "end": "762740"
  },
  {
    "text": "select the database cluster and for the",
    "start": "762740",
    "end": "766560"
  },
  {
    "text": "database username select add new",
    "start": "766560",
    "end": "768180"
  },
  {
    "text": "database credentials and enter the",
    "start": "768180",
    "end": "770519"
  },
  {
    "text": "databases username and password so for",
    "start": "770519",
    "end": "772560"
  },
  {
    "text": "this demo the default username is",
    "start": "772560",
    "end": "774180"
  },
  {
    "text": "username and the password is password as",
    "start": "774180",
    "end": "776940"
  },
  {
    "text": "we had seen while uploading the cloud",
    "start": "776940",
    "end": "778500"
  },
  {
    "text": "formation template let's leave the other",
    "start": "778500",
    "end": "780839"
  },
  {
    "text": "things as is and click on connect to",
    "start": "780839",
    "end": "783240"
  },
  {
    "text": "database at the bottom",
    "start": "783240",
    "end": "784860"
  },
  {
    "text": "so now before the schema can be set up a",
    "start": "784860",
    "end": "788100"
  },
  {
    "text": "database needs to be created so let's",
    "start": "788100",
    "end": "790260"
  },
  {
    "text": "run the necessary SQL command into the",
    "start": "790260",
    "end": "792959"
  },
  {
    "text": "query editor",
    "start": "792959",
    "end": "795860"
  },
  {
    "text": "so let's run a create database command",
    "start": "801779",
    "end": "807120"
  },
  {
    "text": "so in this statement output on",
    "start": "810480",
    "end": "812459"
  },
  {
    "text": "successful execution you should see the",
    "start": "812459",
    "end": "814620"
  },
  {
    "text": "status as success",
    "start": "814620",
    "end": "816420"
  },
  {
    "text": "well since we have created the database",
    "start": "816420",
    "end": "819480"
  },
  {
    "text": "we'll go ahead and create the audios",
    "start": "819480",
    "end": "821519"
  },
  {
    "text": "table uh under this database that we",
    "start": "821519",
    "end": "824100"
  },
  {
    "text": "just created so if we take a look at the",
    "start": "824100",
    "end": "826620"
  },
  {
    "text": "SQL command the composite key of",
    "start": "826620",
    "end": "829800"
  },
  {
    "text": "document ID and document version are",
    "start": "829800",
    "end": "831779"
  },
  {
    "text": "used so both qldb and the Aurora",
    "start": "831779",
    "end": "833639"
  },
  {
    "text": "serverless database will maintain",
    "start": "833639",
    "end": "835200"
  },
  {
    "text": "uniqueness per row and again it shows a",
    "start": "835200",
    "end": "838920"
  },
  {
    "text": "status of success on executing",
    "start": "838920",
    "end": "840839"
  },
  {
    "text": "successfully",
    "start": "840839",
    "end": "842700"
  },
  {
    "text": "so on executing a Select Staff from Auto",
    "start": "842700",
    "end": "845579"
  },
  {
    "text": "stable currently we can see that the",
    "start": "845579",
    "end": "848700"
  },
  {
    "text": "table is empty right now",
    "start": "848700",
    "end": "852180"
  },
  {
    "text": "let's navigate to the ews Lambda console",
    "start": "852180",
    "end": "855120"
  },
  {
    "text": "by typing Lambda in the search bar at",
    "start": "855120",
    "end": "857459"
  },
  {
    "text": "the top so as the next step will create",
    "start": "857459",
    "end": "859740"
  },
  {
    "text": "a Lambda function which will be used to",
    "start": "859740",
    "end": "861540"
  },
  {
    "text": "read the incoming data from the",
    "start": "861540",
    "end": "863160"
  },
  {
    "text": "previously created Kinesis data streams",
    "start": "863160",
    "end": "865320"
  },
  {
    "text": "so click on create a function option",
    "start": "865320",
    "end": "868500"
  },
  {
    "text": "that you can find under functions",
    "start": "868500",
    "end": "871920"
  },
  {
    "text": "and let's provide the Lambda functional",
    "start": "871920",
    "end": "874079"
  },
  {
    "text": "name let's name it as streaming lab",
    "start": "874079",
    "end": "876060"
  },
  {
    "text": "hyphen qldb Lambda",
    "start": "876060",
    "end": "879920"
  },
  {
    "text": "foreign",
    "start": "881040",
    "end": "884040"
  },
  {
    "text": "time Fields drop down menu we'll select",
    "start": "884839",
    "end": "888120"
  },
  {
    "text": "python 3.8 and under the permissions",
    "start": "888120",
    "end": "891779"
  },
  {
    "text": "block right after it try to expand the",
    "start": "891779",
    "end": "894959"
  },
  {
    "text": "change default execution role and select",
    "start": "894959",
    "end": "897300"
  },
  {
    "text": "the option that says use an existing",
    "start": "897300",
    "end": "899519"
  },
  {
    "text": "role and select the qldb Lambda rule",
    "start": "899519",
    "end": "901800"
  },
  {
    "text": "from the drop down which uh drop down",
    "start": "901800",
    "end": "904560"
  },
  {
    "text": "menu which we had created as part of the",
    "start": "904560",
    "end": "906899"
  },
  {
    "text": "cloud formation template in the first",
    "start": "906899",
    "end": "908399"
  },
  {
    "text": "step",
    "start": "908399",
    "end": "910139"
  },
  {
    "text": "so now we've created a basic Lambda",
    "start": "910139",
    "end": "912360"
  },
  {
    "text": "function to begin with click on the add",
    "start": "912360",
    "end": "913980"
  },
  {
    "text": "trigger option under the trigger",
    "start": "913980",
    "end": "916260"
  },
  {
    "text": "configuration drop down menu select",
    "start": "916260",
    "end": "917940"
  },
  {
    "text": "Kinesis as the source and select the",
    "start": "917940",
    "end": "920220"
  },
  {
    "text": "Kinesis stream that we created a while",
    "start": "920220",
    "end": "921959"
  },
  {
    "text": "ago in this demo and make sure that the",
    "start": "921959",
    "end": "924060"
  },
  {
    "text": "activate trigger checkbox is checked and",
    "start": "924060",
    "end": "925980"
  },
  {
    "text": "for the rest of the fields leave it as",
    "start": "925980",
    "end": "927360"
  },
  {
    "text": "is and click on ADD so we've",
    "start": "927360",
    "end": "930120"
  },
  {
    "text": "successfully set up our Kinesis data",
    "start": "930120",
    "end": "931920"
  },
  {
    "text": "stream as a trigger to the Lambda",
    "start": "931920",
    "end": "933300"
  },
  {
    "text": "function and you can see that it has",
    "start": "933300",
    "end": "934740"
  },
  {
    "text": "been enabled which means that as soon as",
    "start": "934740",
    "end": "936540"
  },
  {
    "text": "data gets into The qldb Ledger it'll be",
    "start": "936540",
    "end": "938459"
  },
  {
    "text": "streamed through the qldb stream into",
    "start": "938459",
    "end": "940139"
  },
  {
    "text": "the Kinesis data stream and that will",
    "start": "940139",
    "end": "942240"
  },
  {
    "text": "trigger the execution of the Lambda",
    "start": "942240",
    "end": "943860"
  },
  {
    "text": "function that we are creating",
    "start": "943860",
    "end": "945660"
  },
  {
    "text": "so I have my python code ready that I'll",
    "start": "945660",
    "end": "948000"
  },
  {
    "text": "quickly paste here which would read the",
    "start": "948000",
    "end": "949560"
  },
  {
    "text": "data from the Kinesis stream connect to",
    "start": "949560",
    "end": "951480"
  },
  {
    "text": "the Aurora databases cluster endpoint",
    "start": "951480",
    "end": "953279"
  },
  {
    "text": "and insert the data into Aurora",
    "start": "953279",
    "end": "954959"
  },
  {
    "text": "databases orders table you can access",
    "start": "954959",
    "end": "956820"
  },
  {
    "text": "this code from the description box below",
    "start": "956820",
    "end": "958800"
  },
  {
    "text": "well there are some changes to be made",
    "start": "958800",
    "end": "960600"
  },
  {
    "text": "within the code before we proceed any",
    "start": "960600",
    "end": "962579"
  },
  {
    "text": "further so let's go to the RDS console",
    "start": "962579",
    "end": "964860"
  },
  {
    "text": "uh as we see here and copy paste the",
    "start": "964860",
    "end": "967860"
  },
  {
    "text": "database endpoint",
    "start": "967860",
    "end": "969899"
  },
  {
    "text": "copy that endpoint and assign it to the",
    "start": "969899",
    "end": "972180"
  },
  {
    "text": "RDS underscore host variable in the",
    "start": "972180",
    "end": "974279"
  },
  {
    "text": "Lambda code this will ensure that the",
    "start": "974279",
    "end": "976199"
  },
  {
    "text": "Lambda function can connect to the",
    "start": "976199",
    "end": "977760"
  },
  {
    "text": "correct database endpoint and keep the",
    "start": "977760",
    "end": "979980"
  },
  {
    "text": "rest of the code AS is now click on the",
    "start": "979980",
    "end": "982500"
  },
  {
    "text": "deploy button in order to see the",
    "start": "982500",
    "end": "985019"
  },
  {
    "text": "changes or modifications being made so",
    "start": "985019",
    "end": "988500"
  },
  {
    "text": "now scroll down to the end of the Lambda",
    "start": "988500",
    "end": "990720"
  },
  {
    "text": "function",
    "start": "990720",
    "end": "993079"
  },
  {
    "text": "so under the layers section uh at the",
    "start": "993360",
    "end": "996120"
  },
  {
    "text": "bottom there we'll click on ADD layer",
    "start": "996120",
    "end": "999139"
  },
  {
    "text": "and then click on the custom layer",
    "start": "999139",
    "end": "1002240"
  },
  {
    "text": "option and from the drop down menu below",
    "start": "1002240",
    "end": "1004880"
  },
  {
    "text": "add all the four Lambda layers that were",
    "start": "1004880",
    "end": "1007279"
  },
  {
    "text": "uploaded to your account through the",
    "start": "1007279",
    "end": "1009019"
  },
  {
    "text": "first cloud formation template one by",
    "start": "1009019",
    "end": "1010820"
  },
  {
    "text": "one to this Lambda function select the",
    "start": "1010820",
    "end": "1013699"
  },
  {
    "text": "version to be 1 and click add and repeat",
    "start": "1013699",
    "end": "1016160"
  },
  {
    "text": "the same to attach the other three",
    "start": "1016160",
    "end": "1018320"
  },
  {
    "text": "layers as well so by the end we can see",
    "start": "1018320",
    "end": "1020360"
  },
  {
    "text": "that all the layers have been added to",
    "start": "1020360",
    "end": "1023300"
  },
  {
    "text": "the Lambda function now that that we",
    "start": "1023300",
    "end": "1026120"
  },
  {
    "text": "have added all the full Lambda layers to",
    "start": "1026120",
    "end": "1027980"
  },
  {
    "text": "the Lambda function we are just a few",
    "start": "1027980",
    "end": "1029660"
  },
  {
    "text": "steps away from finishing the entire",
    "start": "1029660",
    "end": "1031400"
  },
  {
    "text": "end-to-end setup so so click on the",
    "start": "1031400",
    "end": "1034640"
  },
  {
    "text": "configuration tab and then click on the",
    "start": "1034640",
    "end": "1037220"
  },
  {
    "text": "general configuration subsection and",
    "start": "1037220",
    "end": "1040100"
  },
  {
    "text": "click on edit",
    "start": "1040100",
    "end": "1043298"
  },
  {
    "text": "and edit the timeout field from three",
    "start": "1043339",
    "end": "1045678"
  },
  {
    "text": "seconds to one minute and then click on",
    "start": "1045679",
    "end": "1047600"
  },
  {
    "text": "Save",
    "start": "1047600",
    "end": "1049839"
  },
  {
    "text": "then select the VPC subsection we need",
    "start": "1051260",
    "end": "1054440"
  },
  {
    "text": "to add the VPC configuration details",
    "start": "1054440",
    "end": "1056539"
  },
  {
    "text": "similar to the configuration of our",
    "start": "1056539",
    "end": "1058100"
  },
  {
    "text": "Aurora database cluster so before",
    "start": "1058100",
    "end": "1059780"
  },
  {
    "text": "selecting take a look at the RDS console",
    "start": "1059780",
    "end": "1061820"
  },
  {
    "text": "here and match the networking details",
    "start": "1061820",
    "end": "1064220"
  },
  {
    "text": "within the Lambda configuration",
    "start": "1064220",
    "end": "1067539"
  },
  {
    "text": "so select the same networking details as",
    "start": "1068059",
    "end": "1070700"
  },
  {
    "text": "the Aurora database cluster so the",
    "start": "1070700",
    "end": "1072740"
  },
  {
    "text": "default VPC the six subnets the security",
    "start": "1072740",
    "end": "1075559"
  },
  {
    "text": "group and lastly click on Save",
    "start": "1075559",
    "end": "1080500"
  },
  {
    "text": "thus successfully setting up the entire",
    "start": "1082820",
    "end": "1085280"
  },
  {
    "text": "Lambda function",
    "start": "1085280",
    "end": "1088179"
  },
  {
    "text": "now let's test the workflow so the first",
    "start": "1088640",
    "end": "1091700"
  },
  {
    "text": "thing that we can do to test the flow is",
    "start": "1091700",
    "end": "1093500"
  },
  {
    "text": "to go to qldb square editor and before",
    "start": "1093500",
    "end": "1096320"
  },
  {
    "text": "inserting any record into the qldbs",
    "start": "1096320",
    "end": "1098900"
  },
  {
    "text": "orders table make sure that it is empty",
    "start": "1098900",
    "end": "1101419"
  },
  {
    "text": "as well so Rana select star from all",
    "start": "1101419",
    "end": "1103820"
  },
  {
    "text": "those command",
    "start": "1103820",
    "end": "1105440"
  },
  {
    "text": "to verify the C",
    "start": "1105440",
    "end": "1108820"
  },
  {
    "text": "and as you can see Zero documents were",
    "start": "1111980",
    "end": "1114260"
  },
  {
    "text": "returned which means that the table is",
    "start": "1114260",
    "end": "1116120"
  },
  {
    "text": "empty so now say we insert and orders",
    "start": "1116120",
    "end": "1119919"
  },
  {
    "text": "details record consisting of the order",
    "start": "1119919",
    "end": "1122419"
  },
  {
    "text": "ID product ID of the product that was",
    "start": "1122419",
    "end": "1124460"
  },
  {
    "text": "purchased in this order the product",
    "start": "1124460",
    "end": "1126260"
  },
  {
    "text": "rating that was given to the product",
    "start": "1126260",
    "end": "1127820"
  },
  {
    "text": "product name and product quantity which",
    "start": "1127820",
    "end": "1130100"
  },
  {
    "text": "shows the number of products being",
    "start": "1130100",
    "end": "1131480"
  },
  {
    "text": "purchased within the order say if we run",
    "start": "1131480",
    "end": "1134059"
  },
  {
    "text": "an insert statement to insert this data",
    "start": "1134059",
    "end": "1136580"
  },
  {
    "text": "with order ids1 into the qldb orders",
    "start": "1136580",
    "end": "1140120"
  },
  {
    "text": "table using the insert statement we can",
    "start": "1140120",
    "end": "1141980"
  },
  {
    "text": "see a document ID as the output on",
    "start": "1141980",
    "end": "1144559"
  },
  {
    "text": "successful execution of the insert",
    "start": "1144559",
    "end": "1146240"
  },
  {
    "text": "statement",
    "start": "1146240",
    "end": "1147679"
  },
  {
    "text": "so now let's go ahead and run the select",
    "start": "1147679",
    "end": "1149960"
  },
  {
    "text": "query against the Aurora database to",
    "start": "1149960",
    "end": "1151940"
  },
  {
    "text": "verify the streaming of data from The",
    "start": "1151940",
    "end": "1153500"
  },
  {
    "text": "qldb Ledger into the Aurora database so",
    "start": "1153500",
    "end": "1156200"
  },
  {
    "text": "when we run the select statement we see",
    "start": "1156200",
    "end": "1157820"
  },
  {
    "text": "that the data has been populated from",
    "start": "1157820",
    "end": "1160100"
  },
  {
    "text": "qldbs Ledger into the Aurora database",
    "start": "1160100",
    "end": "1162980"
  },
  {
    "text": "now say if we run an update statement on",
    "start": "1162980",
    "end": "1166220"
  },
  {
    "text": "The qldb Ledger for the same record and",
    "start": "1166220",
    "end": "1168799"
  },
  {
    "text": "update uh say for example the product",
    "start": "1168799",
    "end": "1171500"
  },
  {
    "text": "quantity with the same order ID that is",
    "start": "1171500",
    "end": "1174260"
  },
  {
    "text": "one and change the product quantity from",
    "start": "1174260",
    "end": "1176660"
  },
  {
    "text": "2 to 8 and run that update Against The",
    "start": "1176660",
    "end": "1179059"
  },
  {
    "text": "qldb Ledger",
    "start": "1179059",
    "end": "1181960"
  },
  {
    "text": "now when we head back to the Aurora",
    "start": "1184940",
    "end": "1187280"
  },
  {
    "text": "databases query editor and check if it",
    "start": "1187280",
    "end": "1189919"
  },
  {
    "text": "got streamed and replicated into the",
    "start": "1189919",
    "end": "1191780"
  },
  {
    "text": "Aurora database cluster we can observe",
    "start": "1191780",
    "end": "1194480"
  },
  {
    "text": "that the revisions of the documents are",
    "start": "1194480",
    "end": "1196700"
  },
  {
    "text": "also streamed in near real time into the",
    "start": "1196700",
    "end": "1199220"
  },
  {
    "text": "Aurora database as seen here so as we",
    "start": "1199220",
    "end": "1202160"
  },
  {
    "text": "can see both the rows have the same",
    "start": "1202160",
    "end": "1204020"
  },
  {
    "text": "document ID however different document",
    "start": "1204020",
    "end": "1206539"
  },
  {
    "text": "version and since the primary key is a",
    "start": "1206539",
    "end": "1208820"
  },
  {
    "text": "composite key consisting of the document",
    "start": "1208820",
    "end": "1210559"
  },
  {
    "text": "ID and document version each row can be",
    "start": "1210559",
    "end": "1213500"
  },
  {
    "text": "referenced uniquely within the Aurora",
    "start": "1213500",
    "end": "1215419"
  },
  {
    "text": "database using this composite key",
    "start": "1215419",
    "end": "1218000"
  },
  {
    "text": "thus we have seen how qledb's new",
    "start": "1218000",
    "end": "1220340"
  },
  {
    "text": "real-time streaming functionality can be",
    "start": "1220340",
    "end": "1222140"
  },
  {
    "text": "set up easily and efficiently so with",
    "start": "1222140",
    "end": "1224960"
  },
  {
    "text": "this workflow you can ensure that the",
    "start": "1224960",
    "end": "1226580"
  },
  {
    "text": "qldb lectures data will be streamed into",
    "start": "1226580",
    "end": "1228860"
  },
  {
    "text": "Kinesis data stream through the qledb",
    "start": "1228860",
    "end": "1231140"
  },
  {
    "text": "streams from where it will be consumed",
    "start": "1231140",
    "end": "1233000"
  },
  {
    "text": "by a Lambda function and then the Lambda",
    "start": "1233000",
    "end": "1235520"
  },
  {
    "text": "function will push the data into the",
    "start": "1235520",
    "end": "1237500"
  },
  {
    "text": "downstream Aurora mySQL database in this",
    "start": "1237500",
    "end": "1239600"
  },
  {
    "text": "case",
    "start": "1239600",
    "end": "1241780"
  },
  {
    "text": "thank you so much for taking the time",
    "start": "1242299",
    "end": "1244700"
  },
  {
    "text": "and going through this video I really",
    "start": "1244700",
    "end": "1247460"
  },
  {
    "text": "hope that this was helpful and that you",
    "start": "1247460",
    "end": "1250039"
  },
  {
    "text": "would be able to apply what you've",
    "start": "1250039",
    "end": "1252200"
  },
  {
    "text": "learned today through this video in your",
    "start": "1252200",
    "end": "1254660"
  },
  {
    "text": "own application environment well enjoy",
    "start": "1254660",
    "end": "1257600"
  },
  {
    "text": "the rest of the day and as always happy",
    "start": "1257600",
    "end": "1260059"
  },
  {
    "text": "cloud computing from everyone here at",
    "start": "1260059",
    "end": "1262520"
  },
  {
    "text": "AWS thank you",
    "start": "1262520",
    "end": "1266200"
  }
]