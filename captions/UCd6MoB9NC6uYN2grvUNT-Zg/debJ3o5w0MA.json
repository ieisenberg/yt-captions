[
  {
    "start": "0",
    "end": "98000"
  },
  {
    "text": "okay let's get started good afternoon everyone welcome to the last session of",
    "start": "1100",
    "end": "6930"
  },
  {
    "text": "the day before we begin just by a quick show of hands how many of you were here",
    "start": "6930",
    "end": "12570"
  },
  {
    "text": "for my last session on delegation oh wow quite a few I was just trying to figure",
    "start": "12570",
    "end": "19140"
  },
  {
    "text": "out if I can reuse my jokes from that session looks like not so for those of",
    "start": "19140",
    "end": "25740"
  },
  {
    "text": "you who were here welcome back even though there is a slight overlap initially you will find",
    "start": "25740",
    "end": "33180"
  },
  {
    "text": "that the scenarios and use cases are entirely different for those of you who",
    "start": "33180",
    "end": "38760"
  },
  {
    "text": "could not attend you can always watch the session on YouTube I am told the",
    "start": "38760",
    "end": "45539"
  },
  {
    "text": "videos will be available as early as this Friday so over the next 45 minutes",
    "start": "45539",
    "end": "51360"
  },
  {
    "text": "I would like to cover how you can bring your own identities to your AWS and one",
    "start": "51360",
    "end": "57210"
  },
  {
    "text": "man my name is Sean Shia and I'm a product manager on the identity and",
    "start": "57210",
    "end": "63149"
  },
  {
    "text": "access management team so let's take a quick look at the agenda today it's very similar to the last session agenda we",
    "start": "63149",
    "end": "70710"
  },
  {
    "text": "start with couple quick definitions next we look at the Maine Federation",
    "start": "70710",
    "end": "75960"
  },
  {
    "text": "scenarios then we look at the Federation fundamentals and finally we'll see the",
    "start": "75960",
    "end": "82890"
  },
  {
    "text": "scenarios in action using demos quite a few demos at the end of the session I",
    "start": "82890",
    "end": "88320"
  },
  {
    "text": "hope you will walk away with a solid understanding of how to bring your own",
    "start": "88320",
    "end": "94259"
  },
  {
    "text": "identities to AWS let's start with the definitions before I go there we do have",
    "start": "94259",
    "end": "102810"
  },
  {
    "start": "98000",
    "end": "98000"
  },
  {
    "text": "five demos to cover and I do want you to be on time for the pub crawl so please",
    "start": "102810",
    "end": "108420"
  },
  {
    "text": "hold on to your questions till the end of the sessions I will be available after the session and for the rest of",
    "start": "108420",
    "end": "114720"
  },
  {
    "text": "the conference so let's start with the definition so that all of us are on the same page when I say delegation what I",
    "start": "114720",
    "end": "121619"
  },
  {
    "text": "mean is you are providing users in other AWS account access to resources in your",
    "start": "121619",
    "end": "127979"
  },
  {
    "text": "account Federation on the other hand means you are providing users in",
    "start": "127979",
    "end": "133310"
  },
  {
    "text": "the identity store's access to resources in your account this can be corporate",
    "start": "133310",
    "end": "139099"
  },
  {
    "text": "identity stores like Active Directory or LDAP or this can be social identity",
    "start": "139099",
    "end": "144530"
  },
  {
    "text": "stores like Facebook Google or Amazon we look at two scenarios you can bring two",
    "start": "144530",
    "end": "151489"
  },
  {
    "start": "148000",
    "end": "148000"
  },
  {
    "text": "types of identities to AWS we'll start with corporate identities the scenario",
    "start": "151489",
    "end": "156920"
  },
  {
    "text": "here is you want to enable the corporate users to use their existing identities",
    "start": "156920",
    "end": "162440"
  },
  {
    "text": "to get a single sign-on access to AWS we",
    "start": "162440",
    "end": "167660"
  },
  {
    "text": "will see how we can achieve this using custom Federation proxy both for the console axis and for the API axis we'll",
    "start": "167660",
    "end": "175610"
  },
  {
    "text": "also look at how you can use sam'l or security assertion markup language to",
    "start": "175610",
    "end": "180830"
  },
  {
    "text": "achieve the same sam'l is an open Federation standard and finally we look",
    "start": "180830",
    "end": "187819"
  },
  {
    "text": "at the recently launched AWS directory service and how you can use to achieve",
    "start": "187819",
    "end": "192830"
  },
  {
    "text": "this scenario the second kind of identity that you can bring to AWS is",
    "start": "192830",
    "end": "197840"
  },
  {
    "text": "social identity and the scenario here is you have an app with social login and",
    "start": "197840",
    "end": "204560"
  },
  {
    "text": "you want that app to access your AWS account on behalf of the end user we",
    "start": "204560",
    "end": "210980"
  },
  {
    "text": "launched a service called Amazon Cognito in July I think it was July 10th and we'll see how you can use that to use",
    "start": "210980",
    "end": "220010"
  },
  {
    "text": "well-known providers like Amazon Facebook or Google or any provider that",
    "start": "220010",
    "end": "225380"
  },
  {
    "text": "supports open ID Connect which is another open standard for Federation and we added support for open ID Connect",
    "start": "225380",
    "end": "232430"
  },
  {
    "text": "quite recently October 23rd I think with that let's",
    "start": "232430",
    "end": "237560"
  },
  {
    "text": "cover some fundamentals before we dive into the demos we'll cover three fundamentals ROS sessions and identity",
    "start": "237560",
    "end": "245120"
  },
  {
    "text": "providers rows in AWS are nothing but a",
    "start": "245120",
    "end": "250340"
  },
  {
    "text": "set of permissions that you grant to a trusted I didn't trust identity and this entity can be another AWS account or",
    "start": "250340",
    "end": "258530"
  },
  {
    "text": "another identity provider and roles have",
    "start": "258530",
    "end": "263570"
  },
  {
    "text": "these nice properties a there's cure and be their controllable secure",
    "start": "263570",
    "end": "269750"
  },
  {
    "text": "because there is no secret sharing allowed you never share your secret with anyone else and controllable because you",
    "start": "269750",
    "end": "275720"
  },
  {
    "text": "can change the policy on the role and revoke the access very easily so there",
    "start": "275720",
    "end": "281930"
  },
  {
    "text": "are two types of policies that you can set on roles the first one is called trust policy and trust policy defines",
    "start": "281930",
    "end": "290140"
  },
  {
    "text": "who are the trusted entities so if you look at the policy on the slide what it",
    "start": "290140",
    "end": "295610"
  },
  {
    "text": "says is that any user that is asserted by sam'l provider ABC is going to be",
    "start": "295610",
    "end": "303830"
  },
  {
    "text": "trusted by this role another type is the access policy these are the permissions",
    "start": "303830",
    "end": "309500"
  },
  {
    "text": "that are granted to the to the entity that assumes this role the example",
    "start": "309500",
    "end": "315470"
  },
  {
    "text": "policy here says the role is going to allow only one action s3 list buckets on",
    "start": "315470",
    "end": "321410"
  },
  {
    "text": "all the buckets in the account these Jason snippets are the policies that you",
    "start": "321410",
    "end": "326600"
  },
  {
    "text": "define on roles or other objects inside I am I'm not going to go into the",
    "start": "326600",
    "end": "331820"
  },
  {
    "text": "details of it because we have a session dedicated for this it is called mastering access control policies and",
    "start": "331820",
    "end": "338870"
  },
  {
    "text": "it's tomorrow so once you use roles you get back sessions and sessions allow",
    "start": "338870",
    "end": "345230"
  },
  {
    "text": "temporary access to your AWS account these are generated by a service that we",
    "start": "345230",
    "end": "350690"
  },
  {
    "text": "call STS or security token service and you can obtain these by calling one of",
    "start": "350690",
    "end": "356630"
  },
  {
    "text": "the four api's that are listed on the slide there are some similarities and",
    "start": "356630",
    "end": "362120"
  },
  {
    "text": "differences between these API s and I would like to use the rest of the session to go over those let's look",
    "start": "362120",
    "end": "369410"
  },
  {
    "text": "inside the session a bit a session consists of four elements access key ID secret access key session token and",
    "start": "369410",
    "end": "376070"
  },
  {
    "text": "expiration access key ID and secret access key is the symmetric credential",
    "start": "376070",
    "end": "381530"
  },
  {
    "text": "that you use to sign your AWS API request session token' is just a blob of",
    "start": "381530",
    "end": "387230"
  },
  {
    "text": "data that you pass as a parameter when you make an API call the session token",
    "start": "387230",
    "end": "393260"
  },
  {
    "text": "is what lets us verify whether the session is valid or not and how do we determine whether the",
    "start": "393260",
    "end": "399060"
  },
  {
    "text": "session is valid or not based on the expiration expiration is what makes",
    "start": "399060",
    "end": "404310"
  },
  {
    "text": "session temporary and the expiration varies based on the API that you call so",
    "start": "404310",
    "end": "410069"
  },
  {
    "text": "here is the first difference if you call get Federation token by default the session is valid for 12 hours you can",
    "start": "410069",
    "end": "417840"
  },
  {
    "text": "change it to be valid as short as 15 minutes and as long as 36 hours however",
    "start": "417840",
    "end": "424710"
  },
  {
    "text": "if you call any of the assumed role api's we looked at three then by default",
    "start": "424710",
    "end": "430889"
  },
  {
    "text": "the session is valid only for one hour and then you can change it to be between",
    "start": "430889",
    "end": "436379"
  },
  {
    "text": "15 minutes and one our identity provider",
    "start": "436379",
    "end": "441659"
  },
  {
    "text": "inside AWS is an entity that holds the metadata about the identity providers",
    "start": "441659",
    "end": "448169"
  },
  {
    "text": "that you want to trust and the roles that you use for Federation trusts these",
    "start": "448169",
    "end": "454110"
  },
  {
    "text": "providers that you create in your account so enough about fundamentals we",
    "start": "454110",
    "end": "459509"
  },
  {
    "text": "looked at three rows sessions and identity provider if you have good understanding of these three concepts",
    "start": "459509",
    "end": "465379"
  },
  {
    "text": "Federation in AWS is really easy so let's dive into the scenarios now first",
    "start": "465379",
    "end": "472020"
  },
  {
    "text": "we look at corporate identities and then the four use cases associated with it",
    "start": "472020",
    "end": "477659"
  },
  {
    "text": "the first one is console Federation using custom proxy the scenario is that",
    "start": "477659",
    "end": "483360"
  },
  {
    "start": "478000",
    "end": "478000"
  },
  {
    "text": "you have corporate users and you want them to use their existing credentials to access AWS management console not the",
    "start": "483360",
    "end": "490560"
  },
  {
    "text": "API but the console the setup is I have a federation proxy that uses assumed",
    "start": "490560",
    "end": "496050"
  },
  {
    "text": "role API so this is the first appear that we will look at the benefits if you",
    "start": "496050",
    "end": "501089"
  },
  {
    "text": "are an administrator then you don't have to manage duplicate users one in your",
    "start": "501089",
    "end": "506219"
  },
  {
    "text": "corporate directory other in AWS if you are an end-user you don't have to",
    "start": "506219",
    "end": "511979"
  },
  {
    "text": "remember yet another username and password just to access AWS so pretty straightforward let's look at the demo",
    "start": "511979",
    "end": "518969"
  },
  {
    "start": "517000",
    "end": "517000"
  },
  {
    "text": "flow the corporate user uses the browser to talk to the Federation proxy this is",
    "start": "518969",
    "end": "525089"
  },
  {
    "text": "the proxy that uses a sim role API the proxy authenticates the user and",
    "start": "525089",
    "end": "532010"
  },
  {
    "text": "then it enumerates the groups for that user so let me take a moment you will",
    "start": "532010",
    "end": "537860"
  },
  {
    "text": "have groups for the users on the corporate directory side and you will",
    "start": "537860",
    "end": "542930"
  },
  {
    "text": "have rows on the aw aside for Federation to work you have to map groups and rows",
    "start": "542930",
    "end": "549350"
  },
  {
    "text": "you don't have to use groups you can use any ad attribute any user attribute but",
    "start": "549350",
    "end": "555860"
  },
  {
    "text": "in this sample we are using the same named groups and roles so for that the",
    "start": "555860",
    "end": "561320"
  },
  {
    "text": "proxy lists the roles in your account get back gets back the list of the roles",
    "start": "561320",
    "end": "567640"
  },
  {
    "text": "compares the group names with role names create a combo box the user selects one",
    "start": "567640",
    "end": "573920"
  },
  {
    "text": "of the role and then now proxy can do an assumed role request to get back the",
    "start": "573920",
    "end": "580160"
  },
  {
    "text": "temporary security credentials using that what the proxy does it generates the console URL and then it redirects",
    "start": "580160",
    "end": "588470"
  },
  {
    "text": "the user to the AWS management console I probably went too fast and there are",
    "start": "588470",
    "end": "594290"
  },
  {
    "text": "quite a few arrows on this slide but we have made this easy this sample is",
    "start": "594290",
    "end": "600170"
  },
  {
    "text": "available for you to download it comes with the installer so you can just run",
    "start": "600170",
    "end": "605180"
  },
  {
    "text": "through the setup and it will have the web application ready for you we have also made the code available so you can",
    "start": "605180",
    "end": "611810"
  },
  {
    "text": "download it and customize it as you see fit so let us look at the demo in action",
    "start": "611810",
    "end": "617210"
  },
  {
    "text": "I am going to start with the ion",
    "start": "617210",
    "end": "622460"
  },
  {
    "text": "management console and I am going to go to the user section let me look at the",
    "start": "622460",
    "end": "629330"
  },
  {
    "text": "user that will be used by the proxy server if I look at the access policy",
    "start": "629330",
    "end": "639380"
  },
  {
    "text": "for the user the access policy says this user is allowed list roles and assume",
    "start": "639380",
    "end": "645620"
  },
  {
    "text": "roles for all the roles in my account that's it those are the only permissions",
    "start": "645620",
    "end": "652480"
  },
  {
    "text": "now let's go back to the row section I have two roles that I have created",
    "start": "652480",
    "end": "659060"
  },
  {
    "text": "AWS admins and AWS s3 users let's look at the admin role and if we",
    "start": "659060",
    "end": "664630"
  },
  {
    "text": "look at the trust policy it says this role trusts my own account and the",
    "start": "664630",
    "end": "671350"
  },
  {
    "text": "access policy says allow access to all actions and all resources the AWS s3",
    "start": "671350",
    "end": "679720"
  },
  {
    "text": "users on the other hand has the same trust policy but the access policy says",
    "start": "679720",
    "end": "687610"
  },
  {
    "text": "allow all s3 actions on all resources no other service actions so this was the",
    "start": "687610",
    "end": "694149"
  },
  {
    "text": "setup on the aw aside you had a user that will be used by the proxy and two roles let's look at the corporate",
    "start": "694149",
    "end": "701139"
  },
  {
    "text": "directory sign I'm using Active Directory and I have created a domain",
    "start": "701139",
    "end": "706839"
  },
  {
    "text": "and two ad groups with the same names AWS admins and AWS s3 users I have an",
    "start": "706839",
    "end": "713769"
  },
  {
    "text": "administrator user which is member of both of these groups AWS admins and AWS",
    "start": "713769",
    "end": "719709"
  },
  {
    "text": "s3 users so once you run through the setup it creates a web application for",
    "start": "719709",
    "end": "727660"
  },
  {
    "text": "you in is I am running this on this machine at port 8000 so let's take a",
    "start": "727660",
    "end": "734980"
  },
  {
    "text": "look at that I am logged on as an administrator to this machine and when I",
    "start": "734980",
    "end": "741760"
  },
  {
    "text": "go to the proxy then it shows me the two roles based on my group membership I am",
    "start": "741760",
    "end": "747579"
  },
  {
    "text": "going to go ahead and select AWS s3 users role and sign into the console I",
    "start": "747579",
    "end": "753329"
  },
  {
    "text": "am inside the console okay",
    "start": "753329",
    "end": "760410"
  },
  {
    "text": "this is an s3 user so it should have",
    "start": "764030",
    "end": "769160"
  },
  {
    "text": "access only to the s3 resources but if it tries to access any other service it",
    "start": "769160",
    "end": "776960"
  },
  {
    "text": "will get access denied so s3 worked fine but if I go to simple email service I",
    "start": "776960",
    "end": "782840"
  },
  {
    "text": "will get not authorized error as expected so I didn't have to use password the specific to AWS let us get",
    "start": "782840",
    "end": "795020"
  },
  {
    "text": "back to the next use case so the next",
    "start": "795020",
    "end": "805640"
  },
  {
    "start": "805000",
    "end": "805000"
  },
  {
    "text": "one is also based on custom Federation proxy but for API axis so scenery is the",
    "start": "805640",
    "end": "812000"
  },
  {
    "text": "same the setup is custom Federation proxy that used the second API get",
    "start": "812000",
    "end": "817010"
  },
  {
    "text": "federation token benefits same benefits except here the session that you get",
    "start": "817010",
    "end": "822800"
  },
  {
    "text": "will be valid for up to 36 hours this was the another difference that we talked about here is the demo flow in",
    "start": "822800",
    "end": "830780"
  },
  {
    "text": "this case the end user uses a command line application to talk to the Federation proxy that you just get",
    "start": "830780",
    "end": "836450"
  },
  {
    "text": "federation token the proxy authenticates the user and gets back what are called",
    "start": "836450",
    "end": "841610"
  },
  {
    "text": "as entitlements for that users these are nothing but the IM policies that are",
    "start": "841610",
    "end": "846860"
  },
  {
    "text": "associated with these users then the proxy uses these policies to make a get",
    "start": "846860",
    "end": "852290"
  },
  {
    "text": "federation token request to AWS gets back temporary security credentials and",
    "start": "852290",
    "end": "857450"
  },
  {
    "text": "then simply passes those back to the command line application and now the",
    "start": "857450",
    "end": "863480"
  },
  {
    "text": "application can use those to access resources in your account make sense",
    "start": "863480",
    "end": "868580"
  },
  {
    "text": "let's take a look at this in action oops",
    "start": "868580",
    "end": "873820"
  },
  {
    "text": "so I'm going to start with I am console this time I am going to use look at EPFL",
    "start": "884130",
    "end": "890340"
  },
  {
    "text": "- and proxy user and if I look at the access policy you will see that this",
    "start": "890340",
    "end": "897720"
  },
  {
    "text": "user is allowed to call get Federation token because it is a get federation token based proxy but the other",
    "start": "897720",
    "end": "904380"
  },
  {
    "text": "permissions are bunch of s3 permission and this is another difference when we",
    "start": "904380",
    "end": "909510"
  },
  {
    "text": "looked at the assumed role based proxy that user had only list roles and assumed role but when you use the get",
    "start": "909510",
    "end": "915660"
  },
  {
    "text": "federation token based proxy this user needs to have union of all the",
    "start": "915660",
    "end": "920970"
  },
  {
    "text": "permissions of the federated users then",
    "start": "920970",
    "end": "926040"
  },
  {
    "text": "I am going to look at the code here so",
    "start": "926040",
    "end": "933930"
  },
  {
    "text": "even this sample is available for download it is a visual studio solution that has two projects the the web",
    "start": "933930",
    "end": "940650"
  },
  {
    "text": "service the sample Federation proxy and then the command-line application let's",
    "start": "940650",
    "end": "946230"
  },
  {
    "text": "look at the application configuration file for the command-line application and let me zoom this a bit so that it's",
    "start": "946230",
    "end": "954110"
  },
  {
    "text": "easy to look at so it uses a bucket in my ws account and then it is going to",
    "start": "954110",
    "end": "961620"
  },
  {
    "text": "talk to the web service which is at port 8080 on this machine for the web",
    "start": "961620",
    "end": "968490"
  },
  {
    "text": "configuration for the web service again I have the bucket name and these are the",
    "start": "968490",
    "end": "974340"
  },
  {
    "text": "key value pairs that I have defined in the web configuration these are the IM",
    "start": "974340",
    "end": "979770"
  },
  {
    "text": "policies which will be used by the get federation token api and these policies",
    "start": "979770",
    "end": "985260"
  },
  {
    "text": "are set in such a way that if someone logs in let's say i login as an",
    "start": "985260",
    "end": "991590"
  },
  {
    "text": "administrator then i get access only to the administrator folder in my bucket if",
    "start": "991590",
    "end": "997170"
  },
  {
    "text": "you log in as Bob and only BA folder so basically your home folder scenario let",
    "start": "997170",
    "end": "1002750"
  },
  {
    "text": "us quickly take a look at the the code itself get security token is the main",
    "start": "1002750",
    "end": "1008900"
  },
  {
    "text": "function and it's not that complicated actually so first step is it just builds",
    "start": "1008900",
    "end": "1015380"
  },
  {
    "text": "the username for the authenticated user then it builds the policy by reading the web.config file",
    "start": "1015380",
    "end": "1022180"
  },
  {
    "text": "that I showed then it creates the gate federation token request makes the gate",
    "start": "1022180",
    "end": "1029260"
  },
  {
    "text": "federation token request gets the temporary security credentials and passes it back to the the console",
    "start": "1029260",
    "end": "1037780"
  },
  {
    "text": "application or the command-line application so let's see this in action",
    "start": "1037780",
    "end": "1044130"
  },
  {
    "text": "so I'm going to run the command line application we can ignore the warning I am not running it as HTTP but you will",
    "start": "1044130",
    "end": "1052540"
  },
  {
    "text": "notice that the the command line application already figured out that I",
    "start": "1052540",
    "end": "1057850"
  },
  {
    "text": "am logged in as administrator and it has listed all the folders in the bucket",
    "start": "1057850",
    "end": "1062890"
  },
  {
    "text": "that we configured then now I'm going to see if I can access a file in a folder",
    "start": "1062890",
    "end": "1069490"
  },
  {
    "text": "with the same name as user and yes the ICANN and yes you can clap thank you",
    "start": "1069490",
    "end": "1079290"
  },
  {
    "text": "let's try a variation of the scenario I am again logged on as admin stated but I",
    "start": "1081120",
    "end": "1086860"
  },
  {
    "text": "want to see if bob has any secret in his folder and if I try to access it you get",
    "start": "1086860",
    "end": "1092260"
  },
  {
    "text": "access denied because the policy allowed only the folder access with this",
    "start": "1092260",
    "end": "1097420"
  },
  {
    "text": "username let's get back to the next use case",
    "start": "1097420",
    "end": "1104430"
  },
  {
    "text": "so we looked at two custom Federation proxies which use a different API so let us look at let us do some compare and",
    "start": "1107500",
    "end": "1114490"
  },
  {
    "text": "contrast we will start with the similarities both these api is require AWS credentials you remember I looked at",
    "start": "1114490",
    "end": "1121750"
  },
  {
    "text": "the Federation proxy user for both because you need to sign these requests",
    "start": "1121750",
    "end": "1128010"
  },
  {
    "text": "another thing is both of them support what we call as a policy scoping so for",
    "start": "1128010",
    "end": "1135640"
  },
  {
    "text": "example the the get Federation token proxy user that user had a union of all",
    "start": "1135640",
    "end": "1140950"
  },
  {
    "text": "the permissions for all the Federated users but when it actually made the call it used a scope down policy so that the",
    "start": "1140950",
    "end": "1149110"
  },
  {
    "text": "returned credentials are a subset of the current permissions available to the proxy user what are the differences get",
    "start": "1149110",
    "end": "1157360"
  },
  {
    "text": "federation token works within an account you cannot use it across account while assume role you can get federation token",
    "start": "1157360",
    "end": "1165130"
  },
  {
    "text": "has longer session the session can be valid up to 36 hours with Assam Road you",
    "start": "1165130",
    "end": "1171280"
  },
  {
    "text": "get only one hour session it get federation token you cannot use AWS MFA",
    "start": "1171280",
    "end": "1177039"
  },
  {
    "text": "or multi-factor authentication but assume role does support MFA now let us",
    "start": "1177039",
    "end": "1183340"
  },
  {
    "start": "1182000",
    "end": "1182000"
  },
  {
    "text": "look at the third use case console Federation so very similar to the first use case but here we are going to use",
    "start": "1183340",
    "end": "1189700"
  },
  {
    "text": "sam'l scenario is the use case is the same the setup is different now you can",
    "start": "1189700",
    "end": "1196000"
  },
  {
    "text": "use any off-the-shelf Federation software it can be a DFS Active",
    "start": "1196000",
    "end": "1201010"
  },
  {
    "text": "Directory Federation service or Shibboleth a DFS is used quite a lot in the enterprises and Shibboleth is used",
    "start": "1201010",
    "end": "1208030"
  },
  {
    "text": "quite a lot in the research and educational institutes and the sign-in",
    "start": "1208030",
    "end": "1213250"
  },
  {
    "text": "page that we have has support to call the third API of the set assumed roll",
    "start": "1213250",
    "end": "1218559"
  },
  {
    "text": "with sam'l we announced sam'l support at last reinvent and the benefits remain",
    "start": "1218559",
    "end": "1225340"
  },
  {
    "text": "the same with one change now you don't have to deploy or maintain the",
    "start": "1225340",
    "end": "1230799"
  },
  {
    "text": "Federation proxy here is the flow the end user uses the browsers browser to",
    "start": "1230799",
    "end": "1238090"
  },
  {
    "text": "talk to the identity provider and we the IDP initiated flow meaning you have",
    "start": "1238090",
    "end": "1244000"
  },
  {
    "text": "to start with your identity provider you cannot start with AWS and get redirected",
    "start": "1244000",
    "end": "1249160"
  },
  {
    "text": "to the identity provider after the authentication is successful the IDP",
    "start": "1249160",
    "end": "1254560"
  },
  {
    "text": "generates what is called as sam'l authentication response essentially what it says is that ok this is a user that",
    "start": "1254560",
    "end": "1261790"
  },
  {
    "text": "is in my identity store I have authenticated the user and here are some attributes about the users that I am",
    "start": "1261790",
    "end": "1269560"
  },
  {
    "text": "asserting and then you can these might be interesting to you now the the",
    "start": "1269560",
    "end": "1276850"
  },
  {
    "text": "browser posts this sam'l authentic Irish authentication response to the the",
    "start": "1276850",
    "end": "1281920"
  },
  {
    "text": "sign-in endpoint and the sign-in endpoint uses that response to call assume roll with sam'l to assume a role",
    "start": "1281920",
    "end": "1288310"
  },
  {
    "text": "in your account in return it gets back the temporary security credential constructs the console URL and redirects",
    "start": "1288310",
    "end": "1295300"
  },
  {
    "text": "the user to the console ok so let's see",
    "start": "1295300",
    "end": "1301120"
  },
  {
    "text": "this in action law",
    "start": "1301120",
    "end": "1303900"
  },
  {
    "text": "I'm going to start in the iron console and this time I'm going to go to the identity provider section I have a bunch",
    "start": "1310190",
    "end": "1317840"
  },
  {
    "text": "of providers created ad FS demo is the one that we will look at and as I",
    "start": "1317840",
    "end": "1323299"
  },
  {
    "text": "mentioned identity provider is nothing but an entity that holds the metadata about the IDP so I'm using ad FS as the",
    "start": "1323299",
    "end": "1332600"
  },
  {
    "text": "Federation software and there is a well-known endpoint once you have the IDF s set up to get the the IDP metadata",
    "start": "1332600",
    "end": "1340399"
  },
  {
    "text": "so when you create a provider you just draw at that then let's look at the roles I have two rows created ad FS demo",
    "start": "1340399",
    "end": "1350570"
  },
  {
    "text": "production and day let's look at production if we look at the trust",
    "start": "1350570",
    "end": "1355909"
  },
  {
    "text": "policy it trusts the the provider that we just looked at and then the access",
    "start": "1355909",
    "end": "1362720"
  },
  {
    "text": "policy for the production user says allow all-access and if we go back and",
    "start": "1362720",
    "end": "1370730"
  },
  {
    "text": "look at the ad FS demo - dev it has the same trust policy but the access policy",
    "start": "1370730",
    "end": "1377929"
  },
  {
    "text": "has only read-only permissions for all the services so this is the setup",
    "start": "1377929",
    "end": "1385820"
  },
  {
    "text": "identity provider and roles on the AWS side now let's let take a look at the",
    "start": "1385820",
    "end": "1391149"
  },
  {
    "text": "IDP side I'm using Active Directory and I have similar named roles so here I'm",
    "start": "1391149",
    "end": "1398720"
  },
  {
    "text": "using not the exact name map matching but similar named name matching so AWS -",
    "start": "1398720",
    "end": "1406279"
  },
  {
    "text": "day and AWS - production are the ad groups and I have configured ad FS such",
    "start": "1406279",
    "end": "1412549"
  },
  {
    "text": "that if a user is a member of these groups then the rows allowed are ad FS -",
    "start": "1412549",
    "end": "1418730"
  },
  {
    "text": "equivalent we have a very good blog post that walks you through on how to set up",
    "start": "1418730",
    "end": "1425240"
  },
  {
    "text": "ad ad FS and integrate with sam'l so",
    "start": "1425240",
    "end": "1431299"
  },
  {
    "text": "with that now let's see this in action I'm going to go to the IDP URL and here",
    "start": "1431299",
    "end": "1439789"
  },
  {
    "text": "you can see that it gives me an option to have a single sign-on with one of the",
    "start": "1439789",
    "end": "1446650"
  },
  {
    "text": "relying parties once you have the standard Federation software you can do single sign-on with many other",
    "start": "1446650",
    "end": "1452700"
  },
  {
    "text": "applications that support the same standard right now I have only one so",
    "start": "1452700",
    "end": "1457900"
  },
  {
    "text": "I'm going to just say continue and now it will show me the two rows as I am logged on as administrator it's going to",
    "start": "1457900",
    "end": "1464980"
  },
  {
    "text": "show the both the roles so I select one sign in and now I am logged in to the",
    "start": "1464980",
    "end": "1471300"
  },
  {
    "text": "AWS management console using sam'l let's",
    "start": "1471300",
    "end": "1479650"
  },
  {
    "text": "get back to the slides so even though I",
    "start": "1479650",
    "end": "1486670"
  },
  {
    "text": "showed ad FS and we also have a blog post for Sybil 8 by the way you don't",
    "start": "1486670",
    "end": "1492430"
  },
  {
    "text": "have to use only these two we have a rich partner ecosystem and some of the partners that you see on the",
    "start": "1492430",
    "end": "1499330"
  },
  {
    "text": "slide are here at the expo hall also so if you want more information about particular solution then just visit",
    "start": "1499330",
    "end": "1506560"
  },
  {
    "text": "their booth and you will be able to get information we have many customers using",
    "start": "1506560",
    "end": "1511780"
  },
  {
    "text": "our partner solutions for example Netflix uses one login for the sam'l",
    "start": "1511780",
    "end": "1517570"
  },
  {
    "text": "based management console access so let's do comparison between assumed Bergland",
    "start": "1517570",
    "end": "1523870"
  },
  {
    "text": "assumed robits sam'l start with similarities both of them work across",
    "start": "1523870",
    "end": "1529120"
  },
  {
    "text": "account both of them have sessions valid for one hour and both of them support policies coping",
    "start": "1529120",
    "end": "1535240"
  },
  {
    "text": "what are the differences assume role request needs to be assigned requests so",
    "start": "1535240",
    "end": "1541390"
  },
  {
    "text": "you have to start with some AWS credential a symbol with sam'l doesn't need to be assigned request and the",
    "start": "1541390",
    "end": "1547960"
  },
  {
    "text": "reason for that is the sam'l authentication response that you get back from the IDP has to be a parameter",
    "start": "1547960",
    "end": "1554110"
  },
  {
    "text": "to the assumed role with sam'l API and if you are using a sim role you need",
    "start": "1554110",
    "end": "1559240"
  },
  {
    "text": "some sort of custom Federation proxy but if you are using a sim role with sam'l you can use any of the shell Federation",
    "start": "1559240",
    "end": "1566230"
  },
  {
    "text": "software as long as it supports sam'l 2.0 into the fourth use case for the",
    "start": "1566230",
    "end": "1575170"
  },
  {
    "start": "1572000",
    "end": "1572000"
  },
  {
    "text": "first scenario let me talk about AWS directory service this is a service that we launched on",
    "start": "1575170",
    "end": "1580990"
  },
  {
    "text": "October 21st and I'm not going to be able I'm not going to cover the entire",
    "start": "1580990",
    "end": "1587200"
  },
  {
    "text": "service there was a session earlier today you can watch the recording for",
    "start": "1587200",
    "end": "1592269"
  },
  {
    "text": "that but essentially it's a managed directory service which is compatible",
    "start": "1592269",
    "end": "1598090"
  },
  {
    "text": "with Active Directory it has two types of directories that it supports it one",
    "start": "1598090",
    "end": "1604659"
  },
  {
    "text": "is called simple ad which is a cloud only directory no connection to on-premises Active Directory at all and",
    "start": "1604659",
    "end": "1611110"
  },
  {
    "text": "the ad connector where you can connect your on-premises ad to the cloud",
    "start": "1611110",
    "end": "1618039"
  },
  {
    "text": "there is no replication of data so still your on-premises directory is the single",
    "start": "1618039",
    "end": "1623379"
  },
  {
    "text": "source of truth but for all the authentication and queries you can use",
    "start": "1623379",
    "end": "1628600"
  },
  {
    "text": "your existing objects in the on-premises Active Directory the thing that's most",
    "start": "1628600",
    "end": "1634509"
  },
  {
    "text": "relevant to this discussion is that if you have a AWS directory service based",
    "start": "1634509",
    "end": "1640179"
  },
  {
    "text": "directory whether it is simple ad or ad connector right you also automatically get a hosted assumed role based proxy so",
    "start": "1640179",
    "end": "1648399"
  },
  {
    "text": "the first scenario that we talked about where you have to host your own Federation proxy you do not have to do",
    "start": "1648399",
    "end": "1654580"
  },
  {
    "text": "that in this case so let's look at this in action",
    "start": "1654580",
    "end": "1661740"
  },
  {
    "text": "let me start with I am console and let me go to the roles so i have created a",
    "start": "1671429",
    "end": "1679000"
  },
  {
    "text": "role called directory services directory service read-only role and if we look at",
    "start": "1679000",
    "end": "1685840"
  },
  {
    "text": "the trust policy it trusts the directory service and the access policy is about",
    "start": "1685840",
    "end": "1691799"
  },
  {
    "text": "read-only actions for all the services now let us look at the directory service",
    "start": "1691799",
    "end": "1698799"
  },
  {
    "text": "console so I have already created a",
    "start": "1698799",
    "end": "1704530"
  },
  {
    "text": "simple ad and so this is a cloud only directory and I have also enabled the",
    "start": "1704530",
    "end": "1711610"
  },
  {
    "text": "AWS console access for the users that are hosted in the in this directory so",
    "start": "1711610",
    "end": "1716799"
  },
  {
    "text": "let us take a look at that so this is the same role that we looked at and what I have done is that I have mapped the",
    "start": "1716799",
    "end": "1724150"
  },
  {
    "text": "users in in this directory to access this role and we can modify that mapping",
    "start": "1724150",
    "end": "1731070"
  },
  {
    "text": "so if I go here I am just going to say I am going to add a user called John and",
    "start": "1731070",
    "end": "1740730"
  },
  {
    "text": "what I did just now is I said user John in this simple ad can I'm mapping it to",
    "start": "1741210",
    "end": "1750250"
  },
  {
    "text": "the read-only role that's in my account and every directory gets this directory",
    "start": "1750250",
    "end": "1757090"
  },
  {
    "text": "specific URL which is similar to the custom Federation proxy URL we saw in the first use case",
    "start": "1757090",
    "end": "1763530"
  },
  {
    "text": "so let's navigate to that URL if I go to",
    "start": "1763530",
    "end": "1768820"
  },
  {
    "text": "that URL then it shows me the username and password for the simple ad user now",
    "start": "1768820",
    "end": "1774540"
  },
  {
    "text": "so I'm going to use that and now I'm",
    "start": "1774540",
    "end": "1781929"
  },
  {
    "text": "inside the AWS management console so you don't have to host custom Federation",
    "start": "1781929",
    "end": "1787450"
  },
  {
    "text": "proxy and even though I showed this for simple ad if you have ad connector it",
    "start": "1787450",
    "end": "1793840"
  },
  {
    "text": "works exactly the same so if you have like hundreds or thousands of users in",
    "start": "1793840",
    "end": "1799059"
  },
  {
    "text": "your on-premises directory you can give them the console access",
    "start": "1799059",
    "end": "1804210"
  },
  {
    "text": "let's smell back",
    "start": "1806750",
    "end": "1810320"
  },
  {
    "text": "so we looked at for use cases for corporate identities so let's look at the social identities case and the",
    "start": "1816140",
    "end": "1824230"
  },
  {
    "start": "1824000",
    "end": "1824000"
  },
  {
    "text": "scenario here is more for the web and mobile application so let me take a moment to talk about Amazon kognito this",
    "start": "1824230",
    "end": "1831679"
  },
  {
    "text": "is a service that makes it really easy for the mobile developers because",
    "start": "1831679",
    "end": "1837070"
  },
  {
    "text": "authentication is not something that you have to worry about it's a user identity and app data sync service and it",
    "start": "1837070",
    "end": "1844220"
  },
  {
    "text": "provides features like guest user signing or having a common identity across devices or even across providers",
    "start": "1844220",
    "end": "1852290"
  },
  {
    "text": "it also has features like syncing the app data when the device is offline and",
    "start": "1852290",
    "end": "1857410"
  },
  {
    "text": "so forth the relevant point for this discussion is that it is Amazon kognito",
    "start": "1857410",
    "end": "1864080"
  },
  {
    "text": "is build on top of the the primitive that iam has and it supports well-known",
    "start": "1864080",
    "end": "1869840"
  },
  {
    "text": "identity providers like Amazon Facebook Google or any open ID connect based",
    "start": "1869840",
    "end": "1876049"
  },
  {
    "text": "provider there is a session dedicated to kognito tomorrow so if you are",
    "start": "1876049",
    "end": "1882169"
  },
  {
    "text": "interested I highly encourage you to attend that session so let's look at the",
    "start": "1882169",
    "end": "1887210"
  },
  {
    "text": "use case open ID Connect is an open standard which standardized the token",
    "start": "1887210",
    "end": "1893299"
  },
  {
    "text": "format that is written by this social identity folder and also the IDP discovery and the scenario the use case",
    "start": "1893299",
    "end": "1902299"
  },
  {
    "text": "is you have an AWS powered app meaning a application that's using either Amazon",
    "start": "1902299",
    "end": "1908030"
  },
  {
    "text": "s3 or Amazon DynamoDB as its back-end and it supports sign-in with Salesforce Salesforce is one of the",
    "start": "1908030",
    "end": "1914750"
  },
  {
    "text": "providers that supports the open ID Connect standard and for the set up I have a sample JavaScript app which is",
    "start": "1914750",
    "end": "1922610"
  },
  {
    "text": "based on assumed role with web identity so this was the fourth API in our set",
    "start": "1922610",
    "end": "1927970"
  },
  {
    "text": "benefits for developers and users the benefits are pretty straightforward for",
    "start": "1927970",
    "end": "1934220"
  },
  {
    "text": "the applications now this application doesn't have to embed any long-term AWS",
    "start": "1934220",
    "end": "1939260"
  },
  {
    "text": "credentials and this is very crucial because it's very easy to reverse engineer a mobile application so if you",
    "start": "1939260",
    "end": "1945440"
  },
  {
    "text": "embed your long term credentials there right I mean someone might have access to aw account which you definitely do not",
    "start": "1945440",
    "end": "1952009"
  },
  {
    "text": "want and since we support open ID connect now both the developers and end-users",
    "start": "1952009",
    "end": "1960350"
  },
  {
    "text": "get a broader selection of identity providers for example if end-user comes to you and say hey I want to sign in",
    "start": "1960350",
    "end": "1967700"
  },
  {
    "text": "with Salesforce or ping federate then you can say oh sure I can easily support",
    "start": "1967700",
    "end": "1972740"
  },
  {
    "text": "that now so here is the demo flow and user comes to your app in this case it",
    "start": "1972740",
    "end": "1979039"
  },
  {
    "text": "is a web app and then the web app redirects the end-users to Salesforce for authentication once authenticated",
    "start": "1979039",
    "end": "1985750"
  },
  {
    "text": "says for cents back the ID token to the application the application exchanges",
    "start": "1985750",
    "end": "1992179"
  },
  {
    "text": "that ID token for kognito token and then the application can exchange the colony",
    "start": "1992179",
    "end": "1999559"
  },
  {
    "text": "to token for temporary security credentials which it can use to access resources in your account you might ask",
    "start": "1999559",
    "end": "2007000"
  },
  {
    "text": "why are there like these two steps for exchanging remember I talked about cognitive providing a common identity",
    "start": "2007000",
    "end": "2013720"
  },
  {
    "text": "across devices and identity providers step 3 is is that cognitive token which",
    "start": "2013720",
    "end": "2019480"
  },
  {
    "text": "remains the same and step 4 is where the",
    "start": "2019480",
    "end": "2024730"
  },
  {
    "text": "assumed role with web identity API gets called and the AWS SDKs make it very",
    "start": "2024730",
    "end": "2030940"
  },
  {
    "text": "easy for to to do steps three to five in fact I was able to write only few lines",
    "start": "2030940",
    "end": "2037450"
  },
  {
    "text": "of JavaScript code to do steps three to five let's see this in action now this",
    "start": "2037450",
    "end": "2048398"
  },
  {
    "text": "time I am going to go to Salesforce first in Salesforce I have created",
    "start": "2048399",
    "end": "2056250"
  },
  {
    "text": "something that is called as a connected app and it has this logo and what",
    "start": "2056250",
    "end": "2062440"
  },
  {
    "text": "Salesforce does is that it gives me which is called as consumer key many times it is called as audience or client",
    "start": "2062440",
    "end": "2069368"
  },
  {
    "text": "ID this is a mechanism how Salesforce knows which application is redirecting",
    "start": "2069369",
    "end": "2075819"
  },
  {
    "text": "the end-user to them now let's look at the IAM console",
    "start": "2075819",
    "end": "2083158"
  },
  {
    "text": "so I have created an identity provider for Salesforce this is their provider",
    "start": "2084390",
    "end": "2095169"
  },
  {
    "text": "URL for login and this is the same audience that I showed you next you just",
    "start": "2095169",
    "end": "2102430"
  },
  {
    "text": "go to kognito and then create an identity pool so I have created Salesforce identity pool let's look",
    "start": "2102430",
    "end": "2108610"
  },
  {
    "text": "inside it so the identity pool name is Salesforce and as you can see here for",
    "start": "2108610",
    "end": "2116920"
  },
  {
    "text": "this application you can choose to support any well-known identity providers or any open ID connect pro",
    "start": "2116920",
    "end": "2124180"
  },
  {
    "text": "address that you've created in your account I chose to support only Salesforce as part of the identity pool",
    "start": "2124180",
    "end": "2130660"
  },
  {
    "text": "creation it will also create a role in your account so let us look at that role",
    "start": "2130660",
    "end": "2137610"
  },
  {
    "text": "so if you look at the trust policy it trusts Cognito as an identity provider and kognito is as a provider which sort",
    "start": "2140220",
    "end": "2149440"
  },
  {
    "text": "of sits on top of these either well-known or open addict connect providers so that it can toward the common identity and I have also defined",
    "start": "2149440",
    "end": "2158980"
  },
  {
    "text": "a policy which says allow someone who assumed this role to do a scan on a",
    "start": "2158980",
    "end": "2164470"
  },
  {
    "text": "DynamoDB table in my account and only for one table nothing else so let's take",
    "start": "2164470",
    "end": "2171910"
  },
  {
    "text": "a quick look at that table I have two",
    "start": "2171910",
    "end": "2178090"
  },
  {
    "text": "tables but this is the one that we are interested in I am going to say explore so it has just three entries with 100",
    "start": "2178090",
    "end": "2186010"
  },
  {
    "text": "200 300 as a as a hash keys so let's",
    "start": "2186010",
    "end": "2191350"
  },
  {
    "text": "look the actual application in action so",
    "start": "2191350",
    "end": "2197110"
  },
  {
    "text": "the code for this is available on the AWS security blog post and it's a very simple JavaScript app it has only two",
    "start": "2197110",
    "end": "2204280"
  },
  {
    "text": "files index dot HTML the one that we are looking at and callback dot HTML that gets called after the user is",
    "start": "2204280",
    "end": "2211030"
  },
  {
    "text": "authenticated with Salesforce so I'm going to assign in its Salesforce",
    "start": "2211030",
    "end": "2216369"
  },
  {
    "text": "app now redirects me to Salesforce I am going to authenticate after this now it",
    "start": "2216369",
    "end": "2223479"
  },
  {
    "text": "asks me for authorization it says hey there is this sample app that is trying",
    "start": "2223479",
    "end": "2229390"
  },
  {
    "text": "to access your Salesforce account we want to allow or not I'm going to say allow and now something happened very",
    "start": "2229390",
    "end": "2238089"
  },
  {
    "text": "quickly Salesforce written the ID token to the app and then the token got the temporary",
    "start": "2238089",
    "end": "2244779"
  },
  {
    "text": "security credentials by exchanging the ID token and then it was you able to use",
    "start": "2244779",
    "end": "2250150"
  },
  {
    "text": "those two lists the same entries in the dynamo DB table let's look at a",
    "start": "2250150",
    "end": "2256359"
  },
  {
    "text": "variation let's say if I go to the same app sign in now I'm already authenticated so it doesn't ask me to",
    "start": "2256359",
    "end": "2263109"
  },
  {
    "text": "authenticate again and this time I'm going to deny and if I deny then",
    "start": "2263109",
    "end": "2268839"
  },
  {
    "text": "Salesforce is not going to send the ID token to the application and if it that",
    "start": "2268839",
    "end": "2274630"
  },
  {
    "text": "happens then there is an access deny",
    "start": "2274630",
    "end": "2279359"
  },
  {
    "text": "that let's get back to the slides",
    "start": "2281009",
    "end": "2287610"
  },
  {
    "text": "so last comparison so this is the assumed role with Sam Alanis in role",
    "start": "2287610",
    "end": "2292810"
  },
  {
    "start": "2288000",
    "end": "2288000"
  },
  {
    "text": "with Weber identity comparison both the api's do not require AWS credentials because one takes Simon authentication",
    "start": "2292810",
    "end": "2300010"
  },
  {
    "text": "as a required parameter other takes ID token as a required parameter both of them work across accounts both of them",
    "start": "2300010",
    "end": "2306670"
  },
  {
    "text": "have sessions valid for one hour both of them support policy scoping so what's",
    "start": "2306670",
    "end": "2312760"
  },
  {
    "text": "different is assumable with sam'l is used in the corporate identity scenarios",
    "start": "2312760",
    "end": "2318250"
  },
  {
    "text": "where basically it's a corporate single sign-on and then there you are trusting the sam'l IDP assume role with web",
    "start": "2318250",
    "end": "2325480"
  },
  {
    "text": "identity is used in the web or mobile application scenarios where you are",
    "start": "2325480",
    "end": "2330610"
  },
  {
    "text": "trusting the open ID connect IDP with that to summarize we looked at two kinds",
    "start": "2330610",
    "end": "2339010"
  },
  {
    "text": "of identities that you can bring to AWS corporate identities using custom",
    "start": "2339010",
    "end": "2344710"
  },
  {
    "text": "Federation proxy both for console and API or using sam'l using any of the self",
    "start": "2344710",
    "end": "2350860"
  },
  {
    "text": "Federation software or AWS directory service which hosts the proxy for you",
    "start": "2350860",
    "end": "2356650"
  },
  {
    "text": "and for social identities we looked at Amazon Cognito and how you can use it to",
    "start": "2356650",
    "end": "2364480"
  },
  {
    "text": "provide authentication by any provider that supports open ID Connect here are",
    "start": "2364480",
    "end": "2371830"
  },
  {
    "text": "some of the links just for reference and with that thank you and I would HIGHLY",
    "start": "2371830",
    "end": "2378340"
  },
  {
    "text": "appreciate if you can provide feedback on this session",
    "start": "2378340",
    "end": "2382650"
  }
]