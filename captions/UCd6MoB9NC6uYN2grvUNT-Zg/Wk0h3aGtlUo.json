[
  {
    "start": "0",
    "end": "38000"
  },
  {
    "text": "in this video you'll see how to monitor",
    "start": "480",
    "end": "2320"
  },
  {
    "text": "an amazon elastic container service or",
    "start": "2320",
    "end": "4480"
  },
  {
    "text": "amazon ecs application",
    "start": "4480",
    "end": "6319"
  },
  {
    "text": "on aws fargate using prometheus metrics",
    "start": "6319",
    "end": "9840"
  },
  {
    "text": "with this solution you can use built-in",
    "start": "9840",
    "end": "11679"
  },
  {
    "text": "dashboards and implement custom metrics",
    "start": "11679",
    "end": "13840"
  },
  {
    "text": "to gain deeper visibility into your",
    "start": "13840",
    "end": "15360"
  },
  {
    "text": "containerized workloads",
    "start": "15360",
    "end": "17600"
  },
  {
    "text": "let's start by creating an amazon",
    "start": "17600",
    "end": "19199"
  },
  {
    "text": "elastic container registry or ecr",
    "start": "19199",
    "end": "21359"
  },
  {
    "text": "repository for a sample application we",
    "start": "21359",
    "end": "23519"
  },
  {
    "text": "have already prepared",
    "start": "23519",
    "end": "25519"
  },
  {
    "text": "we'll name the repository hello",
    "start": "25519",
    "end": "28840"
  },
  {
    "text": "prometheus",
    "start": "28840",
    "end": "31840"
  },
  {
    "text": "let's view the push commands for our ecr",
    "start": "33120",
    "end": "35200"
  },
  {
    "text": "repository",
    "start": "35200",
    "end": "37920"
  },
  {
    "start": "38000",
    "end": "101000"
  },
  {
    "text": "we can copy these commands and run them",
    "start": "38559",
    "end": "40160"
  },
  {
    "text": "in our development environment",
    "start": "40160",
    "end": "42719"
  },
  {
    "text": "let's switch to the directory containing",
    "start": "42719",
    "end": "44320"
  },
  {
    "text": "our docker file",
    "start": "44320",
    "end": "46079"
  },
  {
    "text": "we'll paste in the first push command",
    "start": "46079",
    "end": "48000"
  },
  {
    "text": "which retrieves an authentication token",
    "start": "48000",
    "end": "49760"
  },
  {
    "text": "allowing our docker client to push our",
    "start": "49760",
    "end": "51520"
  },
  {
    "text": "data to our ecr repository",
    "start": "51520",
    "end": "54399"
  },
  {
    "text": "now let's copy and paste the command to",
    "start": "54399",
    "end": "56160"
  },
  {
    "text": "build our docker image",
    "start": "56160",
    "end": "59840"
  },
  {
    "text": "now let's copy and paste the commands to",
    "start": "67119",
    "end": "68880"
  },
  {
    "text": "tag our image and push it to our ecr",
    "start": "68880",
    "end": "70840"
  },
  {
    "text": "repository",
    "start": "70840",
    "end": "73840"
  },
  {
    "text": "our image has been pushed to ecr",
    "start": "92240",
    "end": "93840"
  },
  {
    "text": "successfully let's return to ecr",
    "start": "93840",
    "end": "101680"
  },
  {
    "start": "101000",
    "end": "307000"
  },
  {
    "text": "we'll copy the image uri which we'll",
    "start": "101680",
    "end": "103840"
  },
  {
    "text": "need to create a fargate task based on",
    "start": "103840",
    "end": "105600"
  },
  {
    "text": "this container",
    "start": "105600",
    "end": "107280"
  },
  {
    "text": "now let's create a fargate task",
    "start": "107280",
    "end": "108720"
  },
  {
    "text": "definition for our docker file",
    "start": "108720",
    "end": "115840"
  },
  {
    "text": "we'll select our task execution role and",
    "start": "117119",
    "end": "119119"
  },
  {
    "text": "the required task memory and cpu",
    "start": "119119",
    "end": "129840"
  },
  {
    "text": "next we'll add our newly pushed",
    "start": "130640",
    "end": "132080"
  },
  {
    "text": "container image to our task definition",
    "start": "132080",
    "end": "135920"
  },
  {
    "text": "we'll paste in the image uri we copied a",
    "start": "136160",
    "end": "138160"
  },
  {
    "text": "moment ago",
    "start": "138160",
    "end": "140640"
  },
  {
    "text": "next we'll provide the port mappings for",
    "start": "141200",
    "end": "142800"
  },
  {
    "text": "our container",
    "start": "142800",
    "end": "144400"
  },
  {
    "text": "the first port 8080 is user facing",
    "start": "144400",
    "end": "147760"
  },
  {
    "text": "prometheus will gather metrics off the",
    "start": "147760",
    "end": "149440"
  },
  {
    "text": "second port 9404",
    "start": "149440",
    "end": "152160"
  },
  {
    "text": "we'll leave the other default values",
    "start": "152160",
    "end": "154160"
  },
  {
    "text": "except for the docker label key value",
    "start": "154160",
    "end": "156000"
  },
  {
    "text": "pairs which must be set for metrics to",
    "start": "156000",
    "end": "157920"
  },
  {
    "text": "be collected by prometheus when it is",
    "start": "157920",
    "end": "159599"
  },
  {
    "text": "installed",
    "start": "159599",
    "end": "161040"
  },
  {
    "text": "the first key will indicate that we want",
    "start": "161040",
    "end": "162560"
  },
  {
    "text": "to collect metrics about java virtual",
    "start": "162560",
    "end": "164400"
  },
  {
    "text": "machine or jvm",
    "start": "164400",
    "end": "165760"
  },
  {
    "text": "usage we'll also add a docker label for",
    "start": "165760",
    "end": "168640"
  },
  {
    "text": "the ecs prometheus exporter port we",
    "start": "168640",
    "end": "170800"
  },
  {
    "text": "mapped to the host instance earlier",
    "start": "170800",
    "end": "174319"
  },
  {
    "text": "now that we've created a task definition",
    "start": "183680",
    "end": "185360"
  },
  {
    "text": "for our sample service we're ready to",
    "start": "185360",
    "end": "187200"
  },
  {
    "text": "create an ecs cluster to run it",
    "start": "187200",
    "end": "189599"
  },
  {
    "text": "for the purposes of this example we have",
    "start": "189599",
    "end": "191599"
  },
  {
    "text": "already deployed a cloudformation",
    "start": "191599",
    "end": "193120"
  },
  {
    "text": "template that created a vpc with two",
    "start": "193120",
    "end": "195040"
  },
  {
    "text": "subnets",
    "start": "195040",
    "end": "195680"
  },
  {
    "text": "an application load balancer and a",
    "start": "195680",
    "end": "197440"
  },
  {
    "text": "security group for the load balancer and",
    "start": "197440",
    "end": "199200"
  },
  {
    "text": "our fargate task",
    "start": "199200",
    "end": "201200"
  },
  {
    "text": "because we're creating a fargate cluster",
    "start": "201200",
    "end": "203120"
  },
  {
    "text": "we'll use the networking only template",
    "start": "203120",
    "end": "213840"
  },
  {
    "text": "next we'll deploy a service to our",
    "start": "218799",
    "end": "220239"
  },
  {
    "text": "cluster that executes our task",
    "start": "220239",
    "end": "223680"
  },
  {
    "text": "definition",
    "start": "224840",
    "end": "227840"
  },
  {
    "text": "the task definition we created is",
    "start": "227840",
    "end": "229599"
  },
  {
    "text": "automatically selected since we don't",
    "start": "229599",
    "end": "231120"
  },
  {
    "text": "have any others",
    "start": "231120",
    "end": "233840"
  },
  {
    "text": "we'll run two tasks so we always have a",
    "start": "234879",
    "end": "237040"
  },
  {
    "text": "replica container",
    "start": "237040",
    "end": "241840"
  },
  {
    "text": "let's keep the rest of the parameters as",
    "start": "243200",
    "end": "244879"
  },
  {
    "text": "is and proceed",
    "start": "244879",
    "end": "247760"
  },
  {
    "text": "next we'll provide the vpc public",
    "start": "248480",
    "end": "250400"
  },
  {
    "text": "subnets security group and application",
    "start": "250400",
    "end": "252640"
  },
  {
    "text": "load balancer ids from the deployed",
    "start": "252640",
    "end": "254400"
  },
  {
    "text": "network stack",
    "start": "254400",
    "end": "269840"
  },
  {
    "text": "finally we'll configure the load",
    "start": "278880",
    "end": "280320"
  },
  {
    "text": "balancer for our running container",
    "start": "280320",
    "end": "283840"
  },
  {
    "text": "we'll enter the target group deployed",
    "start": "287040",
    "end": "288639"
  },
  {
    "text": "earlier as part of our network stack",
    "start": "288639",
    "end": "292240"
  },
  {
    "text": "we can provide a health check path for",
    "start": "293600",
    "end": "295280"
  },
  {
    "text": "our service",
    "start": "295280",
    "end": "297840"
  },
  {
    "text": "now let's deploy our service",
    "start": "303360",
    "end": "306800"
  },
  {
    "start": "307000",
    "end": "446000"
  },
  {
    "text": "when the service becomes active we can",
    "start": "307280",
    "end": "309120"
  },
  {
    "text": "visit the application load balancer",
    "start": "309120",
    "end": "310720"
  },
  {
    "text": "address to check if our application is",
    "start": "310720",
    "end": "312400"
  },
  {
    "text": "running as expected",
    "start": "312400",
    "end": "315440"
  },
  {
    "text": "our containerized web service is running",
    "start": "318320",
    "end": "320080"
  },
  {
    "text": "successfully we can also check its",
    "start": "320080",
    "end": "322160"
  },
  {
    "text": "status by visiting the service page",
    "start": "322160",
    "end": "325840"
  },
  {
    "text": "now we are ready to install the",
    "start": "328000",
    "end": "329280"
  },
  {
    "text": "cloudwatch agent with prometheus on our",
    "start": "329280",
    "end": "331039"
  },
  {
    "text": "web service",
    "start": "331039",
    "end": "332639"
  },
  {
    "text": "let's return to our development",
    "start": "332639",
    "end": "333840"
  },
  {
    "text": "environment",
    "start": "333840",
    "end": "336400"
  },
  {
    "text": "for the purposes of this example we'll",
    "start": "336880",
    "end": "338800"
  },
  {
    "text": "use a sample cloud formation template to",
    "start": "338800",
    "end": "340639"
  },
  {
    "text": "deploy a stack that installs the",
    "start": "340639",
    "end": "341919"
  },
  {
    "text": "prometheus metrics collector for our ecs",
    "start": "341919",
    "end": "344160"
  },
  {
    "text": "cluster",
    "start": "344160",
    "end": "346639"
  },
  {
    "text": "this template requires several",
    "start": "348800",
    "end": "350160"
  },
  {
    "text": "environmental variables in order to find",
    "start": "350160",
    "end": "351919"
  },
  {
    "text": "our service",
    "start": "351919",
    "end": "353199"
  },
  {
    "text": "we'll run a shell script that sets the",
    "start": "353199",
    "end": "354880"
  },
  {
    "text": "required variables and then deploys the",
    "start": "354880",
    "end": "357120"
  },
  {
    "text": "stack",
    "start": "357120",
    "end": "359440"
  },
  {
    "text": "to get our security group resource id we",
    "start": "360639",
    "end": "363120"
  },
  {
    "text": "will use the aws",
    "start": "363120",
    "end": "364479"
  },
  {
    "text": "cli to look up our network stack outputs",
    "start": "364479",
    "end": "367840"
  },
  {
    "text": "we can copy the id and paste it into the",
    "start": "367840",
    "end": "369759"
  },
  {
    "text": "shell script",
    "start": "369759",
    "end": "372400"
  },
  {
    "text": "let's do the same for our ecs cluster",
    "start": "374240",
    "end": "376400"
  },
  {
    "text": "subnet field",
    "start": "376400",
    "end": "381840"
  },
  {
    "text": "finally let's run the script",
    "start": "388639",
    "end": "392000"
  },
  {
    "text": "our stack successfully deployed let's",
    "start": "392479",
    "end": "394800"
  },
  {
    "text": "return to the cluster page to ensure the",
    "start": "394800",
    "end": "396560"
  },
  {
    "text": "new cloudwatch service is running",
    "start": "396560",
    "end": "400080"
  },
  {
    "text": "here's the new service we just deployed",
    "start": "400720",
    "end": "404479"
  },
  {
    "text": "its status is active let's go to",
    "start": "404960",
    "end": "407680"
  },
  {
    "text": "cloudwatch and see the metrics available",
    "start": "407680",
    "end": "409280"
  },
  {
    "text": "to us from prometheus",
    "start": "409280",
    "end": "412400"
  },
  {
    "text": "a new namespace is available for",
    "start": "413919",
    "end": "415520"
  },
  {
    "text": "prometheus",
    "start": "415520",
    "end": "418160"
  },
  {
    "text": "as you can see jvm metrics are being",
    "start": "420800",
    "end": "422880"
  },
  {
    "text": "collected for several different pool",
    "start": "422880",
    "end": "424400"
  },
  {
    "text": "dimensions of our running service",
    "start": "424400",
    "end": "426400"
  },
  {
    "text": "we now have visibility into our",
    "start": "426400",
    "end": "427840"
  },
  {
    "text": "container beyond cpu and memory",
    "start": "427840",
    "end": "429759"
  },
  {
    "text": "utilization",
    "start": "429759",
    "end": "431440"
  },
  {
    "text": "you've just seen how to monitor an",
    "start": "431440",
    "end": "432960"
  },
  {
    "text": "amazon ecs application on aws fargate",
    "start": "432960",
    "end": "435919"
  },
  {
    "text": "using prometheus metrics",
    "start": "435919",
    "end": "438160"
  },
  {
    "text": "you can learn more about this topic in",
    "start": "438160",
    "end": "439759"
  },
  {
    "text": "the description and links for this video",
    "start": "439759",
    "end": "442000"
  },
  {
    "text": "thanks for watching now it's your turn",
    "start": "442000",
    "end": "443759"
  },
  {
    "text": "to try",
    "start": "443759",
    "end": "448000"
  }
]