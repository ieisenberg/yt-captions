[
  {
    "text": "hello and welcome to serve let's start",
    "start": "220",
    "end": "2680"
  },
  {
    "text": "our processing on AWS part of the AWS",
    "start": "2680",
    "end": "5980"
  },
  {
    "text": "innovate online conference my name's",
    "start": "5980",
    "end": "8799"
  },
  {
    "text": "Daniel zolteck and we're going to",
    "start": "8799",
    "end": "10360"
  },
  {
    "text": "explore a real use case of IOT analytics",
    "start": "10360",
    "end": "13150"
  },
  {
    "text": "using the Kinesis family of services for",
    "start": "13150",
    "end": "16028"
  },
  {
    "text": "many of you this may be quite new so",
    "start": "16029",
    "end": "18190"
  },
  {
    "text": "we'll share a short demonstration of",
    "start": "18190",
    "end": "19870"
  },
  {
    "text": "what's possible with AWS IOT and Amazon",
    "start": "19870",
    "end": "22960"
  },
  {
    "text": "Kinesis now we know that some of the",
    "start": "22960",
    "end": "25630"
  },
  {
    "text": "techies tuned in today want to get under",
    "start": "25630",
    "end": "28000"
  },
  {
    "text": "the hood so we'll deep dive into the",
    "start": "28000",
    "end": "29860"
  },
  {
    "text": "underlying reference architecture and",
    "start": "29860",
    "end": "31660"
  },
  {
    "text": "implementation details we hope that by",
    "start": "31660",
    "end": "34870"
  },
  {
    "text": "the end of our time together you'll have",
    "start": "34870",
    "end": "37059"
  },
  {
    "text": "developed an appreciation of the AWS",
    "start": "37059",
    "end": "39670"
  },
  {
    "text": "services required to build a service IOT",
    "start": "39670",
    "end": "42249"
  },
  {
    "text": "analytics platform be able to describe",
    "start": "42249",
    "end": "44829"
  },
  {
    "text": "the role and functionality of Amazon",
    "start": "44829",
    "end": "47229"
  },
  {
    "text": "Kinesis firehose streams and analytics",
    "start": "47229",
    "end": "49899"
  },
  {
    "text": "and finally we hope you can walk away",
    "start": "49899",
    "end": "51940"
  },
  {
    "text": "with an understanding of how to acquire",
    "start": "51940",
    "end": "54129"
  },
  {
    "text": "process and store both raw and analyzed",
    "start": "54129",
    "end": "57190"
  },
  {
    "text": "iot data so let's get started the",
    "start": "57190",
    "end": "60729"
  },
  {
    "text": "solution we're going to use as an",
    "start": "60729",
    "end": "62379"
  },
  {
    "text": "example today is that of a number of",
    "start": "62379",
    "end": "64449"
  },
  {
    "text": "environmental sentences connected over",
    "start": "64450",
    "end": "66730"
  },
  {
    "text": "networks to a weather station that",
    "start": "66730",
    "end": "69090"
  },
  {
    "text": "weather station aggregates data from all",
    "start": "69090",
    "end": "71830"
  },
  {
    "text": "the sensors does some basic processing",
    "start": "71830",
    "end": "73990"
  },
  {
    "text": "and then forwards it into the date and",
    "start": "73990",
    "end": "76690"
  },
  {
    "text": "then forwards the data into AWS we're a",
    "start": "76690",
    "end": "79990"
  },
  {
    "text": "service processing architecture is used",
    "start": "79990",
    "end": "82510"
  },
  {
    "text": "to acquire process and present this data",
    "start": "82510",
    "end": "85830"
  },
  {
    "text": "we're at a bootcamp for 100 attendees of",
    "start": "85830",
    "end": "88870"
  },
  {
    "text": "reinvent last year where we had each",
    "start": "88870",
    "end": "91000"
  },
  {
    "text": "attendee use an Intel Edison IOT device",
    "start": "91000",
    "end": "93640"
  },
  {
    "text": "to act as the weather station so we had",
    "start": "93640",
    "end": "96280"
  },
  {
    "text": "400 sensors and 100 weather stations",
    "start": "96280",
    "end": "98920"
  },
  {
    "text": "which were located all over the United",
    "start": "98920",
    "end": "101410"
  },
  {
    "text": "States all this data was fed into a",
    "start": "101410",
    "end": "104110"
  },
  {
    "text": "global weather view which you will see",
    "start": "104110",
    "end": "106330"
  },
  {
    "text": "in a demo shortly where the attendees",
    "start": "106330",
    "end": "108430"
  },
  {
    "text": "could see the weather in real-time we",
    "start": "108430",
    "end": "111940"
  },
  {
    "text": "made extensive use of the AWS IOT",
    "start": "111940",
    "end": "114430"
  },
  {
    "text": "services and its features such as IOT",
    "start": "114430",
    "end": "117070"
  },
  {
    "text": "rules actions and things this part of",
    "start": "117070",
    "end": "120370"
  },
  {
    "text": "the solution relies heavily on a number",
    "start": "120370",
    "end": "122230"
  },
  {
    "text": "of server list concepts for storage we",
    "start": "122230",
    "end": "125409"
  },
  {
    "text": "use Amazon Arora Amazon s3 and Amazon",
    "start": "125409",
    "end": "129009"
  },
  {
    "text": "redshift we use these services for",
    "start": "129009",
    "end": "131230"
  },
  {
    "text": "different use cases and we'll delve into",
    "start": "131230",
    "end": "133390"
  },
  {
    "text": "the",
    "start": "133390",
    "end": "133900"
  },
  {
    "text": "if it's laid up AWS lambda is used",
    "start": "133900",
    "end": "136689"
  },
  {
    "text": "widely in the architecture to provide",
    "start": "136689",
    "end": "138519"
  },
  {
    "text": "service zero administration compute",
    "start": "138519",
    "end": "140769"
  },
  {
    "text": "functionality the present phase heavily",
    "start": "140769",
    "end": "143739"
  },
  {
    "text": "uses JavaScript both on the client and",
    "start": "143739",
    "end": "145810"
  },
  {
    "text": "server-side",
    "start": "145810",
    "end": "146560"
  },
  {
    "text": "hence the AWS JavaScript SDK is used",
    "start": "146560",
    "end": "149970"
  },
  {
    "text": "security authentication and",
    "start": "149970",
    "end": "152409"
  },
  {
    "text": "authorization are all key elements of",
    "start": "152409",
    "end": "154840"
  },
  {
    "text": "this phase and are supported by the use",
    "start": "154840",
    "end": "157629"
  },
  {
    "text": "of Amazon Cognito",
    "start": "157629",
    "end": "159010"
  },
  {
    "text": "the global weather view makes API calls",
    "start": "159010",
    "end": "161799"
  },
  {
    "text": "to the global weather service and this",
    "start": "161799",
    "end": "163870"
  },
  {
    "text": "is facilitated by both Amazon API",
    "start": "163870",
    "end": "165970"
  },
  {
    "text": "gateway and AWS lambda when we lay out",
    "start": "165970",
    "end": "170560"
  },
  {
    "text": "all the services we're going to use",
    "start": "170560",
    "end": "172269"
  },
  {
    "text": "today you can see that this is a broad",
    "start": "172269",
    "end": "174579"
  },
  {
    "text": "architecture that's tightly aligned to",
    "start": "174579",
    "end": "176620"
  },
  {
    "text": "AWS service concepts what's interesting",
    "start": "176620",
    "end": "180430"
  },
  {
    "text": "in this solution is that there are no",
    "start": "180430",
    "end": "182439"
  },
  {
    "text": "virtual machines or containers visible",
    "start": "182439",
    "end": "184569"
  },
  {
    "text": "nor referenced in our model this means",
    "start": "184569",
    "end": "187000"
  },
  {
    "text": "that when operating such a solution",
    "start": "187000",
    "end": "189040"
  },
  {
    "text": "there's no need to administer manage or",
    "start": "189040",
    "end": "191590"
  },
  {
    "text": "scale any compute functionality yourself",
    "start": "191590",
    "end": "194519"
  },
  {
    "text": "secondly there's no need to scale any of",
    "start": "194519",
    "end": "197319"
  },
  {
    "text": "the services this means that it's not",
    "start": "197319",
    "end": "199299"
  },
  {
    "text": "possible to either under provision or",
    "start": "199299",
    "end": "201250"
  },
  {
    "text": "over provision capacity in the system",
    "start": "201250",
    "end": "203579"
  },
  {
    "text": "now let's take a look at all these",
    "start": "203579",
    "end": "206410"
  },
  {
    "text": "services in action within the global",
    "start": "206410",
    "end": "208389"
  },
  {
    "text": "weather view application from the",
    "start": "208389",
    "end": "210099"
  },
  {
    "text": "reinvent bootcamp",
    "start": "210099",
    "end": "212400"
  },
  {
    "text": "[Music]",
    "start": "212400",
    "end": "218530"
  },
  {
    "text": "[Music]",
    "start": "223230",
    "end": "233549"
  },
  {
    "text": "[Music]",
    "start": "239590",
    "end": "252970"
  },
  {
    "text": "[Music]",
    "start": "256550",
    "end": "266680"
  },
  {
    "text": "[Music]",
    "start": "273030",
    "end": "366270"
  },
  {
    "text": "so when our customers want to deliver a",
    "start": "366270",
    "end": "369279"
  },
  {
    "text": "solution like the one we've just seen",
    "start": "369279",
    "end": "371309"
  },
  {
    "text": "they've generally asked us to help them",
    "start": "371309",
    "end": "373779"
  },
  {
    "text": "in four key areas firstly the ingestion",
    "start": "373779",
    "end": "376389"
  },
  {
    "text": "of large volumes of high and low",
    "start": "376389",
    "end": "378369"
  },
  {
    "text": "velocity data from large fleets of",
    "start": "378369",
    "end": "380469"
  },
  {
    "text": "distributed IOT devices the ability to",
    "start": "380469",
    "end": "383469"
  },
  {
    "text": "perform real-time analytics on streaming",
    "start": "383469",
    "end": "386169"
  },
  {
    "text": "data remove the complexity of storing",
    "start": "386169",
    "end": "388869"
  },
  {
    "text": "and processing large volumes of data and",
    "start": "388869",
    "end": "390909"
  },
  {
    "text": "finally deliver a solution that doesn't",
    "start": "390909",
    "end": "393309"
  },
  {
    "text": "require you to plan scale or manage any",
    "start": "393309",
    "end": "395800"
  },
  {
    "text": "infrastructure using a pay-as-you-go",
    "start": "395800",
    "end": "397539"
  },
  {
    "text": "cost model it's easy to look at these",
    "start": "397539",
    "end": "400179"
  },
  {
    "text": "challenges and ask yourself why don't",
    "start": "400179",
    "end": "402309"
  },
  {
    "text": "they just do it themselves well there",
    "start": "402309",
    "end": "405309"
  },
  {
    "text": "are some really good reasons customers",
    "start": "405309",
    "end": "407110"
  },
  {
    "text": "look to a company like AWS to help them",
    "start": "407110",
    "end": "409659"
  },
  {
    "text": "firstly designing large-scale global",
    "start": "409659",
    "end": "412749"
  },
  {
    "text": "systems capable of reliably ingesting",
    "start": "412749",
    "end": "415209"
  },
  {
    "text": "data from billions of devices generating",
    "start": "415209",
    "end": "418029"
  },
  {
    "text": "trillions of messages in a distributed",
    "start": "418029",
    "end": "419860"
  },
  {
    "text": "fashion is really hard",
    "start": "419860",
    "end": "421349"
  },
  {
    "text": "secondly the cost of that infrastructure",
    "start": "421349",
    "end": "424089"
  },
  {
    "text": "is prohibitively expensive unless you",
    "start": "424089",
    "end": "426429"
  },
  {
    "text": "have massive scale and finally the",
    "start": "426429",
    "end": "429279"
  },
  {
    "text": "operational management and scale",
    "start": "429279",
    "end": "430899"
  },
  {
    "text": "implications are a limiting factor than",
    "start": "430899",
    "end": "433029"
  },
  {
    "text": "impede innovation and velocity at AWS we",
    "start": "433029",
    "end": "436089"
  },
  {
    "text": "love solving hard problems and more",
    "start": "436089",
    "end": "437889"
  },
  {
    "text": "importantly we like to deliver solutions",
    "start": "437889",
    "end": "439809"
  },
  {
    "text": "that let our customers focus on their",
    "start": "439809",
    "end": "442269"
  },
  {
    "text": "core business the AWS services we're",
    "start": "442269",
    "end": "444909"
  },
  {
    "text": "going to look at today take care of all",
    "start": "444909",
    "end": "446709"
  },
  {
    "text": "the undifferentiated heavy lifting for",
    "start": "446709",
    "end": "448719"
  },
  {
    "text": "you this means that you can focus on the",
    "start": "448719",
    "end": "450909"
  },
  {
    "text": "things that you are good at and more",
    "start": "450909",
    "end": "453279"
  },
  {
    "text": "importantly on those activities that",
    "start": "453279",
    "end": "455289"
  },
  {
    "text": "bring your customers real value as with",
    "start": "455289",
    "end": "458499"
  },
  {
    "text": "all good architecture we start by",
    "start": "458499",
    "end": "460509"
  },
  {
    "text": "building a generalized reference model",
    "start": "460509",
    "end": "462309"
  },
  {
    "text": "with all AWS architectures we start with",
    "start": "462309",
    "end": "465969"
  },
  {
    "text": "security as this is our highest priority",
    "start": "465969",
    "end": "467919"
  },
  {
    "text": "in this model security refers to",
    "start": "467919",
    "end": "470800"
  },
  {
    "text": "everything from encryption both at rest",
    "start": "470800",
    "end": "473139"
  },
  {
    "text": "and emotion to authenticate an",
    "start": "473139",
    "end": "476129"
  },
  {
    "text": "authorization we also need a network to",
    "start": "476129",
    "end": "479499"
  },
  {
    "text": "transport the data end-to-end and",
    "start": "479499",
    "end": "481679"
  },
  {
    "text": "compute to process the data our",
    "start": "481679",
    "end": "485289"
  },
  {
    "text": "reference model includes data sources",
    "start": "485289",
    "end": "487119"
  },
  {
    "text": "this may be IOT devices such as a simple",
    "start": "487119",
    "end": "490089"
  },
  {
    "text": "temperature monitor or a complex device",
    "start": "490089",
    "end": "492459"
  },
  {
    "text": "such as a real-time blood glucose",
    "start": "492459",
    "end": "494589"
  },
  {
    "text": "monitor unit or even a purely software",
    "start": "494589",
    "end": "497830"
  },
  {
    "text": "thing which has been instrumented into a",
    "start": "497830",
    "end": "499990"
  },
  {
    "text": "computer program the beauty of a",
    "start": "499990",
    "end": "502480"
  },
  {
    "text": "reference architecture is that we don't",
    "start": "502480",
    "end": "504490"
  },
  {
    "text": "need to be overly concerned with the",
    "start": "504490",
    "end": "506260"
  },
  {
    "text": "types of data sources the data needs to",
    "start": "506260",
    "end": "510340"
  },
  {
    "text": "be ingested into a large system this",
    "start": "510340",
    "end": "512800"
  },
  {
    "text": "generally needs to be done at scale and",
    "start": "512800",
    "end": "514810"
  },
  {
    "text": "on a global basis the data being",
    "start": "514810",
    "end": "517270"
  },
  {
    "text": "ingested may be large but streamed at",
    "start": "517270",
    "end": "519310"
  },
  {
    "text": "low velocity or small and streamed at",
    "start": "519310",
    "end": "521680"
  },
  {
    "text": "high velocity or even random or bursty",
    "start": "521680",
    "end": "523960"
  },
  {
    "text": "rates we generally see the requirement",
    "start": "523960",
    "end": "527440"
  },
  {
    "text": "for this data to be processed in either",
    "start": "527440",
    "end": "529300"
  },
  {
    "text": "or both batch or real-time processing",
    "start": "529300",
    "end": "531490"
  },
  {
    "text": "for today we call real-time processing",
    "start": "531490",
    "end": "534430"
  },
  {
    "text": "anything that has a delay of less than",
    "start": "534430",
    "end": "536950"
  },
  {
    "text": "60 seconds whilst batch processing",
    "start": "536950",
    "end": "539200"
  },
  {
    "text": "refers to latencies greater than 60",
    "start": "539200",
    "end": "541420"
  },
  {
    "text": "seconds analytics is really the engine",
    "start": "541420",
    "end": "544990"
  },
  {
    "text": "that processes either the batch or",
    "start": "544990",
    "end": "546670"
  },
  {
    "text": "real-time data streams and must support",
    "start": "546670",
    "end": "549190"
  },
  {
    "text": "a standard query language without having",
    "start": "549190",
    "end": "551260"
  },
  {
    "text": "to learn new programming languages or",
    "start": "551260",
    "end": "553600"
  },
  {
    "text": "processing frameworks also enable the",
    "start": "553600",
    "end": "556360"
  },
  {
    "text": "users to gain actionable insights and",
    "start": "556360",
    "end": "558490"
  },
  {
    "text": "respond to their business and customer",
    "start": "558490",
    "end": "560110"
  },
  {
    "text": "needs promptly this component of the",
    "start": "560110",
    "end": "562990"
  },
  {
    "text": "architecture should take care of",
    "start": "562990",
    "end": "564430"
  },
  {
    "text": "everything required to run queries and",
    "start": "564430",
    "end": "566380"
  },
  {
    "text": "continuously scale automatically to",
    "start": "566380",
    "end": "568480"
  },
  {
    "text": "match the volume and throughput rate of",
    "start": "568480",
    "end": "570340"
  },
  {
    "text": "the incoming data of course you're going",
    "start": "570340",
    "end": "573580"
  },
  {
    "text": "to want to be able to store your data",
    "start": "573580",
    "end": "575220"
  },
  {
    "text": "this data may need to be accessed",
    "start": "575220",
    "end": "577480"
  },
  {
    "text": "frequently by many different users who",
    "start": "577480",
    "end": "579760"
  },
  {
    "text": "may demand that this data is fresh and",
    "start": "579760",
    "end": "582580"
  },
  {
    "text": "represents a near real-time view of the",
    "start": "582580",
    "end": "584470"
  },
  {
    "text": "data",
    "start": "584470",
    "end": "584910"
  },
  {
    "text": "alternatively some of this data may only",
    "start": "584910",
    "end": "587800"
  },
  {
    "text": "need to be accessed infrequently for",
    "start": "587800",
    "end": "589810"
  },
  {
    "text": "example used to run historical analytics",
    "start": "589810",
    "end": "592090"
  },
  {
    "text": "in order to generate machine learning",
    "start": "592090",
    "end": "593950"
  },
  {
    "text": "models for predictive analytics that's",
    "start": "593950",
    "end": "596290"
  },
  {
    "text": "quite a set of features and",
    "start": "596290",
    "end": "597640"
  },
  {
    "text": "functionality that this reference model",
    "start": "597640",
    "end": "599500"
  },
  {
    "text": "demands when mapping the reference model",
    "start": "599500",
    "end": "603250"
  },
  {
    "text": "to AWS services the network element of",
    "start": "603250",
    "end": "606100"
  },
  {
    "text": "this model refers to the Amazon virtual",
    "start": "606100",
    "end": "608440"
  },
  {
    "text": "private cloud which enables you to",
    "start": "608440",
    "end": "610300"
  },
  {
    "text": "launch AWS resources into a virtual",
    "start": "610300",
    "end": "613000"
  },
  {
    "text": "network that you've defied Amazon ec2",
    "start": "613000",
    "end": "615880"
  },
  {
    "text": "provides elastic compute capability AWS",
    "start": "615880",
    "end": "619780"
  },
  {
    "text": "IOT provides us the ability to deploy",
    "start": "619780",
    "end": "622150"
  },
  {
    "text": "manage and communicate with billions of",
    "start": "622150",
    "end": "624520"
  },
  {
    "text": "IOT powered devices in a secure managed",
    "start": "624520",
    "end": "626920"
  },
  {
    "text": "way Amazon Kinesis is a platform for",
    "start": "626920",
    "end": "629740"
  },
  {
    "text": "streaming data on",
    "start": "629740",
    "end": "631459"
  },
  {
    "text": "ws offering powerful services to make it",
    "start": "631459",
    "end": "634459"
  },
  {
    "text": "easy to load and analyze streaming data",
    "start": "634459",
    "end": "636949"
  },
  {
    "text": "it also provides the ability to build",
    "start": "636949",
    "end": "639529"
  },
  {
    "text": "custom streaming data applications for",
    "start": "639529",
    "end": "642470"
  },
  {
    "text": "specialized needs and finally storage is",
    "start": "642470",
    "end": "645439"
  },
  {
    "text": "facilitated by the Amazon suite of",
    "start": "645439",
    "end": "647779"
  },
  {
    "text": "relational database services such as",
    "start": "647779",
    "end": "649819"
  },
  {
    "text": "Amazon Arora in combination with highly",
    "start": "649819",
    "end": "652639"
  },
  {
    "text": "durable objects store capabilities of",
    "start": "652639",
    "end": "654980"
  },
  {
    "text": "Amazon s3 of all the services in this",
    "start": "654980",
    "end": "658910"
  },
  {
    "text": "reference model we're only going to",
    "start": "658910",
    "end": "660589"
  },
  {
    "text": "focus on those highlighted in red and",
    "start": "660589",
    "end": "662540"
  },
  {
    "text": "more specifically the Kinesis family of",
    "start": "662540",
    "end": "664879"
  },
  {
    "text": "services today we know that the thing is",
    "start": "664879",
    "end": "669079"
  },
  {
    "text": "actually our weather station but in the",
    "start": "669079",
    "end": "671329"
  },
  {
    "text": "outside world the term IOT covers an",
    "start": "671329",
    "end": "673639"
  },
  {
    "text": "expanding network of commonplace objects",
    "start": "673639",
    "end": "676149"
  },
  {
    "text": "these range from industrial machines to",
    "start": "676149",
    "end": "679220"
  },
  {
    "text": "consumer goods that can gather",
    "start": "679220",
    "end": "680540"
  },
  {
    "text": "information about the world around them",
    "start": "680540",
    "end": "682369"
  },
  {
    "text": "share that information between",
    "start": "682369",
    "end": "684019"
  },
  {
    "text": "themselves or a central point and",
    "start": "684019",
    "end": "686029"
  },
  {
    "text": "provide data to make decisions to affect",
    "start": "686029",
    "end": "688579"
  },
  {
    "text": "change in the real world",
    "start": "688579",
    "end": "689899"
  },
  {
    "text": "hence the Internet of Things or IOT and",
    "start": "689899",
    "end": "693259"
  },
  {
    "text": "in particular the definition of a thing",
    "start": "693259",
    "end": "695720"
  },
  {
    "text": "is a very open-ended term covering",
    "start": "695720",
    "end": "698269"
  },
  {
    "text": "connected things such as mobile devices",
    "start": "698269",
    "end": "699829"
  },
  {
    "text": "right through to embedded devices so",
    "start": "699829",
    "end": "702949"
  },
  {
    "text": "where does our thing or weather station",
    "start": "702949",
    "end": "705410"
  },
  {
    "text": "fit into all of this today here's the",
    "start": "705410",
    "end": "709100"
  },
  {
    "text": "AWS IOT framework it consists of the",
    "start": "709100",
    "end": "712670"
  },
  {
    "text": "message broker this provides a secure",
    "start": "712670",
    "end": "715040"
  },
  {
    "text": "mechanism for things and IOT",
    "start": "715040",
    "end": "717529"
  },
  {
    "text": "applications to publish and receive",
    "start": "717529",
    "end": "719509"
  },
  {
    "text": "messages from each other",
    "start": "719509",
    "end": "720769"
  },
  {
    "text": "the rules engine provides message",
    "start": "720769",
    "end": "723049"
  },
  {
    "text": "processing and integration with other",
    "start": "723049",
    "end": "725089"
  },
  {
    "text": "AWS services the thing registry this is",
    "start": "725089",
    "end": "729049"
  },
  {
    "text": "something referred to or sometimes",
    "start": "729049",
    "end": "731869"
  },
  {
    "text": "referred to as the device registry which",
    "start": "731869",
    "end": "734209"
  },
  {
    "text": "helps organize the resources associated",
    "start": "734209",
    "end": "736519"
  },
  {
    "text": "with each thing you register your thing",
    "start": "736519",
    "end": "739459"
  },
  {
    "text": "and associate custom attributes with",
    "start": "739459",
    "end": "741829"
  },
  {
    "text": "each thing you can also associate",
    "start": "741829",
    "end": "744529"
  },
  {
    "text": "certificates and client IDs with each",
    "start": "744529",
    "end": "746480"
  },
  {
    "text": "thing to improve your ability to manage",
    "start": "746480",
    "end": "748670"
  },
  {
    "text": "and troubleshoot your things the device",
    "start": "748670",
    "end": "751339"
  },
  {
    "text": "shadow service provides persistent",
    "start": "751339",
    "end": "753170"
  },
  {
    "text": "representation of your thing in the",
    "start": "753170",
    "end": "754730"
  },
  {
    "text": "cloud the device gateway enables devices",
    "start": "754730",
    "end": "757699"
  },
  {
    "text": "to securely and efficiently communicate",
    "start": "757699",
    "end": "759740"
  },
  {
    "text": "with AWS IOT the security and identity",
    "start": "759740",
    "end": "763100"
  },
  {
    "text": "service provides shared",
    "start": "763100",
    "end": "765020"
  },
  {
    "text": "ability for security in the AWS cloud",
    "start": "765020",
    "end": "767600"
  },
  {
    "text": "your things must keep their credential",
    "start": "767600",
    "end": "769910"
  },
  {
    "text": "safe in order to send data securely to",
    "start": "769910",
    "end": "772070"
  },
  {
    "text": "the message broke up the message broker",
    "start": "772070",
    "end": "774800"
  },
  {
    "text": "and rules engine uses AWS security",
    "start": "774800",
    "end": "777080"
  },
  {
    "text": "features to send data securely to",
    "start": "777080",
    "end": "779180"
  },
  {
    "text": "devices or other AWS services this is",
    "start": "779180",
    "end": "782930"
  },
  {
    "text": "where we introduced the concept of a",
    "start": "782930",
    "end": "784580"
  },
  {
    "text": "device Shadow this is effectively a JSON",
    "start": "784580",
    "end": "787430"
  },
  {
    "text": "document used to store and retrieve",
    "start": "787430",
    "end": "789050"
  },
  {
    "text": "current state information for all things",
    "start": "789050",
    "end": "791660"
  },
  {
    "text": "it allows us to persist state of the",
    "start": "791660",
    "end": "794600"
  },
  {
    "text": "device during intermittent connections",
    "start": "794600",
    "end": "796610"
  },
  {
    "text": "as with all AWS architectures we stress",
    "start": "796610",
    "end": "800330"
  },
  {
    "text": "that you should design for failure with",
    "start": "800330",
    "end": "802610"
  },
  {
    "text": "the device Shadow we've taken care of",
    "start": "802610",
    "end": "804710"
  },
  {
    "text": "the undifferentiated heavy lifting",
    "start": "804710",
    "end": "806870"
  },
  {
    "text": "should your thing lose connectivity a",
    "start": "806870",
    "end": "809530"
  },
  {
    "text": "thing may lose connectivity for a number",
    "start": "809530",
    "end": "812210"
  },
  {
    "text": "of reasons control code may want to",
    "start": "812210",
    "end": "814850"
  },
  {
    "text": "conserve battery life and shut down the",
    "start": "814850",
    "end": "816710"
  },
  {
    "text": "device the device itself may be stable",
    "start": "816710",
    "end": "819650"
  },
  {
    "text": "but the network it relies on to send",
    "start": "819650",
    "end": "821540"
  },
  {
    "text": "messages may be unstable or even",
    "start": "821540",
    "end": "823730"
  },
  {
    "text": "unavailable for periods of time with AWS",
    "start": "823730",
    "end": "826700"
  },
  {
    "text": "IOT you can create a persistent virtual",
    "start": "826700",
    "end": "828860"
  },
  {
    "text": "version or shadow of each device that",
    "start": "828860",
    "end": "831140"
  },
  {
    "text": "includes the devices later state so the",
    "start": "831140",
    "end": "833540"
  },
  {
    "text": "application or other devices can read",
    "start": "833540",
    "end": "835940"
  },
  {
    "text": "messages and interact with the device",
    "start": "835940",
    "end": "837850"
  },
  {
    "text": "the device shadows persists the last",
    "start": "837850",
    "end": "840980"
  },
  {
    "text": "reported state and desired future state",
    "start": "840980",
    "end": "843200"
  },
  {
    "text": "of each device even when the device is",
    "start": "843200",
    "end": "845120"
  },
  {
    "text": "offline you can retrieve the latest",
    "start": "845120",
    "end": "847880"
  },
  {
    "text": "reported state of a device or set a",
    "start": "847880",
    "end": "850130"
  },
  {
    "text": "desired future state through the API or",
    "start": "850130",
    "end": "852410"
  },
  {
    "text": "using the rules engine in this way a",
    "start": "852410",
    "end": "855140"
  },
  {
    "text": "device state can change by request even",
    "start": "855140",
    "end": "858860"
  },
  {
    "text": "if the device is not connected to the",
    "start": "858860",
    "end": "860390"
  },
  {
    "text": "network we just mentioned the fact that",
    "start": "860390",
    "end": "863480"
  },
  {
    "text": "AWS IOT service can interact with other",
    "start": "863480",
    "end": "866330"
  },
  {
    "text": "services this is made possible by using",
    "start": "866330",
    "end": "869210"
  },
  {
    "text": "the AWS IOT rules engine the AWS IOT s",
    "start": "869210",
    "end": "873230"
  },
  {
    "text": "rules engine provides message processing",
    "start": "873230",
    "end": "875540"
  },
  {
    "text": "and integration with other AWS services",
    "start": "875540",
    "end": "878140"
  },
  {
    "text": "you can use a sequel like query to",
    "start": "878140",
    "end": "881450"
  },
  {
    "text": "select data from message payloads",
    "start": "881450",
    "end": "883460"
  },
  {
    "text": "process the data and send the data to",
    "start": "883460",
    "end": "885890"
  },
  {
    "text": "other services such as Amazon s3 Amazon",
    "start": "885890",
    "end": "888980"
  },
  {
    "text": "DynamoDB and AWS lambda you can also use",
    "start": "888980",
    "end": "893270"
  },
  {
    "text": "the message broker to republish messages",
    "start": "893270",
    "end": "895610"
  },
  {
    "text": "to other subscribers",
    "start": "895610",
    "end": "898300"
  },
  {
    "text": "the security ecosystem surrounding and",
    "start": "898300",
    "end": "901060"
  },
  {
    "text": "integrated into AWS IOT is extremely",
    "start": "901060",
    "end": "903820"
  },
  {
    "text": "rich ranging from integration with AWS",
    "start": "903820",
    "end": "907090"
  },
  {
    "text": "Identity and Access Management I am and",
    "start": "907090",
    "end": "910210"
  },
  {
    "text": "certificate management for IOT things",
    "start": "910210",
    "end": "912580"
  },
  {
    "text": "and devices the AWS IOT message broker",
    "start": "912580",
    "end": "916000"
  },
  {
    "text": "authenticates and authorizers all",
    "start": "916000",
    "end": "917980"
  },
  {
    "text": "actions in your account the message",
    "start": "917980",
    "end": "920230"
  },
  {
    "text": "broker is responsible for authenticating",
    "start": "920230",
    "end": "922420"
  },
  {
    "text": "your devices securely ingesting device",
    "start": "922420",
    "end": "925090"
  },
  {
    "text": "data and here adhering to the access",
    "start": "925090",
    "end": "927250"
  },
  {
    "text": "permission you have placed on devices",
    "start": "927250",
    "end": "929440"
  },
  {
    "text": "using policies for the processing IOT",
    "start": "929440",
    "end": "932560"
  },
  {
    "text": "data using serverless architectures",
    "start": "932560",
    "end": "934420"
  },
  {
    "text": "bootcamp we came up with the scenario",
    "start": "934420",
    "end": "936370"
  },
  {
    "text": "where we aggregated weather data for a",
    "start": "936370",
    "end": "938470"
  },
  {
    "text": "global weather service each student",
    "start": "938470",
    "end": "940900"
  },
  {
    "text": "received an Intel Edison which",
    "start": "940900",
    "end": "942310"
  },
  {
    "text": "represented a remote weather station",
    "start": "942310",
    "end": "944350"
  },
  {
    "text": "located in a city within a state in the",
    "start": "944350",
    "end": "947200"
  },
  {
    "text": "United States each weather station was",
    "start": "947200",
    "end": "950170"
  },
  {
    "text": "the aggregation point for temperature",
    "start": "950170",
    "end": "952030"
  },
  {
    "text": "wind vibration and rain sensor data we",
    "start": "952030",
    "end": "955630"
  },
  {
    "text": "had the challenge of acquiring the",
    "start": "955630",
    "end": "957220"
  },
  {
    "text": "sensor data from the remote weather",
    "start": "957220",
    "end": "959020"
  },
  {
    "text": "stations processing and analyzing the",
    "start": "959020",
    "end": "961600"
  },
  {
    "text": "data and presenting the data this is all",
    "start": "961600",
    "end": "964690"
  },
  {
    "text": "done following a service architecture",
    "start": "964690",
    "end": "966810"
  },
  {
    "text": "approach stepping through the overall",
    "start": "966810",
    "end": "970660"
  },
  {
    "text": "data flow from the weather station to",
    "start": "970660",
    "end": "972550"
  },
  {
    "text": "the web application first the data is",
    "start": "972550",
    "end": "975550"
  },
  {
    "text": "sent to the AWS IOT service then",
    "start": "975550",
    "end": "978250"
  },
  {
    "text": "processed and streamed using lambda and",
    "start": "978250",
    "end": "980500"
  },
  {
    "text": "Kinesis into the data stores then the",
    "start": "980500",
    "end": "983590"
  },
  {
    "text": "data is accessed via a single page web",
    "start": "983590",
    "end": "985720"
  },
  {
    "text": "application that leverages Cognito for",
    "start": "985720",
    "end": "988600"
  },
  {
    "text": "authentication and authorization an API",
    "start": "988600",
    "end": "991210"
  },
  {
    "text": "gateway to query the data from the",
    "start": "991210",
    "end": "993010"
  },
  {
    "text": "Amazon or a database using a lambda",
    "start": "993010",
    "end": "995200"
  },
  {
    "text": "function today we'll be focusing on the",
    "start": "995200",
    "end": "999130"
  },
  {
    "text": "acquisition and processing of the data",
    "start": "999130",
    "end": "1000900"
  },
  {
    "text": "let's first look at the acquire section",
    "start": "1000900",
    "end": "1004310"
  },
  {
    "text": "since the data is sent from the four",
    "start": "1004310",
    "end": "1006660"
  },
  {
    "text": "sensors and aggregated on the weather",
    "start": "1006660",
    "end": "1008520"
  },
  {
    "text": "station using the mqtt protocol the",
    "start": "1008520",
    "end": "1012060"
  },
  {
    "text": "weather station was preloaded with a",
    "start": "1012060",
    "end": "1013650"
  },
  {
    "text": "certificate that identifies the device",
    "start": "1013650",
    "end": "1015750"
  },
  {
    "text": "and that authenticates the device with",
    "start": "1015750",
    "end": "1017850"
  },
  {
    "text": "the IOT device gateway data is then",
    "start": "1017850",
    "end": "1020910"
  },
  {
    "text": "securely sent to the IOT device gateway",
    "start": "1020910",
    "end": "1023250"
  },
  {
    "text": "over specific topics the topics the",
    "start": "1023250",
    "end": "1026100"
  },
  {
    "text": "device can publish to is specifically",
    "start": "1026100",
    "end": "1028079"
  },
  {
    "text": "allowed by using an IOT policy the IOT",
    "start": "1028080",
    "end": "1032370"
  },
  {
    "text": "all transforms and pre publishes the",
    "start": "1032370",
    "end": "1034500"
  },
  {
    "text": "data using an IOT action to the Amazon",
    "start": "1034500",
    "end": "1037140"
  },
  {
    "text": "SNS topic now let's focus in on the",
    "start": "1037140",
    "end": "1040620"
  },
  {
    "text": "processing section the IOT action sends",
    "start": "1040620",
    "end": "1044280"
  },
  {
    "text": "the sensor records to Amazon SNS we can",
    "start": "1044280",
    "end": "1048960"
  },
  {
    "text": "see SNS is the bridge between the",
    "start": "1048960",
    "end": "1051420"
  },
  {
    "text": "acquisition and processing sections",
    "start": "1051420",
    "end": "1053460"
  },
  {
    "text": "where the lambda function is subscribed",
    "start": "1053460",
    "end": "1055500"
  },
  {
    "text": "to the SNS topic now let's look at the",
    "start": "1055500",
    "end": "1058890"
  },
  {
    "text": "IOT rule setup here's the topic",
    "start": "1058890",
    "end": "1060900"
  },
  {
    "text": "structure as you can see it's made up of",
    "start": "1060900",
    "end": "1063420"
  },
  {
    "text": "six segments consisting of a prefix",
    "start": "1063420",
    "end": "1065670"
  },
  {
    "text": "state city station ID sensor type and",
    "start": "1065670",
    "end": "1069300"
  },
  {
    "text": "the sensor ID here is the sequal like",
    "start": "1069300",
    "end": "1072990"
  },
  {
    "text": "query that transforms the incoming topic",
    "start": "1072990",
    "end": "1075690"
  },
  {
    "text": "segments and payload into an output",
    "start": "1075690",
    "end": "1077429"
  },
  {
    "text": "payload as you can see we've hit we have",
    "start": "1077429",
    "end": "1080910"
  },
  {
    "text": "extracted the sensor ID station ID and",
    "start": "1080910",
    "end": "1083460"
  },
  {
    "text": "sensor type using the topic function",
    "start": "1083460",
    "end": "1085860"
  },
  {
    "text": "from the corresponding topic segments",
    "start": "1085860",
    "end": "1087780"
  },
  {
    "text": "we've also extracted the sensor",
    "start": "1087780",
    "end": "1090059"
  },
  {
    "text": "timestamp and sensor values from the",
    "start": "1090059",
    "end": "1092130"
  },
  {
    "text": "payload and typecasted these values",
    "start": "1092130",
    "end": "1094309"
  },
  {
    "text": "here's the incoming payload now let's",
    "start": "1094309",
    "end": "1098309"
  },
  {
    "text": "compare it with the transformed and",
    "start": "1098309",
    "end": "1100260"
  },
  {
    "text": "enriched payload containing the",
    "start": "1100260",
    "end": "1101880"
  },
  {
    "text": "additional sensor metadata",
    "start": "1101880",
    "end": "1104900"
  },
  {
    "text": "we've leveraged an SNS topic so we can",
    "start": "1104900",
    "end": "1107760"
  },
  {
    "text": "fan out the data SNS also gives us the",
    "start": "1107760",
    "end": "1110790"
  },
  {
    "text": "ability to invoke multiple lambda",
    "start": "1110790",
    "end": "1112890"
  },
  {
    "text": "functions to process the data for other",
    "start": "1112890",
    "end": "1115320"
  },
  {
    "text": "use cases or send the data across to",
    "start": "1115320",
    "end": "1117600"
  },
  {
    "text": "another AWS account or third party now",
    "start": "1117600",
    "end": "1121140"
  },
  {
    "text": "let's take a look at the lambda function",
    "start": "1121140",
    "end": "1124350"
  },
  {
    "text": "used for processing the data the IOT",
    "start": "1124350",
    "end": "1128160"
  },
  {
    "text": "loader function injects the sensor",
    "start": "1128160",
    "end": "1129809"
  },
  {
    "text": "records into a Kinesis stream and fire",
    "start": "1129809",
    "end": "1131760"
  },
  {
    "text": "hose delivery stream the RDS loader uses",
    "start": "1131760",
    "end": "1135120"
  },
  {
    "text": "a lambda trigger that pulls the Kinesis",
    "start": "1135120",
    "end": "1137040"
  },
  {
    "text": "stream and processes the available",
    "start": "1137040",
    "end": "1139740"
  },
  {
    "text": "records the function sources sensor",
    "start": "1139740",
    "end": "1142950"
  },
  {
    "text": "records from the Kinesis streams that",
    "start": "1142950",
    "end": "1145080"
  },
  {
    "text": "contain the raw sensor data and the",
    "start": "1145080",
    "end": "1147240"
  },
  {
    "text": "summarized sensor data the function then",
    "start": "1147240",
    "end": "1149820"
  },
  {
    "text": "inserts these records into the Aurora",
    "start": "1149820",
    "end": "1151740"
  },
  {
    "text": "database now let's review where the",
    "start": "1151740",
    "end": "1154770"
  },
  {
    "text": "Kinesis family of services is being used",
    "start": "1154770",
    "end": "1156990"
  },
  {
    "text": "the raw sensor data from the IOT device",
    "start": "1156990",
    "end": "1160080"
  },
  {
    "text": "gateway is being loaded into a Kinesis",
    "start": "1160080",
    "end": "1162179"
  },
  {
    "text": "stream for real-time processing raw",
    "start": "1162179",
    "end": "1164400"
  },
  {
    "text": "sensor data is also being low",
    "start": "1164400",
    "end": "1166250"
  },
  {
    "text": "into a Kinesis firehose delivery stream",
    "start": "1166250",
    "end": "1168440"
  },
  {
    "text": "that is batch loading data into s3 and",
    "start": "1168440",
    "end": "1170960"
  },
  {
    "text": "redshift every minute the firehose",
    "start": "1170960",
    "end": "1173570"
  },
  {
    "text": "delivery stream is the input stream for",
    "start": "1173570",
    "end": "1175880"
  },
  {
    "text": "the Kinesis analytics application the",
    "start": "1175880",
    "end": "1178430"
  },
  {
    "text": "Kinesis analytics applications",
    "start": "1178430",
    "end": "1180050"
  },
  {
    "text": "summarized sensor data for each sensor",
    "start": "1180050",
    "end": "1182390"
  },
  {
    "text": "where the new record is put into an",
    "start": "1182390",
    "end": "1184670"
  },
  {
    "text": "output Kinesis stream so let's quickly",
    "start": "1184670",
    "end": "1187700"
  },
  {
    "text": "recap since the launch of Amazon Kinesis",
    "start": "1187700",
    "end": "1190910"
  },
  {
    "text": "in 2013 the ecosystem evolved and we",
    "start": "1190910",
    "end": "1194840"
  },
  {
    "text": "introduced Kinesis fire hose and Kinesis",
    "start": "1194840",
    "end": "1197030"
  },
  {
    "text": "analytics so what are the",
    "start": "1197030",
    "end": "1199460"
  },
  {
    "text": "characteristics of each service a",
    "start": "1199460",
    "end": "1201400"
  },
  {
    "text": "Kinesis stream is targeted to low",
    "start": "1201400",
    "end": "1203930"
  },
  {
    "text": "latency streaming and ingestion at scale",
    "start": "1203930",
    "end": "1206950"
  },
  {
    "text": "Kinesis streams can go from tens of",
    "start": "1206950",
    "end": "1209210"
  },
  {
    "text": "messages per second to hundreds of",
    "start": "1209210",
    "end": "1211040"
  },
  {
    "text": "thousands Kinesis analytics is for",
    "start": "1211040",
    "end": "1213980"
  },
  {
    "text": "streaming analytics in near real-time",
    "start": "1213980",
    "end": "1216380"
  },
  {
    "text": "and automatically scales compute",
    "start": "1216380",
    "end": "1218840"
  },
  {
    "text": "resources based on the incoming message",
    "start": "1218840",
    "end": "1220820"
  },
  {
    "text": "rate Kinesis firehose is for batch date",
    "start": "1220820",
    "end": "1224540"
  },
  {
    "text": "of delivery and is buffered based on",
    "start": "1224540",
    "end": "1226760"
  },
  {
    "text": "time and size and then is batch loaded",
    "start": "1226760",
    "end": "1228890"
  },
  {
    "text": "into supported data stores now let's",
    "start": "1228890",
    "end": "1231860"
  },
  {
    "text": "contrast Kinesis firehose vs. Kinesis",
    "start": "1231860",
    "end": "1234290"
  },
  {
    "text": "streams Ganesa streams is for the use",
    "start": "1234290",
    "end": "1236840"
  },
  {
    "text": "case for custom processing per incoming",
    "start": "1236840",
    "end": "1239210"
  },
  {
    "text": "record and can be delivered and",
    "start": "1239210",
    "end": "1241070"
  },
  {
    "text": "processed with sub one-second latency a",
    "start": "1241070",
    "end": "1243620"
  },
  {
    "text": "stream can be processed with ec2 lambda",
    "start": "1243620",
    "end": "1246800"
  },
  {
    "text": "or on-premises compute using custom",
    "start": "1246800",
    "end": "1249350"
  },
  {
    "text": "applications Kinesis firehose is for the",
    "start": "1249350",
    "end": "1252260"
  },
  {
    "text": "use case that require zero",
    "start": "1252260",
    "end": "1253990"
  },
  {
    "text": "administration where a data latency of",
    "start": "1253990",
    "end": "1256520"
  },
  {
    "text": "60 seconds or higher can be tolerated",
    "start": "1256520",
    "end": "1259160"
  },
  {
    "text": "the data is batch loaded natively into",
    "start": "1259160",
    "end": "1261470"
  },
  {
    "text": "s3 redshift and or Amazon elasticsearch",
    "start": "1261470",
    "end": "1265510"
  },
  {
    "text": "building a real-time application with",
    "start": "1265510",
    "end": "1268220"
  },
  {
    "text": "Kinesis analytics is easy there are",
    "start": "1268220",
    "end": "1270770"
  },
  {
    "text": "three major components of a streaming",
    "start": "1270770",
    "end": "1272690"
  },
  {
    "text": "application you can connect an input",
    "start": "1272690",
    "end": "1274610"
  },
  {
    "text": "stream then write sequel code to process",
    "start": "1274610",
    "end": "1277130"
  },
  {
    "text": "the incoming data and finally connect an",
    "start": "1277130",
    "end": "1279290"
  },
  {
    "text": "output stream enabling the results to be",
    "start": "1279290",
    "end": "1281390"
  },
  {
    "text": "continually delivered inputs include",
    "start": "1281390",
    "end": "1284690"
  },
  {
    "text": "Kinesis streams and firehose standard",
    "start": "1284690",
    "end": "1287330"
  },
  {
    "text": "sequel code consists of one or more",
    "start": "1287330",
    "end": "1288980"
  },
  {
    "text": "sequel queries which make up the",
    "start": "1288980",
    "end": "1290870"
  },
  {
    "text": "application as we've already seen in the",
    "start": "1290870",
    "end": "1294920"
  },
  {
    "text": "processing architecture the input stream",
    "start": "1294920",
    "end": "1296900"
  },
  {
    "text": "to the Kinesis analytics application",
    "start": "1296900",
    "end": "1298880"
  },
  {
    "text": "will be the firehose",
    "start": "1298880",
    "end": "1300080"
  },
  {
    "text": "every stream the sequel will average",
    "start": "1300080",
    "end": "1302779"
  },
  {
    "text": "count and calculate the minimum and",
    "start": "1302779",
    "end": "1304549"
  },
  {
    "text": "maximum temperature for each sensor over",
    "start": "1304549",
    "end": "1306590"
  },
  {
    "text": "a one-minute window generate a new",
    "start": "1306590",
    "end": "1308990"
  },
  {
    "text": "record at the end of every minute and",
    "start": "1308990",
    "end": "1310789"
  },
  {
    "text": "emitted to the output stream going back",
    "start": "1310789",
    "end": "1314659"
  },
  {
    "text": "to the global weather view application",
    "start": "1314659",
    "end": "1316429"
  },
  {
    "text": "where did we obtain all the data for",
    "start": "1316429",
    "end": "1319940"
  },
  {
    "text": "each sensor the current sensor value was",
    "start": "1319940",
    "end": "1321980"
  },
  {
    "text": "obtained from the IOT gateway using mqtt",
    "start": "1321980",
    "end": "1324919"
  },
  {
    "text": "over a WebSockets connection the average",
    "start": "1324919",
    "end": "1327799"
  },
  {
    "text": "minimum and maximum sensor values were",
    "start": "1327799",
    "end": "1330860"
  },
  {
    "text": "queried via API gateway the short-term",
    "start": "1330860",
    "end": "1334039"
  },
  {
    "text": "trending graph was obtained via the IOT",
    "start": "1334039",
    "end": "1336980"
  },
  {
    "text": "gateway using MQTT over a WebSockets",
    "start": "1336980",
    "end": "1339860"
  },
  {
    "text": "connection sensor performance metrics",
    "start": "1339860",
    "end": "1342590"
  },
  {
    "text": "and the long-term trending graph data",
    "start": "1342590",
    "end": "1344450"
  },
  {
    "text": "was obtained via API gateway to",
    "start": "1344450",
    "end": "1347809"
  },
  {
    "text": "understand how the connexxus application",
    "start": "1347809",
    "end": "1349880"
  },
  {
    "text": "works let's take a closer look at the",
    "start": "1349880",
    "end": "1352159"
  },
  {
    "text": "sequel query first we create the in",
    "start": "1352159",
    "end": "1354590"
  },
  {
    "text": "application stream with all the columns",
    "start": "1354590",
    "end": "1356779"
  },
  {
    "text": "then we insert data into the output",
    "start": "1356779",
    "end": "1359659"
  },
  {
    "text": "stream using a pump that selects the",
    "start": "1359659",
    "end": "1361639"
  },
  {
    "text": "records from the input stream the",
    "start": "1361639",
    "end": "1363950"
  },
  {
    "text": "console will show the results of the",
    "start": "1363950",
    "end": "1366139"
  },
  {
    "text": "query being delivered in real time",
    "start": "1366139",
    "end": "1369070"
  },
  {
    "text": "here's an example of an emitted payload",
    "start": "1369070",
    "end": "1371899"
  },
  {
    "text": "from the reinvent bootcamp bold",
    "start": "1371899",
    "end": "1374090"
  },
  {
    "text": "represents the values that were",
    "start": "1374090",
    "end": "1375590"
  },
  {
    "text": "generated by the Kinesis analytics",
    "start": "1375590",
    "end": "1377389"
  },
  {
    "text": "application now let's look at the data",
    "start": "1377389",
    "end": "1381350"
  },
  {
    "text": "stores we're using Amazon Arora to store",
    "start": "1381350",
    "end": "1384590"
  },
  {
    "text": "raw deduplicated and summarize data for",
    "start": "1384590",
    "end": "1387679"
  },
  {
    "text": "historical querying via API gateway for",
    "start": "1387679",
    "end": "1390889"
  },
  {
    "text": "the use case in this architecture",
    "start": "1390889",
    "end": "1392480"
  },
  {
    "text": "imagine scaling from thousands to",
    "start": "1392480",
    "end": "1394700"
  },
  {
    "text": "millions of API requests per minute in",
    "start": "1394700",
    "end": "1396799"
  },
  {
    "text": "an API level caching has very little",
    "start": "1396799",
    "end": "1399769"
  },
  {
    "text": "benefit when disparate historical",
    "start": "1399769",
    "end": "1401840"
  },
  {
    "text": "weather data is being queried to meet",
    "start": "1401840",
    "end": "1404330"
  },
  {
    "text": "this specific data access requirement",
    "start": "1404330",
    "end": "1406370"
  },
  {
    "text": "Aurora is a very cost-effective solution",
    "start": "1406370",
    "end": "1408799"
  },
  {
    "text": "as it allows reads to be scaled by",
    "start": "1408799",
    "end": "1410899"
  },
  {
    "text": "adding additional read replicas the read",
    "start": "1410899",
    "end": "1413510"
  },
  {
    "text": "replicas can be accessed through a",
    "start": "1413510",
    "end": "1414919"
  },
  {
    "text": "single reader endpoint which is fully",
    "start": "1414919",
    "end": "1416630"
  },
  {
    "text": "managed and updated dynamically by",
    "start": "1416630",
    "end": "1418789"
  },
  {
    "text": "Amazon Aurora simplify simplify",
    "start": "1418789",
    "end": "1421880"
  },
  {
    "text": "application configuration for reporting",
    "start": "1421880",
    "end": "1424880"
  },
  {
    "text": "and analytics purposes and to query",
    "start": "1424880",
    "end": "1427250"
  },
  {
    "text": "large volumes of data fast we're using",
    "start": "1427250",
    "end": "1429200"
  },
  {
    "text": "Amazon redshift as an example we who",
    "start": "1429200",
    "end": "1431840"
  },
  {
    "text": "correlate weather data against",
    "start": "1431840",
    "end": "1433490"
  },
  {
    "text": "historical retail shopping trends",
    "start": "1433490",
    "end": "1436059"
  },
  {
    "text": "redshift being a cost effective column a",
    "start": "1436059",
    "end": "1438470"
  },
  {
    "text": "data warehouse solution provides the",
    "start": "1438470",
    "end": "1440330"
  },
  {
    "text": "capability to query large amounts of",
    "start": "1440330",
    "end": "1442429"
  },
  {
    "text": "data fast the data can be queried using",
    "start": "1442429",
    "end": "1445190"
  },
  {
    "text": "native postgrads sequel or analytics and",
    "start": "1445190",
    "end": "1448160"
  },
  {
    "text": "bi tools to explore and expose data",
    "start": "1448160",
    "end": "1450290"
  },
  {
    "text": "trends and feed to machine learning to",
    "start": "1450290",
    "end": "1452660"
  },
  {
    "text": "build models for predictive analytics so",
    "start": "1452660",
    "end": "1455150"
  },
  {
    "text": "putting all the storage solutions",
    "start": "1455150",
    "end": "1457429"
  },
  {
    "text": "together we've created a data lake s3 is",
    "start": "1457429",
    "end": "1460460"
  },
  {
    "text": "fully managed low cost secure and the",
    "start": "1460460",
    "end": "1462920"
  },
  {
    "text": "foundation to the data Lake where we",
    "start": "1462920",
    "end": "1465380"
  },
  {
    "text": "store raw sensor data for warm access as",
    "start": "1465380",
    "end": "1468920"
  },
  {
    "text": "the data ages we can set policies to",
    "start": "1468920",
    "end": "1471920"
  },
  {
    "text": "life cycle to infrequently access the s3",
    "start": "1471920",
    "end": "1474440"
  },
  {
    "text": "Glacia or finally delete the data s3 is",
    "start": "1474440",
    "end": "1477770"
  },
  {
    "text": "natively supported by frameworks such as",
    "start": "1477770",
    "end": "1479750"
  },
  {
    "text": "SPARC hive and presto so we can use the",
    "start": "1479750",
    "end": "1482720"
  },
  {
    "text": "elastic MapReduce service to easily load",
    "start": "1482720",
    "end": "1484880"
  },
  {
    "text": "and query the data allowing us to find",
    "start": "1484880",
    "end": "1487400"
  },
  {
    "text": "answers to questions we didn't initially",
    "start": "1487400",
    "end": "1489440"
  },
  {
    "text": "know to ask when we first acquired the",
    "start": "1489440",
    "end": "1491150"
  },
  {
    "text": "data redshift is optimized for data",
    "start": "1491150",
    "end": "1494570"
  },
  {
    "text": "warehousing and analytics allowing of",
    "start": "1494570",
    "end": "1496850"
  },
  {
    "text": "large amounts of data fast we can easily",
    "start": "1496850",
    "end": "1499760"
  },
  {
    "text": "increase performance by scaling redshift",
    "start": "1499760",
    "end": "1501890"
  },
  {
    "text": "using an API called Aurora is a cost",
    "start": "1501890",
    "end": "1505640"
  },
  {
    "text": "effective solution for querying data at",
    "start": "1505640",
    "end": "1507620"
  },
  {
    "text": "scale the underlying storage is scalable",
    "start": "1507620",
    "end": "1510530"
  },
  {
    "text": "fault tolerant and is leveraged by the",
    "start": "1510530",
    "end": "1512570"
  },
  {
    "text": "Aurora database engine to handle high",
    "start": "1512570",
    "end": "1514790"
  },
  {
    "text": "volume high throughput queries at scale",
    "start": "1514790",
    "end": "1517070"
  },
  {
    "text": "so IOT with real-time analytics provides",
    "start": "1517070",
    "end": "1521450"
  },
  {
    "text": "meaningful information not just data",
    "start": "1521450",
    "end": "1523490"
  },
  {
    "text": "coupled with serverless components we",
    "start": "1523490",
    "end": "1526580"
  },
  {
    "text": "can scale without intervention or",
    "start": "1526580",
    "end": "1528290"
  },
  {
    "text": "additional operational cost this removes",
    "start": "1528290",
    "end": "1531170"
  },
  {
    "text": "management and scaling overhead to help",
    "start": "1531170",
    "end": "1533210"
  },
  {
    "text": "accelerate innovation well that's it for",
    "start": "1533210",
    "end": "1535820"
  },
  {
    "text": "this session we hope you found it",
    "start": "1535820",
    "end": "1537500"
  },
  {
    "text": "interesting do provide us with your",
    "start": "1537500",
    "end": "1539870"
  },
  {
    "text": "feedback and let us know how we can",
    "start": "1539870",
    "end": "1541940"
  },
  {
    "text": "improve the event experience for you in",
    "start": "1541940",
    "end": "1543890"
  },
  {
    "text": "the future to gain more confidence in",
    "start": "1543890",
    "end": "1546290"
  },
  {
    "text": "hands-on experience with AWS",
    "start": "1546290",
    "end": "1548150"
  },
  {
    "text": "watch our instructional videos and",
    "start": "1548150",
    "end": "1550130"
  },
  {
    "text": "explore the self-paced labs attend our",
    "start": "1550130",
    "end": "1553309"
  },
  {
    "text": "instructor-led classes with qualified",
    "start": "1553309",
    "end": "1555350"
  },
  {
    "text": "AWS instructors and learn how to design",
    "start": "1555350",
    "end": "1557750"
  },
  {
    "text": "deploy and operate highly available",
    "start": "1557750",
    "end": "1560320"
  },
  {
    "text": "cost-effective and secure applications",
    "start": "1560320",
    "end": "1562669"
  },
  {
    "text": "on AWS and then validate your technical",
    "start": "1562669",
    "end": "1566240"
  },
  {
    "text": "expertise",
    "start": "1566240",
    "end": "1567020"
  },
  {
    "text": "with AWS and use practice exams to help",
    "start": "1567020",
    "end": "1569810"
  },
  {
    "text": "you prepare for AWS certification",
    "start": "1569810",
    "end": "1572830"
  },
  {
    "text": "finally I'd like to thank you for",
    "start": "1572830",
    "end": "1575240"
  },
  {
    "text": "attending today and sticking it out",
    "start": "1575240",
    "end": "1577250"
  },
  {
    "text": "until the very end of the presentation I",
    "start": "1577250",
    "end": "1579380"
  },
  {
    "text": "also want to wish you good luck in",
    "start": "1579380",
    "end": "1581510"
  },
  {
    "text": "leveraging serverless data processing on",
    "start": "1581510",
    "end": "1583700"
  },
  {
    "text": "AWS to simplify scaling and operating",
    "start": "1583700",
    "end": "1587060"
  },
  {
    "text": "your data processing solutions thank you",
    "start": "1587060",
    "end": "1591520"
  }
]