[
  {
    "text": "hi everyone my name is or I'm a senior pm on the lamba team and I'm here today",
    "start": "1240",
    "end": "7040"
  },
  {
    "text": "to talk to you about application life cycle Management in a seress world since lamba jump started the",
    "start": "7040",
    "end": "14719"
  },
  {
    "text": "seress space about a year and eight months ago we've seen our customers build many different types of serverless",
    "start": "14719",
    "end": "21240"
  },
  {
    "text": "applications with new use cases emerging literally every day and with more and",
    "start": "21240",
    "end": "26519"
  },
  {
    "text": "more customers both migrating to servus and benefiting from it if you came to",
    "start": "26519",
    "end": "32840"
  },
  {
    "text": "Tim Wagner's State of the Union Address you heard examples like Vivo who built their data and content",
    "start": "32840",
    "end": "40280"
  },
  {
    "text": "platform using Lambda and can now scale up seamlessly to adx their regular",
    "start": "40280",
    "end": "45399"
  },
  {
    "text": "traffic or finra who process half a trillion stock trades daily on Lambda",
    "start": "45399",
    "end": "53559"
  },
  {
    "text": "now we and the Lambda team uh as the serous space grows we",
    "start": "53559",
    "end": "59280"
  },
  {
    "text": "continue to to collect feedback and listen to the challenges that our customers are",
    "start": "59280",
    "end": "64320"
  },
  {
    "text": "facing and specifically in the context of Alm and tooling the main challenges",
    "start": "64320",
    "end": "70159"
  },
  {
    "text": "that our customers are facing are are the ones that you see on the screens behind",
    "start": "70159",
    "end": "75320"
  },
  {
    "text": "me first how do I Define a serverless application one that is basically built",
    "start": "75320",
    "end": "82439"
  },
  {
    "text": "out of resources how do I construct those resources as one application as",
    "start": "82439",
    "end": "89119"
  },
  {
    "text": "one unit then how do I deploy that application",
    "start": "89119",
    "end": "95159"
  },
  {
    "text": "and not only deploy it but deploy it efficiently and deploy it consistently",
    "start": "95159",
    "end": "101320"
  },
  {
    "text": "across either environments or accounts and after I know how to deploy",
    "start": "101320",
    "end": "107119"
  },
  {
    "text": "my application how do I automate that process how do I construct a release",
    "start": "107119",
    "end": "113439"
  },
  {
    "text": "process that builds tests and deploys my application to multiple environments",
    "start": "113439",
    "end": "119600"
  },
  {
    "text": "with every code change and lastly once my application is",
    "start": "119600",
    "end": "124719"
  },
  {
    "text": "up and running how do I monitor it how do I troubles it and how do I quickly",
    "start": "124719",
    "end": "131640"
  },
  {
    "text": "get down or identify the root cause of the",
    "start": "131640",
    "end": "136879"
  },
  {
    "text": "problem now before we jump into Alm and we have a lot to cover in this session",
    "start": "136879",
    "end": "142319"
  },
  {
    "text": "let's quickly reiterate what the serverless application is so it almost",
    "start": "142319",
    "end": "147440"
  },
  {
    "text": "always starts with an event source that Event Source can be an HTTP call a put",
    "start": "147440",
    "end": "153640"
  },
  {
    "text": "object into an S3 bucket or any other of the Lambda supported event sources out",
    "start": "153640",
    "end": "159040"
  },
  {
    "text": "there that Event Source then triggers your Lambda function which could be",
    "start": "159040",
    "end": "164319"
  },
  {
    "text": "written in node.js Python Java or the newly announced",
    "start": "164319",
    "end": "169959"
  },
  {
    "text": "C and that function is running your code right so it can do whatever it is you'd like it",
    "start": "169959",
    "end": "176640"
  },
  {
    "text": "to do for example return a result or call a downstream service to continue",
    "start": "176640",
    "end": "183519"
  },
  {
    "text": "processing or write metadata into a database now how does Alm for an app",
    "start": "183519",
    "end": "189799"
  },
  {
    "text": "like this look like where well it looks pretty similar to life the life cycle of",
    "start": "189799",
    "end": "196920"
  },
  {
    "text": "any other application that you would write or manage you would start by authoring your Lambda function you would",
    "start": "196920",
    "end": "203640"
  },
  {
    "text": "then have to build your deployment package which is a ZIP file that contains your code and any dependencies",
    "start": "203640",
    "end": "210680"
  },
  {
    "text": "that your code relies on you can then choose to locally test your function before deploying it to",
    "start": "210680",
    "end": "217360"
  },
  {
    "text": "Lambda now we have a bunch of tools that you could use to do this today for example the Lambda console where you",
    "start": "217360",
    "end": "223519"
  },
  {
    "text": "could uh use the inline Editor to write your function then deploy and test it",
    "start": "223519",
    "end": "229799"
  },
  {
    "text": "you could use visual studio for C or node or eclipse for Java um to author",
    "start": "229799",
    "end": "236959"
  },
  {
    "text": "your function locally test it the deploy it and then even run it in the cloud",
    "start": "236959",
    "end": "242480"
  },
  {
    "text": "from your ID or you could go the third party route",
    "start": "242480",
    "end": "247840"
  },
  {
    "text": "and choose any use any text editor such as Sublime Text or Adam and then then",
    "start": "247840",
    "end": "252879"
  },
  {
    "text": "use one of our ecosystem Partners such as surs.com or others to simplify the",
    "start": "252879",
    "end": "258799"
  },
  {
    "text": "subsequent steps of your release process",
    "start": "258799",
    "end": "265040"
  },
  {
    "text": "however as the complexity of your application grows some questions become",
    "start": "265040",
    "end": "271160"
  },
  {
    "text": "increasingly important for example what if I have a large",
    "start": "271160",
    "end": "278520"
  },
  {
    "text": "application that contains dozens of microservices and hundreds of AWS",
    "start": "278520",
    "end": "284960"
  },
  {
    "text": "resources how do I Define it how do I manage that as one unit as an",
    "start": "284960",
    "end": "291199"
  },
  {
    "text": "application or what if I have a large Dev team that collaborates how do I keep my definition",
    "start": "291199",
    "end": "298440"
  },
  {
    "text": "in one centralized place place where my team can efficiently collaborate on",
    "start": "298440",
    "end": "303919"
  },
  {
    "text": "it well the solution I'm going to offer to you today is to use Sam which is",
    "start": "303919",
    "end": "309759"
  },
  {
    "text": "powered by cloud formation and before we jump into Sam let's start with a brief overview of",
    "start": "309759",
    "end": "316800"
  },
  {
    "text": "what cloud formation is for those of you who are not familiar with it so cloud formation is essentially a service that",
    "start": "316800",
    "end": "324120"
  },
  {
    "text": "allows you to provision and then manage a collection of related resources",
    "start": "324120",
    "end": "330160"
  },
  {
    "text": "now in cloud formation terms that collection of resources is referred to as a stack and a stack equals your",
    "start": "330160",
    "end": "337080"
  },
  {
    "text": "application and one of the ways you could create a stack is to write a template in either a Json or a yaml",
    "start": "337080",
    "end": "344400"
  },
  {
    "text": "cloud formation can then take that template and turn it into uh resources provisioned in your",
    "start": "344400",
    "end": "352120"
  },
  {
    "text": "account now Sam is a new specification that extends cloud",
    "start": "352120",
    "end": "358600"
  },
  {
    "text": "formation and is optimized for serverless it allows you to Define",
    "start": "358600",
    "end": "363960"
  },
  {
    "text": "commonly used resources and serverless applications in a simpler and cleaner way specifically Lambda functions API",
    "start": "363960",
    "end": "372599"
  },
  {
    "text": "Gateway apis and Dynamo DB tables and it supports anything cloud",
    "start": "372599",
    "end": "378560"
  },
  {
    "text": "formation supports so under the covers it's essentially a cloud formation template and any cloud formation",
    "start": "378560",
    "end": "385039"
  },
  {
    "text": "resource you define within it is just going to work let's dig a bit deeper into how Sam or a",
    "start": "385039",
    "end": "393919"
  },
  {
    "text": "Sam template looks like so the first thing I'm doing here is defining a serverless function or a",
    "start": "393919",
    "end": "401000"
  },
  {
    "text": "Lambda function I I then have to supply it with a code URI and a code URI is a URI that",
    "start": "401000",
    "end": "409639"
  },
  {
    "text": "points to an S3 object which is supposed to be your deployment package for your Lambda",
    "start": "409639",
    "end": "415400"
  },
  {
    "text": "function one cool thing to note here is that I can Define manage SP policies and",
    "start": "415400",
    "end": "420960"
  },
  {
    "text": "when cloud formation generates my functions execution role those managed policies are just going to be added to",
    "start": "420960",
    "end": "426319"
  },
  {
    "text": "that execution role in this next section I'm defining",
    "start": "426319",
    "end": "432319"
  },
  {
    "text": "my event source which in this case is an API I'm defining my API the path and",
    "start": "432319",
    "end": "437720"
  },
  {
    "text": "Method and the cool thing to note here is that I don't have to explicitly Define an API resource to declare this",
    "start": "437720",
    "end": "446639"
  },
  {
    "text": "API by defining it as my Event Source cloud formation would know to generate the necessary API for me in API",
    "start": "446639",
    "end": "454919"
  },
  {
    "text": "Gateway and lastly I'm defining my Dynamo DB table and by use Simple table",
    "start": "454919",
    "end": "461400"
  },
  {
    "text": "is essentially a shortcut that allows you to define a single attribute primary key Dynamo DB table with provision",
    "start": "461400",
    "end": "468520"
  },
  {
    "text": "throughput of five now the key piece that makes all this possible is the transform the",
    "start": "468520",
    "end": "476479"
  },
  {
    "text": "transform is a new cloud formation capability that basically allows cloud formation to",
    "start": "476479",
    "end": "485000"
  },
  {
    "text": "turn this template into the regular cloud formation template that cloud formation knows how to interact with and",
    "start": "485000",
    "end": "491479"
  },
  {
    "text": "just in case you still aren't convinced that Sam was necessary this is what it's turning into so this is the CL formation",
    "start": "491479",
    "end": "498440"
  },
  {
    "text": "template you would need to write to Define this exact same application that you just saw one slide",
    "start": "498440",
    "end": "505639"
  },
  {
    "text": "ago so I think think we can check off the",
    "start": "505639",
    "end": "511639"
  },
  {
    "text": "first item of the list we can use Sam to Define our application to write a",
    "start": "511639",
    "end": "517080"
  },
  {
    "text": "template that defines all the resources within our serverless",
    "start": "517080",
    "end": "522159"
  },
  {
    "text": "application now how do we take that and deploy that turn a template into",
    "start": "522159",
    "end": "528320"
  },
  {
    "text": "resources provisioned in my account the easiest way to do that is to",
    "start": "528320",
    "end": "534240"
  },
  {
    "text": "use two new cloud formation commands now before we jump into the commands let's think about what we had",
    "start": "534240",
    "end": "540800"
  },
  {
    "text": "to do to deploy we had to annotate that code URI property right so we have we",
    "start": "540800",
    "end": "547519"
  },
  {
    "text": "would have to start by creating our deployment package which essentially",
    "start": "547519",
    "end": "552560"
  },
  {
    "text": "means zipping up our code we would then have to upload that deployment package",
    "start": "552560",
    "end": "557720"
  },
  {
    "text": "to S3 and then annotate that code U property to point to that deployment",
    "start": "557720",
    "end": "563560"
  },
  {
    "text": "package now if we had 100 functions within our template we would have to do",
    "start": "563560",
    "end": "568959"
  },
  {
    "text": "that 100 times so luckily for us the package command basically does all that",
    "start": "568959",
    "end": "575079"
  },
  {
    "text": "for us it takes the template uploads a deployment package to S3 and then",
    "start": "575079",
    "end": "581680"
  },
  {
    "text": "annotates all the code URI properties within that template for each and every function that I Define in",
    "start": "581680",
    "end": "588040"
  },
  {
    "text": "there after it spits out my new template with the code URI",
    "start": "588040",
    "end": "593880"
  },
  {
    "text": "properties then I can call the deploy command and the deploy command wraps two",
    "start": "593880",
    "end": "599200"
  },
  {
    "text": "API calls to cloud formation the first one is create change",
    "start": "599200",
    "end": "604560"
  },
  {
    "text": "set which unsurprisingly creates a change set and what a change set is is",
    "start": "604560",
    "end": "610720"
  },
  {
    "text": "it's the Delta between your template and the resources provisioned in your account so if I'm creating a new stack",
    "start": "610720",
    "end": "619200"
  },
  {
    "text": "of resources then obviously the change set is going to include everything that was in my template but as we continue to",
    "start": "619200",
    "end": "626200"
  },
  {
    "text": "update our stack then it's only going to contain the delta it then cause execute change set which",
    "start": "626200",
    "end": "633160"
  },
  {
    "text": "essentially just applies the changes in the change set to my stack now let's do a quick demo of how",
    "start": "633160",
    "end": "641600"
  },
  {
    "text": "that actually looks",
    "start": "641600",
    "end": "644600"
  },
  {
    "text": "like okay so first of all one cool thing we launched with Sam was the ability to",
    "start": "648839",
    "end": "656760"
  },
  {
    "text": "export any blueprint as a Sam template so let's just take a look at a simple S3",
    "start": "656760",
    "end": "664040"
  },
  {
    "text": "template or blueprint can click on the right on the icon here to download",
    "start": "664040",
    "end": "670480"
  },
  {
    "text": "it and what I get is a ZIP file that contains two files my code and",
    "start": "673240",
    "end": "682240"
  },
  {
    "text": "my template and now the only thing I'd like to show you here or the maybe a couple",
    "start": "682240",
    "end": "687480"
  },
  {
    "text": "of things the first one is that I have an empty code URI property which I now need to fill and the second thing is as",
    "start": "687480",
    "end": "695399"
  },
  {
    "text": "I promised you before you can actually Define any cloud formation resource within the template",
    "start": "695399",
    "end": "701120"
  },
  {
    "text": "so along with my serverless resources I'm defining a bucket okay now how do I turn this into",
    "start": "701120",
    "end": "709639"
  },
  {
    "text": "resources in my account let me just navigate into that",
    "start": "709639",
    "end": "717959"
  },
  {
    "text": "folder and the First Command I need to call is",
    "start": "717959",
    "end": "723880"
  },
  {
    "text": "package now what I need to supply to this command is my template which is",
    "start": "723880",
    "end": "730399"
  },
  {
    "text": "called template. yo I need to provide it with an S3",
    "start": "730399",
    "end": "735600"
  },
  {
    "text": "bucket so it knows where to upload where to upload my deployment package to have a back a",
    "start": "735600",
    "end": "741519"
  },
  {
    "text": "bucket called Sam artifacts and lastly I need to provide it with a name for for",
    "start": "741519",
    "end": "749079"
  },
  {
    "text": "the output template the new template that it's going to generate for me with the code URI properties already filled",
    "start": "749079",
    "end": "756240"
  },
  {
    "text": "so let's call this output.",
    "start": "756240",
    "end": "760320"
  },
  {
    "text": "yo okay so as you can see I have a new yaml file called output and it's",
    "start": "763160",
    "end": "770680"
  },
  {
    "text": "identical to the template we saw before only now I have an annotated code URI property that points to a deployment",
    "start": "770680",
    "end": "777440"
  },
  {
    "text": "package in S3 and what this what package did was",
    "start": "777440",
    "end": "782720"
  },
  {
    "text": "essentially just zip up the folder now the next command I need to",
    "start": "782720",
    "end": "790360"
  },
  {
    "text": "call is deploy and what deploy gets is again a",
    "start": "790360",
    "end": "796040"
  },
  {
    "text": "template and we are now going to provide the new template that my package command generated for",
    "start": "796040",
    "end": "802240"
  },
  {
    "text": "me I need to provide it with a stack name let's call it my appc",
    "start": "802240",
    "end": "810760"
  },
  {
    "text": "ation and the last thing I need to provide it with is the ability to create",
    "start": "813240",
    "end": "819440"
  },
  {
    "text": "I IM roles since it has to generate my execution role my functions execution role for",
    "start": "819440",
    "end": "826040"
  },
  {
    "text": "me now while my chain set is being created and executed one thing I'd like",
    "start": "826040",
    "end": "831639"
  },
  {
    "text": "to note here is that it's there's a reason those two apis are separate so",
    "start": "831639",
    "end": "838040"
  },
  {
    "text": "the whole notion here is that you could actually call create chain set and then view the Delta view the changes that are",
    "start": "838040",
    "end": "844440"
  },
  {
    "text": "going to be applied to your stack before calling execute so if you'd like to use",
    "start": "844440",
    "end": "850480"
  },
  {
    "text": "that capability you could either call the two apis separately or you could call deploy and provide it with a",
    "start": "850480",
    "end": "857399"
  },
  {
    "text": "property that tells it to only call create chain set instead of create and then",
    "start": "857399",
    "end": "863279"
  },
  {
    "text": "execute now one more thing I'd like to show you",
    "start": "863279",
    "end": "869399"
  },
  {
    "text": "is a cool capability in the cloud formation console that is called a",
    "start": "869399",
    "end": "875639"
  },
  {
    "text": "designer the designer essentially allows you to view all the resources in your stack and the connections between",
    "start": "875639",
    "end": "883079"
  },
  {
    "text": "them let's see if my yeah my stack has been created and if I just check it I",
    "start": "883079",
    "end": "890759"
  },
  {
    "text": "can click on view template in",
    "start": "890759",
    "end": "894759"
  },
  {
    "text": "designer and this is how it would look",
    "start": "897680",
    "end": "902120"
  },
  {
    "text": "like so I can see my Lambda function this is my bucket that is going to invoke",
    "start": "902920",
    "end": "908360"
  },
  {
    "text": "it and then permission is necessary for my function to work so I have my execution role here and my resource",
    "start": "908360",
    "end": "915800"
  },
  {
    "text": "policy which actually lives on my function but allows my bucket to ex to",
    "start": "915800",
    "end": "921240"
  },
  {
    "text": "invoke the Lambda function oh sorry",
    "start": "921240",
    "end": "930600"
  },
  {
    "text": "okay so so far we've defined a template we've seen how",
    "start": "935079",
    "end": "942480"
  },
  {
    "text": "to define an application within a Stam template we then saw how to efficiently",
    "start": "942480",
    "end": "949199"
  },
  {
    "text": "deploy that template and consistently as well because each time you call package and command package and deploy the same",
    "start": "949199",
    "end": "956720"
  },
  {
    "text": "thing happens right it's the same template and the same deployment package that's that are then being deployed across your",
    "start": "956720",
    "end": "963920"
  },
  {
    "text": "environment or application so it's essentially the same stack being deployed over and over",
    "start": "963920",
    "end": "969279"
  },
  {
    "text": "again now I know that for most of you that's not enough you need to have a",
    "start": "969279",
    "end": "975199"
  },
  {
    "text": "way to automate that process you need to have a way to automatically be able to",
    "start": "975199",
    "end": "981199"
  },
  {
    "text": "build and test and deploy your application now the way we are going to",
    "start": "981199",
    "end": "986920"
  },
  {
    "text": "do that is with a service that's called code Pipeline and code pipeline is a",
    "start": "986920",
    "end": "993920"
  },
  {
    "text": "continuous delivery service for fast and reliable application updates it allows",
    "start": "993920",
    "end": "999319"
  },
  {
    "text": "you to build test and deploy your application with every code change based",
    "start": "999319",
    "end": "1004360"
  },
  {
    "text": "on stages that you define in your release process and it essentially acts as an",
    "start": "1004360",
    "end": "1013120"
  },
  {
    "text": "orchestrator so it links together a host of third party and AWS services to",
    "start": "1013120",
    "end": "1018680"
  },
  {
    "text": "automate your release process now this is how it looks like",
    "start": "1018680",
    "end": "1025839"
  },
  {
    "text": "and each rectangle you see there is actually a",
    "start": "1025839",
    "end": "1031360"
  },
  {
    "text": "stage and a stage is a logical representation of a stage in your release process such as build or",
    "start": "1031360",
    "end": "1039160"
  },
  {
    "text": "deploy within each stage you can Define one or more",
    "start": "1039160",
    "end": "1044438"
  },
  {
    "text": "actions and each action is an actual operation that's happening within that stage such as an actual build",
    "start": "1044439",
    "end": "1052160"
  },
  {
    "text": "action actions could be parallel so for example here um I have an a build action",
    "start": "1052160",
    "end": "1059600"
  },
  {
    "text": "and also an action to notify my developers that a build has had",
    "start": "1059600",
    "end": "1064640"
  },
  {
    "text": "started or you could have sequential actions so in this example I have a build action and then a test action",
    "start": "1064640",
    "end": "1071640"
  },
  {
    "text": "within my build stage now after all actions have",
    "start": "1071640",
    "end": "1077880"
  },
  {
    "text": "completed successfully within a stage we have a transition to the next",
    "start": "1077880",
    "end": "1084600"
  },
  {
    "text": "stage so let's see how a pipeline looks like but actually before we can see how",
    "start": "1084840",
    "end": "1091360"
  },
  {
    "text": "a pipeline looks like we need to talk about one more thing and that's code",
    "start": "1091360",
    "end": "1097080"
  },
  {
    "text": "build code build is a new service that AWS announced today which is essentially",
    "start": "1097080",
    "end": "1104360"
  },
  {
    "text": "a service that allows you to build and test your application in the cloud",
    "start": "1104360",
    "end": "1109720"
  },
  {
    "text": "it allows for concurrent builds so it can St scale continuously and for each",
    "start": "1109720",
    "end": "1115159"
  },
  {
    "text": "of those builds you can compile your code you can run local tests and you can",
    "start": "1115159",
    "end": "1122039"
  },
  {
    "text": "install packages now in a serverless context the really cool thing about code build is",
    "start": "1122039",
    "end": "1129440"
  },
  {
    "text": "that it comes with managed environments for Java Python and node and now what",
    "start": "1129440",
    "end": "1136400"
  },
  {
    "text": "that means is for for Java for example example that environment contains junits",
    "start": "1136400",
    "end": "1141480"
  },
  {
    "text": "you can actually run tests in within your build for node and python those",
    "start": "1141480",
    "end": "1147760"
  },
  {
    "text": "environments contain uh npm and pip so you can install packages continuously",
    "start": "1147760",
    "end": "1153919"
  },
  {
    "text": "and reliably as part of your automated release process instead of having having to zip it up or having to have it in as",
    "start": "1153919",
    "end": "1161640"
  },
  {
    "text": "part of your repository",
    "start": "1161640",
    "end": "1166679"
  },
  {
    "text": "now now let's take a look at a pipeline and this is the structure of the pipeline that I'm about to show",
    "start": "1166679",
    "end": "1172600"
  },
  {
    "text": "you I have my source code in GitHub that then triggers my build",
    "start": "1172600",
    "end": "1180559"
  },
  {
    "text": "action which is going to be my build stage which is going to be code build I then have a deployment stage to",
    "start": "1180559",
    "end": "1188280"
  },
  {
    "text": "my Beta environment which is going to be using cloud formation then I'm going to test my",
    "start": "1188280",
    "end": "1194320"
  },
  {
    "text": "application using a third party tool and if that test succeeds I'm going to",
    "start": "1194320",
    "end": "1200039"
  },
  {
    "text": "deploy to my next stage which I called prod so let's see how that looks",
    "start": "1200039",
    "end": "1209440"
  },
  {
    "text": "like so this is my application it's uh pretty simple Lambda",
    "start": "1217600",
    "end": "1223320"
  },
  {
    "text": "function triggered by an API Gateway API and here are my two stages so I have",
    "start": "1223320",
    "end": "1229520"
  },
  {
    "text": "my Beta stage and I have my prod stage now before we take a look at the",
    "start": "1229520",
    "end": "1237360"
  },
  {
    "text": "pipeline and what's more interesting is how my repository is structured so let's",
    "start": "1237360",
    "end": "1242480"
  },
  {
    "text": "start with my code what I'm doing here is I'm utilizing the",
    "start": "1242480",
    "end": "1249320"
  },
  {
    "text": "new the relatively new proxy integration type by API Gateway just return an HTML",
    "start": "1249320",
    "end": "1256600"
  },
  {
    "text": "body uh straight to API Gateway before we take a look at exactly what I'm doing",
    "start": "1256600",
    "end": "1262039"
  },
  {
    "text": "here let me just uncomment a piece of code",
    "start": "1262039",
    "end": "1266799"
  },
  {
    "text": "here and then just commit it and push it and that push is actually",
    "start": "1277000",
    "end": "1284880"
  },
  {
    "text": "going to trigger my pipeline now we're going to take a look at that in just a few a few",
    "start": "1284880",
    "end": "1291480"
  },
  {
    "text": "minutes now as you can see the first line that we saw up on my on the web page B",
    "start": "1291480",
    "end": "1299200"
  },
  {
    "text": "basically just says welcome to my stage I'm using an nvar to Define that",
    "start": "1299200",
    "end": "1305159"
  },
  {
    "text": "stage and the second line which I just added basically just gives me the time",
    "start": "1305159",
    "end": "1311159"
  },
  {
    "text": "in a certain time zone the way I'm doing that is I'm using an npm package called time",
    "start": "1311159",
    "end": "1319640"
  },
  {
    "text": "and I just give it a time zone and it gives me back the time within that time",
    "start": "1319640",
    "end": "1325200"
  },
  {
    "text": "zone this is my code pretty simple nothing very Innovative",
    "start": "1325200",
    "end": "1331120"
  },
  {
    "text": "here now this is my function my sorry my template now the cool thing I want to",
    "start": "1331120",
    "end": "1336880"
  },
  {
    "text": "show you here is that I'm is that I'm defining my environment variables together with cloud formation parameters",
    "start": "1336880",
    "end": "1343880"
  },
  {
    "text": "and that's the way you can actually Define your Nars per stage that we deploying to Let's understand how that's",
    "start": "1343880",
    "end": "1351720"
  },
  {
    "text": "happening I have my cloud formation parameters defined right here at the",
    "start": "1351720",
    "end": "1357159"
  },
  {
    "text": "bottom and then I have two Json files one is called beta and one is called",
    "start": "1357159",
    "end": "1365880"
  },
  {
    "text": "PR now each one of those files is defining my parameters for that given stage so",
    "start": "1366039",
    "end": "1373559"
  },
  {
    "text": "for beta I have a time zone that's defined as LA and the stage page name is beta and for prod the time zone is New",
    "start": "1373559",
    "end": "1381320"
  },
  {
    "text": "York and the stage is prod now we're going to see when we take",
    "start": "1381320",
    "end": "1386360"
  },
  {
    "text": "a look at the pipeline we're going to see how I'm actually associating each file with each stage in the",
    "start": "1386360",
    "end": "1393559"
  },
  {
    "text": "pipeline so the next file that I'd like to show you is my buildspec",
    "start": "1393559",
    "end": "1399360"
  },
  {
    "text": "doyo and buildspec is the file that code build uses in order to run your",
    "start": "1399360",
    "end": "1405400"
  },
  {
    "text": "builds I can I'm defining my commands that I want code build to run here so the first one as you can see is",
    "start": "1405400",
    "end": "1412960"
  },
  {
    "text": "npm install I'm installing my package that I'm using in my code and the second command is the",
    "start": "1412960",
    "end": "1419559"
  },
  {
    "text": "package command the same one we ran on my computer just a few moments ago I'm",
    "start": "1419559",
    "end": "1425159"
  },
  {
    "text": "giving it a template file an S3",
    "start": "1425159",
    "end": "1431039"
  },
  {
    "text": "bucket and a name for an output template which is output Sam now another thing I have to Define",
    "start": "1431039",
    "end": "1439799"
  },
  {
    "text": "within my buildpc is my output artifact and the output artifact is what is going",
    "start": "1439799",
    "end": "1445960"
  },
  {
    "text": "to be used by subsequent stages in my pipeline to deploy my application so I have to specify the",
    "start": "1445960",
    "end": "1453559"
  },
  {
    "text": "files that I'm interested in putting into that output artifact the first one is the template",
    "start": "1453559",
    "end": "1461520"
  },
  {
    "text": "the new template that has the code U properties and then I'm specifying the",
    "start": "1461520",
    "end": "1467200"
  },
  {
    "text": "two Json files the two files that I'm going to use to specify my Nars per",
    "start": "1467200",
    "end": "1473720"
  },
  {
    "text": "stage so just to do a quick recap my repo has my",
    "start": "1473720",
    "end": "1479840"
  },
  {
    "text": "code my template it has two files that Define Nars per stage and if I had more stages",
    "start": "1479840",
    "end": "1487520"
  },
  {
    "text": "I would have more files more Json files here to define the values of my nvar and",
    "start": "1487520",
    "end": "1492679"
  },
  {
    "text": "lastly I have my buildpc file which allows me to Define to to define the the",
    "start": "1492679",
    "end": "1497880"
  },
  {
    "text": "commands that code bill is going to run and to generate the output artifact that",
    "start": "1497880",
    "end": "1503159"
  },
  {
    "text": "I'm going to be using to deploy my application to multiple",
    "start": "1503159",
    "end": "1508080"
  },
  {
    "text": "stages now let's take a look at the pipeline and as we can see the source stage has",
    "start": "1508640",
    "end": "1515559"
  },
  {
    "text": "completed and it's now building my application or packaging it and it just succeeded and it's going",
    "start": "1515559",
    "end": "1522200"
  },
  {
    "text": "to start deploying in just a little bit so let's let's try to understand what we're seeing here and how how code",
    "start": "1522200",
    "end": "1529080"
  },
  {
    "text": "pipeline actually operates so the source stage is actually",
    "start": "1529080",
    "end": "1534360"
  },
  {
    "text": "continuously pulling my my uh repository and the branch specifically the branch I",
    "start": "1534360",
    "end": "1539760"
  },
  {
    "text": "specifi within that repository and when it detects a a g push it takes a snapshot of my repo and",
    "start": "1539760",
    "end": "1547120"
  },
  {
    "text": "then passes it along as something called pipeline cause an output artifact to to",
    "start": "1547120",
    "end": "1553360"
  },
  {
    "text": "make it available for subsequent stages in my pipeline so if I take take a look here you can see that the first uh line",
    "start": "1553360",
    "end": "1561440"
  },
  {
    "text": "in that configuration pop up is the output artifact which code pipeline",
    "start": "1561440",
    "end": "1566640"
  },
  {
    "text": "refers to as Source now source is going to be the input artifact for my build stage and",
    "start": "1566640",
    "end": "1574320"
  },
  {
    "text": "the output artifact packaged artifact is going to be what we generated in our",
    "start": "1574320",
    "end": "1581278"
  },
  {
    "text": "build next you can see that we have our",
    "start": "1582679",
    "end": "1587720"
  },
  {
    "text": "deployment stage our first deployment stage and code pipeline doesn't have access to the CLI so I I don't have my",
    "start": "1587720",
    "end": "1594120"
  },
  {
    "text": "deploy command here but it does have two separate actions two sequential actions",
    "start": "1594120",
    "end": "1599360"
  },
  {
    "text": "for create and execute change set now the cool thing about that is is that I",
    "start": "1599360",
    "end": "1606000"
  },
  {
    "text": "could actually interject another action right in between these two which is called a manual approval action and if",
    "start": "1606000",
    "end": "1613760"
  },
  {
    "text": "you wish to do so you could have people an administrator for example actually review the changes review the",
    "start": "1613760",
    "end": "1620279"
  },
  {
    "text": "Delta the chain set that has been created and the pipeline is going to stop until someone comes views the",
    "start": "1620279",
    "end": "1628320"
  },
  {
    "text": "changes and clicks I approve and then and only then the pipeline is going to",
    "start": "1628320",
    "end": "1633799"
  },
  {
    "text": "continue to the subsequent actions and stages so that's out there for you to use if you wish to do",
    "start": "1633799",
    "end": "1641840"
  },
  {
    "text": "so now the way the create chain set action works is it receives the input",
    "start": "1642679",
    "end": "1648799"
  },
  {
    "text": "artifact which is the packaged artifact and I have to specify the stack",
    "start": "1648799",
    "end": "1655320"
  },
  {
    "text": "name and the change set name and then I'm specifying where the template is",
    "start": "1655320",
    "end": "1660600"
  },
  {
    "text": "located so as you can see I'm specifying that within packaged artifact its name is output",
    "start": "1660600",
    "end": "1666480"
  },
  {
    "text": "Sam and I'm also specifying the configuration file so my beta. Json that",
    "start": "1666480",
    "end": "1672640"
  },
  {
    "text": "includes my environment variables",
    "start": "1672640",
    "end": "1678880"
  },
  {
    "text": "after creating the change set all I have to do is essentially just execute with",
    "start": "1678880",
    "end": "1684600"
  },
  {
    "text": "the stack name and the CH set name and that's going to apply the changes to my resources in my",
    "start": "1684600",
    "end": "1691799"
  },
  {
    "text": "account now as we can see the beta stage has completed so you just jump over here",
    "start": "1691799",
    "end": "1698880"
  },
  {
    "text": "and see that it's been updated with the time in LA and if we go to",
    "start": "1698880",
    "end": "1704039"
  },
  {
    "text": "prod we're going to see the same thing because we haven't pass our tests and deploy to PR",
    "start": "1704039",
    "end": "1711080"
  },
  {
    "text": "yet so let's talk a bit about our test stage I'm using ghost inspector here let me",
    "start": "1711080",
    "end": "1718559"
  },
  {
    "text": "just quickly show you what other actions I could",
    "start": "1718559",
    "end": "1726320"
  },
  {
    "text": "have so what ghost inspector does is it's a simple UI testing tool that",
    "start": "1731640",
    "end": "1737960"
  },
  {
    "text": "allows me to test a flow in my web page or my web application I'm just using it to uh basically see that a text appeared",
    "start": "1737960",
    "end": "1746519"
  },
  {
    "text": "on the screen then I know that my web page has my web page has loaded and that's it you could use it for much more",
    "start": "1746519",
    "end": "1753159"
  },
  {
    "text": "complex UI workflows on your in your web application now another tool that you",
    "start": "1753159",
    "end": "1760840"
  },
  {
    "text": "could use here is something like Blaze meter or AA or AA and what AA does for",
    "start": "1760840",
    "end": "1767440"
  },
  {
    "text": "example is that it can generate a load test for you so you can generate a load test and have uh a large number of users",
    "start": "1767440",
    "end": "1775159"
  },
  {
    "text": "or simulate a large number of users pinging your API for hundreds or thousands of dim per minute and see how",
    "start": "1775159",
    "end": "1782799"
  },
  {
    "text": "your application is handling that and you could specify bars s such as um if",
    "start": "1782799",
    "end": "1788480"
  },
  {
    "text": "there are there's more than this percentage of errors or if uh latency is more than this number for this",
    "start": "1788480",
    "end": "1793960"
  },
  {
    "text": "percentage of API calls then pass or don't pass as my",
    "start": "1793960",
    "end": "1799960"
  },
  {
    "text": "test now once my simple test has succeeded I am then using uh another",
    "start": "1806320",
    "end": "1813360"
  },
  {
    "text": "deployment stage to uh deploy to production and",
    "start": "1813360",
    "end": "1818480"
  },
  {
    "text": "this deployment stage looks exactly like the beta deployment State we just saw",
    "start": "1818480",
    "end": "1823600"
  },
  {
    "text": "I'm actually providing the exact same template which then link to the exact same deployment package so again each",
    "start": "1823600",
    "end": "1831000"
  },
  {
    "text": "stage here is going to look very similar to uh the previous one so all my",
    "start": "1831000",
    "end": "1836799"
  },
  {
    "text": "deployment stages are going to provide the same stack of",
    "start": "1836799",
    "end": "1842559"
  },
  {
    "text": "resources now my prod deployment has succeeded so let's take a look at my",
    "start": "1842559",
    "end": "1849240"
  },
  {
    "text": "prod web page see that it now shows the time in New",
    "start": "1849240",
    "end": "1855799"
  },
  {
    "text": "York",
    "start": "1856240",
    "end": "1859240"
  },
  {
    "text": "okay so we saw how we could use code Pipeline",
    "start": "1862840",
    "end": "1868519"
  },
  {
    "text": "with code build and Cloud information to pipe a Sam template",
    "start": "1868519",
    "end": "1873880"
  },
  {
    "text": "through an automated release process now we started with defining a",
    "start": "1873880",
    "end": "1879320"
  },
  {
    "text": "Stam template defining our serous application we then saw how we could",
    "start": "1879320",
    "end": "1884799"
  },
  {
    "text": "deploy that application using cloud formation commands and then we saw how to automate",
    "start": "1884799",
    "end": "1891240"
  },
  {
    "text": "that process how to create a release process that automatically builds test and",
    "start": "1891240",
    "end": "1897039"
  },
  {
    "text": "deploys my application now let's talk",
    "start": "1897039",
    "end": "1904519"
  },
  {
    "text": "about how I can troubleshoot my application so whether you're a seress",
    "start": "1904519",
    "end": "1909799"
  },
  {
    "text": "developer or not you have to have an efficient easy way to mon both monitor",
    "start": "1909799",
    "end": "1916320"
  },
  {
    "text": "your application and troubleshoot it in case you getting",
    "start": "1916320",
    "end": "1922120"
  },
  {
    "text": "some errors or something happens so the way you can do that today",
    "start": "1922120",
    "end": "1928039"
  },
  {
    "text": "is first you can monitor your application using cloudwatch metric and",
    "start": "1928039",
    "end": "1933120"
  },
  {
    "text": "there are four metrics that we provide out of the box so number of invocations",
    "start": "1933120",
    "end": "1938480"
  },
  {
    "text": "average duration number of errors and number of throttles you could of course",
    "start": "1938480",
    "end": "1944720"
  },
  {
    "text": "create any custom metric uh you would like and once you identify an issue you can",
    "start": "1944720",
    "end": "1952480"
  },
  {
    "text": "use cloud wash logs to dive deeper into that issue and today every invocation",
    "start": "1952480",
    "end": "1958559"
  },
  {
    "text": "generates a start and end timestamp and also a report log entry",
    "start": "1958559",
    "end": "1964360"
  },
  {
    "text": "that specifies the memory that you allocated to your function the memory actually used by your",
    "start": "1964360",
    "end": "1970240"
  },
  {
    "text": "function execution time for your function and buildable time for your",
    "start": "1970240",
    "end": "1976279"
  },
  {
    "text": "function now you can of course build on that and",
    "start": "1976279",
    "end": "1982240"
  },
  {
    "text": "have extra instrumentation and visualization from some of our partners such as data dog and",
    "start": "1982240",
    "end": "1988159"
  },
  {
    "text": "Splunk but the issue with logs is that they only provide you with insights into",
    "start": "1988159",
    "end": "1995519"
  },
  {
    "text": "what's happening within your execution within your function they don't provide you any information on the Lambda",
    "start": "1995519",
    "end": "2002480"
  },
  {
    "text": "service overhead what's happening with within the Lambda service when we're actually running your",
    "start": "2002480",
    "end": "2008720"
  },
  {
    "text": "function in addition it's not easy to get a breakdown of Downstream CS or what",
    "start": "2008720",
    "end": "2016240"
  },
  {
    "text": "what's happening with the subsequent resources or services that you're calling to from from within your",
    "start": "2016240",
    "end": "2023840"
  },
  {
    "text": "function now that's going to change in a few",
    "start": "2023840",
    "end": "2028960"
  },
  {
    "text": "weeks when we launch uh our integration with x-ray so x-ray is a new service",
    "start": "2028960",
    "end": "2035760"
  },
  {
    "text": "that was announced in previous you today and Lambda integration is going to be coming",
    "start": "2035760",
    "end": "2041600"
  },
  {
    "text": "soon now what X-ray does is it collect data about requests that your",
    "start": "2041600",
    "end": "2047080"
  },
  {
    "text": "application serves and then provide you with a host of visual visualization tools to make",
    "start": "2047080",
    "end": "2054720"
  },
  {
    "text": "sense of that data and so specifically let's start",
    "start": "2054720",
    "end": "2060679"
  },
  {
    "text": "with something called a service map and the service map you're seeing",
    "start": "2060679",
    "end": "2065800"
  },
  {
    "text": "here is actually for a function that has a downstream call to a Dynamo DB table",
    "start": "2065800",
    "end": "2072560"
  },
  {
    "text": "to Dynamo DB now the three nodes you're seeing here are from left to right the",
    "start": "2072560",
    "end": "2077960"
  },
  {
    "text": "first one represents the Lambda service the second one your actual function so",
    "start": "2077960",
    "end": "2083240"
  },
  {
    "text": "the actual functions execution and the third one represents uh a Dynamo DB table Dynamo DB the call",
    "start": "2083240",
    "end": "2090638"
  },
  {
    "text": "to dyb that your function made now the two quick insights you can get here are",
    "start": "2090639",
    "end": "2097599"
  },
  {
    "text": "which one of these nodes or items introduces latency as you can see in the",
    "start": "2097599",
    "end": "2102760"
  },
  {
    "text": "middle of the node you have average latency per uh per node and secondly you",
    "start": "2102760",
    "end": "2108800"
  },
  {
    "text": "can quickly see which one of these is generating errors because the color that you see here that is green is going to",
    "start": "2108800",
    "end": "2115079"
  },
  {
    "text": "change If you're receiving 400s or 500s so let's say you looked at the",
    "start": "2115079",
    "end": "2121960"
  },
  {
    "text": "service map you found that you had some sort of issue",
    "start": "2121960",
    "end": "2127640"
  },
  {
    "text": "with your with the Lambda service you want to drill deeper into",
    "start": "2127640",
    "end": "2132960"
  },
  {
    "text": "that you want to see what's going on in there so the next step would be to take a look at the trace",
    "start": "2132960",
    "end": "2139320"
  },
  {
    "text": "View and what you're seeing in the trace view is uh a zoom in of what's happening",
    "start": "2139320",
    "end": "2147160"
  },
  {
    "text": "within your function or your service or the Lambda service let's start with the top segment that we're seeing there the",
    "start": "2147160",
    "end": "2153920"
  },
  {
    "text": "top segment actually represents the entire time sense your request entered Lambda and up until",
    "start": "2153920",
    "end": "2160599"
  },
  {
    "text": "it exits Lambda now the small node beneath that is the dwell time this is",
    "start": "2160599",
    "end": "2166079"
  },
  {
    "text": "for an async request and we Lambda actually cues up every request before we",
    "start": "2166079",
    "end": "2171839"
  },
  {
    "text": "uh execute it so as you can see for this specific ex invocation the function",
    "start": "2171839",
    "end": "2177520"
  },
  {
    "text": "spend 6 milliseconds in the que we then have our first attempt at",
    "start": "2177520",
    "end": "2183280"
  },
  {
    "text": "invocation at invoking your function and now that attempt uh succeeded as you can",
    "start": "2183280",
    "end": "2188520"
  },
  {
    "text": "see we returned the 200 and the reason it's numbered as number one is because",
    "start": "2188520",
    "end": "2194240"
  },
  {
    "text": "you could have two more tries before we say this function or this request failed",
    "start": "2194240",
    "end": "2200720"
  },
  {
    "text": "so if we had additional invocation here invocations here you would see them in the trace",
    "start": "2200720",
    "end": "2206760"
  },
  {
    "text": "view now the the the next segment is your actual execution time the actual",
    "start": "2206760",
    "end": "2213640"
  },
  {
    "text": "time that your function ran and the thing to note here is that the Delta",
    "start": "2213640",
    "end": "2219839"
  },
  {
    "text": "between the beginning of attempt one and the beginning of the user function is",
    "start": "2219839",
    "end": "2226800"
  },
  {
    "text": "the actual time it took us to initialize both the container to run your function in and to initialize your own function",
    "start": "2226800",
    "end": "2233880"
  },
  {
    "text": "so you actually have a quick insight into that as well and the last sub segment we're",
    "start": "2233880",
    "end": "2241200"
  },
  {
    "text": "seeing here is the Dynamo DB car we can quickly see that it returned at 200 as",
    "start": "2241200",
    "end": "2248200"
  },
  {
    "text": "well and that to the right it's a bit small but you can see that it actually",
    "start": "2248200",
    "end": "2253280"
  },
  {
    "text": "called put item and you can see the name of the table that it's called put item",
    "start": "2253280",
    "end": "2259040"
  },
  {
    "text": "on so that was just a quick uh sneak peek into what is going to be coming",
    "start": "2259040",
    "end": "2265079"
  },
  {
    "text": "pretty soon you could use the service map to quickly identify any errors or",
    "start": "2265079",
    "end": "2270119"
  },
  {
    "text": "latency issues in your request path and once you identify an issue you're going",
    "start": "2270119",
    "end": "2275680"
  },
  {
    "text": "to be able to zoom in in and see a breakdown of what exactly happened and",
    "start": "2275680",
    "end": "2281560"
  },
  {
    "text": "hopefully quickly identify the root",
    "start": "2281560",
    "end": "2285760"
  },
  {
    "text": "cause so let's review what we did here",
    "start": "2287000",
    "end": "2295040"
  },
  {
    "text": "today we started with defining an application we saw how we could use a",
    "start": "2295040",
    "end": "2301839"
  },
  {
    "text": "Sam template to Define all the resources within our surus application",
    "start": "2301839",
    "end": "2308119"
  },
  {
    "text": "and then we saw how we could use new cloud formation commands package and deploy to efficiently and consistently",
    "start": "2308119",
    "end": "2316359"
  },
  {
    "text": "deploy my application across environments or accounts then we saw how we could use",
    "start": "2316359",
    "end": "2322880"
  },
  {
    "text": "code pipeline code build and cloud formation to automate that",
    "start": "2322880",
    "end": "2328760"
  },
  {
    "text": "process and lastly we talked a bit about how to troubleshoot an application we",
    "start": "2328760",
    "end": "2335920"
  },
  {
    "text": "saw what we have today and that very soon we're going to have a new totally",
    "start": "2335920",
    "end": "2342119"
  },
  {
    "text": "different way to troubleshoot a serverless",
    "start": "2342119",
    "end": "2346720"
  },
  {
    "text": "application now what I would encourage you to do after this session is first of all go on GitHub check out Sam it's open",
    "start": "2347680",
    "end": "2356400"
  },
  {
    "text": "source so you can submit issues or PLL requests and we're going to look at in honor all of those you can visit the",
    "start": "2356400",
    "end": "2363240"
  },
  {
    "text": "Lambda console to download any blueprint or or export your own function as a Sam",
    "start": "2363240",
    "end": "2368920"
  },
  {
    "text": "template and see how that looks like and play with that and as always we encourage you to",
    "start": "2368920",
    "end": "2376440"
  },
  {
    "text": "go on the Lambda forums interact with us send feedbacks feedback comments and",
    "start": "2376440",
    "end": "2381520"
  },
  {
    "text": "questions as you know most of our road map is driven off what we get from you",
    "start": "2381520",
    "end": "2386680"
  },
  {
    "text": "guys so we definitely encourage uh those kinds of interactions uh so thank you for your",
    "start": "2386680",
    "end": "2393560"
  },
  {
    "text": "time today and un fortunately I can't take questions from the stage but I'll",
    "start": "2393560",
    "end": "2399520"
  },
  {
    "text": "be hanging out outside the room and happy to address any questions you might have over there so again thank you very",
    "start": "2399520",
    "end": "2405240"
  },
  {
    "text": "much for coming",
    "start": "2405240",
    "end": "2411800"
  }
]