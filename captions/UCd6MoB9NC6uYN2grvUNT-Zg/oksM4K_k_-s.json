[
  {
    "start": "0",
    "end": "141000"
  },
  {
    "text": "so thank you everyone for coming to this session my name is Mike fer I'm an engineer with AWS in the ec2 organization and today I'm",
    "start": "30",
    "end": "8040"
  },
  {
    "text": "talking to you about network performance so this is a 400 level talk so we're",
    "start": "8040",
    "end": "13170"
  },
  {
    "text": "gonna go pretty deep we're gonna be talking about TCP performance I will give you a little bit of a gentle ramp",
    "start": "13170",
    "end": "19140"
  },
  {
    "text": "up to kind of get your minds engaged and kind of in that networking mode and after we kind of start talking about TCP",
    "start": "19140",
    "end": "25920"
  },
  {
    "text": "we're gonna talk about what makes it go you know what are some of the things that is going on kind of under the covers when TCP is is running underneath",
    "start": "25920",
    "end": "33090"
  },
  {
    "text": "your application then we'll look at some tools to try to inspect what decisions",
    "start": "33090",
    "end": "38100"
  },
  {
    "text": "TCP is making these tools can can kind of pull back the wool on the black box",
    "start": "38100",
    "end": "43739"
  },
  {
    "text": "which can be the network and they give us really good insights and then I will show some examples of how we can change",
    "start": "43739",
    "end": "49410"
  },
  {
    "text": "some of the parameters of TCP to alter our performance a lot of the talk are a lot of examples in this talk are gonna",
    "start": "49410",
    "end": "56190"
  },
  {
    "text": "be in Linux but of course TCP is a cross-platform technology all of these examples port",
    "start": "56190",
    "end": "62250"
  },
  {
    "text": "equally well to Windows but just to keep the talk concise today every all the examples I'm gonna show on the slides are actually Linux based and then the",
    "start": "62250",
    "end": "69240"
  },
  {
    "text": "last part of my talk I'm gonna have some sample applications or I'm gonna demonstrate what happens when we start tuning TCP under various different",
    "start": "69240",
    "end": "75869"
  },
  {
    "text": "conditions the example applications are not necessarily meant to be exact replications of real-world scenarios",
    "start": "75869",
    "end": "81630"
  },
  {
    "text": "they're really more here to demonstrate what effects these tuning techniques",
    "start": "81630",
    "end": "87180"
  },
  {
    "text": "have and what I hope you take away from this talk is actually a new set of tools in your toolkit rather than an exact you",
    "start": "87180",
    "end": "93030"
  },
  {
    "text": "know performance analysis of these particular applications so it's a little",
    "start": "93030",
    "end": "98100"
  },
  {
    "text": "bit of a spoiler and to keep you in your seats because I know it's Friday one of the applications I'll be showing at the end is actually going to increase its",
    "start": "98100",
    "end": "104430"
  },
  {
    "text": "performance 537 percent and this is a change they're going to be making",
    "start": "104430",
    "end": "109530"
  },
  {
    "text": "without touching the application itself so I'm not going to be touching the code I'm not gonna be changing the application you know in any way I'm just",
    "start": "109530",
    "end": "117000"
  },
  {
    "text": "going to be manipulating the the the Linux system are I'm gonna be running it on and just playing with some of the TCP",
    "start": "117000",
    "end": "123600"
  },
  {
    "text": "tuning parameters there so I've been working at Amazon for a little over",
    "start": "123600",
    "end": "128789"
  },
  {
    "text": "seven years now and really love working on the cloud and I've spent almost all my time in that",
    "start": "128789",
    "end": "134820"
  },
  {
    "text": "duration in the east to networking organization and so I've really come to love TCP too so TCP of course is the",
    "start": "134820",
    "end": "142110"
  },
  {
    "start": "141000",
    "end": "141000"
  },
  {
    "text": "transmission control protocol it's the protocol that underlines most not all but most kind of application layer",
    "start": "142110",
    "end": "148380"
  },
  {
    "text": "protocols out there so you know if you're remotely administrating an ec2 instance over SSH that's of course going",
    "start": "148380",
    "end": "154560"
  },
  {
    "text": "over TCP same with browsing the web or sending an email from your phone all",
    "start": "154560",
    "end": "160170"
  },
  {
    "text": "running on top of TCP right and then and TCP while it's the it's the dominant one",
    "start": "160170",
    "end": "165540"
  },
  {
    "text": "of course you have other options which is you know UDP and others but the reason TCP I think is so popular is for a couple of reasons one is that it gives",
    "start": "165540",
    "end": "171930"
  },
  {
    "text": "you kind of a streaming delivery kind of abstraction for your application so when you instantiate a TCP connection your",
    "start": "171930",
    "end": "179790"
  },
  {
    "text": "application gets a socket where it can read and write bytes to write the application doesn't have to concern",
    "start": "179790",
    "end": "185250"
  },
  {
    "text": "itself with what happens to those bytes after it writes to the socket it's TCPS job to make sure all the bytes",
    "start": "185250",
    "end": "190980"
  },
  {
    "text": "are delivered to the other side that none of them are dropped none of them are duplicated and they",
    "start": "190980",
    "end": "197580"
  },
  {
    "text": "aren't reordered in any way the second thing that TCP does for us is it dynamically adjusts to the current",
    "start": "197580",
    "end": "203760"
  },
  {
    "text": "networking conditions right so if the network has a shift in behavior TCP will adjust its behavior and it was always",
    "start": "203760",
    "end": "210300"
  },
  {
    "text": "trying to maximize its throughput based on what it perceives to be the current network condition so let's let's start",
    "start": "210300",
    "end": "217680"
  },
  {
    "text": "talking a little bit about what TCP looks like kind of from a high level right so when I ask most people about",
    "start": "217680",
    "end": "224430"
  },
  {
    "text": "TCP the first thing they say is well there's a three-way handshake right and the three-way handshake is there to",
    "start": "224430",
    "end": "230640"
  },
  {
    "text": "establish a connection right so TCP is a connection-oriented protocol and the instruction we oftentimes think about is",
    "start": "230640",
    "end": "236310"
  },
  {
    "text": "after you establish this connection you have a two-way bi-directional pipe between two endpoints so here let's say",
    "start": "236310",
    "end": "242910"
  },
  {
    "text": "I have two Linux instances jack-and-jill and after establishing the three-way handshake they now have a bi-directional",
    "start": "242910",
    "end": "248510"
  },
  {
    "text": "communication pipe to send this pipe is fully duplex you know Jack and Jill can both send and receive simultaneously and",
    "start": "248510",
    "end": "255810"
  },
  {
    "text": "it's kind of a nice abstraction for you know application programmers to view however when we start looking at actual",
    "start": "255810",
    "end": "261810"
  },
  {
    "text": "TCP performance itself and helps to kind of go level deeper and not think of this as one connection but",
    "start": "261810",
    "end": "267750"
  },
  {
    "text": "rather a pair of unidirectional connections the reason this is important is the path that packets take from Jack",
    "start": "267750",
    "end": "276570"
  },
  {
    "text": "to get to Jill might be a very different path than Jill takes get to the back to Jack they might take paths in that they",
    "start": "276570",
    "end": "284370"
  },
  {
    "text": "Traverse different routers or that they might go through the same routers but the particular interface buffers they",
    "start": "284370",
    "end": "289380"
  },
  {
    "text": "hit might have very different properties for example if you're sending a stream and there's a lot of people who are",
    "start": "289380",
    "end": "294690"
  },
  {
    "text": "concurrently streaming a live video stream there might be a lot of contention in one side of this transfer",
    "start": "294690",
    "end": "300990"
  },
  {
    "text": "but not on the other the other big reason it's important to kind of view TCP connections kind of as two separate",
    "start": "300990",
    "end": "307800"
  },
  {
    "text": "unidirectional sides is the main control mechanism we have is actually at the",
    "start": "307800",
    "end": "313260"
  },
  {
    "text": "sender when a receiver receives a packet it has a very limited state machine to figure out what to do next but on the",
    "start": "313260",
    "end": "319170"
  },
  {
    "text": "sender side it actually has quite a bit of opportunity to figure out when and",
    "start": "319170",
    "end": "324570"
  },
  {
    "text": "how often it should put packets on the wire so when you're thinking about TCP",
    "start": "324570",
    "end": "329910"
  },
  {
    "start": "328000",
    "end": "328000"
  },
  {
    "text": "and performance the number of bytes that are actually in flight at any given time is turns out to be one of the most",
    "start": "329910",
    "end": "335160"
  },
  {
    "text": "important things to tune when trying to optimize the flow of a TCP connection",
    "start": "335160",
    "end": "340310"
  },
  {
    "text": "there's two main factors that go into the number are the performance of TCP",
    "start": "340310",
    "end": "345920"
  },
  {
    "text": "and these are the receive window and the congestion window hopefully this isn't",
    "start": "345920",
    "end": "352290"
  },
  {
    "text": "oblasts too much for the past but just to give you a little bit of a ramp up on these so the receive window represents a",
    "start": "352290",
    "end": "357930"
  },
  {
    "text": "buffer on the receiver side it's managed by the receiver and it's signaled to the",
    "start": "357930",
    "end": "363150"
  },
  {
    "text": "sender and the point of this buffer is that it's maintained kind of in the kernel in the TCP stack so as bytes are",
    "start": "363150",
    "end": "369180"
  },
  {
    "text": "coming off the wire they're put into this buffer in the kernel and then it's up to the application from time to time to reach down into the kernel and do a",
    "start": "369180",
    "end": "375780"
  },
  {
    "text": "read system call and read those bytes up into the application so of course what this means is that if the application is",
    "start": "375780",
    "end": "382230"
  },
  {
    "text": "not reading those buff those bytes out of the buffer the buffer can fill up and if the buffer is full there's no point",
    "start": "382230",
    "end": "388290"
  },
  {
    "text": "in Jack sending any more data to jail if Jill's buffer is full right so that's one of the reasons why it kind of",
    "start": "388290",
    "end": "393870"
  },
  {
    "text": "signals this this buffer size back and for the other important thing that to keep",
    "start": "393870",
    "end": "399380"
  },
  {
    "text": "in mind with this with this received window is we need to keep in mind the round-trip time between these two instances and the reason that's",
    "start": "399380",
    "end": "406190"
  },
  {
    "text": "important is that when you're talking about you know bytes on the wire and and and round-trip times the usual equation",
    "start": "406190",
    "end": "412880"
  },
  {
    "text": "we have is what's known as the bandwidth delay product right the bandwidth delay products says if I have a particular",
    "start": "412880",
    "end": "417919"
  },
  {
    "start": "413000",
    "end": "413000"
  },
  {
    "text": "bandwidth at a particular round-trip time if I multiply those two together I get a total number of bytes I can have",
    "start": "417919",
    "end": "424190"
  },
  {
    "text": "in flight at any given time now what I've done here on this slide is I've taken that equation and I kind of solved",
    "start": "424190",
    "end": "431780"
  },
  {
    "text": "for a different field which is that if I know my my received window if I know the",
    "start": "431780",
    "end": "436880"
  },
  {
    "text": "number of bytes I'm gonna have in flight at a given time let's say 100 kilobytes and I know my round-trip time I can't",
    "start": "436880",
    "end": "442160"
  },
  {
    "text": "really change the speed of light very often so let's say I have a round-trip time of 2 milliseconds then the maximum",
    "start": "442160",
    "end": "449000"
  },
  {
    "text": "effective bandwidth I can get on this TCP connection is only 400 megabits",
    "start": "449000",
    "end": "454360"
  },
  {
    "text": "foreigner' megabits is actually pretty good right a lot of applications will do very well with 400 megabits right but of",
    "start": "454360",
    "end": "461210"
  },
  {
    "text": "course if this not all applications have the luxury of a 2 millisecond round-trip time if I took this same number of bytes",
    "start": "461210",
    "end": "467780"
  },
  {
    "text": "on the wire and I changed it to a system with that were separated by a hundred milliseconds then the throughput that I",
    "start": "467780",
    "end": "475070"
  },
  {
    "text": "could effectively get on this connection will drop all the way down to 8 megabits so nothing else has changed in the",
    "start": "475070",
    "end": "481430"
  },
  {
    "text": "system other than the round-trip time and of course 100 milliseconds is not that unreasonable it's about the time a",
    "start": "481430",
    "end": "487729"
  },
  {
    "text": "packet would take from the east coast to the west coast and back again across the United States so again this is not",
    "start": "487729",
    "end": "494210"
  },
  {
    "text": "related to how big of a piece of fiber I have how many waves are on it there could be a lot of available bandwidth",
    "start": "494210",
    "end": "500449"
  },
  {
    "text": "but my effective bandwidth is limited by how many bytes are in flight so it's really important that we stay on top of",
    "start": "500449",
    "end": "506810"
  },
  {
    "text": "what's going into these decisions that TCP is making to make sure it's maximizing and is able to fully utilize the bandwidth that might be there and",
    "start": "506810",
    "end": "514039"
  },
  {
    "text": "not artificially limited itself so here's a here's a couple examples from",
    "start": "514039",
    "end": "519440"
  },
  {
    "start": "517000",
    "end": "517000"
  },
  {
    "text": "from Linux these are actually aren't all these on Amazon Linux if you're trying to run them at home but these are pretty standard across almost all Linux",
    "start": "519440",
    "end": "526220"
  },
  {
    "text": "distributions these days so this first sis CTL is setting the maximum received window",
    "start": "526220",
    "end": "532959"
  },
  {
    "text": "for kind of all IP protocols across the box the second sis CTL there is doing it",
    "start": "532959",
    "end": "540139"
  },
  {
    "text": "specifically for TCP and TCP actually takes a three tuple of values it takes a minimum a default and a maximum and so",
    "start": "540139",
    "end": "547910"
  },
  {
    "text": "if you have a maximum TCP received window that's too small no matter how",
    "start": "547910",
    "end": "553639"
  },
  {
    "text": "hard TCP tries it might never be able to take full advantage of available",
    "start": "553639",
    "end": "558860"
  },
  {
    "text": "bandwidth okay let's talk about the",
    "start": "558860",
    "end": "564110"
  },
  {
    "text": "congestion window the congestion window is a little bit trickier that congest the role the congestion window in TCP is",
    "start": "564110",
    "end": "570170"
  },
  {
    "text": "that it's trying to figure out if there's congestion somewhere in the middle of the network it's maintained by",
    "start": "570170",
    "end": "577490"
  },
  {
    "text": "the sender and it's trying to figure out you know how fast should I send data",
    "start": "577490",
    "end": "583790"
  },
  {
    "text": "across the wire because if there's congestion and I send too much data it's really luckily some of that data will be dropped so it's",
    "start": "583790",
    "end": "590300"
  },
  {
    "text": "trying to play a game to figure out how fast can I send and kind of optimize my chances that all the data will",
    "start": "590300",
    "end": "596360"
  },
  {
    "text": "eventually arrive at the other endpoint the inputs to try to figure out what deceptive congestion window to kind of",
    "start": "596360",
    "end": "603740"
  },
  {
    "text": "vary based on what implementation of the congestion control algorithm that is in",
    "start": "603740",
    "end": "609050"
  },
  {
    "text": "use there's a few different inputs out there that use that these different algorithms use but most of them use two",
    "start": "609050",
    "end": "615920"
  },
  {
    "text": "different inputs as their kind of primary signals one is loss so in other words if I'm sending a stream of packets",
    "start": "615920",
    "end": "621680"
  },
  {
    "text": "across the wire if one of the packets doesn't arrive then I know something might be going wrong in the middle of a",
    "start": "621680",
    "end": "626870"
  },
  {
    "text": "network the second one that these algorithms use is latency so how long",
    "start": "626870",
    "end": "632540"
  },
  {
    "text": "does it take for my packet to maybe go from one side to the the connection to the other and perhaps back again these",
    "start": "632540",
    "end": "639559"
  },
  {
    "text": "aren't the only inputs that algorithms use there's there's some other ones out there some of the algorithms will use",
    "start": "639559",
    "end": "645139"
  },
  {
    "text": "explicit signaling with kind of more directly signal back and forth what both sides think about congestion and there's",
    "start": "645139",
    "end": "651800"
  },
  {
    "text": "some algorithms out there and I'm gonna mention this a little a little bit later that will actually try to figure out the spacing between the packets to try to",
    "start": "651800",
    "end": "658670"
  },
  {
    "text": "guess just how congested the network is so when trying to set the congestion",
    "start": "658670",
    "end": "665160"
  },
  {
    "start": "662000",
    "end": "662000"
  },
  {
    "text": "window the TCP congestion control algorithms have a difficult job when",
    "start": "665160",
    "end": "670470"
  },
  {
    "text": "they start out they have no idea what the state of the network is they have no idea if there's loss they have no idea",
    "start": "670470",
    "end": "677460"
  },
  {
    "text": "what the latency is all they know is they have this destination address that they would like to send some packets to",
    "start": "677460",
    "end": "682730"
  },
  {
    "text": "so the way it starts out is it uses that what's called an initial congestion window and the initial congestion window",
    "start": "682730",
    "end": "688589"
  },
  {
    "text": "is the number of packets that it puts on the wire before waiting for its first acknowledgment so with the initial",
    "start": "688589",
    "end": "695490"
  },
  {
    "text": "congestion window of three it'll put three packets on the wire and let's assume we have a 15 bite and a 1500 byte",
    "start": "695490",
    "end": "701700"
  },
  {
    "text": "MTU that means each packet is gonna be about 14 48 bytes and our total number",
    "start": "701700",
    "end": "707160"
  },
  {
    "text": "of bytes on the wire before waiting for our first response is only about 4300 bytes so I send out 4300 bytes I wait",
    "start": "707160",
    "end": "713910"
  },
  {
    "text": "for a response and then I then after I get a successful response hopefully the",
    "start": "713910",
    "end": "719220"
  },
  {
    "text": "TCP algorithms will typically ramp up very very quickly to try to figure out just how big of a congestion I can window I can use before I start to see",
    "start": "719220",
    "end": "726600"
  },
  {
    "text": "impact from the network now 3 is a default but there's no reason we can't",
    "start": "726600",
    "end": "733170"
  },
  {
    "text": "change it and the way we change it is actually on a per route basis so if we",
    "start": "733170",
    "end": "738630"
  },
  {
    "text": "would like to change the route our excuse me if you're let's exchange the initial congestion window for one of our routes we can do it with these this",
    "start": "738630",
    "end": "744240"
  },
  {
    "text": "command here so this IP route change command will when appended with the",
    "start": "744240",
    "end": "750089"
  },
  {
    "text": "initial condition window value will update it and again this numbers in packets and so as you can find and when",
    "start": "750089",
    "end": "755640"
  },
  {
    "text": "you do the math it's really the number of maximum segment sizes that allow to go into the network and then if I show",
    "start": "755640",
    "end": "762000"
  },
  {
    "text": "by if I print out my routes again but by default it won't print it if it if it hasn't been altered but once I do change",
    "start": "762000",
    "end": "768330"
  },
  {
    "text": "it you can see that it now shows up in the updated output of listing my routes and now I've updated that initial",
    "start": "768330",
    "end": "774240"
  },
  {
    "text": "congestion window to 16 packets and at 16 packets I've now gone from instead of",
    "start": "774240",
    "end": "779790"
  },
  {
    "text": "4,300 bytes for waiting for my first packet to almost 23 over 23 Kay before I",
    "start": "779790",
    "end": "785070"
  },
  {
    "text": "wait for that first acknowledgment so this is going to be a really important difference especially if you have very",
    "start": "785070",
    "end": "790470"
  },
  {
    "text": "short-lived connections that transfer a small amount of data right think about web pages HTML files",
    "start": "790470",
    "end": "796610"
  },
  {
    "text": "thumbnails a lot of connections have this property that only last for very short amount of time and only transfer a",
    "start": "796610",
    "end": "802399"
  },
  {
    "text": "relatively small amount of data and so this can actually really have a meaningful impact to this and we're",
    "start": "802399",
    "end": "808249"
  },
  {
    "text": "gonna look at this and one of the example applications at the end of the talk so let's talk some more about loss",
    "start": "808249",
    "end": "815379"
  },
  {
    "start": "814000",
    "end": "814000"
  },
  {
    "text": "so this is a graph that shows what happens when you start to have loss on a",
    "start": "815379",
    "end": "820999"
  },
  {
    "text": "TCP connection the y-axis here is kind of your percent of idealized throughput",
    "start": "820999",
    "end": "826759"
  },
  {
    "text": "so at 0% loss you're getting a hundred percent of your you know idealized throughput as you start to see more and",
    "start": "826759",
    "end": "834230"
  },
  {
    "text": "more loss of the network the throughput of the connection will drop off dramatically you know I think you know",
    "start": "834230",
    "end": "840769"
  },
  {
    "text": "this it's almost counterintuitive you know if you ask someone hey I've had this TCP connection and 1% of my packets",
    "start": "840769",
    "end": "847189"
  },
  {
    "text": "are dropped which means 99% of my packets are actually getting there what percent of",
    "start": "847189",
    "end": "852709"
  },
  {
    "text": "my throughput what I expect maybe not 99 maybe I'd say 95 or 90 but",
    "start": "852709",
    "end": "857839"
  },
  {
    "text": "that's not the case at all right it actually drops tiles very very quickly and part of that is the actual TCP",
    "start": "857839",
    "end": "863179"
  },
  {
    "text": "algorithm itself when it detects loss itself throttles itself it really pulls back and tries not to kind of pile on",
    "start": "863179",
    "end": "870169"
  },
  {
    "text": "and make the situation worse so loss has a very very important role in just how",
    "start": "870169",
    "end": "876350"
  },
  {
    "text": "fast our applications can run the other takeaway from this graph is some of the",
    "start": "876350",
    "end": "882139"
  },
  {
    "text": "inverse which is to say if you have an application and suddenly that application starts performing very very",
    "start": "882139",
    "end": "888230"
  },
  {
    "text": "poorly one potential candidate that could cause that would be lost on the",
    "start": "888230",
    "end": "893239"
  },
  {
    "text": "network so let's look at some tools that we can use to try to figure out am I seeing loss and is that contributing why",
    "start": "893239",
    "end": "900230"
  },
  {
    "text": "my application is actually slowing down so the first tool I'm gonna talk about",
    "start": "900230",
    "end": "905449"
  },
  {
    "text": "here is the net stat tool this is probably the most well known tool that I'm gonna talk about today netstat is is pretty standard and you'll",
    "start": "905449",
    "end": "912799"
  },
  {
    "text": "find it on just about every Linux situation out there installed by default and it gives you lots and lots and lots",
    "start": "912799",
    "end": "918410"
  },
  {
    "text": "of data about a lot of different things related to sockets so I'm showing some",
    "start": "918410",
    "end": "923629"
  },
  {
    "text": "output where I'm just prepping out the number of retransmissions so in TCP or a retransmission is when I",
    "start": "923629",
    "end": "930800"
  },
  {
    "text": "send some packets and I fail to get a response and within a particular window",
    "start": "930800",
    "end": "935869"
  },
  {
    "text": "and so what that means is that either the packets I sent to the receiver got dropped or the response they sent back",
    "start": "935869",
    "end": "942439"
  },
  {
    "text": "to me got dropped in either case I don't know what happened and so I have no choice but to resend the packets that",
    "start": "942439",
    "end": "948410"
  },
  {
    "text": "did not arrive and so this is what we call a retransmission so if you ever see a retransmission what that means is that",
    "start": "948410",
    "end": "954079"
  },
  {
    "text": "your TCP stack thinks that the packets that sent the first time did not arrive",
    "start": "954079",
    "end": "959559"
  },
  {
    "text": "now that's that while it's very useful is also very coarse-grained it actually",
    "start": "959559",
    "end": "964879"
  },
  {
    "text": "these counters are for all your sockets across the entire box and so you won't",
    "start": "964879",
    "end": "970939"
  },
  {
    "text": "be able to differentiate which connection is actually seeing these during transmissions these counters are also initialized when",
    "start": "970939",
    "end": "976670"
  },
  {
    "text": "Linux boots so even though you might see 58,000 retransmissions you don't know if that happened 10 seconds ago or 10 weeks",
    "start": "976670",
    "end": "983420"
  },
  {
    "text": "ago and so to be useful you're gonna have to pull this tool and look for shifts in the number to try to correlate",
    "start": "983420",
    "end": "989869"
  },
  {
    "text": "when you might be seeing loss based on one the number of retransmissions changes so we can do a little bit better",
    "start": "989869",
    "end": "997490"
  },
  {
    "text": "than netstat another tool that's a little bit less known but is also commonly installed it's called the socket statistic tool or just SS so this",
    "start": "997490",
    "end": "1005110"
  },
  {
    "start": "998000",
    "end": "998000"
  },
  {
    "text": "tool is a bunch of options I've showed a few here and it gives you a wealth of information and the socket statistic",
    "start": "1005110",
    "end": "1011709"
  },
  {
    "text": "tool what it does is it actually gives you persecute information I'm not going to go through all these but I'm gonna",
    "start": "1011709",
    "end": "1017110"
  },
  {
    "text": "touch on a few of them so the first one we can see here is the state of the connection so if you're interested in",
    "start": "1017110",
    "end": "1022899"
  },
  {
    "text": "looking just at established connections or one in a particular TCP state you can certainly grab those out excuse me the",
    "start": "1022899",
    "end": "1031270"
  },
  {
    "text": "second number here is the send queue right so the send queue is a buffer on the sender side from when the",
    "start": "1031270",
    "end": "1038230"
  },
  {
    "text": "application puts a dozen write system call down to the TCP stack until those bytes are actually transmitted on the",
    "start": "1038230",
    "end": "1044350"
  },
  {
    "text": "wire so if you see this number just continually at 0 what that tells you is",
    "start": "1044350",
    "end": "1050260"
  },
  {
    "text": "that your application just isn't writing any data so it's very healthy to see this number kind of constantly being at",
    "start": "1050260",
    "end": "1056470"
  },
  {
    "text": "a good value because that means the thing that's blocking your system is not your application but it's actually something in the",
    "start": "1056470",
    "end": "1062150"
  },
  {
    "text": "network so you kind of expect to see this number on an active TCP connection to be continually you know greater than",
    "start": "1062150",
    "end": "1068120"
  },
  {
    "text": "zero next we have this this this word cubic it's a little bit of a you know",
    "start": "1068120",
    "end": "1075620"
  },
  {
    "text": "odd odd word right in the middle of this text of this wall of text cubic is actually the TCP congestion control",
    "start": "1075620",
    "end": "1081620"
  },
  {
    "text": "algorithm that this particular connection is using we're gonna talk a little bit more about that in just a second and then we have the",
    "start": "1081620",
    "end": "1088970"
  },
  {
    "text": "retransmission timeout so when you when you don't when you don't get knowledge meant at some point",
    "start": "1088970",
    "end": "1095210"
  },
  {
    "text": "you have to make a decision about how long to wait because the acknowledgment might be on its way right the",
    "start": "1095210",
    "end": "1100760"
  },
  {
    "text": "acknowledgment you may not have been dropped it might just be experience some latency on the links and it might not",
    "start": "1100760",
    "end": "1106460"
  },
  {
    "text": "have a shown up yet so this number is the number of milliseconds that this TCP connection will wait until it initiates",
    "start": "1106460",
    "end": "1113150"
  },
  {
    "text": "a retransmission for a packet that has not yet been acknowledged next we have",
    "start": "1113150",
    "end": "1118970"
  },
  {
    "text": "the congestion window so this TCP connection is ramped up to 138 packets again this numbers and packets not bytes",
    "start": "1118970",
    "end": "1126169"
  },
  {
    "text": "and then finally the number of retransmissions for this particular TCP connection so",
    "start": "1126169",
    "end": "1131840"
  },
  {
    "text": "this be the action is actually seen about 11,000 retransmissions so it is probably experiencing some loss",
    "start": "1131840",
    "end": "1136970"
  },
  {
    "text": "somewhere on the network we can actually do a little bit better than s s there's",
    "start": "1136970",
    "end": "1143390"
  },
  {
    "start": "1141000",
    "end": "1141000"
  },
  {
    "text": "some really great open source tools out there this one is by Brendan Gregg so",
    "start": "1143390",
    "end": "1149120"
  },
  {
    "text": "Brendan is a engineer at Netflix and he was a really amazing a performance blog I highly recommend you check it out",
    "start": "1149120",
    "end": "1154940"
  },
  {
    "text": "and what Brendan's tool does here is it actually uses the kernel instrumentation framework to actually instrument the tcp",
    "start": "1154940",
    "end": "1163429"
  },
  {
    "text": "retransmit skb function in the kernel to gather some information when every",
    "start": "1163429",
    "end": "1168500"
  },
  {
    "text": "transmission happens so this is a advantageous for a couple of reasons one is that because we're actually",
    "start": "1168500",
    "end": "1174890"
  },
  {
    "text": "instrumenting the particular kernel function call it only gets called when",
    "start": "1174890",
    "end": "1180559"
  },
  {
    "text": "there's an actual retransmission which basically means you get a trigger right you can run this command and you'll see you know as retransmissions happen",
    "start": "1180559",
    "end": "1187280"
  },
  {
    "text": "they'll start showing up on your screen the other nice thing about this is that because you're in the kernel UI you have",
    "start": "1187280",
    "end": "1193520"
  },
  {
    "text": "easy access to more information you can actually turn you can actually add a lot more information than just this this is kind of a default",
    "start": "1193520",
    "end": "1199050"
  },
  {
    "text": "but right away we can see that we've already got the process ID which is a really helpful to track back this",
    "start": "1199050",
    "end": "1204210"
  },
  {
    "text": "particular TCP connection was initiated by this particular process running on my box and so it's it can be very helpful",
    "start": "1204210",
    "end": "1211530"
  },
  {
    "text": "if you know that's the process ID of my web server or maybe my mail client or",
    "start": "1211530",
    "end": "1216929"
  },
  {
    "text": "whatever and so you know having additional information at our disposal really helps us kind of try to",
    "start": "1216929",
    "end": "1222630"
  },
  {
    "text": "triangulate what's going on so definitely take a look at this tool and play around that has a lot of really cool options the other nice thing about",
    "start": "1222630",
    "end": "1229710"
  },
  {
    "text": "it be is because it's instrumenting the kind of the exception path so it's instrumentalism int function that means",
    "start": "1229710",
    "end": "1236280"
  },
  {
    "text": "it's only called when the retransmits happens which means the overhead of the instrumentation is only paid when you",
    "start": "1236280",
    "end": "1242910"
  },
  {
    "text": "have a retransmission so it wouldn't affect the performance of your TCP connection on kind of the normal happy path only when you actually see a",
    "start": "1242910",
    "end": "1249450"
  },
  {
    "text": "returns mission doesn't actually execute this instrumented code which is a little bit nice okay let's take some more into",
    "start": "1249450",
    "end": "1256770"
  },
  {
    "text": "the congestion control algorithm so the congestion control algorithm really is",
    "start": "1256770",
    "end": "1261840"
  },
  {
    "text": "the magic in TCP and it it's magical because it has to make almost an",
    "start": "1261840",
    "end": "1267900"
  },
  {
    "text": "impossible decision the TCP connection control algorithm is looking at just",
    "start": "1267900",
    "end": "1275220"
  },
  {
    "text": "local information it's trying to figure out you know it's looking at the different packets that are arriving and",
    "start": "1275220",
    "end": "1280380"
  },
  {
    "text": "it's trying to make an inference about what's going on kind of in the global network at a particular point in time",
    "start": "1280380",
    "end": "1287280"
  },
  {
    "text": "and of course the state of the global network is going to be changing over time and so the congestion controller",
    "start": "1287280",
    "end": "1292410"
  },
  {
    "text": "algorithm has a very difficult job in that it has to kind of take clues and use heuristics to come up with a",
    "start": "1292410",
    "end": "1299490"
  },
  {
    "text": "decision about what to do next so if you look at the history of the congestion control algorithm on Linux you can see",
    "start": "1299490",
    "end": "1305850"
  },
  {
    "start": "1302000",
    "end": "1302000"
  },
  {
    "text": "it's actually changed several times over the years so back before 268 it was actually an implementation called new Reno",
    "start": "1305850",
    "end": "1312809"
  },
  {
    "text": "starting at two six eight it actually switched to something called BIC and now the modern builds the kernel actually",
    "start": "1312809",
    "end": "1319500"
  },
  {
    "text": "use something called cubic which we saw before with the SS tool there's a bunch of other implementations out there it's",
    "start": "1319500",
    "end": "1325950"
  },
  {
    "text": "actually a fascinating area of research if you want more about TCP and and and what goes into building these algorithms I",
    "start": "1325950",
    "end": "1332040"
  },
  {
    "text": "definitely recommend digging in and reading some papers about what are the design decisions behind each of these",
    "start": "1332040",
    "end": "1337860"
  },
  {
    "text": "algorithms but one of the nice things that looks gives us is it has a pluggable architecture so that we can",
    "start": "1337860",
    "end": "1343679"
  },
  {
    "text": "swap out which algorithm we want to use and that's really important because you",
    "start": "1343679",
    "end": "1349530"
  },
  {
    "text": "know just because there's a default algorithm it doesn't necessarily mean that that default is going to apply to our particular use case and the other",
    "start": "1349530",
    "end": "1357120"
  },
  {
    "text": "thing you know you can take away from this when I see you know a fundamental aspect of my of my operating system change several times over a time period",
    "start": "1357120",
    "end": "1364440"
  },
  {
    "text": "you know you can kind of take a step back and think well why is it why can't we get this right and I think the first",
    "start": "1364440",
    "end": "1369600"
  },
  {
    "text": "reason which is what I already touched on is that it's a hard problem and so we're gonna continually iterate on trying to solve this problem with better",
    "start": "1369600",
    "end": "1375270"
  },
  {
    "text": "heuristics the other things happened is you know the network itself looks very very different over the years it really",
    "start": "1375270",
    "end": "1382679"
  },
  {
    "text": "transformed several times if you think back to you know 10 20 years ago there was broadband before that there was",
    "start": "1382679",
    "end": "1389580"
  },
  {
    "text": "dial-up you know then we had Wi-Fi and now there's there's a huge mobile you",
    "start": "1389580",
    "end": "1395970"
  },
  {
    "text": "know a set of devices out there that are running TCP applications and so when you think about all these different kinds of",
    "start": "1395970",
    "end": "1401850"
  },
  {
    "text": "network topologies it's really a very different perspective for these algorithms to have to handle if I'm on a",
    "start": "1401850",
    "end": "1408450"
  },
  {
    "text": "mobile network versus a broadband network and since you're a particular application might be targeting customers",
    "start": "1408450",
    "end": "1414360"
  },
  {
    "text": "in one other segments and maybe not both it might behoove you to try to investigate are there different TCP congestion",
    "start": "1414360",
    "end": "1420780"
  },
  {
    "text": "control algorithms that can take advantage of my specific situation so if",
    "start": "1420780",
    "end": "1427169"
  },
  {
    "start": "1426000",
    "end": "1426000"
  },
  {
    "text": "we want to tune exactly which algorithm we're going to use the first thing we can do is see what are our options so",
    "start": "1427169",
    "end": "1432900"
  },
  {
    "text": "here's a syst CTL and this is just asking the kernel what TCP control algorithms are",
    "start": "1432900",
    "end": "1438270"
  },
  {
    "text": "available to me on this box so on this particular instance I have cubic and",
    "start": "1438270",
    "end": "1443309"
  },
  {
    "text": "rino but there's actually a large number of these algorithms that actually come",
    "start": "1443309",
    "end": "1449660"
  },
  {
    "text": "precompiled in a lot of the standard kind of kernel images for Linux distributions and we can just find those",
    "start": "1449660",
    "end": "1455580"
  },
  {
    "text": "in the kernel tree just by using that fine command there so anything kind of prefix with TCP underscores",
    "start": "1455580",
    "end": "1461159"
  },
  {
    "text": "gonna be a congestion control algorithm and so if we want to try out a new one let's try it let's try it one called",
    "start": "1461159",
    "end": "1466259"
  },
  {
    "text": "Illinois that sounds fun so we're going to modprobe Illinois so that just loads that kernel module into",
    "start": "1466259",
    "end": "1471779"
  },
  {
    "text": "the kernel and then lastly we're gonna update our use that'sa CTL to update the list of available finish and control",
    "start": "1471779",
    "end": "1478139"
  },
  {
    "text": "algorithms to include Illinois now this point Illinois is simply a choice it's",
    "start": "1478139",
    "end": "1483210"
  },
  {
    "text": "not what Network processes are going to use going forward without a little bit of help and when you look at what a lot",
    "start": "1483210",
    "end": "1490769"
  },
  {
    "text": "of applications out there do very few of them excuse me very few of them actually expose this configuration knob you know",
    "start": "1490769",
    "end": "1497879"
  },
  {
    "text": "it's it's a very low-level detail to pick what congestion control algorithm you want to use when you set up a TCP",
    "start": "1497879",
    "end": "1503580"
  },
  {
    "text": "connection right it's not your general you know result when you when you first learning how to open a TCP connection",
    "start": "1503580",
    "end": "1510029"
  },
  {
    "text": "when you're first learning how to program and in fact even the most advanced servers out there typically",
    "start": "1510029",
    "end": "1515249"
  },
  {
    "text": "don't expose this all the way through like to configuration files so one way for us to play around with this however",
    "start": "1515249",
    "end": "1520440"
  },
  {
    "text": "is this just to update the system-wide default and therefore any new connections going forward after we",
    "start": "1520440",
    "end": "1525809"
  },
  {
    "text": "update the system by default well then start using our new algorithm so that's what these commands do here this the CTL",
    "start": "1525809",
    "end": "1532289"
  },
  {
    "text": "at the top is updating the in-memory kernel with to set the illinois congestion control algorithm to be our",
    "start": "1532289",
    "end": "1539099"
  },
  {
    "text": "default of course the downside of using that command is that it only lasts as long as your instance is running if it",
    "start": "1539099",
    "end": "1545220"
  },
  {
    "text": "ever reboots you lose that parameter so the second for the second command there is what you can use to persist it across",
    "start": "1545220",
    "end": "1551099"
  },
  {
    "text": "reboots and then lastly of course this is only new connections going forward so",
    "start": "1551099",
    "end": "1556619"
  },
  {
    "text": "if you're trying to do some experiments and want to see the effects of this we want to make sure you bounce all your network processes to make sure they're",
    "start": "1556619",
    "end": "1562619"
  },
  {
    "text": "all taking advantage of a new setting that you just set up okay so let's talk",
    "start": "1562619",
    "end": "1569549"
  },
  {
    "text": "a little bit more about the retransmission timer so the retransmission timer is another one of these kind of finicky values that you",
    "start": "1569549",
    "end": "1575909"
  },
  {
    "text": "have to take some care in selecting the retransmission timer is important",
    "start": "1575909",
    "end": "1581549"
  },
  {
    "text": "because it's it's the senders perspective of when it has received an",
    "start": "1581549",
    "end": "1587820"
  },
  {
    "text": "acknowledgment so if you put the retransmission timeout too low let's say I stick it at 100 milliseconds",
    "start": "1587820",
    "end": "1594690"
  },
  {
    "text": "and I'm communicating over a TCP connection that has a round-trip time of 95 milliseconds then it's very likely",
    "start": "1594690",
    "end": "1600510"
  },
  {
    "text": "that a response will be on its way and just experience a little bit of jitter and my RTO timer will fire and so I'll",
    "start": "1600510",
    "end": "1608370"
  },
  {
    "text": "initiate a retransmission just before the packet there the acknowledgement packet actually arrives and so we're",
    "start": "1608370",
    "end": "1613710"
  },
  {
    "text": "wasting work and we're you know not doing the the network any favor because we're adding packets that are ultimately",
    "start": "1613710",
    "end": "1618990"
  },
  {
    "text": "going to be useless and we'll add a little bit of congestion to the network to of course on the flip side you don't",
    "start": "1618990",
    "end": "1624660"
  },
  {
    "text": "wanna send it too high if you set the RTO timer to say a second and you have",
    "start": "1624660",
    "end": "1630510"
  },
  {
    "text": "two instances which are right next to each other and maybe they have you know a sub 1 millisecond round-trip time and",
    "start": "1630510",
    "end": "1636540"
  },
  {
    "text": "if one of those packets does happen to get dropped those instances are just gonna sit there for the other 999",
    "start": "1636540",
    "end": "1642300"
  },
  {
    "text": "milliseconds waiting just in case for this packet to show up one day and so if",
    "start": "1642300",
    "end": "1647520"
  },
  {
    "text": "you set it too high you can have these really long stalls in your network connection which is you know almost",
    "start": "1647520",
    "end": "1654390"
  },
  {
    "text": "almost as bad right so it's a little bit of an art to have about how to set this",
    "start": "1654390",
    "end": "1659660"
  },
  {
    "text": "on Linux on Linux the default is 200",
    "start": "1659660",
    "end": "1664680"
  },
  {
    "start": "1663000",
    "end": "1663000"
  },
  {
    "text": "milliseconds and it's set again on a per route basis when you when you list your",
    "start": "1664680",
    "end": "1670740"
  },
  {
    "text": "routes it's not going to show you the 200 because it is the default but we can certainly update it",
    "start": "1670740",
    "end": "1675920"
  },
  {
    "text": "so what's updated to a smaller value for our local subnet so if you're running",
    "start": "1675920",
    "end": "1681570"
  },
  {
    "text": "two instances in the same subnet and say a V PC those two instances will always be in the same availability zone which",
    "start": "1681570",
    "end": "1688590"
  },
  {
    "text": "means I'd expect you know very low round-trip time you know on the order of one or maybe two milliseconds around",
    "start": "1688590",
    "end": "1694380"
  },
  {
    "text": "trip time between those instances so let's update just that just that one",
    "start": "1694380",
    "end": "1700110"
  },
  {
    "text": "route there which is the the link local route which is applies to all the instances in my kind of my broadcast",
    "start": "1700110",
    "end": "1706410"
  },
  {
    "text": "domain so again here's our route list we can see what we're starting out with and",
    "start": "1706410",
    "end": "1711690"
  },
  {
    "text": "then under new IP route change and set my retransmission minimum to 10 milliseconds so this should be a pretty",
    "start": "1711690",
    "end": "1719130"
  },
  {
    "text": "comfortable you know buffer so that if I see a little bit of jitter you know it",
    "start": "1719130",
    "end": "1724800"
  },
  {
    "text": "does happen and time to time I shouldn't have any spurious retransmissions but at the same",
    "start": "1724800",
    "end": "1729850"
  },
  {
    "text": "time I will actually react fairly quickly because I'm my expected round-trip time is still low and then",
    "start": "1729850",
    "end": "1735580"
  },
  {
    "text": "again if I list my routes after the fact we can see the Artyom in there has been applied so one of the things that",
    "start": "1735580",
    "end": "1744970"
  },
  {
    "start": "1744000",
    "end": "1744000"
  },
  {
    "text": "actually can can kind of contribute to retransmissions is what's called",
    "start": "1744970",
    "end": "1750250"
  },
  {
    "text": "queueing on the network path and so what when you send a packet between two",
    "start": "1750250",
    "end": "1755770"
  },
  {
    "text": "endpoints what happens is it traverses some set of routers before it finally reaches its destination now when a",
    "start": "1755770",
    "end": "1762190"
  },
  {
    "text": "packet reaches a router in the middle of your network path what happens is it arrives on an incoming network interface",
    "start": "1762190",
    "end": "1767980"
  },
  {
    "text": "and it sits in a queue the router then has a data plane which takes the packet off the queue makes a routing decision",
    "start": "1767980",
    "end": "1775299"
  },
  {
    "text": "as quickly as it can and then sticks it on an outbound queue on the outbound interface so we have two queues here on",
    "start": "1775299",
    "end": "1782110"
  },
  {
    "text": "this router and what we've discovered is that these queues can be subject to kind",
    "start": "1782110",
    "end": "1787840"
  },
  {
    "text": "of micro bursts of activity so if you have a bunch of packets also opens actly",
    "start": "1787840",
    "end": "1793090"
  },
  {
    "text": "the same time and get pulled off the wire very very close together the routing engine can only process them at",
    "start": "1793090",
    "end": "1799270"
  },
  {
    "text": "a certain speed and so if you're at the back of the queue you can observe latency increases simply by sitting that",
    "start": "1799270",
    "end": "1805630"
  },
  {
    "text": "queue for just a little bit of time it doesn't necessarily mean the link itself is saturated it means that a lot of",
    "start": "1805630",
    "end": "1811750"
  },
  {
    "text": "packets showed up at exactly the same time just a really quick micro burst and this can contribute to kind of the",
    "start": "1811750",
    "end": "1817299"
  },
  {
    "text": "end-to-end latency of your system of course when that happens you can trigger retransmission timeouts not and again",
    "start": "1817299",
    "end": "1823299"
  },
  {
    "text": "this has not become from congestion but it's from this kind of queueing behavior so there's been a really interesting",
    "start": "1823299",
    "end": "1829900"
  },
  {
    "text": "body of work that kind of looks into this problem to try to figure out is there anything we can do about it and",
    "start": "1829900",
    "end": "1835710"
  },
  {
    "text": "turns out there is it's called active queue management and what active queue",
    "start": "1835710",
    "end": "1841330"
  },
  {
    "start": "1836000",
    "end": "1836000"
  },
  {
    "text": "management does it has this observation that you know the problem here is actually that microburst so if I'm in a",
    "start": "1841330",
    "end": "1847150"
  },
  {
    "text": "situation where I have routers whose interfaces might have a lengthy queues it behooves me to try to insert just a",
    "start": "1847150",
    "end": "1854650"
  },
  {
    "text": "little tiny bit of delay in between a few of my packets to try to spread them out right",
    "start": "1854650",
    "end": "1860440"
  },
  {
    "text": "if you think about what happens a lot of times from end perspective of what's",
    "start": "1860440",
    "end": "1865990"
  },
  {
    "text": "going on the network you oftentimes have big buffers which are copied in bulk the",
    "start": "1865990",
    "end": "1871390"
  },
  {
    "text": "processed and then another big ball is applied so what this the idea behind some of these algorithms is you want to",
    "start": "1871390",
    "end": "1877360"
  },
  {
    "text": "try to take smaller chunks and put a little bit of spacing so the end-to-end kind of bandwidth will be approximately",
    "start": "1877360",
    "end": "1882400"
  },
  {
    "text": "the same but the actual spacing between the packets is just enough to try to kind of allied this queueing problem so",
    "start": "1882400",
    "end": "1891070"
  },
  {
    "text": "the implementation I'm going to use here is called the coddle algorithm Caudle actually stands for controlled delay because that's effectively what",
    "start": "1891070",
    "end": "1897310"
  },
  {
    "text": "it's doing is putting in some very controlled very selective bits of delay into the network and this particular",
    "start": "1897310",
    "end": "1904180"
  },
  {
    "text": "algorithm was it comes standard on a lot of installations of linux and certainly",
    "start": "1904180",
    "end": "1910240"
  },
  {
    "text": "is on amazon linux and many others really and so the way we're gonna turn",
    "start": "1910240",
    "end": "1916030"
  },
  {
    "text": "this on is using what's called the traffic control mechanism of linux so the TC command so the TC command is one",
    "start": "1916030",
    "end": "1921310"
  },
  {
    "text": "of these tools which is extremely powerful and is really rivaled by its",
    "start": "1921310",
    "end": "1926410"
  },
  {
    "text": "learning curve I mean like it's a very hard tool to kind of figure out if you're just getting started but the good news is there's a lot of good",
    "start": "1926410",
    "end": "1932890"
  },
  {
    "text": "documentation and particularly good examples out there for doing particular things with the TC command even if you",
    "start": "1932890",
    "end": "1938530"
  },
  {
    "text": "don't fully grok every little bit of its of its power so here what I'm doing is",
    "start": "1938530",
    "end": "1944020"
  },
  {
    "text": "I'm actually looking at what's called a queueing discipline so I'm gonna list my queueing disciplines and the important line is that is that second one with the",
    "start": "1944020",
    "end": "1950260"
  },
  {
    "text": "with the pound sign which is I'm gonna add a new entry in my queueing discipline which says add this coddle",
    "start": "1950260",
    "end": "1956290"
  },
  {
    "text": "algorithm and so what this is gonna do is that every time a packet leaves my Linux instance it will be subject to",
    "start": "1956290",
    "end": "1963250"
  },
  {
    "text": "this queueing discipline and it will go through this coddle implementation and so coddle is is actually kind of neat",
    "start": "1963250",
    "end": "1969820"
  },
  {
    "text": "there's there's more information here at that web page and what kuddle actually tries to do is it tries to not make you",
    "start": "1969820",
    "end": "1976630"
  },
  {
    "text": "make any decisions it doesn't really have very many tuning parameters and one of its strengths is that it just tries",
    "start": "1976630",
    "end": "1982480"
  },
  {
    "text": "to be smart and tries to use a lot of heuristics to figure out things for you and so we're going to look at this some more again",
    "start": "1982480",
    "end": "1989050"
  },
  {
    "text": "so we get to our applications at the end okay one other thing to keep in mind",
    "start": "1989050",
    "end": "1996010"
  },
  {
    "text": "with TCP performance is of course the size of your packets a lot of systems along the network path are ultimately",
    "start": "1996010",
    "end": "2004520"
  },
  {
    "text": "limited by their packet per second performance not necessarily their byte per second performance so if you",
    "start": "2004520",
    "end": "2011190"
  },
  {
    "text": "thinking about making a routing decision on a packet the routing decision just looks at the headers and then moves the",
    "start": "2011190",
    "end": "2016260"
  },
  {
    "text": "entire packet all at once and so what that means is that if we want to increase our throughput of the system",
    "start": "2016260",
    "end": "2022760"
  },
  {
    "text": "for a given packet per second it behooves us to increase our payload so",
    "start": "2022760",
    "end": "2028440"
  },
  {
    "text": "that we can get a higher ratio of kind of bytes that were ultimately from the application into each packet so if we",
    "start": "2028440",
    "end": "2034590"
  },
  {
    "text": "start out with kind of a 1500 byte packet which is what your which would what you would have kind of standard on",
    "start": "2034590",
    "end": "2039690"
  },
  {
    "text": "the Internet you get about three and a half percent of overhead just from the IP and TCP you",
    "start": "2039690",
    "end": "2045840"
  },
  {
    "text": "know all the two three four layer headers that are on this packet that contribute to just waste right so what a",
    "start": "2045840",
    "end": "2054179"
  },
  {
    "text": "lot of more recent networks use is nine thousand one byte packets this is what we used in VPC so you'll actually get",
    "start": "2054179",
    "end": "2060720"
  },
  {
    "text": "explicit signaling within your B PC that you can go up to nine thousand one bytes and we're gonna look at some actual",
    "start": "2060720",
    "end": "2068340"
  },
  {
    "text": "implications of these packet sizes in just a minute but let's say we want to",
    "start": "2068340",
    "end": "2074070"
  },
  {
    "start": "2074000",
    "end": "2074000"
  },
  {
    "text": "actually tweak it and play around a little bit so if we look at our if you look at our local link using this IP",
    "start": "2074070",
    "end": "2081240"
  },
  {
    "text": "link command what we can see is that it's actually set to 9001 which is what we want and if we show our route list it",
    "start": "2081240",
    "end": "2089550"
  },
  {
    "text": "doesn't it doesn't really tell us much because it's kind of defaulting to its defaults and it will it'll actually use you know path into you discovery to",
    "start": "2089550",
    "end": "2095040"
  },
  {
    "text": "figure out what MTU size to use but let's say we want to change it anyway we want to set it to something that we want",
    "start": "2095040",
    "end": "2101160"
  },
  {
    "text": "to override we can do that again on the route so let's say we want to update our default route to our tour default",
    "start": "2101160",
    "end": "2107160"
  },
  {
    "text": "gateway to explicitly always use an MTU of 1500 so we can do that with that IP",
    "start": "2107160",
    "end": "2112350"
  },
  {
    "text": "route change command and then once we list that we can see the over in the output in the route list okay",
    "start": "2112350",
    "end": "2120210"
  },
  {
    "text": "couple more things before we can dive into some applications when it comes to packet per",
    "start": "2120210",
    "end": "2126140"
  },
  {
    "start": "2121000",
    "end": "2121000"
  },
  {
    "text": "second performance one of the really important things when working in a virtualization environment is to",
    "start": "2126140",
    "end": "2131359"
  },
  {
    "text": "eliminate overhead in processing each packet and so a couple years ago we and we launched a feature called enhanced",
    "start": "2131359",
    "end": "2137840"
  },
  {
    "text": "networking which is available on a lot of the new VPC instance types and what",
    "start": "2137840",
    "end": "2143450"
  },
  {
    "text": "enhanced networking does is it allows the user the kind of the guest operating systems like you know your ec2 instance",
    "start": "2143450",
    "end": "2150410"
  },
  {
    "text": "to bypass the host operating system like the hypervisor and the system that runs",
    "start": "2150410",
    "end": "2156230"
  },
  {
    "text": "the different guest operating systems it allows them to bypass those host",
    "start": "2156230",
    "end": "2161930"
  },
  {
    "text": "operating systems and send packets directly to the neck so it basically exposes the hardware neck directly to",
    "start": "2161930",
    "end": "2168349"
  },
  {
    "text": "your VM image and the advantage of this is that you get a lot less code touching",
    "start": "2168349",
    "end": "2175190"
  },
  {
    "text": "the packet which means there's a lot less latency and almost more importantly there's a lot less jitter and so what",
    "start": "2175190",
    "end": "2181250"
  },
  {
    "text": "this translates into in a virtualization environment is higher packet per second performance and so anytime you're gonna",
    "start": "2181250",
    "end": "2186590"
  },
  {
    "text": "be running experiments within B PC definitely make sure that you're using enhanced networking it's been around for",
    "start": "2186590",
    "end": "2192410"
  },
  {
    "text": "a couple years now so it's it's but fault almost almost everywhere certainly it's on the window zombies and",
    "start": "2192410",
    "end": "2197839"
  },
  {
    "text": "the Amazon Linux omni's but a lot of the other armies out there have switched to using it by default if you want to learn",
    "start": "2197839",
    "end": "2203150"
  },
  {
    "text": "some more about it there's a there's there's really good documentation on the internet and there was a talk a couple years ago that dove into how it works",
    "start": "2203150",
    "end": "2209960"
  },
  {
    "text": "and how you can make sure that your instance is actually taking advantage of it because it does actually require a particular driver to to activate okay",
    "start": "2209960",
    "end": "2220330"
  },
  {
    "text": "let's talk about how we can use these new tools that I've been going over",
    "start": "2220330",
    "end": "2225650"
  },
  {
    "text": "today I'm gonna stand up a couple instances these are pretty beefy instances and 410 excels and I'm gonna",
    "start": "2225650",
    "end": "2233599"
  },
  {
    "text": "run Amazon Linux on them and I'm gonna perform a series of application kind of experiments to try to you know you know",
    "start": "2233599",
    "end": "2240500"
  },
  {
    "text": "analyze what some of these tuning parameters can actually do for us so all of these applications are going to be",
    "start": "2240500",
    "end": "2246410"
  },
  {
    "text": "HTTP based and all but one of them are actually going to use SSL SSL is you",
    "start": "2246410",
    "end": "2251780"
  },
  {
    "text": "know the kind of the new standard you know almost all connections these days should be SSL so it really makes sense I think",
    "start": "2251780",
    "end": "2257910"
  },
  {
    "text": "whenever you're doing benchmarking for you know for web traffic is you should always be including SSL in the equation",
    "start": "2257910",
    "end": "2263310"
  },
  {
    "text": "I try to take a little bit of you know care in eliminating other variables and",
    "start": "2263310",
    "end": "2269310"
  },
  {
    "text": "these experiments again the goal was not exactly to produce an exact replica of a particular production environment",
    "start": "2269310",
    "end": "2275370"
  },
  {
    "text": "they're a little bit contrived and so your your mileage will probably vary depending on you know what it's different you know outcomes you would",
    "start": "2275370",
    "end": "2282810"
  },
  {
    "text": "get with trillions and these parameters and so the point here is again here's here's here's a way we can test things",
    "start": "2282810",
    "end": "2287940"
  },
  {
    "text": "and if you can reproduce your own you know environment in a environment like V",
    "start": "2287940",
    "end": "2293910"
  },
  {
    "text": "PC you can do these tests as well with your particular applications and see what effect these tools have on those so",
    "start": "2293910",
    "end": "2301050"
  },
  {
    "text": "I'm I'm not storing the data anywhere the client just just throws the way since it receives it I'm using a ram",
    "start": "2301050",
    "end": "2307230"
  },
  {
    "text": "file system so they're the web server doesn't ever actually have to hit any kind of storage device and all the bits",
    "start": "2307230",
    "end": "2313710"
  },
  {
    "text": "are randomized so there's no potential compression going on at any stage okay",
    "start": "2313710",
    "end": "2319740"
  },
  {
    "text": "so the Apache bench tool is gonna be my client it gives you a whole bunch of statistics whenever you ride and so this",
    "start": "2319740",
    "end": "2326010"
  },
  {
    "text": "is an example output which is which is what's going to be fueling some of the numbers sharing on the next few slides",
    "start": "2326010",
    "end": "2332510"
  },
  {
    "text": "you know it's a really fun tool and actually if you're doing any kind of web-based benchmarking it's a really",
    "start": "2332510",
    "end": "2339270"
  },
  {
    "text": "great place to start because it's it's it's it's probably a fairly straightforward to use okay so let's",
    "start": "2339270",
    "end": "2345510"
  },
  {
    "start": "2345000",
    "end": "2345000"
  },
  {
    "text": "talk about an application that might be experiencing loss so in the beginning of",
    "start": "2345510",
    "end": "2351180"
  },
  {
    "text": "the talk I talked about just how bad loss is for a TCP connection right because the T speed control congestion",
    "start": "2351180",
    "end": "2358380"
  },
  {
    "text": "control algorithm really tries to back off very aggressively because it thinks",
    "start": "2358380",
    "end": "2363480"
  },
  {
    "text": "it can't send more traffic and the way it backs off has a very large impact in how it actually is able to achieve",
    "start": "2363480",
    "end": "2371100"
  },
  {
    "text": "different levels of performance so I'd like to try to build stimulate an experience where I have an application",
    "start": "2371100",
    "end": "2377850"
  },
  {
    "text": "and I artificially inject some loss into the network so I'm gonna use again Jack",
    "start": "2377850",
    "end": "2384210"
  },
  {
    "text": "and Jill here to test instances these instances are going to be about 80 milliseconds apart and around uptime and then I'm gonna have 160",
    "start": "2384210",
    "end": "2392440"
  },
  {
    "text": "parallel streams just pounding them and so the goal here is in the in the",
    "start": "2392440",
    "end": "2397869"
  },
  {
    "text": "presence of loss how good can I do so",
    "start": "2397869",
    "end": "2405280"
  },
  {
    "text": "it's oftentimes hard to find a link with a very controlled amount of loss to run an experiment and certainly we take",
    "start": "2405280",
    "end": "2412119"
  },
  {
    "text": "operational excellence very very seriously in Amazon and try to make sure that there is no loss anywhere on our network but it does happen especially if",
    "start": "2412119",
    "end": "2418570"
  },
  {
    "text": "you go out to the internet and have mobile clients so we need a way to simulate it in our test environment so",
    "start": "2418570",
    "end": "2424960"
  },
  {
    "text": "I'm gonna simulate it again using this TC tool so TC is is is very flexible and",
    "start": "2424960",
    "end": "2431050"
  },
  {
    "text": "what allows us to do with each pack leaving our box and here is a command that will add an artificial amount of",
    "start": "2431050",
    "end": "2436240"
  },
  {
    "text": "0.2% loss to all of my outgoing packets from that instance so again how good can",
    "start": "2436240",
    "end": "2443200"
  },
  {
    "text": "we do with 0.2% loss so starting out running my Apache bench benchmark I'm",
    "start": "2443200",
    "end": "2450369"
  },
  {
    "start": "2445000",
    "end": "2445000"
  },
  {
    "text": "getting a little over 4 gigabits per second that's pretty good over 80 milliseconds round-trip time now let's",
    "start": "2450369",
    "end": "2455980"
  },
  {
    "text": "introduce that loss BAM there went over half of my throughput just 0.2 percent",
    "start": "2455980",
    "end": "2463450"
  },
  {
    "text": "and my application is already really suffering so what can we do well we",
    "start": "2463450",
    "end": "2470800"
  },
  {
    "text": "talked about a bunch of different techniques so let's just try them you know a lot of these a lot of these tools and a lot of these tuning parameters",
    "start": "2470800",
    "end": "2476560"
  },
  {
    "text": "takes time to build intuitions about and if you don't if you don't fully know which way to start you can just try them",
    "start": "2476560",
    "end": "2482710"
  },
  {
    "text": "so let's try trimming that initial congestion window well turns out that was a bad idea so maybe we won't do that",
    "start": "2482710",
    "end": "2490109"
  },
  {
    "text": "let's try uh blowing the TCP buffers on the sender side that also doesn't help",
    "start": "2490109",
    "end": "2496300"
  },
  {
    "text": "and so you know the reason I kind of put the sender side here is you know if you if you have a client-server architecture",
    "start": "2496300",
    "end": "2501750"
  },
  {
    "text": "you can't always affect what the client is doing so it'd be nice if we could try to tune the server to behave in a",
    "start": "2501750",
    "end": "2508359"
  },
  {
    "text": "slightly different way without having to force a kind of an application or a system change on our clients but it",
    "start": "2508359",
    "end": "2513609"
  },
  {
    "text": "turns out there's not really much that we can do here on updating the receive window on this on the sender side and in",
    "start": "2513609",
    "end": "2520359"
  },
  {
    "text": "fact that actually makes things worse so in reading about some of these congestion control algorithms I noticed",
    "start": "2520359",
    "end": "2526970"
  },
  {
    "text": "that the Illinois algorithm there's a little bit of foreshadowing here the the Illinois algorithm actually was",
    "start": "2526970",
    "end": "2532100"
  },
  {
    "text": "particularly built to handle loss little bit better so let's try at plugging in",
    "start": "2532100",
    "end": "2539030"
  },
  {
    "text": "the Illinois condition control algorithm look at that so it's magic right I'm pulling this magic rabbit out of my hat",
    "start": "2539030",
    "end": "2545420"
  },
  {
    "text": "and I get 137 percent increase in performance just by tuning the TCP connection control algorithm so a lot of",
    "start": "2545420",
    "end": "2552110"
  },
  {
    "text": "congestion control algorithms right aren't really expecting loss but if you're in a situation where you have persistent loss in network and it comes",
    "start": "2552110",
    "end": "2558410"
  },
  {
    "text": "and goes then it might be something that you want to test and try to evaluate whether or not some of these different",
    "start": "2558410",
    "end": "2564200"
  },
  {
    "text": "congestion control algorithms might be helpful to you let's talk about long big transfers so",
    "start": "2564200",
    "end": "2573020"
  },
  {
    "start": "2569000",
    "end": "2569000"
  },
  {
    "text": "there's this there's this new McClay Chur called big fat or long fat pipes and it's oftentimes a ripe area for",
    "start": "2573020",
    "end": "2579770"
  },
  {
    "text": "optimization because it comes back to that bandwidth delay product problem so let's say we have two instances that are",
    "start": "2579770",
    "end": "2585320"
  },
  {
    "text": "spread across an 80 millisecond path and I want to transfer some pretty big files so I'm gonna transfer 1 gigabyte files",
    "start": "2585320",
    "end": "2591520"
  },
  {
    "text": "and I'm gonna get 8 parallel clients and the goal is how much bandwidth how good",
    "start": "2591520",
    "end": "2596600"
  },
  {
    "text": "can I do across these fairly long links to try to get those 8 gig files",
    "start": "2596600",
    "end": "2601730"
  },
  {
    "text": "transferred as quickly as possible so if I want to just kind of flat out I see",
    "start": "2601730",
    "end": "2608030"
  },
  {
    "start": "2604000",
    "end": "2604000"
  },
  {
    "text": "about 2 gigabits per second that's okay laughs too bad let's try doubling the buffers on the",
    "start": "2608030",
    "end": "2614330"
  },
  {
    "text": "server side man still not a good idea but of course you know on a big transfer",
    "start": "2614330",
    "end": "2619730"
  },
  {
    "text": "like this the the impact you'd expect is of course on the receiver right so the receiving side is the thing that has",
    "start": "2619730",
    "end": "2625760"
  },
  {
    "text": "this buffer that's constantly getting filled as it's transferring this all this data so let's try doubling the",
    "start": "2625760",
    "end": "2630860"
  },
  {
    "text": "receive window on the client side yeah that's better so now we're getting about 2.4 gigahertz per second which is a nice",
    "start": "2630860",
    "end": "2637670"
  },
  {
    "text": "little bump so using these little tuning tools that we've talked about today you know we can start to try to tease apart where we can",
    "start": "2637670",
    "end": "2643760"
  },
  {
    "text": "get some increases in our system let's try this active key management so each",
    "start": "2643760",
    "end": "2650090"
  },
  {
    "text": "of these lines is going to be independent I didn't mention that yet each of these lines is not I",
    "start": "2650090",
    "end": "2655390"
  },
  {
    "text": "you know I'm not doing the server side and the client side and active queue management so each of these are kind of in isolation so if I just turn on active",
    "start": "2655390",
    "end": "2662319"
  },
  {
    "text": "queue management in isolation I also get a little bit of a bump right so you know",
    "start": "2662319",
    "end": "2667420"
  },
  {
    "text": "understanding what kind of the queuing in the middle of network has enabled me to get a few more percentile points of a",
    "start": "2667420",
    "end": "2672670"
  },
  {
    "text": "benefit from this from this test setup all right so I have two things that",
    "start": "2672670",
    "end": "2679329"
  },
  {
    "text": "independently made things better what's next turn both on right let's start both on and we've done even better",
    "start": "2679329",
    "end": "2686819"
  },
  {
    "text": "what about Illinois let's turn that on to a little bit better Brazil so adding",
    "start": "2686819",
    "end": "2692410"
  },
  {
    "text": "our magic hat back in the equation we've now been able to jump to me a little bit",
    "start": "2692410",
    "end": "2698319"
  },
  {
    "text": "that's right so at this point let's also turn on the server side because we've removed a lot of the restrictions from",
    "start": "2698319",
    "end": "2705190"
  },
  {
    "text": "the client side so let's try turning up those server side buffers as well and we got a just a little bit more performance",
    "start": "2705190",
    "end": "2711819"
  },
  {
    "text": "out of that as well and so one of the interesting things about that is you know it was it was an experiment we did early and had overall negative effects",
    "start": "2711819",
    "end": "2718180"
  },
  {
    "text": "but as you start turning tuning and tuning you know all of these parameters",
    "start": "2718180",
    "end": "2723430"
  },
  {
    "text": "interact right and so you it it can help be helpful to try out different",
    "start": "2723430",
    "end": "2729609"
  },
  {
    "text": "combinations of parameters although certainly starting with one of the time is definitely a good idea so in the end",
    "start": "2729609",
    "end": "2736299"
  },
  {
    "text": "on this experiment we got about 32% of network of increase in network performance just by you know tuning and",
    "start": "2736299",
    "end": "2742750"
  },
  {
    "text": "playing and not all the choices were good ones at least not initially but as we continue to play we can see that",
    "start": "2742750",
    "end": "2749079"
  },
  {
    "text": "there's opportunities for you know for improving these things ok let's talk",
    "start": "2749079",
    "end": "2755740"
  },
  {
    "start": "2754000",
    "end": "2754000"
  },
  {
    "text": "about a low RTT path so this experiment is a little bit contrived but I just I",
    "start": "2755740",
    "end": "2761259"
  },
  {
    "text": "wanted to include it to kind of highlight what what the effect of that MTU size was so remember we talked",
    "start": "2761259",
    "end": "2767589"
  },
  {
    "text": "before about kind of the difference between 1500 byte empty use and 9001 by them to use so for this trip for this",
    "start": "2767589",
    "end": "2774430"
  },
  {
    "text": "example application I'm gonna be moving really big files like 10 gig files and you know think of it kind of like a",
    "start": "2774430",
    "end": "2780849"
  },
  {
    "text": "backup and you're in your local easy kind of kind of situation and what would",
    "start": "2780849",
    "end": "2785920"
  },
  {
    "text": "happen if it was actually not using the 9th one bite into you so let's let's do this transfer but force it to be a 1500 byte",
    "start": "2785920",
    "end": "2793430"
  },
  {
    "text": "MTU so with a 1500 MTU I'm getting about",
    "start": "2793430",
    "end": "2801230"
  },
  {
    "text": "you know a little under 9 gigabits per second that's actually pretty good right you know that'll move quite a bit of",
    "start": "2801230",
    "end": "2806770"
  },
  {
    "text": "data across the wire now let's turn on the nine thousand one byte and to use",
    "start": "2806770",
    "end": "2812600"
  },
  {
    "text": "and there we go we get a nice improvement someone expectedly right",
    "start": "2812600",
    "end": "2817880"
  },
  {
    "text": "we're sending more bytes for the same number of packets now when we were",
    "start": "2817880",
    "end": "2824600"
  },
  {
    "text": "talking before about the active Hugh management right the the active queue management was really intended for long",
    "start": "2824600",
    "end": "2829850"
  },
  {
    "text": "network paths that have a lot of routers in the middle and some of those routers might have these network interfaces and",
    "start": "2829850",
    "end": "2835100"
  },
  {
    "text": "have kind of full queues and one of the comments I made was that the active queue management algorithms try to be",
    "start": "2835100",
    "end": "2841010"
  },
  {
    "text": "fairly smart and use heuristics about when to insert you know latency in",
    "start": "2841010",
    "end": "2846290"
  },
  {
    "text": "between those packets because you might think well this control delay algorithm is a terrible idea for high throughput",
    "start": "2846290",
    "end": "2851960"
  },
  {
    "text": "applications because you're adding latency and so if you have a really small round-trip time you know you",
    "start": "2851960",
    "end": "2857990"
  },
  {
    "text": "that's the opposite of what you want and it would be very susceptible to changes in those inter packet delays but it",
    "start": "2857990",
    "end": "2865400"
  },
  {
    "text": "turns out that Caudill is actually pretty smart and when you turn it on it's smart enough not to do anything so",
    "start": "2865400",
    "end": "2871940"
  },
  {
    "text": "it's it's it's a fairly safe tool to kind of experiment with and you can see that you know when when you're getting",
    "start": "2871940",
    "end": "2878030"
  },
  {
    "text": "really really good throughput it's not gonna be adding that delay and it's not gonna be impacting your performance there especially on this example we're",
    "start": "2878030",
    "end": "2885530"
  },
  {
    "text": "on a local link with really really good throughput okay so empty use gets you a",
    "start": "2885530",
    "end": "2892880"
  },
  {
    "text": "little bit so something to make sure if you're ever on a system and you're trying to tweak it a little bit just",
    "start": "2892880",
    "end": "2898820"
  },
  {
    "text": "something to the double check okay last application in the beginning the talk I",
    "start": "2898820",
    "end": "2906080"
  },
  {
    "text": "was talking about initial congestion windows right and the example I gave was a lot of webpages have small artifacts",
    "start": "2906080",
    "end": "2913460"
  },
  {
    "text": "which tend to fit in that you know you know one was to tens of K of data and",
    "start": "2913460",
    "end": "2918620"
  },
  {
    "text": "tend to be transferred over relatively short the - connections so let's let's build a test setup that tries to kind of tease",
    "start": "2918620",
    "end": "2925059"
  },
  {
    "start": "2923000",
    "end": "2923000"
  },
  {
    "text": "this apart so this is the one test I'm actually gonna use HTTP just to kind of remove a variable and really focus in on",
    "start": "2925059",
    "end": "2931630"
  },
  {
    "text": "this problem because I'm it's kind of coming down to exactly how many packets that we need transferring but I'm gonna",
    "start": "2931630",
    "end": "2937150"
  },
  {
    "text": "have a huge number of concurrent connections so 16 400 concurrent clients all trying to grab a 10k file all at",
    "start": "2937150",
    "end": "2944230"
  },
  {
    "text": "once and we're back to a kind of our normal 80 millisecond link between these instances so our goal here is actually",
    "start": "2944230",
    "end": "2951849"
  },
  {
    "text": "gonna be to minimize the latency of these connections not necessarily the bandwidth but the latency although we obviously those are very very related so",
    "start": "2951849",
    "end": "2959890"
  },
  {
    "start": "2959000",
    "end": "2959000"
  },
  {
    "text": "if I run this by default I get about two-and-a-half gigabits per second and it takes a little over three minutes to",
    "start": "2959890",
    "end": "2966099"
  },
  {
    "text": "run not bad let's let's change our initial congestion window from three",
    "start": "2966099",
    "end": "2972400"
  },
  {
    "text": "packets to sixteen packets remember this is going from forty-three hundred bytes before waiting for our initial acknowledgement to 23k before we get",
    "start": "2972400",
    "end": "2980410"
  },
  {
    "text": "initial acknowledgment and we can see that we actually pull down the mean time to run this experiment by like almost",
    "start": "2980410",
    "end": "2986920"
  },
  {
    "text": "six seconds right and that's because there's less time that the the sender is",
    "start": "2986920",
    "end": "2992500"
  },
  {
    "text": "sitting there waiting for that first acknowledgment it can actually put more data on the wire up front and it turns",
    "start": "2992500",
    "end": "2997660"
  },
  {
    "text": "into an actual increase in in performance so tuning this this initial congestion window can really help in",
    "start": "2997660",
    "end": "3003450"
  },
  {
    "text": "these kinds of situations of course if you're transferring a really long file over a very long lived connection that initial congestion window probably is",
    "start": "3003450",
    "end": "3009869"
  },
  {
    "text": "not going to have a material difference on the end and run an execution time of that transfer but if the transfer short",
    "start": "3009869",
    "end": "3016470"
  },
  {
    "text": "and you will see it okay let's go ahead and turn on Illinois so you might think",
    "start": "3016470",
    "end": "3022260"
  },
  {
    "text": "that this is a talk about you know advertising a little bit congestion control algorithm it's not the intention",
    "start": "3022260",
    "end": "3027329"
  },
  {
    "text": "it was just something I was been playing around with anyone you can see us something actually very interesting here with it when I turned on Illinois my",
    "start": "3027329",
    "end": "3034049"
  },
  {
    "text": "Banga went down but so did my time and so what actually is happening here is because it's a different algorithm it's",
    "start": "3034049",
    "end": "3040559"
  },
  {
    "text": "making slightly different choices and so when I see when I see this this result you know I think what's happening is",
    "start": "3040559",
    "end": "3045630"
  },
  {
    "text": "that the the number of outliers that are kind of shifting around the average have come down and so Illinois is a little",
    "start": "3045630",
    "end": "3052319"
  },
  {
    "text": "bit slower but it's a little bit more consistent right so again it's it's merely an anecdote of",
    "start": "3052319",
    "end": "3058130"
  },
  {
    "text": "you know can we play around with these different tuning parameters and see what effect they have on our system so our",
    "start": "3058130",
    "end": "3063770"
  },
  {
    "text": "magic hat there didn't do a whole lot but it did bring down the mean time just a little bit so four point six percent",
    "start": "3063770",
    "end": "3069790"
  },
  {
    "text": "okay so what should you take away from this talk the one is that the network",
    "start": "3069790",
    "end": "3075260"
  },
  {
    "start": "3074000",
    "end": "3074000"
  },
  {
    "text": "doesn't have to be a black box right there's tools out there that we can inspect what's going on on your TCP",
    "start": "3075260",
    "end": "3081859"
  },
  {
    "text": "connection what are the retransmission settings what are the you know timeout settings what are the congestion window",
    "start": "3081859",
    "end": "3087920"
  },
  {
    "text": "settings we can start playing with these and once you once you know where to look then you can start having the fun time",
    "start": "3087920",
    "end": "3094430"
  },
  {
    "text": "of experimentation right so spin them a few instances you know run them for an hour and just and just throw all these",
    "start": "3094430",
    "end": "3101150"
  },
  {
    "text": "different techniques and see what you come up with and after you do that a few times you'll start to build some intuitions about what kinds of",
    "start": "3101150",
    "end": "3107210"
  },
  {
    "text": "improvements you might expect in other environments but they can be some pride surprising from time to time as well the",
    "start": "3107210",
    "end": "3113750"
  },
  {
    "text": "other thing to take away from this talk is I've never actually touched the application right I never made a change to nginx I've never made a change to",
    "start": "3113750",
    "end": "3119990"
  },
  {
    "text": "Apache benchmark I'm these are all kind of Linux level tuning parameters that you know you can apply even if you don't",
    "start": "3119990",
    "end": "3126410"
  },
  {
    "text": "control the software that you have so if you have third-party software or closed source software you don't necessarily are in a bind in that you can't change",
    "start": "3126410",
    "end": "3132589"
  },
  {
    "text": "it you have other options to change kind of system level parameters to try to get better performance kind of independent",
    "start": "3132589",
    "end": "3139220"
  },
  {
    "text": "of what the application is doing and then finally you know hopefully this will provide some insight into you know",
    "start": "3139220",
    "end": "3144260"
  },
  {
    "text": "what your application is actually meeting right you know you you want to make sure that if your application has a",
    "start": "3144260",
    "end": "3149359"
  },
  {
    "text": "specific demand of the network if you're using long long paths with long with",
    "start": "3149359",
    "end": "3154369"
  },
  {
    "text": "high RT T's or 4 RT T's you know you can try to figure out what avenues to kind",
    "start": "3154369",
    "end": "3159740"
  },
  {
    "text": "of tackle first that's it thank you very much for coming to the talk I really appreciate your time",
    "start": "3159740",
    "end": "3167500"
  },
  {
    "text": "whose remember to commit your valuations I'm happy to stay up here at the front if anybody has questions afterwards",
    "start": "3168580",
    "end": "3175540"
  }
]