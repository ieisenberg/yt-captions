[
  {
    "start": "0",
    "end": "230000"
  },
  {
    "text": "[Music] hello everyone my name is clint wycloft",
    "start": "370",
    "end": "7359"
  },
  {
    "text": "and welcome back to another episode of aws supports you i'm an enterprise support manager based",
    "start": "7359",
    "end": "13840"
  },
  {
    "text": "out of pittsburgh pennsylvania here at aws supports you we invite experts from aws support to come online and provide",
    "start": "13840",
    "end": "21119"
  },
  {
    "text": "you with tips for optimizing performance in the cloud lowering your costs and sharing best pack practices and design",
    "start": "21119",
    "end": "28160"
  },
  {
    "text": "considerations aws support you airs every monday at 11 a.m pacific 2 p.m eastern standard time",
    "start": "28160",
    "end": "36239"
  },
  {
    "text": "be sure to block that time off if you do happen to miss an episode of aws supports you please head over to our",
    "start": "36239",
    "end": "42320"
  },
  {
    "text": "youtube channel i'm going to throw a link here in a second to our playlist this is where you can view all of our",
    "start": "42320",
    "end": "48000"
  },
  {
    "text": "previous episodes that have aired today's topic for aws supports you is",
    "start": "48000",
    "end": "53039"
  },
  {
    "text": "designing message patterns and cross-region delivery for amazon sqsqs",
    "start": "53039",
    "end": "58480"
  },
  {
    "text": "and joining me today is mike wells and ayden from aws enterprise support mike",
    "start": "58480",
    "end": "64158"
  },
  {
    "text": "aiden welcome to the show and let's start with a round of introductions sure hey i'm mike wells a technical",
    "start": "64159",
    "end": "70159"
  },
  {
    "text": "account manager out of boulder colorado and i enjoy supporting customers operations resiliency and cost",
    "start": "70159",
    "end": "76000"
  },
  {
    "text": "optimization efforts in the cloud and today i'm going to give a demo of delivering sqs messages in multiple",
    "start": "76000",
    "end": "82320"
  },
  {
    "text": "regions to be more resilient but for now i'll kick it over to iden hey i'm iden i'm an enterprise support",
    "start": "82320",
    "end": "89280"
  },
  {
    "text": "lead based in uh san jose and um i'm interested in this topic because messaging's really foundational to",
    "start": "89280",
    "end": "94960"
  },
  {
    "text": "addressing the reliability pillar of being well architected right and that's",
    "start": "94960",
    "end": "100159"
  },
  {
    "text": "something tams do a lot of with their customers so i'm happy to share more here definitely and uh obviously helping",
    "start": "100159",
    "end": "106479"
  },
  {
    "text": "customers is a is a core capability or piece of what atm a technical account",
    "start": "106479",
    "end": "111920"
  },
  {
    "text": "manager within enterprise support does so like i messed up mentioned today's",
    "start": "111920",
    "end": "117200"
  },
  {
    "text": "topic is designing message patterns in cross region delivery using amazon sqs",
    "start": "117200",
    "end": "122960"
  },
  {
    "text": "uh mike and i didn't do have a demo lined up and if i'm not mistaken there's even a pop quiz that they have planned",
    "start": "122960",
    "end": "129520"
  },
  {
    "text": "later in the episode too so you'll definitely want to stay tuned uh but before we get into the details of",
    "start": "129520",
    "end": "135680"
  },
  {
    "text": "today's episode a quick note to the attendees online please feel free to use the chat option on the right hand side",
    "start": "135680",
    "end": "142560"
  },
  {
    "text": "of the screen uh it'd be interesting to know where you're joining us from day today uh i'm from pittsburgh mike's from",
    "start": "142560",
    "end": "148560"
  },
  {
    "text": "boulder idens from san jose let us know where you're joining us from and also if you have any questions that you think of",
    "start": "148560",
    "end": "155280"
  },
  {
    "text": "please feel free to drop those in the chat we'll be answering those live throughout the show and we're definitely interested in",
    "start": "155280",
    "end": "161920"
  },
  {
    "text": "hearing from you so we'll throw a link to our survey this gives you the attendees online and the folks on the twitch stream uh the opportunity to",
    "start": "161920",
    "end": "168959"
  },
  {
    "text": "share your feedback with us give us ideas for future episodes and who knows one of your ideas might be",
    "start": "168959",
    "end": "174959"
  },
  {
    "text": "featured on a future episode of aws support but now that we've got the",
    "start": "174959",
    "end": "181040"
  },
  {
    "text": "administrative items out of the way mike can you give us a walkthrough of what we're going to be talking about today",
    "start": "181040",
    "end": "187440"
  },
  {
    "text": "yeah absolutely we're going to talk about some of the motivation of why we decided to talk about this topic today",
    "start": "187440",
    "end": "193200"
  },
  {
    "text": "um and obviously the topic's going to be about sqs and queuing and designing different",
    "start": "193200",
    "end": "198480"
  },
  {
    "text": "message patterns um we're going to talk about messaging versus streaming and how to differentiate the two and when to use",
    "start": "198480",
    "end": "204879"
  },
  {
    "text": "what we have a really cool like decision tree to be able to go through and choose which different messaging service that",
    "start": "204879",
    "end": "210239"
  },
  {
    "text": "you're going to use it can be sort of confusing with a multitude of different services which one is the best fit for",
    "start": "210239",
    "end": "215519"
  },
  {
    "text": "you we're going to go through some different patterns of how to design your messaging architecture and then",
    "start": "215519",
    "end": "222159"
  },
  {
    "text": "we're going to talk about the architecture of a cross region delivery to sqsqs and then we're going to go into",
    "start": "222159",
    "end": "227280"
  },
  {
    "text": "a demo of that and i'm going to show you how to build that um ivan you want to start us off and talk",
    "start": "227280",
    "end": "233599"
  },
  {
    "start": "230000",
    "end": "568000"
  },
  {
    "text": "about some of the uh motivation yeah mike totally so um i love this quote so",
    "start": "233599",
    "end": "240480"
  },
  {
    "text": "um you know if your application is cloud native large scale or distributed and doesn't have a messaging component",
    "start": "240480",
    "end": "246799"
  },
  {
    "text": "that's probably a bug and this this quote comes from tim bray um the co-author of the xml spec",
    "start": "246799",
    "end": "252879"
  },
  {
    "text": "former colleague and it really reminds me of our cto werner vogel's comment that uh",
    "start": "252879",
    "end": "259040"
  },
  {
    "text": "quote that everything fails all the time right and failure is something to be dealt with every single day and to be",
    "start": "259040",
    "end": "265919"
  },
  {
    "text": "architected you to architect out of so an address so",
    "start": "265919",
    "end": "271280"
  },
  {
    "text": "that's that's our first motivation point here um you know what we're really talking about is",
    "start": "271280",
    "end": "277919"
  },
  {
    "text": "um decoupling tightly coupled systems here with using messaging and just like",
    "start": "277919",
    "end": "283919"
  },
  {
    "text": "a telephone like like a telephone call right um this is this is from",
    "start": "283919",
    "end": "290160"
  },
  {
    "text": "a fellow solutions architect in germany i'm a messaging expert here he um dirk",
    "start": "290160",
    "end": "296479"
  },
  {
    "text": "is his example he's he brings up and reinvent talks and in other places is like a a telephone call it's a very",
    "start": "296479",
    "end": "303840"
  },
  {
    "text": "synchronous um method of communication or like a real-time chat there there are times and places for synchronous",
    "start": "303840",
    "end": "310080"
  },
  {
    "text": "communications right um but microservice or application application communications um have a number of",
    "start": "310080",
    "end": "316880"
  },
  {
    "text": "really significant drawbacks that messaging systems can help with so you know like uh for example a problem",
    "start": "316880",
    "end": "323520"
  },
  {
    "text": "in a one downstream service can have immediate impacts within seconds on all the upstream upstream callers if you",
    "start": "323520",
    "end": "330639"
  },
  {
    "text": "don't have a method to um to buffer and handle some of these errors and you know you may already be using an",
    "start": "330639",
    "end": "339039"
  },
  {
    "text": "sdk which has like retries right and immediately this can make the problem much worse and",
    "start": "339039",
    "end": "344960"
  },
  {
    "text": "you can start fanning out and amplifying the problems as well if um upstream callers",
    "start": "344960",
    "end": "350080"
  },
  {
    "text": "keep retrying and pounding the downstream endpoints right so exerting some like upstream back",
    "start": "350080",
    "end": "356639"
  },
  {
    "text": "pressure and allowing some time to to actually process a massive amount of messages",
    "start": "356639",
    "end": "363280"
  },
  {
    "text": "can really really help and you know smooth through and and uh smooth out",
    "start": "363280",
    "end": "370479"
  },
  {
    "text": "really spiky patterns um call patterns mike",
    "start": "370479",
    "end": "376240"
  },
  {
    "text": "too much time to wait um like say for instance a messaging client that you might have or a chat client and you",
    "start": "377840",
    "end": "384400"
  },
  {
    "text": "want to be able to get messages back and forth really quickly uh we just don't have time to be able to wait for a lot",
    "start": "384400",
    "end": "390080"
  },
  {
    "text": "of different connections to be made and all these different things to be able to happen that might happen in a synchronous system we just need to sort",
    "start": "390080",
    "end": "396080"
  },
  {
    "text": "of fire and forget and get the message in the queue um so uh things that are asynchronous by nature are are very well",
    "start": "396080",
    "end": "403680"
  },
  {
    "text": "uh suited for um for this type of for um for queuing services",
    "start": "403680",
    "end": "410639"
  },
  {
    "text": "oh what is this is this something you put in yeah it is mike what what could this be",
    "start": "411520",
    "end": "418960"
  },
  {
    "text": "oh my gosh yeah it seems to be a pop quiz where did this come from um",
    "start": "418960",
    "end": "424479"
  },
  {
    "text": "so uh mike i want to know what is aws's first service",
    "start": "424479",
    "end": "430240"
  },
  {
    "text": "oh geez uh aws is first service i don't know maybe i need some help from",
    "start": "430240",
    "end": "435599"
  },
  {
    "text": "the audience can um can anyone type in the chat would they think aws first service was",
    "start": "435599",
    "end": "440720"
  },
  {
    "text": "yeah i just uh i just threw it out there in the chat so for the attendees online what is aws's first service so we have",
    "start": "440720",
    "end": "449280"
  },
  {
    "text": "let's wait a couple of seconds for some answers to come in before we start uh before we start reading them off",
    "start": "449280",
    "end": "455039"
  },
  {
    "text": "oh i'm sure glad i had this lifeline yeah we've got a few from uh the tech guy 21 from",
    "start": "455039",
    "end": "461520"
  },
  {
    "text": "uh dec 1 slh from lazy coder 3 from b alt",
    "start": "461520",
    "end": "467759"
  },
  {
    "text": "uh mookie monkey jib jab 006 or uh sophia",
    "start": "467759",
    "end": "472879"
  },
  {
    "text": "007 uh we've got ec2 we've got s3",
    "start": "472879",
    "end": "478400"
  },
  {
    "text": "oh i like that one uh net underscore cloud underscore tech says s3 or ec2 i",
    "start": "478400",
    "end": "484319"
  },
  {
    "text": "forget uh we have a few sqs as well",
    "start": "484319",
    "end": "490160"
  },
  {
    "text": "oh my okay all right i'm i'm gonna have to go i'm gonna have to go with s3 that sounds",
    "start": "490160",
    "end": "495840"
  },
  {
    "text": "like the most likely thing whoo boy well mike that is a great guess",
    "start": "495840",
    "end": "501759"
  },
  {
    "text": "uh but it's actually amazon sqs simple clearing service and like",
    "start": "501759",
    "end": "507199"
  },
  {
    "text": "you know it feels weird saying that out loud [Laughter]",
    "start": "507199",
    "end": "512719"
  },
  {
    "text": "and there's there's some trivia there right mike yeah actually um the s sqs was the first",
    "start": "512719",
    "end": "519839"
  },
  {
    "text": "service that aws built however the first one that we released was um aws s3 and",
    "start": "519839",
    "end": "526720"
  },
  {
    "text": "then with a fast follow with uh aw with uh amazon sqs um so though",
    "start": "526720",
    "end": "533920"
  },
  {
    "text": "if you said s3 you were pretty close to right sqs was technically the way that the question was formed what's aws's",
    "start": "533920",
    "end": "540640"
  },
  {
    "text": "first service technically sqs first production service s3 so um",
    "start": "540640",
    "end": "547040"
  },
  {
    "text": "interesting question good one adam you almost got in there before you move on there i dropped a link to uh jeff barr's",
    "start": "547040",
    "end": "554000"
  },
  {
    "text": "blog where he talks about the 12 years at amazon.com which sort of which mentions you know sqs there so i dropped",
    "start": "554000",
    "end": "560800"
  },
  {
    "text": "the link to that over in the in the chat oh cool that's a great that's a great article yep",
    "start": "560800",
    "end": "567760"
  },
  {
    "start": "568000",
    "end": "1144000"
  },
  {
    "text": "cool fantastic well i guess let's talk a little bit about messaging versus processing our message processing versus",
    "start": "568160",
    "end": "575040"
  },
  {
    "text": "stream processing so this is an interesting distinction between these two different things and",
    "start": "575040",
    "end": "580320"
  },
  {
    "text": "message processing an individual message is like as a core entity where we apply some processing or compute it could be a",
    "start": "580320",
    "end": "586800"
  },
  {
    "text": "financial transaction or a command to control an iot device and the occurrence of a message typically varies in stream",
    "start": "586800",
    "end": "594240"
  },
  {
    "text": "processing a stream of messages is the core entity and only by looking at many messages together can we get the value",
    "start": "594240",
    "end": "601040"
  },
  {
    "text": "of each individual message and uh the stream of messages is also constant in",
    "start": "601040",
    "end": "607279"
  },
  {
    "text": "in most cases um so also uh kind of going a little bit",
    "start": "607279",
    "end": "613680"
  },
  {
    "text": "deeper into this some common characteristics for message processing are that you can configure",
    "start": "613680",
    "end": "619360"
  },
  {
    "text": "how many unsuccessful attempts to process a message and the message should be moved into a dead letter queue where",
    "start": "619360",
    "end": "625200"
  },
  {
    "text": "you can process the message out of order and typically a message will be deleted by the consumer after the message was",
    "start": "625200",
    "end": "630800"
  },
  {
    "text": "successfully processed and this means there's no need to track which message is already processed by",
    "start": "630800",
    "end": "636399"
  },
  {
    "text": "the client they just ask for the next one which is typically the oldest message that the broker has",
    "start": "636399",
    "end": "642079"
  },
  {
    "text": "and some common characteristics for stream processing um there's no built-in",
    "start": "642079",
    "end": "647440"
  },
  {
    "text": "dead letter queue uh this is why you have to pay special attention to how you handle poison pill messages and we'll",
    "start": "647440",
    "end": "653200"
  },
  {
    "text": "get into what poison pill messages are in in a in a couple of slides and if your client's constantly failing to",
    "start": "653200",
    "end": "659040"
  },
  {
    "text": "process the message or get stuck at this point in a stream and can't move on a common solution is to put these messages",
    "start": "659040",
    "end": "664560"
  },
  {
    "text": "into an sqs queue and handle them out of order in stream processing each client maintains a pointer to a particular",
    "start": "664560",
    "end": "670959"
  },
  {
    "text": "position in the screen and after you've consumed a message you don't delete the message you simply move",
    "start": "670959",
    "end": "676320"
  },
  {
    "text": "the pointer forward into each message in the stream and that's why it's important to understand",
    "start": "676320",
    "end": "682160"
  },
  {
    "text": "that each client has to maintain its own cursor uh in a durable way and we",
    "start": "682160",
    "end": "687279"
  },
  {
    "text": "recommend dynamodb for for that adam you want to talk about some",
    "start": "687279",
    "end": "694079"
  },
  {
    "text": "different choices i mentioned the decision tree to be able to go through um you know how to make a choice of",
    "start": "694079",
    "end": "700240"
  },
  {
    "text": "which tool to use you want to talk through this with us yeah totally so when",
    "start": "700240",
    "end": "706800"
  },
  {
    "text": "you know um very frequently your friendly neighborhood tam um",
    "start": "706800",
    "end": "712399"
  },
  {
    "text": "you know solutions architect professional services and we'll will be helping customers actually",
    "start": "712399",
    "end": "718480"
  },
  {
    "text": "decide what how to architect their their messaging integrations right",
    "start": "718480",
    "end": "723519"
  },
  {
    "text": "and this is a typical decision tree that we work through and",
    "start": "723519",
    "end": "728959"
  },
  {
    "text": "for example our first question might be like is this use case an iot use case",
    "start": "728959",
    "end": "734240"
  },
  {
    "text": "and iot is like sufficiently um specialized enough with you know device",
    "start": "734240",
    "end": "740079"
  },
  {
    "text": "um device shadows and their own sets of",
    "start": "740079",
    "end": "745600"
  },
  {
    "text": "mqtt protocols and x 509 certificates and just you know it's messaging but",
    "start": "745600",
    "end": "750639"
  },
  {
    "text": "it's really it's really particular for like you know fleets of millions of devices and so that that'll be like our first",
    "start": "750639",
    "end": "756880"
  },
  {
    "text": "question then you know we'll ask like is this a new or existing workload and do you want to like refactor or",
    "start": "756880",
    "end": "762800"
  },
  {
    "text": "re-platform and um you know like what are our timelines that we're dealing with um you know are you are you really",
    "start": "762800",
    "end": "770160"
  },
  {
    "text": "um using like what are you coming from today uh is there appetite to to refactor",
    "start": "770160",
    "end": "775760"
  },
  {
    "text": "um are you extremely integrated into like commercial software um like some",
    "start": "775760",
    "end": "782720"
  },
  {
    "text": "you know apache active active mq right or like ibm mq for",
    "start": "782720",
    "end": "788399"
  },
  {
    "text": "example rapid mq um and this you know we we go through this",
    "start": "788399",
    "end": "794240"
  },
  {
    "text": "decision tree so um you know what is our retention period that we need here is it",
    "start": "794240",
    "end": "800560"
  },
  {
    "text": "like over 365 days um is something that like if we if we need streaming can like kinesis data streams kds solve for us um",
    "start": "800560",
    "end": "808800"
  },
  {
    "text": "so here here we go throughout this but really the point i wanted to make here is for a cloud native",
    "start": "808800",
    "end": "815200"
  },
  {
    "text": "architecture and the most resilient serverless least amount of management um you can",
    "start": "815200",
    "end": "822800"
  },
  {
    "text": "you can have we strongly we we really want to get to the bottom the bottom here which is",
    "start": "822800",
    "end": "828160"
  },
  {
    "text": "having utilizing like amazon sqs and an sns simple notification service and",
    "start": "828160",
    "end": "834800"
  },
  {
    "text": "that's really the the happiest place to be to to take a lot of benefits from from the",
    "start": "834800",
    "end": "840959"
  },
  {
    "text": "cloud and even though it's one of our our first service right it's still beautifully",
    "start": "840959",
    "end": "846560"
  },
  {
    "text": "um and very elegantly um you know servicing millions of customers",
    "start": "846560",
    "end": "851839"
  },
  {
    "text": "right and even like amazon.com relies on sqs for example for millions of orders and um so this is",
    "start": "851839",
    "end": "859120"
  },
  {
    "text": "really a kind of a decision tree we go through um and i will jump into some of these",
    "start": "859120",
    "end": "864560"
  },
  {
    "text": "details like what we mean by um publish subscribe pub sub and like point to point in a couple seconds here um but",
    "start": "864560",
    "end": "871279"
  },
  {
    "text": "yeah that's that's this decision tree in a nutshell and um you know we cams help",
    "start": "871279",
    "end": "876720"
  },
  {
    "text": "architect a messaging infrastructure just like with similar decision trees like this",
    "start": "876720",
    "end": "885000"
  },
  {
    "text": "we move on i wanted to check in to see if there's any questions from the audience questions comments concerns hot",
    "start": "887680",
    "end": "893199"
  },
  {
    "text": "spots cold spots numbness tingling yeah we did uh we did have one question come along from the tech guy here that we'll",
    "start": "893199",
    "end": "899600"
  },
  {
    "text": "get to in a second but i did want to call out like earlier on the previous slide you guys had up there if you want",
    "start": "899600",
    "end": "905519"
  },
  {
    "text": "to just go back one for sure um you know the building block",
    "start": "905519",
    "end": "910720"
  },
  {
    "text": "which really unlocks a lot of different capabilities is sqs sns and lambda",
    "start": "910720",
    "end": "915839"
  },
  {
    "text": "paired together to fill to build sort of like an event-driven architecture we hear a lot of the reinvent talks and a",
    "start": "915839",
    "end": "921760"
  },
  {
    "text": "lot of the essays and the teams having conversations with customers around like an event driven architecture looking at",
    "start": "921760",
    "end": "927440"
  },
  {
    "text": "this slide like where would where would a vet bridge or where would lambda sort of fill the gap here",
    "start": "927440",
    "end": "934959"
  },
  {
    "text": "i'd unite down yeah sure um so you when when we are",
    "start": "936639",
    "end": "942959"
  },
  {
    "text": "um similar to like a messaging bus or whatnot like having the ability to",
    "start": "942959",
    "end": "948160"
  },
  {
    "text": "um you know funnel these events like for example a",
    "start": "948160",
    "end": "953680"
  },
  {
    "text": "um an s3 event you know you've written a new um you've created a new object in s3",
    "start": "953680",
    "end": "960079"
  },
  {
    "text": "how to actually fire that message off to the queue which is the topic of our talk today",
    "start": "960079",
    "end": "966000"
  },
  {
    "text": "and then finally to some form of compute like what do you want to do with this message do you want to",
    "start": "966000",
    "end": "972160"
  },
  {
    "text": "um you know do how do you want to process this this message that's in there what work do you want to be done on that",
    "start": "972160",
    "end": "978560"
  },
  {
    "text": "message and and then lastly take to take it a step further that would be in like lambda you",
    "start": "978560",
    "end": "984480"
  },
  {
    "text": "you'd want to publish you'd want to write this message to like a dynamodb table",
    "start": "984480",
    "end": "990240"
  },
  {
    "text": "that is that is the best place um arguably the the most the closest fit to these messaging but it could be like an",
    "start": "990240",
    "end": "996959"
  },
  {
    "text": "rds database you know some form of maintaining that state throughout",
    "start": "996959",
    "end": "1002480"
  },
  {
    "text": "so um but yeah you're right a event-driven architecture really hot topic it is um one way to kind of",
    "start": "1002480",
    "end": "1010480"
  },
  {
    "text": "encompass what we're doing here with these messages right right event comes in so you have something",
    "start": "1010480",
    "end": "1016079"
  },
  {
    "text": "that gets written to the event bus whether you know the queue it triggers an event that then might run some lambda",
    "start": "1016079",
    "end": "1021759"
  },
  {
    "text": "to do some sort of processing and then dump something output to a database for example or send it to another downstream",
    "start": "1021759",
    "end": "1027360"
  },
  {
    "text": "system for further processing um we do have a question",
    "start": "1027360",
    "end": "1032720"
  },
  {
    "text": "here from jibjab how many subscribers can an sns topic have",
    "start": "1032720",
    "end": "1038400"
  },
  {
    "text": "yeah i'll take that one um an sms topic can have up to 12 and a half million subscribers and that gives a high scale",
    "start": "1038400",
    "end": "1045280"
  },
  {
    "text": "that can provide a highly scalable fan out targets can include http https sms text",
    "start": "1045280",
    "end": "1052880"
  },
  {
    "text": "messaging sns email as we'll see today sqs and lambda functions",
    "start": "1052880",
    "end": "1058720"
  },
  {
    "text": "thanks perfect uh and then just to wrap up the question break here unless any other",
    "start": "1058720",
    "end": "1063760"
  },
  {
    "text": "ones come along uh i'm going to toss this one to you so what serverless lambda pattern would you recommend if my",
    "start": "1063760",
    "end": "1070240"
  },
  {
    "text": "use case needs a lambda to receive a rest request from a client and then it calls multiple other lambda functions",
    "start": "1070240",
    "end": "1077440"
  },
  {
    "text": "and collects the responses and sends it back to a client yeah this is sounding like a um a fan",
    "start": "1077440",
    "end": "1085120"
  },
  {
    "text": "out architecture using which we'll cover um as one of the patterns today where you know you can",
    "start": "1085120",
    "end": "1091280"
  },
  {
    "text": "have um from one lambda you can be calling tens or or many other lambda functions",
    "start": "1091280",
    "end": "1096480"
  },
  {
    "text": "downstream and uh it's done with a combination of an sns topic um to",
    "start": "1096480",
    "end": "1102720"
  },
  {
    "text": "multiple different sqs queues and to multiple um",
    "start": "1102720",
    "end": "1107760"
  },
  {
    "text": "you know if you wanted hundreds or thousands of lambda functions to fan out um",
    "start": "1107760",
    "end": "1112960"
  },
  {
    "text": "and and before lambda this was done with like ec2 um auto scaling hooks right",
    "start": "1112960",
    "end": "1121360"
  },
  {
    "text": "how deep is the q the q length to the number of ec2 instances right so um",
    "start": "1121360",
    "end": "1127440"
  },
  {
    "text": "yeah i'd say a fanout is the is the ideal topic there",
    "start": "1127440",
    "end": "1132559"
  },
  {
    "text": "perfect i don't see any other questions in the chat for now so folks um if you",
    "start": "1132559",
    "end": "1137600"
  },
  {
    "text": "do come up with anything else along the way please feel free to add those to the chat um but for now mike i'm back over",
    "start": "1137600",
    "end": "1143200"
  },
  {
    "text": "to you yeah so uh next up we wanted to talk about some different messaging patterns",
    "start": "1143200",
    "end": "1148799"
  },
  {
    "start": "1144000",
    "end": "2031000"
  },
  {
    "text": "and i didn't recommend this book um greg",
    "start": "1148799",
    "end": "1154400"
  },
  {
    "text": "that called integration enterprise integration patterns um and this qr code",
    "start": "1154400",
    "end": "1159840"
  },
  {
    "text": "will take you to a link on amazon to be able to get to the book but also um i think uh clint if you don't mind putting",
    "start": "1159840",
    "end": "1166400"
  },
  {
    "text": "in the link uh to the um to the uh book then we should have that in the chat as well",
    "start": "1166400",
    "end": "1172480"
  },
  {
    "text": "um i didn't want to kick us off talking about some different patterns for messaging totally yes and and by by all",
    "start": "1172480",
    "end": "1178880"
  },
  {
    "text": "means by no means like the that that book has over like 65 different messaging patterns and if you really",
    "start": "1178880",
    "end": "1184880"
  },
  {
    "text": "want to dive deep and you know explore like what your performance trade-offs and different use cases might your",
    "start": "1184880",
    "end": "1191440"
  },
  {
    "text": "specific use case might be that is that is a great source to to actually see um way more i think we're covering like 10",
    "start": "1191440",
    "end": "1197760"
  },
  {
    "text": "patterns today but um 65 ish patterns there and more um so check that link out",
    "start": "1197760",
    "end": "1203360"
  },
  {
    "text": "for that canonical source yeah um so yeah first and foremost you know let's",
    "start": "1203360",
    "end": "1208400"
  },
  {
    "text": "talk about like message exchange like um on the left here with a one-way fire and forget you know uh workflow here we're",
    "start": "1208400",
    "end": "1216480"
  },
  {
    "text": "we're not expecting a response you may not expect a response right you'll see the semantics you have a",
    "start": "1216480",
    "end": "1223840"
  },
  {
    "text": "sender sending message a to a receiver right and",
    "start": "1223840",
    "end": "1230880"
  },
  {
    "text": "this this is like a perfect way of of explaining um",
    "start": "1230880",
    "end": "1236000"
  },
  {
    "text": "you know tons of different workflows with not expecting where you don't need a response back to the sender so",
    "start": "1236000",
    "end": "1243200"
  },
  {
    "text": "and by the way we're keeping this a little bit um we're not we're not putting labels",
    "start": "1243200",
    "end": "1249039"
  },
  {
    "text": "immediately on sqs or sns as some of these topics can apply to",
    "start": "1249039",
    "end": "1254159"
  },
  {
    "text": "like active mq and other other different um cueing and other different messaging",
    "start": "1254159",
    "end": "1259200"
  },
  {
    "text": "platforms right um the other major message exchange is like",
    "start": "1259200",
    "end": "1264480"
  },
  {
    "text": "a request response where you know you are actually you need a response back to your requester and so",
    "start": "1264480",
    "end": "1271919"
  },
  {
    "text": "the responder here formulates a response b and sends this back to a second",
    "start": "1271919",
    "end": "1278480"
  },
  {
    "text": "messaging destination so that could be another queue for example back to b",
    "start": "1278480",
    "end": "1284000"
  },
  {
    "text": "so you have to know the return address of who sent it and you'll have to correlate this so this",
    "start": "1284000",
    "end": "1290080"
  },
  {
    "text": "means um there's some extra processing but there's a lot of workflows where you need to know you're actually waiting back for a",
    "start": "1290080",
    "end": "1296400"
  },
  {
    "text": "return message like what is the quote the mortgage uh rate quote that i actually i actually",
    "start": "1296400",
    "end": "1301679"
  },
  {
    "text": "want to know that's why i asked so um so yeah just high level you can have fire and",
    "start": "1301679",
    "end": "1308080"
  },
  {
    "text": "forgets or you can have request response messaging messaging patterns here from the get go",
    "start": "1308080",
    "end": "1315360"
  },
  {
    "text": "next um let me let's jump to the next slide yeah",
    "start": "1315360",
    "end": "1321039"
  },
  {
    "text": "perfect so um let's get to the what we're used to hearing about right which is",
    "start": "1321039",
    "end": "1327919"
  },
  {
    "text": "cues and topics really so from point to point so using a queue um",
    "start": "1327919",
    "end": "1333679"
  },
  {
    "text": "you know like an sqs queue it's it's like a buffer basically you can put messages",
    "start": "1333679",
    "end": "1338799"
  },
  {
    "text": "into a queue and you can retrieve messages from the queue and this this",
    "start": "1338799",
    "end": "1343919"
  },
  {
    "text": "sounds extremely straightforward right but the queue operates so it's only",
    "start": "1343919",
    "end": "1349360"
  },
  {
    "text": "consumed by one receiver although you can have like multiple receivers connected to a queue",
    "start": "1349360",
    "end": "1356080"
  },
  {
    "text": "and and actually for simplicity there's one sender here but you could have multiple senders as well",
    "start": "1356080",
    "end": "1362240"
  },
  {
    "text": "in this case we have three receivers for messages a b and c making it really easy to scale and and",
    "start": "1362240",
    "end": "1369039"
  },
  {
    "text": "really helps to flatten out peak peak loads right for your really spiky",
    "start": "1369039",
    "end": "1374320"
  },
  {
    "text": "workloads um and this is that what i mentioned the like upstream back pressure um because if your sender is",
    "start": "1374320",
    "end": "1381120"
  },
  {
    "text": "producing way more than your receivers can process um you don't want to overload your your",
    "start": "1381120",
    "end": "1386720"
  },
  {
    "text": "receivers right each each request could could run up a lot of compute and maybe you don't want",
    "start": "1386720",
    "end": "1392320"
  },
  {
    "text": "to auto scale infinitely to um for your own reasons or you're not auto scaling",
    "start": "1392320",
    "end": "1397679"
  },
  {
    "text": "at all even a queue is really helpful to to flatten out those those peak loads",
    "start": "1397679",
    "end": "1404080"
  },
  {
    "text": "and just some semantics you'll see that there's a queue on the left right a sender and a receiver",
    "start": "1404080",
    "end": "1409120"
  },
  {
    "text": "while on the right when we're discussing topics notice it's a publisher and a subscriber",
    "start": "1409120",
    "end": "1415760"
  },
  {
    "text": "so um to to discuss you know the pub sub topics right like a topic like an sns",
    "start": "1415760",
    "end": "1422240"
  },
  {
    "text": "topics like a broadcasting station right you can publish a message to a topic",
    "start": "1422240",
    "end": "1427520"
  },
  {
    "text": "and anyone interested in receiving these messages can subscribe to the topic and in in this model",
    "start": "1427520",
    "end": "1435279"
  },
  {
    "text": "it's the topic it's immediately received by all the subscribers in the topic unless you've applied some filtering",
    "start": "1435279",
    "end": "1441039"
  },
  {
    "text": "pattern right some extra grouping we'll talk about in a couple slides",
    "start": "1441039",
    "end": "1447279"
  },
  {
    "text": "and there's another concept with topics which is uh you know durable subscribers actually maintaining",
    "start": "1447279",
    "end": "1454080"
  },
  {
    "text": "that topic for some short amount of time this we see more with like amazon mq or",
    "start": "1454080",
    "end": "1460240"
  },
  {
    "text": "activemq where they can keep that you know in case the subscriber's offline right like",
    "start": "1460240",
    "end": "1465760"
  },
  {
    "text": "you send a text message the person's phone might be off um the machine and",
    "start": "1465760",
    "end": "1471760"
  },
  {
    "text": "you you had that for short amount of time so that's kind of merging um the queuing and topics a little bit but you",
    "start": "1471760",
    "end": "1477520"
  },
  {
    "text": "see you see some durable subscriber semantics for like you know active mq",
    "start": "1477520",
    "end": "1483200"
  },
  {
    "text": "apache active mq so that's the foundation really of of our",
    "start": "1483200",
    "end": "1489679"
  },
  {
    "text": "messaging patterns here and now we can get into some of the the more interesting",
    "start": "1489679",
    "end": "1495600"
  },
  {
    "text": "topics so um mike take us to the next level here",
    "start": "1495600",
    "end": "1501520"
  },
  {
    "text": "please yeah let's talk about topic cue chaining um and uh this is",
    "start": "1501520",
    "end": "1509120"
  },
  {
    "text": "kind of if you um where we see most common this pattern being used is in web application building and if you need to",
    "start": "1509120",
    "end": "1515760"
  },
  {
    "text": "scale receivers per receiving application this is going to be the best way to do it there's two other patterns that you can",
    "start": "1515760",
    "end": "1522240"
  },
  {
    "text": "build all for this which is scatter gap scatter and gather where you fan like this and then you fan into an",
    "start": "1522240",
    "end": "1528799"
  },
  {
    "text": "aggregator with a use case being like requesting mortgage rates from three different vendors and then selecting the",
    "start": "1528799",
    "end": "1534240"
  },
  {
    "text": "lowest rates so it's it's really fanning out um we're going to talk about this in the",
    "start": "1534240",
    "end": "1539919"
  },
  {
    "text": "demo as well how this topic cue chaining goes out",
    "start": "1539919",
    "end": "1545039"
  },
  {
    "text": "and this just lets you be able to send out",
    "start": "1545039",
    "end": "1550159"
  },
  {
    "text": "this send out this message directly to a topic and then each one of these different cues can be subscribed to the",
    "start": "1550159",
    "end": "1555440"
  },
  {
    "text": "topic and then send the message out and then each one of the different receivers can receive different different messages out of the queue",
    "start": "1555440",
    "end": "1561840"
  },
  {
    "text": "based on their processing capability and which types of things they're supposed to be processing",
    "start": "1561840",
    "end": "1568080"
  },
  {
    "text": "another one that we have is the dead letter queue um and a dead letter q is a um is a cue",
    "start": "1568320",
    "end": "1576480"
  },
  {
    "text": "like if you send some if you send a message to a queue and then a particular message is not able to be processed for",
    "start": "1576480",
    "end": "1583600"
  },
  {
    "text": "whatever reason maybe it's still formatted maybe it's uh maybe it's just something that's outside the bounds of",
    "start": "1583600",
    "end": "1588799"
  },
  {
    "text": "your application um messages get sent to a dead letter queue whenever they can't be processed um so this handles uh",
    "start": "1588799",
    "end": "1596640"
  },
  {
    "text": "transient failure mitigation um and it also uh is",
    "start": "1596640",
    "end": "1602799"
  },
  {
    "text": "very useful for debugging your application or messaging system because these dead letter queues let you isolate",
    "start": "1602799",
    "end": "1608799"
  },
  {
    "text": "unconsumed messages to determine why their processing doesn't succeed so you can have some other system",
    "start": "1608799",
    "end": "1616159"
  },
  {
    "text": "processing this dead letter this dead letter queue to be able to go through and say oh we're getting a bunch of",
    "start": "1616159",
    "end": "1621360"
  },
  {
    "text": "messages that come in that have you know some weird header or some weird um",
    "start": "1621360",
    "end": "1627039"
  },
  {
    "text": "attribute uh that's not able to be processed by our receivers um",
    "start": "1627039",
    "end": "1632320"
  },
  {
    "text": "so that's the dead letter that letter q um i do want to talk about fifo",
    "start": "1632320",
    "end": "1638880"
  },
  {
    "text": "yeah totally um so uh and also just uh for dead letter q poison pill handling was the other oh",
    "start": "1638880",
    "end": "1645039"
  },
  {
    "text": "yes oh shoot i forgot that yeah there is the the other uh point of you know it's nothing malicious",
    "start": "1645039",
    "end": "1651919"
  },
  {
    "text": "it's just sometimes even your end-to-end testing can't find um you know is isn't able to process a",
    "start": "1651919",
    "end": "1657760"
  },
  {
    "text": "message so it instead of performing like open heart surgery and sshing into into",
    "start": "1657760",
    "end": "1662880"
  },
  {
    "text": "a number of hosts to figure out what's going on um it can sit in this dead letter q for for processing",
    "start": "1662880",
    "end": "1670080"
  },
  {
    "text": "and debugging cool so let me jump into a couple more",
    "start": "1670080",
    "end": "1676159"
  },
  {
    "text": "important patterns here so first and first out processing right",
    "start": "1676159",
    "end": "1681600"
  },
  {
    "text": "when you need when you have a use case that really needs strict ordering of messages",
    "start": "1681600",
    "end": "1688240"
  },
  {
    "text": "you can implement you can use like for example sqs has a fifo q offering as opposed to just the standard queue",
    "start": "1688240",
    "end": "1694559"
  },
  {
    "text": "offering which which tries to guarantee which tries to deliver an order but um if you really",
    "start": "1694559",
    "end": "1701520"
  },
  {
    "text": "need to guarantee that order you can use the the fifo cues and",
    "start": "1701520",
    "end": "1707919"
  },
  {
    "text": "that's what we're seeing here um there's there's some scalability considerations for fifo queues um you know by by",
    "start": "1707919",
    "end": "1715200"
  },
  {
    "text": "default it's it's uh it's a lower tps transactions per second but you can get it um you know like 300",
    "start": "1715200",
    "end": "1722159"
  },
  {
    "text": "tps i think defaults to you can get it up to like 3000 tps um if you batch you know 10 requests",
    "start": "1722159",
    "end": "1728640"
  },
  {
    "text": "um 10 messages per request so like 3000 tps there's also something another feature",
    "start": "1728640",
    "end": "1734880"
  },
  {
    "text": "called message grouping where as you can see you know message a b c d the orange messages you",
    "start": "1734880",
    "end": "1742720"
  },
  {
    "text": "can group those and filter those two different types of receivers to handle those as well",
    "start": "1742720",
    "end": "1748240"
  },
  {
    "text": "and those those can be processed by different sets of consumers right",
    "start": "1748240",
    "end": "1753919"
  },
  {
    "text": "from different sets of receivers so these are two extra concepts to be aware of um",
    "start": "1753919",
    "end": "1760720"
  },
  {
    "text": "yeah that's uh that's that's fifo first and first out and message groups so",
    "start": "1760720",
    "end": "1768640"
  },
  {
    "text": "jumping over to quality of service qos and",
    "start": "1768640",
    "end": "1774240"
  },
  {
    "text": "there's there's other semantics that do come up when discussing messaging topics and um at least we hear you know at",
    "start": "1774240",
    "end": "1782320"
  },
  {
    "text": "least once i need the message at least once that's that's what you're we're referring to like amazon sql standard",
    "start": "1782320",
    "end": "1788399"
  },
  {
    "text": "cues that means it can there can be a duplicate that's what that really means and um you know when",
    "start": "1788399",
    "end": "1796159"
  },
  {
    "text": "you know when you say at most once we're we're talking about um the semantics of",
    "start": "1796159",
    "end": "1801679"
  },
  {
    "text": "amazon sns fifo q and um",
    "start": "1801679",
    "end": "1806720"
  },
  {
    "text": "the probably the most stringent one here really is exactly once and and that's what can be guaranteed with um sqs fifo",
    "start": "1806720",
    "end": "1815039"
  },
  {
    "text": "so these um these topics do come up um",
    "start": "1815039",
    "end": "1820399"
  },
  {
    "text": "and you know they are tunable that's the good news so um you don't have to build everything in",
    "start": "1820399",
    "end": "1827600"
  },
  {
    "text": "your client side and your receiver side um to handle this you can you can lean on some",
    "start": "1827600",
    "end": "1833840"
  },
  {
    "text": "of the uh the fifo capabilities of sqs and sns especially if you're doing a",
    "start": "1833840",
    "end": "1840080"
  },
  {
    "text": "fan out like like a lot of customers are doing um next slide here so",
    "start": "1840080",
    "end": "1845760"
  },
  {
    "text": "like you know we do discuss these topics quite a bit in",
    "start": "1845760",
    "end": "1851600"
  },
  {
    "text": "meetings and it's okay to push back when um and really dig in and and find out",
    "start": "1851600",
    "end": "1857039"
  },
  {
    "text": "why do we need exactly once delivery um do we really need exactly once delivery",
    "start": "1857039",
    "end": "1862320"
  },
  {
    "text": "um because we do have a lot of different um tunable parameters we can deal with here um you know we can",
    "start": "1862320",
    "end": "1869200"
  },
  {
    "text": "we can we can actually help with um the duplication by using the the fifo capabilities right um there's",
    "start": "1869200",
    "end": "1876159"
  },
  {
    "text": "duplication ids added here there's group ids added and",
    "start": "1876159",
    "end": "1882080"
  },
  {
    "text": "we you're able to process this without introducing errors or duplicates",
    "start": "1882080",
    "end": "1889039"
  },
  {
    "text": "for your customers that might confuse them right the other major",
    "start": "1889039",
    "end": "1894960"
  },
  {
    "text": "you know point here to make is um you know how do you process failures",
    "start": "1894960",
    "end": "1900720"
  },
  {
    "text": "right this is this is one of the themes of this talk and if you are designing your messages to be",
    "start": "1900720",
    "end": "1906559"
  },
  {
    "text": "item potent you know where you send one message that you will have the same same",
    "start": "1906559",
    "end": "1911679"
  },
  {
    "text": "type of output from um that is that is the gold standard if you can here",
    "start": "1911679",
    "end": "1918080"
  },
  {
    "text": "and that helps with a number of different failure scenarios as well that we'll see and jump to the next slide",
    "start": "1918080",
    "end": "1924480"
  },
  {
    "text": "here please where you have um two new concepts here um",
    "start": "1924480",
    "end": "1932000"
  },
  {
    "text": "you have for example in-flight messages when your c c for consumer here",
    "start": "1932000",
    "end": "1938960"
  },
  {
    "text": "takes begins processing that message and they receive that message and that makes it",
    "start": "1938960",
    "end": "1944000"
  },
  {
    "text": "invisible for the rest of the consumers but if that consumer is not able it's",
    "start": "1944000",
    "end": "1949440"
  },
  {
    "text": "invisible for the rest of consumers if they're unable to finish processing that message in time then it's returned to the queue",
    "start": "1949440",
    "end": "1956240"
  },
  {
    "text": "to be taken up by the next consumer to receive that message",
    "start": "1956240",
    "end": "1961279"
  },
  {
    "text": "and you know and we jump to our next",
    "start": "1961279",
    "end": "1967200"
  },
  {
    "text": "timeline of the visibility timeout so here if we successfully in the case of",
    "start": "1967200",
    "end": "1973039"
  },
  {
    "text": "sqs we successfully do process that message as the the success acknowledgement there",
    "start": "1973039",
    "end": "1979120"
  },
  {
    "text": "is to delete that message from the queue and um you know typically if you could see like a um",
    "start": "1979120",
    "end": "1986880"
  },
  {
    "text": "an instance goes down for example that's a common failure scenario or if you had a scale down event you",
    "start": "1986880",
    "end": "1993440"
  },
  {
    "text": "weren't able to process it process that message in time then you know",
    "start": "1993440",
    "end": "2000320"
  },
  {
    "text": "actually returning that that message and not deleting it yet is the important part here so",
    "start": "2000320",
    "end": "2006480"
  },
  {
    "text": "um yeah that's those are that's that's a couple failure scenarios in a nutshell um being item potent is very",
    "start": "2006480",
    "end": "2013039"
  },
  {
    "text": "important um understanding when and where to use um to build first and first out or use first and first out um cues",
    "start": "2013039",
    "end": "2021679"
  },
  {
    "text": "and um yeah i think we can i think it's time to see some discuss some architecture and",
    "start": "2021679",
    "end": "2027600"
  },
  {
    "text": "see some code and see some of this in action great and",
    "start": "2027600",
    "end": "2033279"
  },
  {
    "start": "2031000",
    "end": "2754000"
  },
  {
    "text": "um so what i did uh for our demo is i wanted to talk about cross uh or",
    "start": "2033279",
    "end": "2039039"
  },
  {
    "text": "multi-region delivery of messages to an sqs queue um and um sqsqs are uh sqs is",
    "start": "2039039",
    "end": "2047200"
  },
  {
    "text": "a regional service um so whenever you spin up an sqsq it goes to a particular",
    "start": "2047200",
    "end": "2052720"
  },
  {
    "text": "region us east u.s west one um and uh and each of these different whenever you",
    "start": "2052720",
    "end": "2058480"
  },
  {
    "text": "send a message to a queue it just goes to the queue in that region well for resiliency many customers would like to",
    "start": "2058480",
    "end": "2064079"
  },
  {
    "text": "be able to have a queue propagate into multiple regions in case",
    "start": "2064079",
    "end": "2070079"
  },
  {
    "text": "of regional failure or any other type of problem some type of network issue between",
    "start": "2070079",
    "end": "2077040"
  },
  {
    "text": "producers and sqsq so today we're going to talk about an",
    "start": "2077040",
    "end": "2082560"
  },
  {
    "text": "architecture to fan out from sns",
    "start": "2082560",
    "end": "2088079"
  },
  {
    "text": "to multiple sqs cubes and as we see in this architecture what",
    "start": "2088079",
    "end": "2093599"
  },
  {
    "text": "happens this thing on the left is just i use the lambda function for publishing",
    "start": "2093599",
    "end": "2098640"
  },
  {
    "text": "to be able to publish messages into this into these topics so i'm publishing into",
    "start": "2098640",
    "end": "2105040"
  },
  {
    "text": "from the lambda function i'll publish into two s s topics and then each of these sms topics",
    "start": "2105040",
    "end": "2111920"
  },
  {
    "text": "also publishes into each of the sqs queues so say for instance there was a",
    "start": "2111920",
    "end": "2119280"
  },
  {
    "text": "issue here between this publish function and usc 1",
    "start": "2119280",
    "end": "2124320"
  },
  {
    "text": "then messages would still be published through this sns in us west one",
    "start": "2124320",
    "end": "2130400"
  },
  {
    "text": "and then uh subsequently the uh sqs queues would be filled with this uh sms",
    "start": "2130400",
    "end": "2137599"
  },
  {
    "text": "um so let me jump into it let me get the demo pulled up here",
    "start": "2137599",
    "end": "2144599"
  },
  {
    "text": "all right sign in here and what we're going to do first is",
    "start": "2145119",
    "end": "2152240"
  },
  {
    "text": "build an sqsq in the us east region and this will be",
    "start": "2152240",
    "end": "2157280"
  },
  {
    "text": "our primary cue so we're going to jump in here",
    "start": "2157280",
    "end": "2162160"
  },
  {
    "text": "and you'll see creating a queue is pretty simple um so let me this is the earlier one i",
    "start": "2162480",
    "end": "2168560"
  },
  {
    "text": "built for the demo let me create a new one here for this and i'll go ahead and",
    "start": "2168560",
    "end": "2177359"
  },
  {
    "text": "call it amazon supports you in primary it's good to name it primary so you can",
    "start": "2177760",
    "end": "2183119"
  },
  {
    "text": "know which uh which one we're doing i'm going to choose a fifo queue whenever you choose a five volt key you have to add fifo at",
    "start": "2183119",
    "end": "2190240"
  },
  {
    "text": "the end of the queue name so that way everyone knows where it's going to be and i'll just choose the defaults for",
    "start": "2190240",
    "end": "2196880"
  },
  {
    "text": "the rest of this queue all right so we have a queue ready to go",
    "start": "2196880",
    "end": "2202800"
  },
  {
    "text": "just that simple um so let me build in this region an sns topic",
    "start": "2202800",
    "end": "2209680"
  },
  {
    "text": "to front this queue with um",
    "start": "2209680",
    "end": "2215838"
  },
  {
    "text": "all right and again i'll create a fifo here",
    "start": "2216400",
    "end": "2222000"
  },
  {
    "text": "and we're just building an snsq to go in front of the sqsq that we've already built",
    "start": "2226720",
    "end": "2233119"
  },
  {
    "text": "and this both of these are built in the north virginia region",
    "start": "2233119",
    "end": "2238560"
  },
  {
    "text": "and now we have um i'm going to go and subscribe this sqs",
    "start": "2238560",
    "end": "2244720"
  },
  {
    "text": "queue to the sns topic so each time a message comes into the sns topic then",
    "start": "2244720",
    "end": "2251440"
  },
  {
    "text": "it's broadcast out to the sqsq and then",
    "start": "2251440",
    "end": "2257040"
  },
  {
    "text": "and then we'll have messages from whenever it comes from sns into this sqsq",
    "start": "2257040",
    "end": "2263440"
  },
  {
    "text": "there we go simple as that",
    "start": "2263440",
    "end": "2267720"
  },
  {
    "text": "and now let's jump over to um i'm going to start a new tab here so",
    "start": "2270880",
    "end": "2276480"
  },
  {
    "text": "we can keep this an open for later but i'm going to jump into a new tab to create a new uh jump over to our other",
    "start": "2276480",
    "end": "2282400"
  },
  {
    "text": "region in u.s west one will be our secondary region where",
    "start": "2282400",
    "end": "2288800"
  },
  {
    "text": "we fail over to [Music] so i'll go ahead and create an sqsq here",
    "start": "2288800",
    "end": "2295760"
  },
  {
    "text": "in the u.s west region or let's create an sns first we'll",
    "start": "2295760",
    "end": "2302400"
  },
  {
    "text": "create the sns topic in this region",
    "start": "2302400",
    "end": "2308200"
  },
  {
    "text": "and we're just building this secondary sns topic uh to be able to have this",
    "start": "2313760",
    "end": "2319920"
  },
  {
    "text": "duplicated in another region so whenever we um whenever we need to fail over we'll have",
    "start": "2319920",
    "end": "2326320"
  },
  {
    "text": "a place an end point to be able to reach out to to put messages into these queues",
    "start": "2326320",
    "end": "2332640"
  },
  {
    "text": "and i'm going to build an sqs queue in this region",
    "start": "2334000",
    "end": "2340119"
  },
  {
    "text": "um this will be our secondary sqsq so whenever we decide to fill over our consumers can consume from this sqsq",
    "start": "2345520",
    "end": "2355319"
  },
  {
    "text": "and again i'll just take the defaults here",
    "start": "2356720",
    "end": "2360800"
  },
  {
    "text": "and now i'm going to subscribe this to both sns topics so whenever messages",
    "start": "2362560",
    "end": "2368000"
  },
  {
    "text": "come into either sns topic then messages are delivered to this queue",
    "start": "2368000",
    "end": "2374480"
  },
  {
    "text": "and i'm going to add it to the primary",
    "start": "2379040",
    "end": "2383839"
  },
  {
    "text": "and now i'm going to subscribe the from the primary region i'm going to",
    "start": "2385839",
    "end": "2391520"
  },
  {
    "text": "subscribe this to the secondary sns topic",
    "start": "2391520",
    "end": "2396920"
  },
  {
    "text": "all right now we have our architecture set up this is the same architecture that we",
    "start": "2397440",
    "end": "2402960"
  },
  {
    "text": "had that i showed on the screen that shows that has an s2 sms",
    "start": "2402960",
    "end": "2409680"
  },
  {
    "text": "and they're delivered to two different sqs and let me jump into",
    "start": "2409680",
    "end": "2416079"
  },
  {
    "text": "lambda here to show you the code for actually publishing to these um to",
    "start": "2416079",
    "end": "2422560"
  },
  {
    "text": "these queues let's see i have a publish message function",
    "start": "2422560",
    "end": "2428800"
  },
  {
    "text": "and this is in the north virginia region um",
    "start": "2428800",
    "end": "2433359"
  },
  {
    "text": "it can be anywhere i mean these publishers can come i mean these could come from local also um",
    "start": "2434319",
    "end": "2440160"
  },
  {
    "text": "and here is the code and i went ahead and wrote this because i didn't figure everyone want to sit",
    "start": "2440160",
    "end": "2445680"
  },
  {
    "text": "around and watch me write code here um so what this code does is",
    "start": "2445680",
    "end": "2452960"
  },
  {
    "text": "it attempts to contact the primary region first and then if there's any type of error and there",
    "start": "2452960",
    "end": "2459599"
  },
  {
    "text": "could be a multitude of different types of errors and i'm just running this in a try catch so",
    "start": "2459599",
    "end": "2464880"
  },
  {
    "text": "so or python uh and this i i i started out my career in java so i always think try",
    "start": "2464880",
    "end": "2470880"
  },
  {
    "text": "catch but um this is python code so it's track set and um and uh so there are a multitude of",
    "start": "2470880",
    "end": "2478240"
  },
  {
    "text": "different errors that could happen from this producer to be able to go over into the um to go",
    "start": "2478240",
    "end": "2484000"
  },
  {
    "text": "to fail over to the secondary region those issues could be network it could be a",
    "start": "2484000",
    "end": "2490000"
  },
  {
    "text": "region down and for brevity in this code i'm just doing try",
    "start": "2490000",
    "end": "2495119"
  },
  {
    "text": "and accept and in this case whenever we catch a client error we might want to",
    "start": "2495119",
    "end": "2500720"
  },
  {
    "text": "publish something to a dynamodb table to let our producer or let our consumers of these messages know that they also need",
    "start": "2500720",
    "end": "2506880"
  },
  {
    "text": "to fail over to another region um there could be um other steps that you need to take to",
    "start": "2506880",
    "end": "2512319"
  },
  {
    "text": "know what needs to happen whenever you fail over to this region just depending on it's application dependent so it's a",
    "start": "2512319",
    "end": "2518400"
  },
  {
    "text": "lot different if you're handling chat messages that could potentially be repeated or",
    "start": "2518400",
    "end": "2523520"
  },
  {
    "text": "credit card messages which definitely do not need to be repeated um so there is uh",
    "start": "2523520",
    "end": "2528640"
  },
  {
    "text": "in your application logic you're going to have to handle some some of this failure code but in this",
    "start": "2528640",
    "end": "2534640"
  },
  {
    "text": "lambda function whenever this exception happens would be a good time to be able to fill over",
    "start": "2534640",
    "end": "2540480"
  },
  {
    "text": "and what i'm doing in this code is just sending in the um sending in the arn for",
    "start": "2540480",
    "end": "2547040"
  },
  {
    "text": "the sns topic that i'm going to be connecting to in the region and then having a secondary to be able to fall",
    "start": "2547040",
    "end": "2553040"
  },
  {
    "text": "over to in in this test function so we'll continue forward here and look",
    "start": "2553040",
    "end": "2558160"
  },
  {
    "text": "at some more stuff with this code um",
    "start": "2558160",
    "end": "2563280"
  },
  {
    "text": "let's see yeah just i and in this thing i'm also importing the uuid um and i'm using that",
    "start": "2563440",
    "end": "2571200"
  },
  {
    "text": "for content deduplication um we also have like contextual de uh content based",
    "start": "2571200",
    "end": "2576960"
  },
  {
    "text": "deduplication where we can um where we can use the service itself to",
    "start": "2576960",
    "end": "2583200"
  },
  {
    "text": "be able to um deduplicate messages whenever they come in based on the content so it builds a",
    "start": "2583200",
    "end": "2590240"
  },
  {
    "text": "sha of the data uh shot 256 i believe and then um and then uh keeps messages",
    "start": "2590240",
    "end": "2596800"
  },
  {
    "text": "from being repeated um which is a an important step here so let me continue on from",
    "start": "2596800",
    "end": "2604560"
  },
  {
    "text": "here and yeah this is the um so this is the actual context that i'm sending in",
    "start": "2604839",
    "end": "2611839"
  },
  {
    "text": "as you can see i'm just sending in the iron of the of the sns topic in the in the region to",
    "start": "2611839",
    "end": "2617280"
  },
  {
    "text": "be able to fail over to um so let's test this thing out let's see it actually work",
    "start": "2617280",
    "end": "2624880"
  },
  {
    "text": "so i'm going to copy the since i built this uh demo before with these other cues i'm",
    "start": "2628880",
    "end": "2636560"
  },
  {
    "text": "just going to go and grab the arm from these um from these sns topics that",
    "start": "2636560",
    "end": "2642240"
  },
  {
    "text": "i'd already created or i created on this demo i want to show you exactly what we're doing here",
    "start": "2642240",
    "end": "2648960"
  },
  {
    "text": "um so i'll copy this iron in",
    "start": "2648960",
    "end": "2653280"
  },
  {
    "text": "let me grab the arm from the other snsq us west",
    "start": "2654240",
    "end": "2661480"
  },
  {
    "text": "and",
    "start": "2669920",
    "end": "2672920"
  },
  {
    "text": "all right let's send a message and see what happens",
    "start": "2677040",
    "end": "2682000"
  },
  {
    "text": "so now we just sent the message and it's going through the primary queue so it's sent to um",
    "start": "2683839",
    "end": "2689200"
  },
  {
    "text": "it's sent to it should send to the primary sns topic and then land in both queues just in case something happens um",
    "start": "2689200",
    "end": "2696560"
  },
  {
    "text": "we'll have the message in both sqsqs in us west and in us east",
    "start": "2696560",
    "end": "2701839"
  },
  {
    "text": "there we go there's the message in us west",
    "start": "2701839",
    "end": "2707040"
  },
  {
    "text": "and let's go check us east and be sure our message landed",
    "start": "2707040",
    "end": "2711599"
  },
  {
    "text": "and there it is",
    "start": "2712480",
    "end": "2715960"
  },
  {
    "text": "all right and that is how you build multi-region sqs to be able to send messages out",
    "start": "2726400",
    "end": "2733680"
  },
  {
    "text": "to uh fan out to uh two different sqs cues",
    "start": "2733680",
    "end": "2739440"
  },
  {
    "text": "yep and again this is just the architecture that we had and to be able to um to fan these guys out",
    "start": "2739839",
    "end": "2747119"
  },
  {
    "text": "so two sns topics in front and two sqs topics in the back",
    "start": "2747119",
    "end": "2752319"
  },
  {
    "text": "yeah ayden um we could that that that lambda that",
    "start": "2752319",
    "end": "2758640"
  },
  {
    "start": "2754000",
    "end": "3164000"
  },
  {
    "text": "you're publishing from could be anywhere um it could be totally like an outpost",
    "start": "2758640",
    "end": "2764000"
  },
  {
    "text": "rack in your in your closet or uh data center or or your laptop or whatnot um",
    "start": "2764000",
    "end": "2770800"
  },
  {
    "text": "so you could be sending these messages to other regions to both regions three",
    "start": "2770800",
    "end": "2776400"
  },
  {
    "text": "regions if you want yeah totally and whenever i initially built",
    "start": "2776400",
    "end": "2781680"
  },
  {
    "text": "this i was building it on my laptop on just running path on here so i actually did have a um i had a",
    "start": "2781680",
    "end": "2789200"
  },
  {
    "text": "something happen where it couldn't connect to the primary and then failed over to the secondary so it was a lot easier to demo from my computer in that",
    "start": "2789200",
    "end": "2795359"
  },
  {
    "text": "way the sort of failure scenarios but um but you know at any rate uh that's how",
    "start": "2795359",
    "end": "2800960"
  },
  {
    "text": "that's how we have it so the while you're giving the demo there and good stuff and by the way mike",
    "start": "2800960",
    "end": "2806560"
  },
  {
    "text": "i'm sure every one of us would love to sit on a live twitch stream and watch you write javascript right",
    "start": "2806560",
    "end": "2813838"
  },
  {
    "text": "we might we all might might learn something new there uh so the chat's been super busy and i really",
    "start": "2815040",
    "end": "2821280"
  },
  {
    "text": "appreciate everyone's interaction here so the tech guy brought up an interesting topic here about",
    "start": "2821280",
    "end": "2827200"
  },
  {
    "text": "scaling provisioned concurrency within lambda based on sqsq depth right and i'm",
    "start": "2827200",
    "end": "2834319"
  },
  {
    "text": "you gave me a blog post that i tossed over in the link there or over in the chat there but",
    "start": "2834319",
    "end": "2840720"
  },
  {
    "text": "i did want to just quickly talk about this topic so how would that architecture look so you have a",
    "start": "2840720",
    "end": "2846960"
  },
  {
    "text": "message that gets dumped to a queue and then i want to trigger lambda off of that would that be an event bridge",
    "start": "2846960",
    "end": "2852720"
  },
  {
    "text": "configuration or what sort of walk through that yeah um",
    "start": "2852720",
    "end": "2858960"
  },
  {
    "text": "there's a few ways to to do this from from memory um the first",
    "start": "2858960",
    "end": "2864400"
  },
  {
    "text": "tidbit i think would be to use like long pulling from your your sqs so you don't rack up uh short polling is is you know",
    "start": "2864400",
    "end": "2871599"
  },
  {
    "text": "how you originally um exactly you you incur extra charges there um you want at",
    "start": "2871599",
    "end": "2877359"
  },
  {
    "text": "this case i think 20 seconds for long polling is going to work well if there's no messages it won't um it'll wait till",
    "start": "2877359",
    "end": "2883040"
  },
  {
    "text": "the end of that that long poll period 20 seconds and one lambda function",
    "start": "2883040",
    "end": "2889920"
  },
  {
    "text": "can can scale can request uh can can initiate be the trigger for the",
    "start": "2889920",
    "end": "2895680"
  },
  {
    "text": "extra lambda functions that you have here so you you could go through eventbridge as",
    "start": "2895680",
    "end": "2902000"
  },
  {
    "text": "well um the eventbridge we i think the previous name",
    "start": "2902000",
    "end": "2907520"
  },
  {
    "text": "was cloudwatch events which was like our cloud cron if you will um so that's",
    "start": "2907520",
    "end": "2914000"
  },
  {
    "text": "that's another option if you're doing very heavily event driven um design um",
    "start": "2914000",
    "end": "2920240"
  },
  {
    "text": "the if you have other other things you want to do like uh you know you want to kick off like an aws batch job or you",
    "start": "2920240",
    "end": "2927359"
  },
  {
    "text": "want to have multiple different use cases behind that so",
    "start": "2927359",
    "end": "2932880"
  },
  {
    "text": "yeah so just to sum up like long pulling great start at least one lambda function we'll be",
    "start": "2932880",
    "end": "2938000"
  },
  {
    "text": "having to call the extra lambda functions and uh another tip here would be to",
    "start": "2938000",
    "end": "2945200"
  },
  {
    "text": "um if you can batch batch um take advantage of the 10 messages per",
    "start": "2945200",
    "end": "2950559"
  },
  {
    "text": "each message that you can have with sqs that's that's one cost optimization",
    "start": "2950559",
    "end": "2956720"
  },
  {
    "text": "thing i know we're talking resiliency mostly but um try and batch if you can as well",
    "start": "2956720",
    "end": "2962000"
  },
  {
    "text": "like if you already know you need um 10 or you need 100 lambda functions to fan",
    "start": "2962000",
    "end": "2967599"
  },
  {
    "text": "out you can put that message in from the get go awesome and earlier you're talking about",
    "start": "2967599",
    "end": "2973680"
  },
  {
    "text": "the dead letter q it's funny i was having a conversation with a friend uh who works for a company that has some",
    "start": "2973680",
    "end": "2980559"
  },
  {
    "text": "legacy processing and they had an overnight batch run that ran that generates a bunch of emails",
    "start": "2980559",
    "end": "2986800"
  },
  {
    "text": "that go out to you know their customers and stuff and uh there was an extra period in the email",
    "start": "2986800",
    "end": "2994559"
  },
  {
    "text": "address so it failed the entire processing failed halfway through and they were just chatting about this like",
    "start": "2994559",
    "end": "3000400"
  },
  {
    "text": "after work hours and stuff and it's a problem that they came across and i was like oh you know if you had a dead letter q you could process that you know",
    "start": "3000400",
    "end": "3006880"
  },
  {
    "text": "and it's these are common challenges that the customers do have and it's interesting",
    "start": "3006880",
    "end": "3012720"
  },
  {
    "text": "to see how like the cloud can help optimize some of those different things and make it better you know",
    "start": "3012720",
    "end": "3019040"
  },
  {
    "text": "absolutely yep cool so we kind of we talked about a lot",
    "start": "3019040",
    "end": "3024160"
  },
  {
    "text": "today you gave us a great demo mike and i'm not seeing any other",
    "start": "3024160",
    "end": "3029359"
  },
  {
    "text": "questions some comments and feedback here uh alex masha says great session guys",
    "start": "3029359",
    "end": "3035200"
  },
  {
    "text": "um earlier in the conversation there was also some positive feedback",
    "start": "3035200",
    "end": "3041119"
  },
  {
    "text": "indeed very popular uh you know so yeah good stuff guys very good conversation",
    "start": "3041119",
    "end": "3046960"
  },
  {
    "text": "really appreciate it thanks for joining us so today like we talked about we discussed messaging products from aws",
    "start": "3046960",
    "end": "3053760"
  },
  {
    "text": "here specifically sqs we discussed some different design patterns for those products and then we also saw",
    "start": "3053760",
    "end": "3060400"
  },
  {
    "text": "a demo of how to build a global receiver for sqs cubes if there are any additional questions",
    "start": "3060400",
    "end": "3066640"
  },
  {
    "text": "which i'm not seeming seeing any over here in the chat i encourage you to head over to",
    "start": "3066640",
    "end": "3072000"
  },
  {
    "text": "repost.aws it's essentially like an aws online forum where experts like myself aiden",
    "start": "3072000",
    "end": "3078880"
  },
  {
    "text": "and mike are sitting waiting to answer your questions so you can look up the uh the tag there for sqs",
    "start": "3078880",
    "end": "3084960"
  },
  {
    "text": "and you can ask your question um and then that's actually a good place that we use seed topics for future episodes",
    "start": "3084960",
    "end": "3091599"
  },
  {
    "text": "of aws support you um so please feel free to throw your questions there also you can email us at",
    "start": "3091599",
    "end": "3098319"
  },
  {
    "text": "the show aws supports you at amazon.com i definitely want to hear your feedback on what you thought about today's",
    "start": "3098319",
    "end": "3104000"
  },
  {
    "text": "session few future topics um as well next monday is a u.s holiday uh",
    "start": "3104000",
    "end": "3111359"
  },
  {
    "text": "called labor day uh so we're gonna be taking off next monday there's not gonna be any show so we will circle back with",
    "start": "3111359",
    "end": "3117680"
  },
  {
    "text": "y'all on september 12th um whenever we're going to be discussing using",
    "start": "3117680",
    "end": "3122720"
  },
  {
    "text": "amazon route 53 application recovery controller um very good topic mike iden",
    "start": "3122720",
    "end": "3130160"
  },
  {
    "text": "closing comments before we call it a day here thanks so much for joining us it's a pleasure to be able to talk to you all",
    "start": "3130160",
    "end": "3136319"
  },
  {
    "text": "about this likewise thanks so much fantastic and it's always a pleasure gentlemen to have",
    "start": "3136319",
    "end": "3141680"
  },
  {
    "text": "you on the show and for the folks on the stream thanks for tuning in and happy cloud computing",
    "start": "3141680",
    "end": "3148170"
  },
  {
    "text": "[Music]",
    "start": "3148170",
    "end": "3156389"
  },
  {
    "text": "you",
    "start": "3163680",
    "end": "3165760"
  }
]