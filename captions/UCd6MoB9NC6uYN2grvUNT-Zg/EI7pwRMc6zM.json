[
  {
    "start": "0",
    "end": "20000"
  },
  {
    "text": "welcome everybody this is our content and data platforms that view presentation today we're going to tell",
    "start": "299",
    "end": "6299"
  },
  {
    "text": "you a story about rebuilding and scaling some of our services from zero in a year",
    "start": "6299",
    "end": "13920"
  },
  {
    "text": "the the very important part is in a year I think we got a lot of stuff done in just one year with very little",
    "start": "13920",
    "end": "18960"
  },
  {
    "text": "development resources just a little bit about us in case you're wondering clicking who the heck are these guys my",
    "start": "18960",
    "end": "26099"
  },
  {
    "start": "20000",
    "end": "49000"
  },
  {
    "text": "name is miguel Verado i am vice president of data and analytics at vivo and this is hello everybody my name is",
    "start": "26099",
    "end": "32460"
  },
  {
    "text": "alain Suvari I'm a senior engineer at vivo content services I'm a back-end",
    "start": "32460",
    "end": "38550"
  },
  {
    "text": "engineer and mostly due serverless stuff and there's our contact information there's a social media information as",
    "start": "38550",
    "end": "46140"
  },
  {
    "text": "well as email address if you want to contact us at any given point in time so this is what to expect from the session",
    "start": "46140",
    "end": "52020"
  },
  {
    "start": "49000",
    "end": "95000"
  },
  {
    "text": "we're going to talk a little bit about vivo for those of you who don't know what the way is we're going to talk a little bit about engineering with in",
    "start": "52020",
    "end": "58410"
  },
  {
    "text": "vivo and then Alan is going to talk to you guys about content services of vivo",
    "start": "58410",
    "end": "64290"
  },
  {
    "text": "and go through water content services what it has taken to rebuild content services and how lime does fit into this",
    "start": "64290",
    "end": "71220"
  },
  {
    "text": "whole really textured picture then I'm going to talk a little bit about data services also I'm going to talk about",
    "start": "71220",
    "end": "76560"
  },
  {
    "text": "what data services are going to talk about building a whole data platform",
    "start": "76560",
    "end": "81630"
  },
  {
    "text": "from scratch in about a year and then we're going to also talk about how Kinesis fits into the data services",
    "start": "81630",
    "end": "88799"
  },
  {
    "text": "picture and how it is kind of like the central nervous system for data within",
    "start": "88799",
    "end": "94020"
  },
  {
    "text": "vivo so what is V both so V was the world's leading all premium music video",
    "start": "94020",
    "end": "100229"
  },
  {
    "start": "95000",
    "end": "134000"
  },
  {
    "text": "and entertainment platform we do about 19 billion video views a month that's a",
    "start": "100229",
    "end": "106140"
  },
  {
    "text": "big number this is worldwide throughout all of our properties including our syndication partners as well we deliver",
    "start": "106140",
    "end": "112829"
  },
  {
    "text": "a personalized and curated experience that allows people to explore and discover music videos original",
    "start": "112829",
    "end": "120420"
  },
  {
    "text": "programming because we produce our own original programming as well very little people know that actually and also live",
    "start": "120420",
    "end": "126960"
  },
  {
    "text": "performances by artists that people love we deliver these experiences in mobile web as well as connected to",
    "start": "126960",
    "end": "134400"
  },
  {
    "start": "134000",
    "end": "263000"
  },
  {
    "text": "so I want to talk a little about the scale of vivo so you can wrap your head",
    "start": "134400",
    "end": "139630"
  },
  {
    "text": "around you know what our world looks like more or less so I already talked about our monthly video views this slide",
    "start": "139630",
    "end": "145810"
  },
  {
    "text": "is a little outdated but it's more like nineteen billion a month on the first half of this year we stream about 900",
    "start": "145810",
    "end": "153850"
  },
  {
    "text": "million hours of video that is fifty one percent more from the previous year so",
    "start": "153850",
    "end": "159070"
  },
  {
    "text": "it's a it's a big increase and I don't have the numbers if I were looking as we close a year but it's I believe that",
    "start": "159070",
    "end": "166330"
  },
  {
    "text": "we've gone up about 70 percent overall for the entire year compared to the previous year one interesting thing",
    "start": "166330",
    "end": "174040"
  },
  {
    "text": "about videos music videos that we found is that it's a much more social medium than audio people tend to share music",
    "start": "174040",
    "end": "181330"
  },
  {
    "text": "videos twice as much then they share audio tracks on social networks we have",
    "start": "181330",
    "end": "186940"
  },
  {
    "text": "reached about 25 million unique viewers a day we have about 400 million unique",
    "start": "186940",
    "end": "193540"
  },
  {
    "text": "viewers a month to put it in contrast the US population is about 340 million",
    "start": "193540",
    "end": "198970"
  },
  {
    "text": "people so it's a big big audience that we're dealing with constrained entering information piece",
    "start": "198970",
    "end": "205750"
  },
  {
    "text": "so if Breanna was a TV show that would be a little bit weird if she was like TV show imagine you wake up one day",
    "start": "205750",
    "end": "212080"
  },
  {
    "text": "oh crap I'm a TV show anyway if 300 was a TV show the week of the premiere for",
    "start": "212080",
    "end": "218800"
  },
  {
    "text": "her video work she would have come in number two right below the Oscars and",
    "start": "218800",
    "end": "224709"
  },
  {
    "text": "right above the walking dead so uh you know that's that those those are big",
    "start": "224709",
    "end": "229780"
  },
  {
    "text": "numbers she had about 8.8 video views a eight point eight million video views in",
    "start": "229780",
    "end": "235690"
  },
  {
    "text": "that week of the premiere another similar data point that just kind of illustrates how pervasive music video",
    "start": "235690",
    "end": "242230"
  },
  {
    "text": "has become so Justin Bieber when he put out his baby video it took him about",
    "start": "242230",
    "end": "247690"
  },
  {
    "text": "four years to reach 1 billion views in contrast fast forward to Adele's fellow",
    "start": "247690",
    "end": "254440"
  },
  {
    "text": "release it took her only 88 days to reach the same amount of views so you can see how over time music videos are",
    "start": "254440",
    "end": "261220"
  },
  {
    "text": "becoming more and more popular so VEVO has been going through this reinvention before too",
    "start": "261220",
    "end": "267460"
  },
  {
    "start": "263000",
    "end": "293000"
  },
  {
    "text": "fifteen this is how people look like we had a very noisy loud brand it was a",
    "start": "267460",
    "end": "273190"
  },
  {
    "text": "little bit confusing it was very in-your-face and so we've been transforming the entire company the",
    "start": "273190",
    "end": "279250"
  },
  {
    "text": "entire product we've been redesigning all of our products and that also includes our brands so now we have a",
    "start": "279250",
    "end": "285099"
  },
  {
    "text": "much more sober brand and now we're all about putting our name to this side and",
    "start": "285099",
    "end": "290169"
  },
  {
    "text": "putting the artists at the front the forefront so let's talk a little bit about engineering at vivo there's kind",
    "start": "290169",
    "end": "297580"
  },
  {
    "start": "293000",
    "end": "409000"
  },
  {
    "text": "of like two phases of engineering of evil before the reinvention engineering 1.0 and then post reinvention",
    "start": "297580",
    "end": "303520"
  },
  {
    "text": "engineering 2.0 so our CTO Alex Nunes who joined vivo last year he's not a",
    "start": "303520",
    "end": "309580"
  },
  {
    "text": "fantastic job I just kind of rebuilding the entire product and engineering organizations along with mark Haller had",
    "start": "309580",
    "end": "316389"
  },
  {
    "text": "a product so the old world looked like this we had a hybrid hosting infrastructure",
    "start": "316389",
    "end": "321940"
  },
  {
    "text": "we used Rackspace and it obvious together we had these big big heavy mega",
    "start": "321940",
    "end": "327789"
  },
  {
    "text": "services and believe it or not most of the code bases were net there was no",
    "start": "327789",
    "end": "333190"
  },
  {
    "text": "continuous delivery and there were no tests and loads and loads and loads of technical that the technical debt came",
    "start": "333190",
    "end": "340210"
  },
  {
    "text": "because the organization was very reactive people were moving reacting to",
    "start": "340210",
    "end": "345610"
  },
  {
    "text": "what the business wanted without proper planning and proper engineering practices so now the evil engineer 2.0",
    "start": "345610",
    "end": "352060"
  },
  {
    "text": "this is what it looks like we're a hundred percent on AWS and we're using kubernetes as well we use containers",
    "start": "352060",
    "end": "358419"
  },
  {
    "text": "everything we run production is running in docker containers now we have a micro",
    "start": "358419",
    "end": "364030"
  },
  {
    "text": "services and nano services architecture and now we have a heterogeneous environment we support various languages",
    "start": "364030",
    "end": "370449"
  },
  {
    "text": "we don't believe in that one language is the best for everything we believe we have the philosophy that there's got to",
    "start": "370449",
    "end": "376539"
  },
  {
    "text": "pick the best language for the problem that you have at hand so the languages that we support today are go Scala Java",
    "start": "376539",
    "end": "382860"
  },
  {
    "text": "and nodejs now we have proper continuous delivery systems and pipelines so every",
    "start": "382860",
    "end": "389409"
  },
  {
    "text": "little piece of code that we ever deploy goes through our continuous delivery pipelines we have a more test-driven",
    "start": "389409",
    "end": "395729"
  },
  {
    "text": "process we also have a more behavior driven process in place we've rewritten",
    "start": "395729",
    "end": "401230"
  },
  {
    "text": "of our stacks and yes we're hiring so if anything sounds interesting to you guys",
    "start": "401230",
    "end": "406690"
  },
  {
    "text": "after this presentation come talk to us so now I'm going to pass it over to Alan",
    "start": "406690",
    "end": "412470"
  },
  {
    "start": "409000",
    "end": "488000"
  },
  {
    "text": "thank you so during the course of this presentation I'm going to refer to",
    "start": "412470",
    "end": "418720"
  },
  {
    "text": "content services so before we talk about them let's see what content services is",
    "start": "418720",
    "end": "426630"
  },
  {
    "text": "so whenever you watch a music video let's say Justin Bieber Katy Perry",
    "start": "426630",
    "end": "432640"
  },
  {
    "text": "Taylor Swift Adele or your favorite artist regardless of where you watch",
    "start": "432640",
    "end": "437830"
  },
  {
    "text": "this on your mobile phone on your TV on your computer doesn't matter and it",
    "start": "437830",
    "end": "445060"
  },
  {
    "text": "doesn't matter if you watch it on YouTube or on VEVO this has brought to",
    "start": "445060",
    "end": "450250"
  },
  {
    "text": "you by content services so what we do actually will be deliver video to the",
    "start": "450250",
    "end": "456850"
  },
  {
    "text": "audience so that's the responsibility of our team and this includes some things",
    "start": "456850",
    "end": "466510"
  },
  {
    "text": "like metadata and video ingestion video encoding enriching metadata publishing",
    "start": "466510",
    "end": "475030"
  },
  {
    "text": "to different providers like YouTube for example and providing some APRs for",
    "start": "475030",
    "end": "481450"
  },
  {
    "text": "other teams and other client platforms to use them use this metadata and data",
    "start": "481450",
    "end": "489420"
  },
  {
    "start": "488000",
    "end": "527000"
  },
  {
    "text": "alright so I'm just going to define what data services are within levo real quick so there's context so the",
    "start": "489420",
    "end": "496600"
  },
  {
    "text": "data services view or the collection of services and infrastructure that encompasses the vivo data platform",
    "start": "496600",
    "end": "502030"
  },
  {
    "text": "there's kind of like two over goals or two over things that the data platform covers one is it powers it smart",
    "start": "502030",
    "end": "509800"
  },
  {
    "text": "consumer experiences in the form of personalization and recommendations but it also provides analytics to all of our",
    "start": "509800",
    "end": "516400"
  },
  {
    "text": "business and product groups so we can make data-driven decisions the data",
    "start": "516400",
    "end": "521409"
  },
  {
    "text": "services team is composed by platform engineers as well as data scientists back to Allen okay so this part of this",
    "start": "521410",
    "end": "531400"
  },
  {
    "start": "527000",
    "end": "549000"
  },
  {
    "text": "presentation is about content services and how we react the old architecture so I'm going to",
    "start": "531400",
    "end": "538070"
  },
  {
    "text": "talk about what this old architecture was and compare it with the new",
    "start": "538070",
    "end": "543230"
  },
  {
    "text": "architecture and tell you how the story of how we migrated from the old one to the new one so our old architecture is a",
    "start": "543230",
    "end": "553120"
  },
  {
    "start": "549000",
    "end": "650000"
  },
  {
    "text": "actually was a giant monolithic service which was responsible for everything you",
    "start": "553120",
    "end": "559880"
  },
  {
    "text": "can think of authentication serving metadata searching metadata and playlist",
    "start": "559880",
    "end": "567339"
  },
  {
    "text": "even recommendation they were all served from the same service and you can imagine if something goes wrong with the",
    "start": "567339",
    "end": "573920"
  },
  {
    "text": "service all these things go down together and that's bad it was written",
    "start": "573920",
    "end": "580100"
  },
  {
    "text": "in dotnet and sequel server and you can",
    "start": "580100",
    "end": "586100"
  },
  {
    "text": "see how it looked like the simplified version of our old architecture so as",
    "start": "586100",
    "end": "593360"
  },
  {
    "text": "you can see lots of arrows and dependencies are there and components are tightly coupled and they are",
    "start": "593360",
    "end": "601760"
  },
  {
    "text": "dependent on each other and also you can see there there is a relational database as a central place everybody is kind of",
    "start": "601760",
    "end": "609350"
  },
  {
    "text": "connected to that database and they are all using the same thing same database and at the end of the day we have",
    "start": "609350",
    "end": "617810"
  },
  {
    "text": "artists on video which provides API metadata APRs for the clients to to use",
    "start": "617810",
    "end": "625459"
  },
  {
    "text": "them and when I refer to metadata let me explain what metadata is so when you",
    "start": "625459",
    "end": "632029"
  },
  {
    "text": "watch a video with you has some specification for example it has a title",
    "start": "632029",
    "end": "637399"
  },
  {
    "text": "it has a start date it has a main artist it has a genre these are the things that",
    "start": "637399",
    "end": "644089"
  },
  {
    "text": "we call them metadata and so this was",
    "start": "644089",
    "end": "649279"
  },
  {
    "text": "the old architecture and this is how we created the new architecture we try to",
    "start": "649279",
    "end": "656990"
  },
  {
    "start": "650000",
    "end": "756000"
  },
  {
    "text": "break that giant service into different micro services which are independent so",
    "start": "656990",
    "end": "664220"
  },
  {
    "text": "we created different independent marker services who are not talking to each other",
    "start": "664220",
    "end": "670459"
  },
  {
    "text": "directly instead they're talking through their Kinesis a stream so every",
    "start": "670459",
    "end": "677450"
  },
  {
    "text": "microservice has a Kinesis a stream of its own and it writes events to that stream and",
    "start": "677450",
    "end": "683450"
  },
  {
    "text": "if it wants something from other services other micro services it just",
    "start": "683450",
    "end": "688630"
  },
  {
    "text": "consume or listen to their stream and consume whatever they want so it's kind",
    "start": "688630",
    "end": "694310"
  },
  {
    "text": "of asynchronous no direct API calls between micro services and these streams",
    "start": "694310",
    "end": "699950"
  },
  {
    "text": "are kind of real-time and also every stream has its own JSON schema so not",
    "start": "699950",
    "end": "707209"
  },
  {
    "text": "everything can go on the stream just a specific schema for every stream and as",
    "start": "707209",
    "end": "715399"
  },
  {
    "text": "you can imagine this is very cost effective because of its nature of micro",
    "start": "715399",
    "end": "720770"
  },
  {
    "text": "services so every micro service has its own database consume as many as much",
    "start": "720770",
    "end": "726080"
  },
  {
    "text": "resources as they need and because of that we saved some money here also these",
    "start": "726080",
    "end": "732740"
  },
  {
    "text": "micro services are mostly serverless and created with lambda and api gateway so",
    "start": "732740",
    "end": "740320"
  },
  {
    "text": "we save some dollars there as well and",
    "start": "740320",
    "end": "747399"
  },
  {
    "text": "we also created continuous delivery for this new architecture so I'm going to",
    "start": "747399",
    "end": "753770"
  },
  {
    "text": "show you how these components are working together this is the overview of",
    "start": "753770",
    "end": "759350"
  },
  {
    "start": "756000",
    "end": "852000"
  },
  {
    "text": "our new architecture and as you can see that the orange tiles are micro services",
    "start": "759350",
    "end": "768500"
  },
  {
    "text": "that I'm talking about and those horizontal lines green and blue are the",
    "start": "768500",
    "end": "774320"
  },
  {
    "text": "streams so every March a service pretty much talks to one or maybe more streams",
    "start": "774320",
    "end": "779930"
  },
  {
    "text": "one of these a stream it's is their own stream so there are owner of one stream",
    "start": "779930",
    "end": "786020"
  },
  {
    "text": "at least and they are communicating with the Kinesis is streamed I'm not going to",
    "start": "786020",
    "end": "792709"
  },
  {
    "text": "talk about every one of these services but a general overview is that",
    "start": "792709",
    "end": "799610"
  },
  {
    "text": "so the in just the video the video metadata passes to their stream and",
    "start": "799610",
    "end": "805889"
  },
  {
    "text": "another service just validate the metadata and other service and reaches metadata for example add more",
    "start": "805889",
    "end": "812639"
  },
  {
    "text": "information to this gathers from which gathers from different resources and reaches it and then publishes it another",
    "start": "812639",
    "end": "821009"
  },
  {
    "text": "method another service and so they do their own job as a kind of workflow like",
    "start": "821009",
    "end": "827220"
  },
  {
    "text": "system asynchronously and the beginning",
    "start": "827220",
    "end": "832800"
  },
  {
    "text": "of this new architecture the entry point is those blue streams Audis and video",
    "start": "832800",
    "end": "840809"
  },
  {
    "text": "raw so but as you can imagine it was not",
    "start": "840809",
    "end": "847370"
  },
  {
    "text": "very easy to create such architecture from that one so it was challenging one",
    "start": "847370",
    "end": "854069"
  },
  {
    "start": "852000",
    "end": "922000"
  },
  {
    "text": "of the challenges was that the old system was in place and working in",
    "start": "854069",
    "end": "859079"
  },
  {
    "text": "production so we couldn't just turn it off we needed to gradually switch to the",
    "start": "859079",
    "end": "865050"
  },
  {
    "text": "new system from the old system and this old system was evolving so and of course",
    "start": "865050",
    "end": "872970"
  },
  {
    "text": "you can never even if it's hundred percent complete you can't just switch to the new system or the night it needs",
    "start": "872970",
    "end": "879870"
  },
  {
    "text": "to be gradual and one of the things that",
    "start": "879870",
    "end": "885870"
  },
  {
    "text": "we didn't want to do was changing the old code based dotnet codebase that was",
    "start": "885870",
    "end": "891899"
  },
  {
    "text": "a big no-no for us so we didn't want to touch the old code and we didn't we",
    "start": "891899",
    "end": "897509"
  },
  {
    "text": "wanted to kind of connect these two worlds somehow why because we wanted to",
    "start": "897509",
    "end": "904889"
  },
  {
    "text": "test the new service so the new architecture needed some live data we needed some how to read the data live",
    "start": "904889",
    "end": "912179"
  },
  {
    "text": "data from the old system and push it to the new system so to do that we",
    "start": "912179",
    "end": "921290"
  },
  {
    "text": "introduced the project called Mex it which was acting as a bridge between",
    "start": "921290",
    "end": "928290"
  },
  {
    "start": "922000",
    "end": "1019000"
  },
  {
    "text": "these two worlds and it's basically a lambda",
    "start": "928290",
    "end": "933540"
  },
  {
    "text": "and a set of lambda to be accurate and runs on a recurring basis like a",
    "start": "933540",
    "end": "940680"
  },
  {
    "text": "scheduled tasks every five minutes and reads changes from the old system so if",
    "start": "940680",
    "end": "948390"
  },
  {
    "text": "metadata changes or if we have a new metadata it queries from the old system",
    "start": "948390",
    "end": "953850"
  },
  {
    "text": "and if it detects any change it writes it to the stream of the new architecture",
    "start": "953850",
    "end": "960410"
  },
  {
    "text": "so reads from the old API push it to the stream that's what makes it does and",
    "start": "960410",
    "end": "967550"
  },
  {
    "text": "it's also fault tolerant so because of the nature of lambda maybe something",
    "start": "967640",
    "end": "973980"
  },
  {
    "text": "happens what if the lambda doesn't run so we shouldn't we can't afford to lose",
    "start": "973980",
    "end": "978990"
  },
  {
    "text": "any metadata so we wanted to make sure that we never lose anything so we always",
    "start": "978990",
    "end": "984150"
  },
  {
    "text": "keep track of the last successful timestamp and store it somewhere in dynamodb and next time when the lambda",
    "start": "984150",
    "end": "993570"
  },
  {
    "text": "runs we continue from that point on so we always kind of guaranteed that we get",
    "start": "993570",
    "end": "1000730"
  },
  {
    "text": "the changes and we never lose anything so the one interesting thing about this",
    "start": "1000730",
    "end": "1007190"
  },
  {
    "text": "project makes it is that the whole thing was done in two or three days so it was",
    "start": "1007190",
    "end": "1013250"
  },
  {
    "text": "very quick and it's been working since then this shows how Mex it connects the",
    "start": "1013250",
    "end": "1025760"
  },
  {
    "text": "two worlds the old architecture and sense live production data to artists",
    "start": "1025760",
    "end": "1032510"
  },
  {
    "text": "and video draw so from that point new architecture does its job and and all",
    "start": "1032510",
    "end": "1040189"
  },
  {
    "text": "architecture is not aware of this makes it thing because makes it connects today",
    "start": "1040190",
    "end": "1045939"
  },
  {
    "text": "all the AP are just like another client queries just like another client and",
    "start": "1045940",
    "end": "1052420"
  },
  {
    "text": "it's not aware of that so we wanted to make sure that everything is working so",
    "start": "1052420",
    "end": "1059840"
  },
  {
    "text": "we needed to monitor this lambda and here is a dashboard that we use",
    "start": "1059840",
    "end": "1066010"
  },
  {
    "start": "1062000",
    "end": "1181000"
  },
  {
    "text": "for monitoring this project it's a data",
    "start": "1066010",
    "end": "1071919"
  },
  {
    "text": "dog dashboard and gets its data directly from cloud watch Amazon Cloud watch so",
    "start": "1071919",
    "end": "1080320"
  },
  {
    "text": "the graph that you see on this dashboard they are standard lambda matrix like",
    "start": "1080320",
    "end": "1090090"
  },
  {
    "text": "invocations duration if any error has happened and things like that this is",
    "start": "1090090",
    "end": "1098020"
  },
  {
    "text": "pretty standard and you need to watch these things but we need it more so you",
    "start": "1098020",
    "end": "1103840"
  },
  {
    "text": "wanted to actually count how many new videos we just insert it into the system",
    "start": "1103840",
    "end": "1109780"
  },
  {
    "text": "how many are these changes we had and things like that so those four numbers that you see on top left of the screen",
    "start": "1109780",
    "end": "1118440"
  },
  {
    "text": "are custom metrics they are coming directly from lambda it's kind of",
    "start": "1118440",
    "end": "1124809"
  },
  {
    "text": "interesting to know how we get these numbers to data dark so on in lambda we",
    "start": "1124809",
    "end": "1132669"
  },
  {
    "text": "send these metrics on counter to directly to cloud watch as a custom",
    "start": "1132669",
    "end": "1138250"
  },
  {
    "text": "metric so you can see these things in cloud watch in AWS dashboards as well",
    "start": "1138250",
    "end": "1143580"
  },
  {
    "text": "that works but we also wanted to get them in beta dog as well everything in",
    "start": "1143580",
    "end": "1150549"
  },
  {
    "text": "one place and we were able to pull those custom metrics from AWS cloud watch into",
    "start": "1150549",
    "end": "1159100"
  },
  {
    "text": "Data doc so we can see everything together and so project makes it was one",
    "start": "1159100",
    "end": "1168820"
  },
  {
    "text": "example of lambdas that we used to switch to new architecture but it was",
    "start": "1168820",
    "end": "1177100"
  },
  {
    "text": "not everything that we did with lambda so here I'm going to use about talked",
    "start": "1177100",
    "end": "1183850"
  },
  {
    "start": "1181000",
    "end": "1212000"
  },
  {
    "text": "about different scenarios that we used lambda for various reasons for example",
    "start": "1183850",
    "end": "1192370"
  },
  {
    "text": "as a scheduled task or as a database trigger or user safe facing services",
    "start": "1192370",
    "end": "1199690"
  },
  {
    "text": "completely front-facing services and etc other use cases I'm going to talk about",
    "start": "1199690",
    "end": "1206080"
  },
  {
    "text": "every one of these scenarios for a couple of minutes",
    "start": "1206080",
    "end": "1212220"
  },
  {
    "start": "1212000",
    "end": "1469000"
  },
  {
    "text": "the first one is scheduled tasks so we had some use cases which we kind of used",
    "start": "1212220",
    "end": "1223060"
  },
  {
    "text": "as a scheduled task as a cron job with lambdas one of the first thing that we",
    "start": "1223060",
    "end": "1230980"
  },
  {
    "text": "did was kind of updating elasticsearch index so we have a lastic search index",
    "start": "1230980",
    "end": "1238420"
  },
  {
    "text": "and it has all artists and video metadata and whenever something changes",
    "start": "1238420",
    "end": "1243730"
  },
  {
    "text": "of course we need to update the index or rebuild the elastic search index for the",
    "start": "1243730",
    "end": "1248980"
  },
  {
    "text": "changes to show up in search so to do that we set up some lambdas who listen",
    "start": "1248980",
    "end": "1256930"
  },
  {
    "text": "to the changes of metadata and update lassic search this was one use case and",
    "start": "1256930",
    "end": "1264130"
  },
  {
    "text": "the other one was I just explained project makes it which was the same thing similar thing but instead of",
    "start": "1264130",
    "end": "1270550"
  },
  {
    "text": "updating elasticsearch sends it to the stream Kinesis a stream another",
    "start": "1270550",
    "end": "1275910"
  },
  {
    "text": "interesting use case was using lambdas for cash warming to give you some",
    "start": "1275910",
    "end": "1283840"
  },
  {
    "text": "background so we use caching for almost everything all metadata are cached and",
    "start": "1283840",
    "end": "1289800"
  },
  {
    "text": "in this case we're talking about all these images so images are cached no",
    "start": "1289800",
    "end": "1296110"
  },
  {
    "text": "exception and cache has a TTL so let's say it's four hours so the image is in",
    "start": "1296110",
    "end": "1303160"
  },
  {
    "text": "cache for four hours and then it's not we should it should be fetched from the origin so that's okay for most of",
    "start": "1303160",
    "end": "1310720"
  },
  {
    "text": "artists we have like hundreds of thousands of artists that's fine but we",
    "start": "1310720",
    "end": "1315730"
  },
  {
    "text": "wanted to make to keep this top artist warming the cache so we wanted them to",
    "start": "1315730",
    "end": "1321700"
  },
  {
    "text": "be served from cache always so we created a simple lambda which does a",
    "start": "1321700",
    "end": "1328240"
  },
  {
    "text": "very simple job every one hour it hits a top 500 artist images it just it's a get",
    "start": "1328240",
    "end": "1337090"
  },
  {
    "text": "request it sends a get request to top 500 artists or you can say 500 API calls",
    "start": "1337090",
    "end": "1342789"
  },
  {
    "text": "it happens every hour so with doing that we were able to keep these 500 artists",
    "start": "1342789",
    "end": "1348849"
  },
  {
    "text": "in the cache forever of course it's because of performance improvement",
    "start": "1348849",
    "end": "1356759"
  },
  {
    "text": "another example was which we used scheduled tasks was project release er",
    "start": "1356759",
    "end": "1364599"
  },
  {
    "text": "so like I mentioned every video metadata",
    "start": "1364599",
    "end": "1370149"
  },
  {
    "text": "has a start date so video might be ingested today but it it's not",
    "start": "1370149",
    "end": "1375489"
  },
  {
    "text": "necessarily live today it might go live next week so every video has a start date and that defines",
    "start": "1375489",
    "end": "1382509"
  },
  {
    "text": "the the premiere time so we wanted to kind of notify some services that this",
    "start": "1382509",
    "end": "1390399"
  },
  {
    "text": "is time the video went live it's released so we created this service",
    "start": "1390399",
    "end": "1395499"
  },
  {
    "text": "release er that does a polling a checks video start date on a recurring basis",
    "start": "1395499",
    "end": "1401979"
  },
  {
    "text": "again if it's time it just pushed some event to a stream to notify whoever is",
    "start": "1401979",
    "end": "1409809"
  },
  {
    "text": "interested about new premieres but there was a problem so you might know lambda",
    "start": "1409809",
    "end": "1417820"
  },
  {
    "text": "has a limit for recurring tasks it used to be five minutes the minimum frequency",
    "start": "1417820",
    "end": "1424149"
  },
  {
    "text": "and it's now improved it's one minute but it was not something that we were",
    "start": "1424149",
    "end": "1430330"
  },
  {
    "text": "looking for you can imagine one minute is a long time so when we say premiere goes live at 8 a.m. it's 8 a.m. sharp it",
    "start": "1430330",
    "end": "1439479"
  },
  {
    "text": "can be 8 or 1 or 759 so we wanted to do this checking that this polling every 5",
    "start": "1439479",
    "end": "1446710"
  },
  {
    "text": "seconds and lambda doesn't support 5 seconds so we did a trick what we did we created a",
    "start": "1446710",
    "end": "1455759"
  },
  {
    "text": "long-running lambda let's say 5 minute so a lambda with five minute timeout and",
    "start": "1455759",
    "end": "1463470"
  },
  {
    "text": "inside that we start a timer so I want to show you some piece of a piece",
    "start": "1463470",
    "end": "1469400"
  },
  {
    "start": "1469000",
    "end": "1535000"
  },
  {
    "text": "of code here which tells you how this works so there is a main timer inside",
    "start": "1469400",
    "end": "1476600"
  },
  {
    "text": "the lambda which runs every 5 second it's a pretty simple code but it does",
    "start": "1476600",
    "end": "1482570"
  },
  {
    "text": "the job so every 5 second it runs and it processes that videos that they need to",
    "start": "1482570",
    "end": "1490100"
  },
  {
    "text": "be published or whatever it it's going to doing and it just works every 5",
    "start": "1490100",
    "end": "1497299"
  },
  {
    "text": "minutes and this happens again and again and again until we reach the five-minute",
    "start": "1497299",
    "end": "1502970"
  },
  {
    "text": "lamda time out maybe one second yeah one second before that five-minute timeout",
    "start": "1502970",
    "end": "1509419"
  },
  {
    "text": "we stop the timer so before lamda expires we stop the timer and it's safe for the lamda to die",
    "start": "1509419",
    "end": "1517970"
  },
  {
    "text": "so lambda dies and immediate in another lamda starts and same thing happens",
    "start": "1517970",
    "end": "1524150"
  },
  {
    "text": "again and again so with this mechanism we were able to do this kind of improve",
    "start": "1524150",
    "end": "1529730"
  },
  {
    "text": "the lamda frequency to five-second other",
    "start": "1529730",
    "end": "1536179"
  },
  {
    "start": "1535000",
    "end": "1765000"
  },
  {
    "text": "scenarios was using lambdas as database triggers so we mainly use this these",
    "start": "1536179",
    "end": "1543890"
  },
  {
    "text": "kind of projects for not changing the source code so we needed to do something",
    "start": "1543890",
    "end": "1551090"
  },
  {
    "text": "without changing the source code and this feature enabled us to to do so the",
    "start": "1551090",
    "end": "1557960"
  },
  {
    "text": "very first lamda that we created at vivo was this first item that you can see",
    "start": "1557960",
    "end": "1563150"
  },
  {
    "text": "here so a little bit of background story we are storing user logs into a dynamo",
    "start": "1563150",
    "end": "1571490"
  },
  {
    "text": "DB database so whenever you like something for example user X likes",
    "start": "1571490",
    "end": "1576520"
  },
  {
    "text": "artists Y this is an record in the dynamo dB and we store it and we wanted",
    "start": "1576520",
    "end": "1585559"
  },
  {
    "text": "to kind of capture this likes and send it to a stream in other words we wanted",
    "start": "1585559",
    "end": "1593090"
  },
  {
    "text": "to stream enable the light services which was not a stream enabled so what we did we just listened to created lamda",
    "start": "1593090",
    "end": "1600740"
  },
  {
    "text": "which listens to database changes create",
    "start": "1600740",
    "end": "1606410"
  },
  {
    "text": "modify and delete and turn it to an event to stream it was maybe 20 30 lines",
    "start": "1606410",
    "end": "1614840"
  },
  {
    "text": "of code very simple but it does the job and similar use case was capturing user",
    "start": "1614840",
    "end": "1621620"
  },
  {
    "text": "likes and send it to redshift or s3 for further analysis that was again another",
    "start": "1621620",
    "end": "1628429"
  },
  {
    "text": "lambda which we did and did the job but one of the interesting things that we",
    "start": "1628429",
    "end": "1635960"
  },
  {
    "text": "did with database three years was for replication so cross account dynamodb",
    "start": "1635960",
    "end": "1645710"
  },
  {
    "text": "replication this was something that we were told we should do for all projects",
    "start": "1645710",
    "end": "1651950"
  },
  {
    "text": "and we did it with the lambda so for your information we have different",
    "start": "1651950",
    "end": "1658700"
  },
  {
    "text": "environments staging dev and production and every environment environment is",
    "start": "1658700",
    "end": "1666040"
  },
  {
    "text": "hosted in a separate AWS account so the counts are different and for this",
    "start": "1666040",
    "end": "1672679"
  },
  {
    "text": "project we wanted to have a copy of production data in staging environment",
    "start": "1672679",
    "end": "1679300"
  },
  {
    "text": "so we tried different methods for example nightly backup and hourly backup",
    "start": "1679300",
    "end": "1686780"
  },
  {
    "text": "and restore and things like that so the problem was that they were different accounts they are not in the same",
    "start": "1686780",
    "end": "1692480"
  },
  {
    "text": "account staging table and production table and we end up doing this which was",
    "start": "1692480",
    "end": "1699890"
  },
  {
    "text": "a lambda again so how it works it just listens to the changes on production",
    "start": "1699890",
    "end": "1707480"
  },
  {
    "text": "database and whenever something happens whatever it is to create update or",
    "start": "1707480",
    "end": "1713510"
  },
  {
    "text": "delete it just writes it directly to the other table in staging account which of",
    "start": "1713510",
    "end": "1720830"
  },
  {
    "text": "course we need some cross account I am role need some setup but once you",
    "start": "1720830",
    "end": "1728390"
  },
  {
    "text": "do this setup the lambda just works and this lambda is hosted as you can see in production account",
    "start": "1728390",
    "end": "1734299"
  },
  {
    "text": "so it's in production I can count and creates a copy and replica of whatever is happening in this account into",
    "start": "1734299",
    "end": "1742639"
  },
  {
    "text": "staging and we were able to do it it works in real time as you can imagine it's much better than nightly backups",
    "start": "1742639",
    "end": "1749929"
  },
  {
    "text": "and things like that and so it's not very specific to VEVO you might want to",
    "start": "1749929",
    "end": "1757249"
  },
  {
    "text": "do the same thing I'm going to share the source code for this in a blog post maybe later and next slide is so so far",
    "start": "1757249",
    "end": "1769339"
  },
  {
    "start": "1765000",
    "end": "1922000"
  },
  {
    "text": "whatever I said was using lambda as a kind of helper or as a tool",
    "start": "1769339",
    "end": "1775489"
  },
  {
    "text": "DevOps things and but not a service what",
    "start": "1775489",
    "end": "1780799"
  },
  {
    "text": "we actually created a service a full-featured service micro service as well what's called the project souza",
    "start": "1780799",
    "end": "1786999"
  },
  {
    "text": "it's a user facing service and as you",
    "start": "1786999",
    "end": "1792469"
  },
  {
    "text": "can see it does link shortening so you're all familiar with bitly this is",
    "start": "1792469",
    "end": "1798859"
  },
  {
    "text": "something like that we have a domain called vivoli which takes care of vivo",
    "start": "1798859",
    "end": "1806209"
  },
  {
    "text": "short links so every sure link shortener needs to create a short link and it needs to expand it and this project does",
    "start": "1806209",
    "end": "1814940"
  },
  {
    "text": "actually a bit more it captures the event social events I'll give you an",
    "start": "1814940",
    "end": "1821059"
  },
  {
    "text": "example and all these things were done",
    "start": "1821059",
    "end": "1826729"
  },
  {
    "text": "with separate lambdas so this is what happens you create a short link when you",
    "start": "1826729",
    "end": "1832879"
  },
  {
    "text": "want to share something and we attach those events to the link for example it",
    "start": "1832879",
    "end": "1839839"
  },
  {
    "text": "knows that you are a user on iOS device and you are trying to share something to",
    "start": "1839839",
    "end": "1846499"
  },
  {
    "text": "be shared on Twitter and then later somebody clicks on that but it turns out",
    "start": "1846499",
    "end": "1854509"
  },
  {
    "text": "that the link was copied to Facebook so the actual refer was Facebook so we track these kind of things because of",
    "start": "1854509",
    "end": "1860959"
  },
  {
    "text": "that I can call it's a smart link shortening service so it's very good to",
    "start": "1860959",
    "end": "1866599"
  },
  {
    "text": "have such thing as the black box which does its job and",
    "start": "1866599",
    "end": "1871760"
  },
  {
    "text": "it's kind of independent micro-service what we were actually able to do",
    "start": "1871760",
    "end": "1877040"
  },
  {
    "text": "something better we broke it into three nano services because of lambda which",
    "start": "1877040",
    "end": "1882770"
  },
  {
    "text": "means uh for every single feature we had a lambda for link shortening there is",
    "start": "1882770",
    "end": "1890420"
  },
  {
    "text": "one lambda for expanding which means whenever somebody clicks on the link that's another lambda and for capturing",
    "start": "1890420",
    "end": "1897650"
  },
  {
    "text": "the events again another lambda so if for example for some reason shorten goes",
    "start": "1897650",
    "end": "1903919"
  },
  {
    "text": "down you can't create a new shortening but you can still links always work so links should always work and expand",
    "start": "1903919",
    "end": "1911030"
  },
  {
    "text": "because expand is working and for this project we use lambda API gateway and",
    "start": "1911030",
    "end": "1918460"
  },
  {
    "text": "DynamoDB I'm going to show you just some initial design diagrams for this project",
    "start": "1918460",
    "end": "1926540"
  },
  {
    "start": "1922000",
    "end": "2088000"
  },
  {
    "text": "and how we use the lambda so the first one this slide is showing how we how",
    "start": "1926540",
    "end": "1934820"
  },
  {
    "text": "user creates a shortening as you can see client just asks the system to create a",
    "start": "1934820",
    "end": "1943340"
  },
  {
    "text": "short link by a get request the request passes API gateway and that trigger is",
    "start": "1943340",
    "end": "1949400"
  },
  {
    "text": "lambda 1 lambda 1 creates a short link but before that it uses lambda 3 for",
    "start": "1949400",
    "end": "1957080"
  },
  {
    "text": "authentication to see if the user is authenticated or not and if it's okay",
    "start": "1957080",
    "end": "1963740"
  },
  {
    "text": "then it just creates a short link and store it in the database at the same time lambda 0 is working and capturing",
    "start": "1963740",
    "end": "1973370"
  },
  {
    "text": "the events as a database trigger and sends it to the Kinesis stream for other",
    "start": "1973370",
    "end": "1978799"
  },
  {
    "text": "consumers so this is how we create a shortening and the other diagram is kind",
    "start": "1978799",
    "end": "1986929"
  },
  {
    "text": "of similar but for expanding a shortening so this is what happens when you click on an leave only short link",
    "start": "1986929",
    "end": "1993160"
  },
  {
    "text": "you click on a link it goes to API gateway and then lambda 2 lambda 2",
    "start": "1993160",
    "end": "1999580"
  },
  {
    "text": "queries the database for that key and it finds the full URL with all parameters",
    "start": "1999580",
    "end": "2005279"
  },
  {
    "text": "and it sends it back to the user and at the same time the events is also captured with lambda zero as you can see",
    "start": "2005279",
    "end": "2014489"
  },
  {
    "text": "there is no lambda one for authentication because not everyone can",
    "start": "2014489",
    "end": "2019619"
  },
  {
    "text": "create a short link but everyone should be able to click on a short thing so",
    "start": "2019619",
    "end": "2024659"
  },
  {
    "text": "it's open and you might think that it's a very simple service which it is and",
    "start": "2024659",
    "end": "2031730"
  },
  {
    "text": "get some traffic true but there is a caveat here because of the premier's",
    "start": "2031730",
    "end": "2039029"
  },
  {
    "text": "that I mentioned before you are expecting huge traffic increase at the",
    "start": "2039029",
    "end": "2045989"
  },
  {
    "text": "time of premiers so for example something goes live at 8 a.m. and we see",
    "start": "2045989",
    "end": "2053429"
  },
  {
    "text": "a lot of clicks from different places all around the world at the same time concurrently because this is what they",
    "start": "2053429",
    "end": "2061079"
  },
  {
    "text": "do so for example see are the greatest video one of the last thing I remember",
    "start": "2061079",
    "end": "2067220"
  },
  {
    "text": "last hits so she tweeted this short link",
    "start": "2067220",
    "end": "2072388"
  },
  {
    "text": "on her own Twitter you can imagine millions of people can see you can see that to it and we'll click on that at",
    "start": "2072389",
    "end": "2079319"
  },
  {
    "text": "the same time so we expect huge traffic and this was a concern for us to see how",
    "start": "2079319",
    "end": "2084750"
  },
  {
    "text": "lambda reacts in these cases and this is what happens so at 8 a.m. this specific",
    "start": "2084750",
    "end": "2095368"
  },
  {
    "start": "2088000",
    "end": "2166000"
  },
  {
    "text": "day this is a 24 hour graph we had a premiere at 8 a.m. and you can see that",
    "start": "2095369",
    "end": "2102480"
  },
  {
    "text": "regular traffic has increased 80 times this is a huge change and not every",
    "start": "2102480",
    "end": "2111750"
  },
  {
    "text": "service can tolerate such such huge spike but fortunately this system it",
    "start": "2111750",
    "end": "2117690"
  },
  {
    "text": "which is lambda based it tolerated it and nothing went wrong and we didn't",
    "start": "2117690",
    "end": "2124349"
  },
  {
    "text": "lose any user clicks or any video watch so everybody was happy to be honest",
    "start": "2124349",
    "end": "2130859"
  },
  {
    "text": "actually we didn't notice that this happened I was looking at data dark and I noticed well what is this spike and as well so",
    "start": "2130859",
    "end": "2137820"
  },
  {
    "text": "it works and this kind of yeah assured us this that we can rely on",
    "start": "2137820",
    "end": "2144570"
  },
  {
    "text": "lambda for high traffic even spiky traffic services so before that point we",
    "start": "2144570",
    "end": "2150780"
  },
  {
    "text": "know that okay lambda is a good thing and it works and it's very fast rapid application development in blah blah",
    "start": "2150780",
    "end": "2157650"
  },
  {
    "text": "blah but after that we kind of look at",
    "start": "2157650",
    "end": "2163080"
  },
  {
    "text": "it in a different way so it's more reliable other use cases we use lambda",
    "start": "2163080",
    "end": "2171930"
  },
  {
    "start": "2166000",
    "end": "2378000"
  },
  {
    "text": "one of the things was we wanted to hit different external signal providers so",
    "start": "2171930",
    "end": "2180450"
  },
  {
    "text": "we wanted we had some data payload and we wanted to send it to different providers and we created lambda for",
    "start": "2180450",
    "end": "2188730"
  },
  {
    "text": "every single provider so what number does it just massages the data and shapes it in the form that the provider",
    "start": "2188730",
    "end": "2195210"
  },
  {
    "text": "requires it and it just make API call inter without number is what kind of",
    "start": "2195210",
    "end": "2202020"
  },
  {
    "text": "difficult to do so but we easily created different lambdas for different providers this was part of project",
    "start": "2202020",
    "end": "2209190"
  },
  {
    "text": "Dartmouth which Miguel is going to talk about and one interesting thing that we",
    "start": "2209190",
    "end": "2216300"
  },
  {
    "text": "did recently this is actually last thing that we did was slack bot slack",
    "start": "2216300",
    "end": "2221460"
  },
  {
    "text": "integration to give you some history about this project not everybody is an",
    "start": "2221460",
    "end": "2229500"
  },
  {
    "text": "engineering vevo of course so we have content operation team we have business",
    "start": "2229500",
    "end": "2237450"
  },
  {
    "text": "side of the vevo who are working with the content one of the things that they",
    "start": "2237450",
    "end": "2244890"
  },
  {
    "text": "want to do is purging the cash on demand sometimes for some reason they wanted to",
    "start": "2244890",
    "end": "2252090"
  },
  {
    "text": "purge the cash for a specific video for example they want to update the view count of that video immediately for",
    "start": "2252090",
    "end": "2259830"
  },
  {
    "text": "different reasons so we have a cache passing mechanism and it works but they want to do their own thing so they said",
    "start": "2259830",
    "end": "2265620"
  },
  {
    "text": "we want this to be purged from the cache fresh data to reserve to the user and we have a slag",
    "start": "2265620",
    "end": "2272310"
  },
  {
    "text": "channel actually called viewcount purged something and so they asked us they",
    "start": "2272310",
    "end": "2280109"
  },
  {
    "text": "asked engineering could you please remove cache clear cache for this video and then somebody",
    "start": "2280109",
    "end": "2286349"
  },
  {
    "text": "answers them and do it for them and it's been like that for ruff for a long time",
    "start": "2286349",
    "end": "2294079"
  },
  {
    "text": "we thought maybe we can do better so we created this slack bot which is actually",
    "start": "2294079",
    "end": "2303450"
  },
  {
    "text": "a slash command I'm sure you've used slash commands we",
    "start": "2303450",
    "end": "2308490"
  },
  {
    "text": "created a slash purge so what they do they just type slash purge and the video",
    "start": "2308490",
    "end": "2313619"
  },
  {
    "text": "ID in the same slack channel that they use to ask us so now nowadays they just",
    "start": "2313619",
    "end": "2318900"
  },
  {
    "text": "say / / / / / video is RC which is the",
    "start": "2318900",
    "end": "2324089"
  },
  {
    "text": "video ID and that goes to slack and slack is calling the endpoint that is a",
    "start": "2324089",
    "end": "2332550"
  },
  {
    "text": "just rest endpoint as you can see with API gateway and lambda and that calls",
    "start": "2332550",
    "end": "2337740"
  },
  {
    "text": "different api's for cash for purging the cash in different layers so we don't",
    "start": "2337740",
    "end": "2343500"
  },
  {
    "text": "have one cache we have different layers of caching and we need multiple API calls to to do that so with that project",
    "start": "2343500",
    "end": "2352520"
  },
  {
    "text": "they kind of became so happy that they can do it themselves in slack not even",
    "start": "2352520",
    "end": "2359089"
  },
  {
    "text": "opening a browser or something like that so that was very cool with this we're",
    "start": "2359089",
    "end": "2366150"
  },
  {
    "text": "coming to the end of content services section I hand it over to Miguel who is",
    "start": "2366150",
    "end": "2371970"
  },
  {
    "text": "going to tell us about how they built data services we go Thank You Ellen yeah",
    "start": "2371970",
    "end": "2378569"
  },
  {
    "start": "2378000",
    "end": "2401000"
  },
  {
    "text": "it was great it's pretty incredible to think that all this new architecture was built it again in one year and I mean",
    "start": "2378569",
    "end": "2385470"
  },
  {
    "text": "how many developers like not even five yeah so it's a very small team so I",
    "start": "2385470",
    "end": "2390569"
  },
  {
    "text": "think that by reusing a lot of X's you picked up a lot of existing technology",
    "start": "2390569",
    "end": "2395970"
  },
  {
    "text": "you can get very far very fast so let's talk about building later services from scratch so when I joined vivo which was in",
    "start": "2395970",
    "end": "2403050"
  },
  {
    "start": "2401000",
    "end": "2427000"
  },
  {
    "text": "November of last year this is what the data is last Jenna lytx world look like so there was no data team in engineering",
    "start": "2403050",
    "end": "2410160"
  },
  {
    "text": "there was no vivo Data Platform we had no first party data no data science therefore no personalization or",
    "start": "2410160",
    "end": "2417210"
  },
  {
    "text": "recommendations the company had been using a third party product called comScore dax for analytics",
    "start": "2417210",
    "end": "2424530"
  },
  {
    "text": "there was no continuous delivery so this is more or less high-level what it",
    "start": "2424530",
    "end": "2429810"
  },
  {
    "text": "looked like from a technology perspective this light is important because the highlights that we have 15",
    "start": "2429810",
    "end": "2435600"
  },
  {
    "text": "plus client platforms that we need to support including all the different connected televisions all mobile devices",
    "start": "2435600",
    "end": "2440760"
  },
  {
    "text": "etcetera etcetera so that's that's a lot of time platforms so that became problematic because I had to be custom",
    "start": "2440760",
    "end": "2447710"
  },
  {
    "text": "instrumentation for analytics on every platform and then ensuring that they were consistent across the board was",
    "start": "2447710",
    "end": "2454020"
  },
  {
    "text": "very very hard so it was a little bit of a mess you can see that comScore Dax is",
    "start": "2454020",
    "end": "2459330"
  },
  {
    "text": "there then there was this process that would take aggregated data from comScore put into redshift because it was just",
    "start": "2459330",
    "end": "2465780"
  },
  {
    "text": "easier to manipulate and deal with the data within redshift it was really hard to get data out of comScore Dax and then",
    "start": "2465780",
    "end": "2471330"
  },
  {
    "text": "there were some tableau and also looker initializations I don't have the looker box in there you know they say that I'm",
    "start": "2471330",
    "end": "2478620"
  },
  {
    "start": "2476000",
    "end": "2508000"
  },
  {
    "text": "when you're behind something instead of playing catch-up game you should figure",
    "start": "2478620",
    "end": "2483870"
  },
  {
    "text": "out a way to jump ahead and leapfrog and see how you can get ahead so because we're so behind data science and we",
    "start": "2483870",
    "end": "2489930"
  },
  {
    "text": "didn't have any data scientist when I joined we started thinking well how can we get ahead how do we deal with this",
    "start": "2489930",
    "end": "2495510"
  },
  {
    "text": "problem so we started project Dartmouth and it was all about looking at third party machine learning providers and see",
    "start": "2495510",
    "end": "2502410"
  },
  {
    "text": "if we could use one to help us get our recommendations in a better State so we looked at a few dozen companies and at a",
    "start": "2502410",
    "end": "2509550"
  },
  {
    "start": "2508000",
    "end": "2582000"
  },
  {
    "text": "few dozen companies we picked top five I can't disclose the names of these companies but the top five machine",
    "start": "2509550",
    "end": "2516030"
  },
  {
    "text": "learning companies that we found and the thing is is that it became really hard to figure out which company to use",
    "start": "2516030",
    "end": "2521880"
  },
  {
    "text": "because if we you know you if you look at the specs of each one of these companies they all look great on paper they all look fantastic on paper we had",
    "start": "2521880",
    "end": "2528600"
  },
  {
    "text": "meetings with all these people they're all very smart so we're sort of thinking well how can how can the hell you know",
    "start": "2528600",
    "end": "2533920"
  },
  {
    "text": "how can we make a decision with this so we decided to put these guys to test",
    "start": "2533920",
    "end": "2538960"
  },
  {
    "text": "against each other in production because it's in production in real user data is the best way to make a data-driven",
    "start": "2538960",
    "end": "2544420"
  },
  {
    "text": "decision so we said all right so why don't you guys power our feed in iOS the feed is the first thing that you see",
    "start": "2544420",
    "end": "2550780"
  },
  {
    "text": "when you open up the app it's just a list of recommended videos and we want you guys to do real-time event",
    "start": "2550780",
    "end": "2557470"
  },
  {
    "text": "collection so we'll send you data in real time and we'll need you guys to give us real-time recommendations so whenever we request a recommendation she",
    "start": "2557470",
    "end": "2564339"
  },
  {
    "text": "gives responses in real time and we picked one KPI for them to improve",
    "start": "2564339",
    "end": "2569740"
  },
  {
    "text": "because we had to come up with something so we said hey look why don't you improve swipes to clicks ratio may",
    "start": "2569740",
    "end": "2576130"
  },
  {
    "text": "wasn't the best KPI to pick but it was something to go with uh so we we built",
    "start": "2576130",
    "end": "2581619"
  },
  {
    "text": "this little POC of the event collection and this was done in about two weeks so",
    "start": "2581619",
    "end": "2587140"
  },
  {
    "start": "2582000",
    "end": "2685000"
  },
  {
    "text": "in two weeks were able to bring online all five machine learning companies against our production environment so",
    "start": "2587140",
    "end": "2593980"
  },
  {
    "text": "this allowed us to also test some hypotheses that we had around even collected the collection and a client",
    "start": "2593980",
    "end": "2600730"
  },
  {
    "text": "SDK so what we did is very quickly wrapped up this endo SDK that we we have",
    "start": "2600730",
    "end": "2606430"
  },
  {
    "text": "been working on which is basically an abstraction for all the client platforms on top of our event collection service",
    "start": "2606430",
    "end": "2612970"
  },
  {
    "text": "this is so that you can reuse the same event collection code in all the different client platforms we wrote this",
    "start": "2612970",
    "end": "2619150"
  },
  {
    "text": "SDK in JavaScript and for native platforms we use react native so that this Java Script can be interpreted in",
    "start": "2619150",
    "end": "2625930"
  },
  {
    "text": "you know platforms like Android and iOS so bit of a hacky thing but it actually works pretty well um then we built a",
    "start": "2625930",
    "end": "2632950"
  },
  {
    "text": "event collector service within those two weeks as well this was done in Scala and spray and and then we started pushing",
    "start": "2632950",
    "end": "2640839"
  },
  {
    "text": "all of our events in real time to Kinesis one thing that it's not showing there is also you know we were ingesting",
    "start": "2640839",
    "end": "2648069"
  },
  {
    "text": "all the like events and then we use lambda as kind of an event router a data router to send the data to all these",
    "start": "2648069",
    "end": "2654940"
  },
  {
    "text": "different machine learning providers and close to real time and then we tweet our",
    "start": "2654940",
    "end": "2660250"
  },
  {
    "text": "feed service so that it would get recommendations from all these providers instead of the code that it had before",
    "start": "2660250",
    "end": "2666430"
  },
  {
    "text": "before that so what we did we did we we segmented our audience in a very very easy way we",
    "start": "2666430",
    "end": "2672800"
  },
  {
    "text": "just literally did mod five right and then you know that gave us buckets and then we put people in different buckets",
    "start": "2672800",
    "end": "2677990"
  },
  {
    "text": "which is a very very primitive way to segment your audience but we needed to do this very very fast so that was a way",
    "start": "2677990",
    "end": "2683660"
  },
  {
    "text": "to do it this is what the current data services architecture looks like there's",
    "start": "2683660",
    "end": "2689630"
  },
  {
    "start": "2685000",
    "end": "2695000"
  },
  {
    "text": "a lot going on there I'm not going to go into every single thing but I'm going to walk you through some of these things one by one so again talked about the",
    "start": "2689630",
    "end": "2697850"
  },
  {
    "text": "cross platform SDK that we have that's turn out to be incredibly helpful it gets us more consistency across events",
    "start": "2697850",
    "end": "2705980"
  },
  {
    "text": "across platforms also allows us to do some passive eventing in other words",
    "start": "2705980",
    "end": "2711650"
  },
  {
    "text": "events that the client developers don't have to trigger themselves but we can just deal with them within the SDK",
    "start": "2711650",
    "end": "2717350"
  },
  {
    "text": "itself and you know now now our event collector is the most important piece of",
    "start": "2717350",
    "end": "2722960"
  },
  {
    "text": "technology that we have out there because without event collection then nothing else matters so this thing has",
    "start": "2722960",
    "end": "2728420"
  },
  {
    "text": "to be super reliable super fast and up and running all the time so we have",
    "start": "2728420",
    "end": "2734030"
  },
  {
    "start": "2732000",
    "end": "2752000"
  },
  {
    "text": "Kinesis at the heart of our of our data nervous system like alan was saying",
    "start": "2734030",
    "end": "2739490"
  },
  {
    "text": "earlier we have all these services producing data and then all these other services consuming data because we're",
    "start": "2739490",
    "end": "2745340"
  },
  {
    "text": "the data and analytics team we like to hog all the data so we consume data from everybody and we bring it into into our",
    "start": "2745340",
    "end": "2751700"
  },
  {
    "text": "environment I don't talk a little bit about this but I'm going to go a little deeper into this so you know we wanted",
    "start": "2751700",
    "end": "2758510"
  },
  {
    "start": "2752000",
    "end": "2833000"
  },
  {
    "text": "this environment where data is democratized and can be shared across all services between all services but we",
    "start": "2758510",
    "end": "2763760"
  },
  {
    "text": "had to have a way to give it structure so it wasn't just like no craziness so we had to come up with the service of",
    "start": "2763760",
    "end": "2769970"
  },
  {
    "text": "service contract methodology we decided to go with JSON because it's a lot",
    "start": "2769970",
    "end": "2775190"
  },
  {
    "text": "easier to deal with in general we looked at other technologies like Avro and broader buffs and Jason turned out to be",
    "start": "2775190",
    "end": "2782119"
  },
  {
    "text": "the the selected I think honestly any one of these technologies will work fine but you know to reach consensus across",
    "start": "2782119",
    "end": "2787910"
  },
  {
    "text": "organization we pick Jason so we decided that all entities that are",
    "start": "2787910",
    "end": "2793520"
  },
  {
    "text": "going to write a Kinesis tree must have a schema you can send data to Canisius",
    "start": "2793520",
    "end": "2798710"
  },
  {
    "text": "and vigo if you don't have a schema associated with this data and there's got two methodologies that you can use you can either send full",
    "start": "2798710",
    "end": "2806330"
  },
  {
    "text": "payloads with the entire entity that is being created or modified or you can",
    "start": "2806330",
    "end": "2811580"
  },
  {
    "text": "send a message saying hey there's a new entity or there's a newly modified entity go find the payload over here and",
    "start": "2811580",
    "end": "2818240"
  },
  {
    "text": "it could be against the API of that service producing the data and we made a",
    "start": "2818240",
    "end": "2823370"
  },
  {
    "text": "kind of a rule that the data the data has to be pushed to Kinesis at the moment of creation or at the moment of",
    "start": "2823370",
    "end": "2830390"
  },
  {
    "text": "modification so we have a close to real-time system so we have a central repository for schemas with this we",
    "start": "2830390",
    "end": "2837020"
  },
  {
    "start": "2833000",
    "end": "2864000"
  },
  {
    "text": "debated about this a little bit but we decided that all schemas should go into the central repo so that way we have",
    "start": "2837020",
    "end": "2843950"
  },
  {
    "text": "visibility as to what new entities are coming through that's a very simple",
    "start": "2843950",
    "end": "2849110"
  },
  {
    "text": "sample schema that I put in there just you get a better idea that's this schema that supports the like event so whenever",
    "start": "2849110",
    "end": "2854330"
  },
  {
    "text": "you like something in artist for instance there's a like event that goes with it so you know that that schema",
    "start": "2854330",
    "end": "2860150"
  },
  {
    "text": "contains some metadata about the user and the entity that the user is trying to like so far is it so that's data",
    "start": "2860150",
    "end": "2867800"
  },
  {
    "start": "2864000",
    "end": "2940000"
  },
  {
    "text": "collection that's event collection now as far as data processing and analytics we use currently and this is going to",
    "start": "2867800",
    "end": "2874250"
  },
  {
    "text": "change over time but currently we use spark for most of our data processing we",
    "start": "2874250",
    "end": "2879590"
  },
  {
    "text": "use spark for real-time analytics most of the data that we generate most of the",
    "start": "2879590",
    "end": "2885020"
  },
  {
    "text": "metals we calculate don't have to do it in real-time we don't have to do it in real-time it's really just play counts and",
    "start": "2885020",
    "end": "2891440"
  },
  {
    "text": "completion rates that we calculate in in real time we also use spark for batch",
    "start": "2891440",
    "end": "2896510"
  },
  {
    "text": "processing so we have these periodic ETL jobs that run and that's also based",
    "start": "2896510",
    "end": "2902300"
  },
  {
    "text": "on spark and we're also using spark for some machine learning mainly to Train models there's some experimentation",
    "start": "2902300",
    "end": "2908990"
  },
  {
    "text": "happening right now with a team using tensor tensor flow and spark all this",
    "start": "2908990",
    "end": "2914510"
  },
  {
    "text": "spark work that we do is with EMR we decided to not go ahead and create our",
    "start": "2914510",
    "end": "2920540"
  },
  {
    "text": "own spark clusters it's a lot easier to just manage three mr+ you know it's very",
    "start": "2920540",
    "end": "2925850"
  },
  {
    "text": "easy if something bad happens you can just turn down the cluster bring it back up and it's no problem so it's a lot",
    "start": "2925850",
    "end": "2930950"
  },
  {
    "text": "easier to manage and then we use s3 as our long-term storage place so all of the data that we",
    "start": "2930950",
    "end": "2937850"
  },
  {
    "text": "collect and generate goes into s3 and then we use redshift for analytics so",
    "start": "2937850",
    "end": "2943820"
  },
  {
    "start": "2940000",
    "end": "3018000"
  },
  {
    "text": "after our ETL process is run and we generate metrics and we kind of spread",
    "start": "2943820",
    "end": "2949460"
  },
  {
    "text": "the data into a dimensional model then we put all of that into our analytics warehouse which is redshift and then all",
    "start": "2949460",
    "end": "2956510"
  },
  {
    "text": "the data is consumed from there by people outside of our team so people consume data via tableau be a looker and",
    "start": "2956510",
    "end": "2963200"
  },
  {
    "text": "just sequel it's actually quite fascinating because we've been teaching our product managers to write sequel and",
    "start": "2963200",
    "end": "2969890"
  },
  {
    "text": "they've been very excited and they've become incredibly productive because now they can go ahead and do their own",
    "start": "2969890",
    "end": "2975200"
  },
  {
    "text": "analysis and not depend on the centralized bi team so at one of the big",
    "start": "2975200",
    "end": "2980240"
  },
  {
    "text": "goals that we had when we started all this was to truly democratize data within people make it accessible to everybody without needing a centralized",
    "start": "2980240",
    "end": "2987500"
  },
  {
    "text": "group to manage it for them now that said that we when we once we",
    "start": "2987500",
    "end": "2992990"
  },
  {
    "text": "know that something needs to be upgraded us as like a source of truth when it comes to data then we'll create a looker",
    "start": "2992990",
    "end": "2999770"
  },
  {
    "text": "visualization for it so we'll create a dashboard and there's kind of this section that we're calling the official",
    "start": "2999770",
    "end": "3005310"
  },
  {
    "text": "looker dashboard section and you know that if you're looking at a report from there it's been fully vetted fully QA",
    "start": "3005310",
    "end": "3012550"
  },
  {
    "text": "and that's the source of truth but before that you have to go through a lot of experimentation so kind of like a",
    "start": "3012550",
    "end": "3019330"
  },
  {
    "start": "3018000",
    "end": "3127000"
  },
  {
    "text": "recap right so we have data collection on one side on the right side here you",
    "start": "3019330",
    "end": "3025420"
  },
  {
    "text": "see that everything goes through our Event collector you can see that there's some data being processed in real in",
    "start": "3025420",
    "end": "3031720"
  },
  {
    "text": "real time there by spark you know being consumed from the Kinesis stream we have this thing that we call the event",
    "start": "3031720",
    "end": "3037570"
  },
  {
    "text": "publisher which then pushes some of this data into this user behavior our raw",
    "start": "3037570",
    "end": "3042850"
  },
  {
    "text": "database this our raw data base exists because we feed consumer experiences of",
    "start": "3042850",
    "end": "3049600"
  },
  {
    "text": "course you know we can't do that from redshift we can't do that from s3 so aurorus scales really really really well",
    "start": "3049600",
    "end": "3056950"
  },
  {
    "text": "so we decided to start off for the front facing services so you see a bunch of front facing services there which mainly",
    "start": "3056950",
    "end": "3065820"
  },
  {
    "text": "surf data that comes from Aurora you can see the feed service there that I talked",
    "start": "3065820",
    "end": "3070990"
  },
  {
    "text": "about earlier there's a recommendation service the powers the feed and people",
    "start": "3070990",
    "end": "3076270"
  },
  {
    "text": "recommendations as well you can see that on the batch side of things over there",
    "start": "3076270",
    "end": "3081610"
  },
  {
    "text": "we have spark with air flow for ETL and then we have spark below for machine",
    "start": "3081610",
    "end": "3087670"
  },
  {
    "text": "learning as well you see the picture that I showed earlier where we have our BI tools that people use to interact",
    "start": "3087670",
    "end": "3092800"
  },
  {
    "text": "with the data that everything above is stuff outside of our domain so we see the third-party services that we",
    "start": "3092800",
    "end": "3099970"
  },
  {
    "text": "interact with and then all the other vivo services that generate data that then we consume so this turn out to be a",
    "start": "3099970",
    "end": "3106420"
  },
  {
    "text": "pretty even though there's a lot of boxes a lot of errors actually a pretty",
    "start": "3106420",
    "end": "3111450"
  },
  {
    "text": "sweet architecture is pretty flexible I mean it's allowed us to move things around in many different ways and this",
    "start": "3111450",
    "end": "3117520"
  },
  {
    "text": "will continue to evolve of course so now let's talk about the lessons learned",
    "start": "3117520",
    "end": "3123030"
  },
  {
    "text": " ok lessons so lambda is great but",
    "start": "3123030",
    "end": "3130750"
  },
  {
    "start": "3127000",
    "end": "3385000"
  },
  {
    "text": "it's not all cupcakes and rainbows so one of the thing that the experience",
    "start": "3130750",
    "end": "3136720"
  },
  {
    "text": "very first days was that we need a",
    "start": "3136720",
    "end": "3141730"
  },
  {
    "text": "framework you can't just deploy lambdas manually if you do so you can of course but it",
    "start": "3141730",
    "end": "3147940"
  },
  {
    "text": "will turn to mess quickly trust me so you always need a framework with",
    "start": "3147940",
    "end": "3153490"
  },
  {
    "text": "lambdas and we used surrealists which is a pretty cool framework and you're happy",
    "start": "3153490",
    "end": "3159580"
  },
  {
    "text": "with that I recommend to use it if you're using lambda we also were able to",
    "start": "3159580",
    "end": "3165220"
  },
  {
    "text": "integrate this serverless framework with our c ICD framework another thing was",
    "start": "3165220",
    "end": "3174150"
  },
  {
    "text": "throttled invocations he might be aware of that that there is a limit for",
    "start": "3174150",
    "end": "3181120"
  },
  {
    "text": "concurrent runs on lambda it's by default hundred so hundred lambdas can",
    "start": "3181120",
    "end": "3186220"
  },
  {
    "text": "run at the same time the next one just fails",
    "start": "3186220",
    "end": "3191350"
  },
  {
    "text": "gets throttled and it's bury count it's not pair lambda so you should always monitor that thing to make",
    "start": "3191350",
    "end": "3198470"
  },
  {
    "text": "sure that you don't get throttled and if this happens it's a easy fix you just",
    "start": "3198470",
    "end": "3204710"
  },
  {
    "text": "ask Amazon to increase your limit and this is what we did and the other thing",
    "start": "3204710",
    "end": "3212960"
  },
  {
    "text": "was the famous called start issue for those who are not aware of this thing",
    "start": "3212960",
    "end": "3218840"
  },
  {
    "text": "lambda when it runs for the first time it takes some startup time and next time",
    "start": "3218840",
    "end": "3224840"
  },
  {
    "text": "it just fast it runs the code but for the first time it's kind of slow so if",
    "start": "3224840",
    "end": "3230210"
  },
  {
    "text": "you're using lambda behind a user facing service the first request might get a",
    "start": "3230210",
    "end": "3238430"
  },
  {
    "text": "timeout which is not good so we fix this issue with keeping the lambda warm so",
    "start": "3238430",
    "end": "3245230"
  },
  {
    "text": "just setting a five-minute scheduled call on the same lambda help so it keeps",
    "start": "3245230",
    "end": "3254060"
  },
  {
    "text": "it warm always and never experience the coldest heart issue other things was as",
    "start": "3254060",
    "end": "3259730"
  },
  {
    "text": "we explained standardize what goes on the stream which helps a lot in having a",
    "start": "3259730",
    "end": "3265460"
  },
  {
    "text": "central place for all the stream schemas that that's also helpful because let's",
    "start": "3265460",
    "end": "3271670"
  },
  {
    "text": "say you have a new hire and you give it a task give him or her a task to consume",
    "start": "3271670",
    "end": "3278390"
  },
  {
    "text": "this stream consume the data events from this extreme all he or she needs to do",
    "start": "3278390",
    "end": "3283849"
  },
  {
    "text": "is just go into that repo and having known the stream name just find the",
    "start": "3283849",
    "end": "3289369"
  },
  {
    "text": "schema for that stream and then they know what to expect as a event for that",
    "start": "3289369",
    "end": "3295640"
  },
  {
    "text": "stream it's very helpful and really the same thing for error messages having the",
    "start": "3295640",
    "end": "3301910"
  },
  {
    "text": "same central place for all error messages from all services was very helpful and other lessons so these are",
    "start": "3301910",
    "end": "3309619"
  },
  {
    "text": "some of the lessons that we learned on the data side I mean you've probably heard this many many times but I mean something I keep relearning over and",
    "start": "3309619",
    "end": "3316280"
  },
  {
    "text": "over again in my career don't try to boil the ocean all at once as you saw we started small with the",
    "start": "3316280",
    "end": "3322010"
  },
  {
    "text": "event collection system and then we started moving to data processing versus trying to build a little bit of",
    "start": "3322010",
    "end": "3327140"
  },
  {
    "text": "everything at the same time I this is something we learned with project Dartmouth you",
    "start": "3327140",
    "end": "3332210"
  },
  {
    "text": "real user data to make decisions I mean it was so it without project Dartmouth",
    "start": "3332210",
    "end": "3337310"
  },
  {
    "text": "we probably would have picked the wrong machinery provider maybe not who knows but it would have been like at luck so",
    "start": "3337310",
    "end": "3343099"
  },
  {
    "text": "always look at real user data reuse as much technology versus build I mean especially in the world we live now with",
    "start": "3343099",
    "end": "3349640"
  },
  {
    "text": "all the services that Amazon provides for instance you know there's so much to reuse so don't try to build things",
    "start": "3349640",
    "end": "3356060"
  },
  {
    "text": "yourself now in the end if you're serious about analytics and data because there's so much infrastructure already",
    "start": "3356060",
    "end": "3361460"
  },
  {
    "text": "in place build your own platform I mean nowadays is not as hard as it used to be",
    "start": "3361460",
    "end": "3366470"
  },
  {
    "text": "I'm not saying that it's easy either but I mean it's possible I mean you saw like all the stuff that we built in one year",
    "start": "3366470",
    "end": "3372349"
  },
  {
    "text": "and that was a small team that was a four-person development team that build the data platform in one year so there's",
    "start": "3372349",
    "end": "3378170"
  },
  {
    "text": "a lot that if you have the right people you have a regular structure you're using the right cloud technology you can",
    "start": "3378170",
    "end": "3383359"
  },
  {
    "text": "do a lot and I believe that's it thank you very much if there is any question",
    "start": "3383359",
    "end": "3391930"
  },
  {
    "start": "3389000",
    "end": "3405000"
  },
  {
    "text": "feel free to use the marks if there any questions there's mics there so feel",
    "start": "3391930",
    "end": "3397190"
  },
  {
    "text": "free to just reach a mic and please don't forget to do the evaluation I",
    "start": "3397190",
    "end": "3402310"
  },
  {
    "text": "appreciate it",
    "start": "3402310",
    "end": "3405460"
  }
]