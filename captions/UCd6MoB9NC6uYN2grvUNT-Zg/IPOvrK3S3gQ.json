[
  {
    "start": "0",
    "end": "254000"
  },
  {
    "text": "so here today we're going to talk about modern applications so what does that",
    "start": "329",
    "end": "6720"
  },
  {
    "text": "even mean this work grew out of Dec we built for our by our analyst relations",
    "start": "6720",
    "end": "11759"
  },
  {
    "text": "group and the analyst kept telling us that you guys have 140 services and no",
    "start": "11759",
    "end": "17460"
  },
  {
    "text": "opinions and so you know I don't think it's appropriate for Andy to get up on",
    "start": "17460",
    "end": "23010"
  },
  {
    "text": "stage and tell people what to use but what is appropriate is we can look around and see what our successful",
    "start": "23010",
    "end": "28320"
  },
  {
    "text": "customers are doing and also what the turn team's internal to AWS are doing and learn from that and hopefully pass",
    "start": "28320",
    "end": "34260"
  },
  {
    "text": "on some of these messages here so we built a deck for the analyst and I was the technical consultant on that and it",
    "start": "34260",
    "end": "40860"
  },
  {
    "text": "came up well enough that we've been taking the message here to AWA to to reinvent to talk about it",
    "start": "40860",
    "end": "46079"
  },
  {
    "text": "there's been several other presentations on the subject mostly focusing on the issues of what the business advantages",
    "start": "46079",
    "end": "52170"
  },
  {
    "text": "and modern applications are and what you can hope to achieve by doing that but I'm gonna not going to do that very much I'm going to talk mostly about the how",
    "start": "52170",
    "end": "58440"
  },
  {
    "text": "and I'm gonna illustrate it by ripping the covers off and diving into the",
    "start": "58440",
    "end": "63510"
  },
  {
    "text": "internals of a few AWS services there so the other presentations are over so we",
    "start": "63510",
    "end": "69990"
  },
  {
    "text": "can skip past that slide and we must get past this fly to and talk about traditional applications we you know",
    "start": "69990",
    "end": "78720"
  },
  {
    "text": "since we're talking about modern applications I'm an old guy I've seen a lot of traditional applications and what",
    "start": "78720",
    "end": "84090"
  },
  {
    "text": "we have here is a traditional application a successful happy AWS customer that's in the business of",
    "start": "84090",
    "end": "89430"
  },
  {
    "text": "teaching children to write good penetration in the early childhood education market and what I have here is",
    "start": "89430",
    "end": "95360"
  },
  {
    "text": "the architecture of their application isn't that just the greatest simplest thing imaginable they got a load balance",
    "start": "95360",
    "end": "101850"
  },
  {
    "text": "here they got a web framework and they got a database is this bad no this is",
    "start": "101850",
    "end": "107490"
  },
  {
    "text": "great it's simple its straightforward it's easy to understand and it's got a subtle advantage which is that there is",
    "start": "107490",
    "end": "114000"
  },
  {
    "text": "no mystery whatsoever as to where it is that application state might be living the application state is",
    "start": "114000",
    "end": "119040"
  },
  {
    "text": "what the database says it is and that means that if the worst thing imaginable happens and your database melts down and",
    "start": "119040",
    "end": "125579"
  },
  {
    "text": "your host melts down well assuming you've been moderately careful with your journals and snapshots and snow so on you can recover your state",
    "start": "125579",
    "end": "133240"
  },
  {
    "text": "and get back on the road so that's good so the question I have is should you",
    "start": "133240",
    "end": "138610"
  },
  {
    "text": "build applications like that and the answer is yeah you absolutely should where you can now all inside AWS the",
    "start": "138610",
    "end": "146410"
  },
  {
    "text": "number of occasions where we can build applications like that rounds to zero simply because everything we do has to",
    "start": "146410",
    "end": "153790"
  },
  {
    "text": "be able to scale to you know huge fleets to handle tens of thousands or hundreds of thousands or millions of transactions",
    "start": "153790",
    "end": "159670"
  },
  {
    "text": "per second we have to you know deploy all the time in many many regions and we",
    "start": "159670",
    "end": "166210"
  },
  {
    "text": "have to build it at a price level that's low enough that we can you know sell it to you at a price level that's lower",
    "start": "166210",
    "end": "171820"
  },
  {
    "text": "than you could get yourself and still make money but nothing wrong with traditional applications so for modern",
    "start": "171820",
    "end": "177910"
  },
  {
    "text": "applications here is the list of principles we put in the analyst deck of",
    "start": "177910",
    "end": "183070"
  },
  {
    "text": "what what the you know guiding tenets are for for modern applications now I'm",
    "start": "183070",
    "end": "189070"
  },
  {
    "text": "not going to dive into all of these equal depth to start with for example on the security front you get a lot of the",
    "start": "189070",
    "end": "195340"
  },
  {
    "text": "benefits just from being in the cloud just by being in the cloud you get web application firewall and guard duty and",
    "start": "195340",
    "end": "201220"
  },
  {
    "text": "century--and cloud trail and config and all those things and you also get to hire our security group which is much",
    "start": "201220",
    "end": "207640"
  },
  {
    "text": "bigger and more expert than you could possibly hire yourself in most cases so",
    "start": "207640",
    "end": "212800"
  },
  {
    "text": "in fact I'm not I'm only going to spend my time mostly on items number two and three in this list and then add a couple",
    "start": "212800",
    "end": "218650"
  },
  {
    "text": "of other items that I think are super important for modern applications one being databases because we got database",
    "start": "218650",
    "end": "224560"
  },
  {
    "text": "news here at this conference and then talk a whole bunch about integration because nobody builds stuff in the cloud so let us dive in and talk about what'll",
    "start": "224560",
    "end": "233260"
  },
  {
    "text": "we talk we'll talk about micro services first now I got to ask myself in 2018 do",
    "start": "233260",
    "end": "238360"
  },
  {
    "text": "I actually still need to explain why micro services are a good idea I don't think I need to spend a lot of time on it",
    "start": "238360",
    "end": "243520"
  },
  {
    "text": "but I think I won't be wasting our their time or mine if I put one slide into it so let's talk about why micro services",
    "start": "243520",
    "end": "249520"
  },
  {
    "text": "are great and let's do it by ripping off the covers of AWS is simple cubic service application I'm looking how it",
    "start": "249520",
    "end": "255970"
  },
  {
    "start": "254000",
    "end": "254000"
  },
  {
    "text": "works inside now there's a bit of irony here which is that this is one of our very oldest AWS services it debuted in",
    "start": "255970",
    "end": "263530"
  },
  {
    "text": "2006 twelve years ago and the word microservice never actually appeared on the internet until 2011 near",
    "start": "263530",
    "end": "269530"
  },
  {
    "text": "as I can tell but nonetheless it's still micro service based if you look inside in fact there are four distinct",
    "start": "269530",
    "end": "274840"
  },
  {
    "text": "microservices I'm going to talk about there's the front end which talks HTTP to the world and nothing it does I think",
    "start": "274840",
    "end": "280480"
  },
  {
    "text": "would surprise anybody in the slightest then there's the back end service and the way it works is it deploys the",
    "start": "280480",
    "end": "287260"
  },
  {
    "text": "message it actually stores the messages that are in flight on the queues and it does so on a large number of clusters",
    "start": "287260",
    "end": "292510"
  },
  {
    "text": "each cluster is a small number of hosts in multiple AZ's and as is usual with AWS services we do not acknowledge",
    "start": "292510",
    "end": "299350"
  },
  {
    "text": "receipt of the message until it's hit the iron on three ACS then there is",
    "start": "299350",
    "end": "304450"
  },
  {
    "text": "metadata service map backed by dynamo and its only role in life is to know",
    "start": "304450",
    "end": "309639"
  },
  {
    "text": "which queues are on which clusters it turns out a queue can be on multiple clusters and it can move around between",
    "start": "309639",
    "end": "315310"
  },
  {
    "text": "clusters which is why sqs can scale to effectively infinite throughput but it's",
    "start": "315310",
    "end": "320530"
  },
  {
    "text": "also the reason that sqs cannot guarantee deduplication or perfect in order delivery finally there's a load",
    "start": "320530",
    "end": "326560"
  },
  {
    "text": "manager service that runs around and looks at all the clusters and detect if any of them are getting hot or are",
    "start": "326560",
    "end": "332620"
  },
  {
    "text": "underutilized and moves queues around and splits queues where necessary there's an interesting definitional problem here some people get all",
    "start": "332620",
    "end": "338800"
  },
  {
    "text": "religious and say something's not a service unless it's got an HTTP endpoint and accepts requests well that's just",
    "start": "338800",
    "end": "344440"
  },
  {
    "text": "not true because this is a serverless a server by any meaningful use of the word and it doesn't accept any requests it",
    "start": "344440",
    "end": "351160"
  },
  {
    "text": "just proactively runs around and takes care of the backend so why a server is",
    "start": "351160",
    "end": "356530"
  },
  {
    "text": "Microsoft wire micro services brilliant well this has been running since 2006 and do you think it's the same code now",
    "start": "356530",
    "end": "362169"
  },
  {
    "text": "it was running in 2006 not in not in the slightest the benefit of a micro service is that it's something that can be",
    "start": "362169",
    "end": "368070"
  },
  {
    "text": "scaled and deployed and refactored and improved incrementally without",
    "start": "368070",
    "end": "373479"
  },
  {
    "text": "disturbing the rest of the picture which is what we do all the time - name one big example that database there used to",
    "start": "373479",
    "end": "379690"
  },
  {
    "text": "be an Oracle database at one point in the history but we turned that off and moved it to AWS DynamoDB can I say that",
    "start": "379690",
    "end": "386979"
  },
  {
    "text": "again we turned the Oracle database off I want to say that again return to the Oracle database off and",
    "start": "386979",
    "end": "393460"
  },
  {
    "text": "moved it over to DynamoDB it makes me so happy to say that now here's another",
    "start": "393460",
    "end": "398680"
  },
  {
    "text": "real triumph micro-services earlier this year we decided that we were probably wasting",
    "start": "398680",
    "end": "404439"
  },
  {
    "text": "some resources on our back-end fleet because those things didn't seem to be running very hot and so we thought about trying to do a refactoring to make it",
    "start": "404439",
    "end": "410139"
  },
  {
    "text": "run more successfully and I hope we can get those guys to come here next year and tell the story because it's a hell of a story they succeeded brilliantly",
    "start": "410139",
    "end": "416439"
  },
  {
    "text": "they had to reorganize the way to database works but they got a several fold improvement in throughput per host",
    "start": "416439",
    "end": "421629"
  },
  {
    "text": "back there which ended up in saving us a big enough amount of money that it's even noticeable at the Amazon scale",
    "start": "421629",
    "end": "426969"
  },
  {
    "text": "which is really a lot of money and also it reduced you know the size of the back-end fleet dramatically and making it much much easier to manage and take",
    "start": "426969",
    "end": "433960"
  },
  {
    "text": "care of now if you're smart you're thinking oh well ok it's reasonably",
    "start": "433960",
    "end": "438969"
  },
  {
    "text": "straightforward to rev the software in a micro service but this is a database migration because they change the",
    "start": "438969",
    "end": "444639"
  },
  {
    "text": "database and database migrations are a pain in the butt but this is not just a micro service it's sort of a micro micro",
    "start": "444639",
    "end": "451180"
  },
  {
    "text": "service because the HA staff were running in each cluster only knows about the other hosts in that cluster it",
    "start": "451180",
    "end": "456639"
  },
  {
    "text": "doesn't know anything about the larger picture and so what we could do is we could roll in new clusters running the",
    "start": "456639",
    "end": "462099"
  },
  {
    "text": "new software and then eventually as the messages aged out take the old service old clusters out of service and then",
    "start": "462099",
    "end": "467919"
  },
  {
    "text": "incrementally move from old database to new database without anybody ever noticing you couldn't possibly do that",
    "start": "467919",
    "end": "476110"
  },
  {
    "text": "if you weren't in a micro service architecture so micro services are really just the way to go it's it's the conventional wisdom it's the",
    "start": "476110",
    "end": "481839"
  },
  {
    "text": "conventional wisdom for a good reason and if you're building anything substantial and distributed that needs",
    "start": "481839",
    "end": "487479"
  },
  {
    "text": "to scale and you're not using micro services the balance of evidence would suggest that you were wrong so that's",
    "start": "487479",
    "end": "493509"
  },
  {
    "text": "all I'm gonna say about micro services now if you look at that picture is there any way in which that application is",
    "start": "493509",
    "end": "500409"
  },
  {
    "text": "manifestly not modern well sure with the exception of dynamodb nothing on their",
    "start": "500409",
    "end": "507279"
  },
  {
    "text": "server list so I think that perhaps the most important piece of advice in our",
    "start": "507279",
    "end": "513190"
  },
  {
    "text": "modern applications deck is that you should try and be serverless where possible why should you try and be super loose well these are the obvious you",
    "start": "513190",
    "end": "521078"
  },
  {
    "text": "know main headline reasons you might save a really lot of money particularly",
    "start": "521079",
    "end": "526899"
  },
  {
    "text": "if you have a load and the idea of server listens you're not paying well it's not running the cost savings that we're seeing from real cost",
    "start": "526899",
    "end": "532960"
  },
  {
    "text": "are just enormous secondly security anytime you are running something",
    "start": "532960",
    "end": "538089"
  },
  {
    "text": "serverless you can't see the host which means we have to take care of them which means we can bounce them and so on",
    "start": "538089",
    "end": "543970"
  },
  {
    "text": "whenever we need to patch the OS or fix something or they crash and the effect is that the incidents of old unpatched",
    "start": "543970",
    "end": "550270"
  },
  {
    "text": "out-of-date hosts running in server list applications is is very low vanishingly small so you get a noticeable security",
    "start": "550270",
    "end": "556720"
  },
  {
    "text": "Delta by going to server list the third one of course is elasticity we scale for you capacity planning sucks it's a",
    "start": "556720",
    "end": "564760"
  },
  {
    "text": "really unpleasant difficult activity easy to get wrong and the penalty for getting wrong in the high side is that",
    "start": "564760",
    "end": "570490"
  },
  {
    "text": "you are throwing away money the penalty for getting wrong on the low side is that you are inflicting pain on your",
    "start": "570490",
    "end": "577029"
  },
  {
    "text": "customers so just don't do that go serverless wherever you can so those are the big reasons now take a moment and",
    "start": "577029",
    "end": "583810"
  },
  {
    "text": "think and realize those are all pure business reasons I haven't said a word about technology yet is there anybody in",
    "start": "583810",
    "end": "589930"
  },
  {
    "text": "the crowd here with a suit oh come on biz casual polo shirt pantsuit",
    "start": "589930",
    "end": "595740"
  },
  {
    "text": "well sorry but if you were there it would have been for you but so let's talk about the technology when you go",
    "start": "595740",
    "end": "601990"
  },
  {
    "text": "serverless are you also going to get a better design maybe I don't actually know I'm a",
    "start": "601990",
    "end": "608470"
  },
  {
    "text": "functional programming geek I really like the feeling of dealing with stateless functions in the cloud and and",
    "start": "608470",
    "end": "613990"
  },
  {
    "text": "services where I don't have to provision and they just scale along with me it feels right it feels good it feels modern but do we have enough evidence",
    "start": "613990",
    "end": "620470"
  },
  {
    "text": "that I can stand here or fishel II and say yeah you'll get a better design with serverless but you know what I'm pretty sure you're",
    "start": "620470",
    "end": "627880"
  },
  {
    "text": "not gonna get a worse design and frugality security elasticity go ahead",
    "start": "627880",
    "end": "633520"
  },
  {
    "text": "and do it anyhow because it's the right thing to do for a purely business reasons having said all that I'm now",
    "start": "633520",
    "end": "638680"
  },
  {
    "text": "gonna make an argument to you will get a better design and here's why so here's a snap from Vernors keynote",
    "start": "638680",
    "end": "644589"
  },
  {
    "text": "last year disclosure that was my son but I lobbied to get it into the speech and",
    "start": "644589",
    "end": "649899"
  },
  {
    "text": "that's sort of the endgame that's the goal we're all aiming for that you that we all want to get to so all the code",
    "start": "649899",
    "end": "655839"
  },
  {
    "text": "you ever write go straight into something that is measurable business value add you're not writing code to",
    "start": "655839",
    "end": "662380"
  },
  {
    "text": "configure kubernetes you're not writing code to deploy ions you're not writing to manage auto-scaling you're not many",
    "start": "662380",
    "end": "667790"
  },
  {
    "text": "reading code to do all those other things so think about it you have a finite amount of time to design your",
    "start": "667790",
    "end": "674149"
  },
  {
    "text": "application so if you're spending all that time thinking about the design of your business value add code you're",
    "start": "674149",
    "end": "681290"
  },
  {
    "text": "going to get a better design simply because in a serverless context you have more time to put into it just because",
    "start": "681290",
    "end": "686300"
  },
  {
    "text": "you're not doing all that other stuff so I think it's very reasonable to believe that you probably are going to end up on",
    "start": "686300",
    "end": "693199"
  },
  {
    "text": "software quality when you go to serverless so should we all drop",
    "start": "693199",
    "end": "698240"
  },
  {
    "text": "everything and write everything in server lists from here on forward no not necessarily our advice specifically is use",
    "start": "698240",
    "end": "704959"
  },
  {
    "text": "serverless where possible so what is where possible mean well let's use an example in the example we're going to",
    "start": "704959",
    "end": "710600"
  },
  {
    "text": "use is amazon mq which is a service that we launched this event last year and is",
    "start": "710600",
    "end": "715670"
  },
  {
    "start": "712000",
    "end": "712000"
  },
  {
    "text": "doing very very well it's basically a managed version of the apache activemq message broker and so basically half of",
    "start": "715670",
    "end": "722300"
  },
  {
    "text": "the service is just MQ and the other half is the control plan the the software that we use that you you can",
    "start": "722300",
    "end": "729439"
  },
  {
    "text": "call restful api is to create brokers delete brokers start broker stop brokers all that stuff the control plane is 100%",
    "start": "729439",
    "end": "735889"
  },
  {
    "text": "server list lambda API gateway dynamo and that's as it should be I think that",
    "start": "735889",
    "end": "743509"
  },
  {
    "text": "we have convinced ourselves that for that kind of thing any design that is not server list is probably just wrong I",
    "start": "743509",
    "end": "749180"
  },
  {
    "text": "mean what sense does it make to have a server host sitting there turning electricity into heat waiting for",
    "start": "749180",
    "end": "755930"
  },
  {
    "text": "somebody to decides they need to make a new message broker it doesn't happen that often it takes a long time to create a new",
    "start": "755930",
    "end": "762889"
  },
  {
    "text": "message broker sometimes minutes it's just obviously the right thing to do server lessly and we do and I think that",
    "start": "762889",
    "end": "770389"
  },
  {
    "text": "if you tried to do something like this in a non serverless way I would question that now let's talk about the other side of the question",
    "start": "770389",
    "end": "775759"
  },
  {
    "text": "activemq itself ActiveMQ is not a restful thing at all it's a great big glob of Java code that open and the",
    "start": "775759",
    "end": "782929"
  },
  {
    "text": "clients open up permanent nails up tcp/ip connections to the message broker and when they want to send and receive",
    "start": "782929",
    "end": "788120"
  },
  {
    "text": "messages they just send bytes up and down the wire with framing protocols such as AMQP and stomp and MQTT and JMS",
    "start": "788120",
    "end": "796040"
  },
  {
    "text": "open wire okay this works fine you can get remarkably low latency because you're not doing setup and teardown of HTTP",
    "start": "796040",
    "end": "803120"
  },
  {
    "text": "connections the bytes just come into the network and into a Java buffer and you look at the header and decide where they're gonna go and send them out again",
    "start": "803120",
    "end": "808940"
  },
  {
    "text": "so you can get remarkably flamin fast low latency on the other hand since it's",
    "start": "808940",
    "end": "815210"
  },
  {
    "text": "not Cerberus you cannot expand beyond the bounds of the single instance of the broker that happens to have the nailed",
    "start": "815210",
    "end": "820400"
  },
  {
    "text": "up tcp/ip connections so is this wrong should this be server list I don't think",
    "start": "820400",
    "end": "825589"
  },
  {
    "text": "so I think this is perfectly okay it's a perfectly decent piece of design I can imagine a future in which we'll be able",
    "start": "825589",
    "end": "830960"
  },
  {
    "text": "to somehow have a serverless architecture that still manages to do nailed up tcp/ip connections and when we",
    "start": "830960",
    "end": "836750"
  },
  {
    "text": "get there that'll be fine but at the moment we're not there and this is just fine so here you have a very practical",
    "start": "836750",
    "end": "841820"
  },
  {
    "text": "concrete example of what I think we mean when we say serverless were possible and",
    "start": "841820",
    "end": "850310"
  },
  {
    "start": "850000",
    "end": "850000"
  },
  {
    "text": "of course this is not the only service that's doing this there are a lot of AWS services now that have server less",
    "start": "850310",
    "end": "856520"
  },
  {
    "text": "control planes you're using a some combination of api gateway lambda dynamo and so on and so forth it's I didn't",
    "start": "856520",
    "end": "863510"
  },
  {
    "text": "actually go and do an exhaustive search across all the services but there are some examples but I left some space on the slide because I wanted to highlight",
    "start": "863510",
    "end": "869570"
  },
  {
    "text": "one particular service with a serverless api gateway based control plane which is api gateway which is cool so the service",
    "start": "869570",
    "end": "878810"
  },
  {
    "text": "that you use to build your server lists micro service based applications is itself a service based micro service",
    "start": "878810",
    "end": "884620"
  },
  {
    "text": "service micro service based service boy that's hard to say but it's a good sign",
    "start": "884620",
    "end": "890360"
  },
  {
    "text": "you know at the end of the day we would hope to be able to build AWS on AWS and this is a step in in that direction so",
    "start": "890360",
    "end": "896980"
  },
  {
    "text": "we want to use server liske where we can so one rate I offer you one scenario where you might not be able to let's",
    "start": "896980",
    "end": "903230"
  },
  {
    "text": "look at another scenario people say well I'm nervous about going to server list because the agency server list might",
    "start": "903230",
    "end": "910760"
  },
  {
    "text": "have latency and yeah there might be issues around server list and latency so let's talk about that and see how am I",
    "start": "910760",
    "end": "917450"
  },
  {
    "text": "give a problem we think it really is and what we might do about it so if you talk about latency I hear an anti-pattern",
    "start": "917450",
    "end": "924800"
  },
  {
    "start": "923000",
    "end": "923000"
  },
  {
    "text": "sometimes people come to me and say for this application I'm building my latency threshold is 110 milliseconds you know",
    "start": "924800",
    "end": "931940"
  },
  {
    "text": "if you can't 210 most I can't talk to you and my mind goes blank because if you tried to have that",
    "start": "931940",
    "end": "936970"
  },
  {
    "text": "conversation inside AWS it wouldn't work because we never ever ever talk about latency without talking about these P",
    "start": "936970",
    "end": "943750"
  },
  {
    "text": "numbers now most of you are probably familiar with them but P 50 means a time such that 50% of the HathiTrust have",
    "start": "943750",
    "end": "949990"
  },
  {
    "text": "transactions complete and less time than that p90 is such that 90% of the transactions P 99 and so on sometimes",
    "start": "949990",
    "end": "956260"
  },
  {
    "text": "you'll even hear people talk about P 99.9 and then there's P 100 so in this particular example we're looking at on",
    "start": "956260",
    "end": "962410"
  },
  {
    "text": "this screen here if you can read those little teeny numbers you can see that half the half of the transactions",
    "start": "962410",
    "end": "968110"
  },
  {
    "text": "completed in about a quarter of a second 90% of them in a second or so 99 percent",
    "start": "968110",
    "end": "974080"
  },
  {
    "text": "of them in four and a half or so seconds and there were a few outliers up there in the twenty second range and when",
    "start": "974080",
    "end": "981820"
  },
  {
    "text": "you're thinking about your latency needs you need to think about this is it okay if it a verge is around a hundred",
    "start": "981820",
    "end": "987820"
  },
  {
    "text": "milliseconds but sometimes it spikes to one second is it okay a but sometimes spikes to two seconds how what",
    "start": "987820",
    "end": "993190"
  },
  {
    "text": "percentage of time is it okay for it to speak to that for those of you who are curious this is actually a graph off one",
    "start": "993190",
    "end": "998740"
  },
  {
    "text": "of the auto scaling services and the reason for easy to auto scaling in particular and the reason it's like that",
    "start": "998740",
    "end": "1003870"
  },
  {
    "text": "is most auto scaling groups have like four instances or eight instances but some have 25,000 that's why you see that",
    "start": "1003870",
    "end": "1011580"
  },
  {
    "text": "pattern so if you're gonna talk about auto scaling talk about latency that's what you have to talk about basically",
    "start": "1011580",
    "end": "1017750"
  },
  {
    "text": "latency is more complicated than you think even if you think it's more complicated than you think and you can",
    "start": "1017750",
    "end": "1023310"
  },
  {
    "text": "never talk about a single dimension here's some more of the dimensions of latency so a lot of people think well serverless latency is going to be due to",
    "start": "1023310",
    "end": "1030000"
  },
  {
    "start": "1026000",
    "end": "1026000"
  },
  {
    "text": "the runtime starting up that's almost always wrong the runtime starts up really really fast what actually happens",
    "start": "1030000",
    "end": "1036510"
  },
  {
    "text": "is in a lot of cases since functions in the cloud are are stateless they have to",
    "start": "1036510",
    "end": "1041670"
  },
  {
    "text": "accumulate some state before they know enough to satisfy the request or handle the event that just came in and that can",
    "start": "1041670",
    "end": "1048060"
  },
  {
    "text": "dominate your latency particularly if you need to do some relational database calls or something to do that but let's",
    "start": "1048060",
    "end": "1055710"
  },
  {
    "text": "go back and look at the runtime so what are some of the things that can happen in the runtime well there's the well-known phenomenon of cold start",
    "start": "1055710",
    "end": "1060780"
  },
  {
    "text": "versus warm start whether you know you've been running that function recently and we've got it all loaded up on an RN waiting to go or we have to",
    "start": "1060780",
    "end": "1066710"
  },
  {
    "text": "actually go get it up to s3 and deploy it before you can run it then of course there is",
    "start": "1066710",
    "end": "1072350"
  },
  {
    "text": "what is your runtime startup platform anyhow is that you know a VM is that an",
    "start": "1072350",
    "end": "1078409"
  },
  {
    "text": "interpreter is that a compiled program that has a huge difference and of course there is the p50 versus p90 issue so",
    "start": "1078409",
    "end": "1086659"
  },
  {
    "text": "whenever you're thinking about latency and first of all and deciding whether it's a problem and what you can do to",
    "start": "1086659",
    "end": "1091700"
  },
  {
    "text": "address this problem you have to keep all of these things in your mind so let's assume we want to",
    "start": "1091700",
    "end": "1097159"
  },
  {
    "text": "your server lists and we don't like latency so what are we going to do to address these problems well first of all",
    "start": "1097159",
    "end": "1103669"
  },
  {
    "text": "we can address the cold startup problem by in case of compute by keeping your lambda functions warm this is a",
    "start": "1103669",
    "end": "1109250"
  },
  {
    "start": "1104000",
    "end": "1104000"
  },
  {
    "text": "well-known trick go read up on it in Google I'm not going to say much there's techniques for doing it they work it",
    "start": "1109250",
    "end": "1114620"
  },
  {
    "text": "makes me grumpy I don't think customers should have to do this and I think we should find a way to make it so customers don't have to do",
    "start": "1114620",
    "end": "1120320"
  },
  {
    "text": "this and and well this is what happens next year what's more interesting is",
    "start": "1120320",
    "end": "1126020"
  },
  {
    "start": "1126000",
    "end": "1126000"
  },
  {
    "text": "let's talk about programming languages we're all geeks here let's we like talking about programming languages so I",
    "start": "1126020",
    "end": "1131870"
  },
  {
    "text": "don't want to diss Java because we use it all the time you folks use it all the time the tooling is pretty generally",
    "start": "1131870",
    "end": "1139340"
  },
  {
    "text": "excellent in terms of ideas and debuggers and compilers and libraries for everything and you know all these",
    "start": "1139340",
    "end": "1146510"
  },
  {
    "text": "years later it's still a pretty ok programming language and it is very very difficult to find anything that actually",
    "start": "1146510",
    "end": "1152659"
  },
  {
    "text": "runs faster than Java runs faster I say once it's got itself going the java",
    "start": "1152659",
    "end": "1158240"
  },
  {
    "text": "community over the decades has gotten into a habit of consciously choosing to by runtime performance at the expense of",
    "start": "1158240",
    "end": "1164000"
  },
  {
    "text": "startup performance and you think well that's just the JVM and it isn't the JVM actually can start up pretty quick most",
    "start": "1164000",
    "end": "1170210"
  },
  {
    "text": "often the problem isn't Java the problem is us we've loaded up all sorts of startup goo into our programs and you",
    "start": "1170210",
    "end": "1175549"
  },
  {
    "text": "know these huge dependency injection frameworks that make thousands of reflection API calls before you can help do your first request why I don't want",
    "start": "1175549",
    "end": "1181669"
  },
  {
    "text": "to name names like for example spring boot but if you're doing they're doing that then you know that's the kind of pain you can expect to have now if you",
    "start": "1181669",
    "end": "1188690"
  },
  {
    "text": "need to do dependency injection you can look at something like dagger which is something from Google and Square which",
    "start": "1188690",
    "end": "1195919"
  },
  {
    "text": "tries to dependency injection at compile time but I think the real underlying point I'm trying to is that you might be able to make Java",
    "start": "1195919",
    "end": "1202429"
  },
  {
    "text": "run fast that startup but you're not gonna get that for free you're gonna have to do a bunch of extra work to do",
    "start": "1202429",
    "end": "1207500"
  },
  {
    "text": "them so maybe just you know don't use Java I know that's sort of a shocking thing to say but but but bear it in mind",
    "start": "1207500",
    "end": "1213520"
  },
  {
    "text": "so I have also on this slide three runtimes that have substantially you",
    "start": "1213520",
    "end": "1219380"
  },
  {
    "text": "know good startup performance by which pretty good even when cold and they are not however created equal I generally",
    "start": "1219380",
    "end": "1226010"
  },
  {
    "text": "speaking do not encourage people to do serious server-side software engineering and nodejs a bunch of reasons one is the",
    "start": "1226010",
    "end": "1233510"
  },
  {
    "text": "JavaScript isn't a very good programming language at the end of the day things are getting better and typescript is",
    "start": "1233510",
    "end": "1238850"
  },
  {
    "text": "nice but if you want a nice modern strongly typed programming language why don't you just use a real one instead of something that's layered on top of",
    "start": "1238850",
    "end": "1244190"
  },
  {
    "text": "something else but my real problem is NPM and I just cannot imagine foisting a",
    "start": "1244190",
    "end": "1250549"
  },
  {
    "text": "service based on NPM on my customers with because it's just uncontrollable",
    "start": "1250549",
    "end": "1256210"
  },
  {
    "text": "understandable unspecified bull unpredictable I'm just not going to use",
    "start": "1256210",
    "end": "1261350"
  },
  {
    "text": "it which leaves Python and go so specifically if you are a person who's",
    "start": "1261350",
    "end": "1267080"
  },
  {
    "text": "in the world of scientific computing or data science or ml or something like that you know you're already living in a",
    "start": "1267080",
    "end": "1273169"
  },
  {
    "text": "wall-to-wall Python world anyhow so don't fight it go ahead Python is an excellent choice for server lists it's a",
    "start": "1273169",
    "end": "1279110"
  },
  {
    "text": "pretty good programming language good tooling good libraries that kind of thing and that leaves go and you know I",
    "start": "1279110",
    "end": "1284720"
  },
  {
    "text": "try to be neutral about these things but but my I can't I'm I mean I'm just",
    "start": "1284720",
    "end": "1290299"
  },
  {
    "text": "really a big fan these days and in particular if you're doing serverless the lambda runtime for go is just",
    "start": "1290299",
    "end": "1296179"
  },
  {
    "text": "freakin excellent it is really good there's a lot of things to like about go it's got good tooling good debuggers",
    "start": "1296179",
    "end": "1301760"
  },
  {
    "text": "good IDs are good compilers it's still great to sit on my Mac and say build my",
    "start": "1301760",
    "end": "1307669"
  },
  {
    "text": "go program and only build it for Linux and I can run it on the lambda right there that's just cool another thing is",
    "start": "1307669",
    "end": "1314210"
  },
  {
    "text": "that it's often the case that we want to write highly concurrent code to get the most out of our computers and go a",
    "start": "1314210",
    "end": "1320600"
  },
  {
    "text": "concurrency and go is just immensely insanely better than Java in particular in most other languages it's way easier",
    "start": "1320600",
    "end": "1326780"
  },
  {
    "text": "to write concurrent code without getting into yourself into race conditions and and deadlocks and so on and then finally",
    "start": "1326780",
    "end": "1332360"
  },
  {
    "text": "and maybe this is an old guy talking but I think that of all the many in computer languages I've worked in over the years",
    "start": "1332360",
    "end": "1338400"
  },
  {
    "text": "go has readability that is second to none and I think maybe better than any",
    "start": "1338400",
    "end": "1343760"
  },
  {
    "text": "and readability is just super important I spend way more time reading code than",
    "start": "1343760",
    "end": "1350040"
  },
  {
    "text": "I spend writing code and I think we all do and if we are going to work effectively as a group we have to be able to minimize the work it takes to",
    "start": "1350040",
    "end": "1356730"
  },
  {
    "text": "understand what each other are doing and go does that so so I'm down with doing doing go um that picture I showed you a",
    "start": "1356730",
    "end": "1364530"
  },
  {
    "text": "few slides back of the inside of the Amazon MQ service though the control plane there is a bunch of lambdas",
    "start": "1364530",
    "end": "1370230"
  },
  {
    "text": "written in Java and I think if we were going to do it again we did that in like early 2017 and I think if we were gonna",
    "start": "1370230",
    "end": "1375270"
  },
  {
    "text": "do that again now I would be leaning on that team to use go and I don't think I get any resistance um let me just",
    "start": "1375270",
    "end": "1382050"
  },
  {
    "text": "highlight this one blog entry that crossed my radar recently that just made a big impression on me so these guys",
    "start": "1382050",
    "end": "1389610"
  },
  {
    "text": "were a start-up I actually have to admit I have no idea what they do but they have this application that's purely",
    "start": "1389610",
    "end": "1395610"
  },
  {
    "text": "serverless and it was carding to cost them a whole lot of money and the reason was that the way it worked was they had",
    "start": "1395610",
    "end": "1401760"
  },
  {
    "text": "this little function that they used to run for every customer for every region every like at a regular interval quite",
    "start": "1401760",
    "end": "1408420"
  },
  {
    "text": "often and they were doing well had more and more customers and so they were running this thing thousands and thousands and thousands of times at a",
    "start": "1408420",
    "end": "1414990"
  },
  {
    "text": "regular interval and they allowed the bills were starting to get really pretty high but then they looked at it and they realized what the function did wasn't",
    "start": "1414990",
    "end": "1421110"
  },
  {
    "text": "very much all I did was pull some information in over the network and persisted into a database and so what",
    "start": "1421110",
    "end": "1426330"
  },
  {
    "text": "they did was they rebuilt it all into a single go function that instead that for each combination of customer and region",
    "start": "1426330",
    "end": "1432990"
  },
  {
    "text": "just fired off a go routine and tossed it into this you know the thread pool and said you know do that and because",
    "start": "1432990",
    "end": "1438240"
  },
  {
    "text": "the go runtime is totally built to work to do that it just worked and here's the thing because this function was totally",
    "start": "1438240",
    "end": "1444720"
  },
  {
    "text": "i/o bound I was mostly just sitting there waiting for bytes to trickle in over the network the the runtime of this",
    "start": "1444720",
    "end": "1450750"
  },
  {
    "text": "massive combo combo function that works for all the customers and all the regions was actually not much longer than the underlying runtime of the",
    "start": "1450750",
    "end": "1457710"
  },
  {
    "text": "individual functions that they were running before and you know the reduction in their in their lambda spend was just absolutely colossal so just a",
    "start": "1457710",
    "end": "1465240"
  },
  {
    "text": "success story to pay attention to so that leaves what I think is the elephant in the room the",
    "start": "1465240",
    "end": "1470580"
  },
  {
    "text": "main thing that makes doing serverless hard in terms of latency and that is you",
    "start": "1470580",
    "end": "1476070"
  },
  {
    "start": "1476000",
    "end": "1476000"
  },
  {
    "text": "know what I called state hydration you know you need to get enough state to figure out what to do before you can do it except for sometimes you don't this",
    "start": "1476070",
    "end": "1482760"
  },
  {
    "text": "is an app I highlighted last year at this conference by Thompson Reuters so what they do is they're a news",
    "start": "1482760",
    "end": "1488490"
  },
  {
    "text": "organization they get lots of video the video comes in at lands in an s3 bucket so they need to be able to transcode it",
    "start": "1488490",
    "end": "1494010"
  },
  {
    "text": "into lots of different resolutions and sizes and encoding so they can deliver it to all their customers and this is",
    "start": "1494010",
    "end": "1499560"
  },
  {
    "text": "pretty hard actually because it turns out the amount of time it takes to transcode is linear in the size of the v",
    "start": "1499560",
    "end": "1506760"
  },
  {
    "text": "of the length of the video and it's linear with a multiplier of one so like a 30 minute video can take 30 minutes to",
    "start": "1506760",
    "end": "1513090"
  },
  {
    "text": "transcode and so what they did was insanely clever they took the video and using ffmpeg broke it into like half",
    "start": "1513090",
    "end": "1519690"
  },
  {
    "text": "second chunks breaking it on the keyframes which gave them a large number of very small video files they hurled as",
    "start": "1519690",
    "end": "1524960"
  },
  {
    "text": "objects into an s3 bucket and had it wired up so the arrival of each object lashed to launch the lambda function",
    "start": "1524960",
    "end": "1530970"
  },
  {
    "text": "which then did the transcoding on half a second of video which takes about half a second and then it glued it all together once it was done it was a brilliant",
    "start": "1530970",
    "end": "1537960"
  },
  {
    "text": "piece of work and the result was the time to encode half hour video went from like half hour to a handful of seconds on top of which they there was no state",
    "start": "1537960",
    "end": "1547950"
  },
  {
    "text": "hydration all the all the land we needed to know was the name of the s3 bucket Earnest s3 object and it could go and",
    "start": "1547950",
    "end": "1553740"
  },
  {
    "text": "just are streaming it in and working at it on top of which doing capacity management's that for this if you were",
    "start": "1553740",
    "end": "1558780"
  },
  {
    "text": "doing a traditional server full service would have been a nightmare its news you can't predict when it's going to come in",
    "start": "1558780",
    "end": "1563850"
  },
  {
    "text": "and when something hots going on in the world is coming in fast and all the time and most of the time nothing's coming in at all if they'd had to scale up a fleet",
    "start": "1563850",
    "end": "1569910"
  },
  {
    "text": "to you to meet their peak load it would have been like a really expensive and difficult process so I mean this is the",
    "start": "1569910",
    "end": "1575430"
  },
  {
    "text": "kind of thing you know no stay at hydration unpredictable loads divisible",
    "start": "1575430",
    "end": "1580590"
  },
  {
    "text": "work where it's got letters of fire or 500 meters high on the top of it saying do this in serverless",
    "start": "1580590",
    "end": "1585780"
  },
  {
    "text": "any other way of doing it it's just it's just wrong but you know this is a bit of",
    "start": "1585780",
    "end": "1590820"
  },
  {
    "text": "a lucky lucky situation but you know let's consider the situation where you really do need to to gather some state",
    "start": "1590820",
    "end": "1597480"
  },
  {
    "text": "so I was talking to a start Frank we're friends of mine and they're super happy AWS users and they are a",
    "start": "1597480",
    "end": "1604309"
  },
  {
    "text": "tool for coordinating political outreach and political campaigns so for the Americans in the room that flurry of SMS",
    "start": "1604309",
    "end": "1610850"
  },
  {
    "text": "is in emails and and appeals to you to sign petitions and send faxes and all that stuff that was going on all here in",
    "start": "1610850",
    "end": "1616970"
  },
  {
    "text": "connection with your elections they're probably responsible for a lot of that now their load is just really peaky",
    "start": "1616970",
    "end": "1622190"
  },
  {
    "text": "because most politics obviously and while they were successful there AWS bills were getting up a bit and you know",
    "start": "1622190",
    "end": "1628669"
  },
  {
    "text": "they were talking to me about how they could have they could reduce that and it was irritating because as I said so peaky half the time more than half the",
    "start": "1628669",
    "end": "1634549"
  },
  {
    "text": "time their servers are sitting there doing nothing so I said well serverless and they said huh now and I said well",
    "start": "1634549",
    "end": "1641659"
  },
  {
    "text": "why not and they said well Drupal so it turns out that they are using the Drupal web framework a reasonably popular and",
    "start": "1641659",
    "end": "1648769"
  },
  {
    "text": "really not bad PHP based web framework to do all their stuff and the problem is",
    "start": "1648769",
    "end": "1654110"
  },
  {
    "text": "it turns out that to do anything in Drupal it really needs to load a lot of",
    "start": "1654110",
    "end": "1659779"
  },
  {
    "text": "state it specifically it needs to make like some immense number of Postgres calls like eight or something like that",
    "start": "1659779",
    "end": "1666380"
  },
  {
    "text": "before I can do anything so they were just not a good candidate for server lists and then the business guy in the room said so my team's been talking oh",
    "start": "1666380",
    "end": "1673580"
  },
  {
    "text": "it may be rewriting some parts of the app because PHP is starting to get in their way and you're saying that if we rewrote it when we do that if we think",
    "start": "1673580",
    "end": "1680269"
  },
  {
    "text": "hard about how we you know gets get get this get ready to answer queries we might be able to go serverless and say",
    "start": "1680269",
    "end": "1686630"
  },
  {
    "text": "buckets of money and I said yeah and he said to them well you guys should think about that and so guys",
    "start": "1686630",
    "end": "1691820"
  },
  {
    "text": "think about that you know when you were designing software think about you know figuring out a way so that you can start",
    "start": "1691820",
    "end": "1697850"
  },
  {
    "text": "in a stateless way and still get useful work done no you still have to retrieve stuff sometimes but it is not",
    "start": "1697850",
    "end": "1703760"
  },
  {
    "text": "necessarily written in the stars that you have to do it from a DBMS you know there are a lot of different ways to to",
    "start": "1703760",
    "end": "1710960"
  },
  {
    "text": "recover state for example you might want to look at app sync which uses graph QL which is specifically designed to take a",
    "start": "1710960",
    "end": "1717260"
  },
  {
    "text": "whole bunch of chatty little restful api calls and in one round-trip give you a nicely managed package of more or less",
    "start": "1717260",
    "end": "1723080"
  },
  {
    "text": "exactly what it is you need to move forward look at ElastiCache my my laptop",
    "start": "1723080",
    "end": "1729380"
  },
  {
    "text": "has a sticker on it that says ElastiCache microseconds are the new mill seconds now ElastiCache is not exactly",
    "start": "1729380",
    "end": "1736399"
  },
  {
    "text": "serverless but let's not let the perfect to be the enemy of the good you can go and you know set up a special API",
    "start": "1736399",
    "end": "1742940"
  },
  {
    "text": "specifically designed to hydrate yourself you can recover state from a queue or a stream or something like that",
    "start": "1742940",
    "end": "1747950"
  },
  {
    "text": "there are a lot of ways to minimize the effort of state hydration by by thinking",
    "start": "1747950",
    "end": "1755690"
  },
  {
    "text": "about it first and I want to illustrate this once again by example once again ripping off the",
    "start": "1755690",
    "end": "1762320"
  },
  {
    "text": "covers of an AWS service and the service I'm gonna look at is step function simple workflow which share a common",
    "start": "1762320",
    "end": "1768379"
  },
  {
    "start": "1764000",
    "end": "1764000"
  },
  {
    "text": "back-end and if you look at a workflow service it's mostly just an event processor you have millions of workflows",
    "start": "1768379",
    "end": "1775100"
  },
  {
    "text": "running I speak literally there are millions of workflows running and they're sending you a stream of event saying oh this states succeeded this",
    "start": "1775100",
    "end": "1782419"
  },
  {
    "text": "date failed this timer went off you know this new workflow run was requested yada yada yada and what it has to do is take",
    "start": "1782419",
    "end": "1788720"
  },
  {
    "text": "all those requests look at the current state of the workflow execution and figure out what to do next and so the",
    "start": "1788720",
    "end": "1794179"
  },
  {
    "text": "designers of the service which is a few years ago now decided that to achieve acceptable latency they would lock each",
    "start": "1794179",
    "end": "1800299"
  },
  {
    "text": "workflow execution to a particular host in the fleet because that way when the event comes in we would send it to that",
    "start": "1800299",
    "end": "1806480"
  },
  {
    "text": "host and the current state of the workflow would be there in memory and thus they could look quickly just decide",
    "start": "1806480",
    "end": "1811669"
  },
  {
    "text": "quickly dispatch quickly and move along so can you see the flaw in this scheme the flaw in this scheme is that they",
    "start": "1811669",
    "end": "1818330"
  },
  {
    "text": "might crash or actually what's more likely we might bounce it to patch the operating system or rev the software or",
    "start": "1818330",
    "end": "1823399"
  },
  {
    "text": "something like that and if you do that you will have lost the state of the workflow and in a workflow execution",
    "start": "1823399",
    "end": "1828440"
  },
  {
    "text": "engine the one thing you must never ever ever ever do is lose the state of a workflow execution so what they did to",
    "start": "1828440",
    "end": "1834769"
  },
  {
    "text": "deal with this is they have a journal like thing running into dynamodb and whenever you know so we route the events",
    "start": "1834769",
    "end": "1841249"
  },
  {
    "text": "to the right posts and the host says into the journal oh I got this event and then it says to the journal oh I looked",
    "start": "1841249",
    "end": "1846289"
  },
  {
    "text": "at the workflow and oh I decided to do X for some value of x and then it goes away and so then if that host goes away",
    "start": "1846289",
    "end": "1853090"
  },
  {
    "text": "when the next event comes and OOP that host isn't there we have to run it to a new host it can go and play the journal",
    "start": "1853090",
    "end": "1859279"
  },
  {
    "text": "forward and recover the state and then subsequently decide what to do with that workflow does this work yeah works fine",
    "start": "1859279",
    "end": "1865970"
  },
  {
    "text": "the the state Detroit transition rate is is perfectly acceptable is it simple oh no",
    "start": "1865970",
    "end": "1873349"
  },
  {
    "text": "no no not at all it is hideously complex the task of you know making everything routed to the right place and making",
    "start": "1873349",
    "end": "1880309"
  },
  {
    "text": "sure you write the journal in exactly the right way so that you never lose anything and the task of playing back the journal and reconstructing State and",
    "start": "1880309",
    "end": "1886099"
  },
  {
    "text": "trying to do it quickly when you know a new event comes in and you've lost the state these are all very complicated",
    "start": "1886099",
    "end": "1891229"
  },
  {
    "text": "things and as a result this team has they're they're not all that happy with their future development velocity",
    "start": "1891229",
    "end": "1897139"
  },
  {
    "text": "because you know they have this insanely complex setup and I'm pretty sure that if we were going to build this again",
    "start": "1897139",
    "end": "1903349"
  },
  {
    "text": "today we wouldn't we would just simply abandon that notion we would spray the events randomly across the fleet maybe",
    "start": "1903349",
    "end": "1909349"
  },
  {
    "text": "even not have a fleet just do it server lessly and and make it really fast and efficient for to recover the workflow",
    "start": "1909349",
    "end": "1915440"
  },
  {
    "text": "state from persistent storage after all this is not a complex sequel query this is find me the current state of workflow",
    "start": "1915440",
    "end": "1921639"
  },
  {
    "text": "UUID and it's a pure key value pair retrieval and we're pretty good at optimizing those kind of things so here",
    "start": "1921639",
    "end": "1928340"
  },
  {
    "text": "we see a design error caused by people obsessing about latency you see the same",
    "start": "1928340",
    "end": "1933379"
  },
  {
    "text": "thing in a restful applications where for large restful applications you'll",
    "start": "1933379",
    "end": "1938389"
  },
  {
    "text": "have session affinity and they'll make a big deal about trying to wrote queries from a session back to the same host that works okay lots of people do it is",
    "start": "1938389",
    "end": "1945379"
  },
  {
    "text": "it simple no it's not at all does it add extra work yes it does does it add complexity yes it does and so what I'm",
    "start": "1945379",
    "end": "1952309"
  },
  {
    "text": "saying is sometimes the cure for the disease of latency can be worse than the",
    "start": "1952309",
    "end": "1958609"
  },
  {
    "text": "disease itself and so I would recommend that as you design new services don't",
    "start": "1958609",
    "end": "1968090"
  },
  {
    "text": "don't try do session a new session infinity just wrote stuff around deal",
    "start": "1968090",
    "end": "1973519"
  },
  {
    "text": "with it in an efficient way and it'll buy you lots of lots of good stuff I think that's all I'm going to say about",
    "start": "1973519",
    "end": "1980720"
  },
  {
    "text": "serverless and reducing latency and the message is use service where you can sometimes you can't but when you can",
    "start": "1980720",
    "end": "1987019"
  },
  {
    "text": "you're almost certainly going to come out ahead and if you look at it and you say oh well that might cause me a latency problem don't say okay no server",
    "start": "1987019",
    "end": "1993739"
  },
  {
    "text": "let's say well is there a way I could design around that because oftentimes there is",
    "start": "1993739",
    "end": "1999380"
  },
  {
    "text": "I think I'm gonna start stop talking about serverless I'm more than halfway through this let's talk about something",
    "start": "1999380",
    "end": "2005020"
  },
  {
    "text": "else let's talk about databases so I'm an old guy and I can remember for many",
    "start": "2005020",
    "end": "2011950"
  },
  {
    "start": "2007000",
    "end": "2007000"
  },
  {
    "text": "years there was a period where if you were a serious developer building serious software you had to develop it",
    "start": "2011950",
    "end": "2018010"
  },
  {
    "text": "in Java and you had to talk to a relational database because that's what serious people did fortunately those",
    "start": "2018010",
    "end": "2024370"
  },
  {
    "text": "days the Java nuclear winter as we called it are now over and you know no matter how serious you are no sequel",
    "start": "2024370",
    "end": "2030970"
  },
  {
    "text": "databases are perfectly acceptable for modern use and they are you know highly relevant in a lot of applications we use",
    "start": "2030970",
    "end": "2037420"
  },
  {
    "text": "them all the time in many cases they you know their semantics they tend to be document rather than row based and they",
    "start": "2037420",
    "end": "2043570"
  },
  {
    "text": "tend to be optimized towards key value lookup and they tend to be really good if eventual consistency is your thing there's a lot of cases where they work",
    "start": "2043570",
    "end": "2050648"
  },
  {
    "text": "just fine and you know they can often have dramatically better performance to assuming you use them right so they're",
    "start": "2050649",
    "end": "2056290"
  },
  {
    "text": "they're a good option I've got dynamo up here because I work for AWS but lots of people are getting excellent results with Cassandra and and coach base",
    "start": "2056290",
    "end": "2062740"
  },
  {
    "text": "I just discovered like five more databases walking around the expo floor that I'd never heard of so you know no",
    "start": "2062740",
    "end": "2069010"
  },
  {
    "text": "sequel it is a good thing but sometimes you have transactions don't you some",
    "start": "2069010",
    "end": "2075220"
  },
  {
    "text": "applications are just naturally transactional sometimes the data I'm dealing with this somebody's bank account or a conversational State or",
    "start": "2075220",
    "end": "2081940"
  },
  {
    "text": "something like that and you just need to be transactional now I noticed that we announced transactions for dynamo dB at",
    "start": "2081940",
    "end": "2088780"
  },
  {
    "text": "reinvent but we don't have much experience with that yet so maybe the inside AWS talk next year will talk",
    "start": "2088780",
    "end": "2094658"
  },
  {
    "text": "about you know using transactions in dynamo dB so conventionally right now the way you get transactional behavior is using a",
    "start": "2094659",
    "end": "2102310"
  },
  {
    "text": "relational database and so the question we ask ourselves is you know inside AWS",
    "start": "2102310",
    "end": "2107650"
  },
  {
    "text": "building applications should we use relational databases and if you went to runners keynote this morning you",
    "start": "2107650",
    "end": "2114280"
  },
  {
    "text": "probably know the answer to this which is we just don't do that and there's a",
    "start": "2114280",
    "end": "2119470"
  },
  {
    "text": "bunch of reasons beyond what what what Verner said so to start with relational",
    "start": "2119470",
    "end": "2127030"
  },
  {
    "text": "databases we think slow software development down because so often a huge proportion of the semantics of your",
    "start": "2127030",
    "end": "2132190"
  },
  {
    "text": "application migrates into the relational schema and the relational schema goes around and touches every little piece of code you",
    "start": "2132190",
    "end": "2137780"
  },
  {
    "text": "have and if you and if you even touch it in the slightest way you have to do a whole bunch of extra work second thing",
    "start": "2137780",
    "end": "2143270"
  },
  {
    "text": "is the relationship between what you ask a relational database to do and the",
    "start": "2143270",
    "end": "2148580"
  },
  {
    "text": "amount of work it does seems to be highly nonlinear I mean you can make simple queries that will cause a huge database cluster to just melt down and",
    "start": "2148580",
    "end": "2155630"
  },
  {
    "text": "it's because SQL is such a huge vast API against a huge vast data service surface",
    "start": "2155630",
    "end": "2160760"
  },
  {
    "text": "so we just don't like that we like relatively deterministic behavior another thing is that the availability",
    "start": "2160760",
    "end": "2167750"
  },
  {
    "text": "story for relational databases is based on failover if you've done a lot of failover is you can know they can easily",
    "start": "2167750",
    "end": "2173360"
  },
  {
    "text": "take minutes and in the best case still take seconds and our services just can't go off the air for seconds let alone let",
    "start": "2173360",
    "end": "2180410"
  },
  {
    "text": "alone minutes and then the final problem is that if you are running a serious relational database you were expected to",
    "start": "2180410",
    "end": "2186560"
  },
  {
    "text": "have a cadre of DBA s you can tell them by the long robes with silver sparkles and tall pointy hats and sorry that's a",
    "start": "2186560",
    "end": "2194990"
  },
  {
    "text": "great DBA is out there but that just doesn't feel very modern to me you know",
    "start": "2194990",
    "end": "2200360"
  },
  {
    "text": "that I should have to maintain a team of people working full-time just to keep my database running well so we just",
    "start": "2200360",
    "end": "2207080"
  },
  {
    "text": "basically don't use relational databases but we still do need transactions so",
    "start": "2207080",
    "end": "2213440"
  },
  {
    "text": "what do we use for at least four years which is how long I've been at AWS we've",
    "start": "2213440",
    "end": "2220460"
  },
  {
    "text": "been using QLD B now it's not exactly the same bits that we announced as a service yesterday but it's rough it's",
    "start": "2220460",
    "end": "2225920"
  },
  {
    "text": "the same technology and right now today you know you can't launch an ec2 instance or send a message on Kinesis or",
    "start": "2225920",
    "end": "2234100"
  },
  {
    "text": "scale an auto scaling group without using qlb Kol DV technology this is old",
    "start": "2234100",
    "end": "2241850"
  },
  {
    "text": "solid reliable stuff before I talk about it I need to give a tip of the hat to",
    "start": "2241850",
    "end": "2248270"
  },
  {
    "text": "this blog entry from this guy at LinkedIn back in 2013 something Krebs J Krebs which is I think one of the most",
    "start": "2248270",
    "end": "2254660"
  },
  {
    "text": "influential pieces of technical technical writing in recent years which said that you know an append-only a",
    "start": "2254660",
    "end": "2259970"
  },
  {
    "text": "mutable log based store is really the right thing to use for modern distributed high transaction rate",
    "start": "2259970",
    "end": "2266060"
  },
  {
    "text": "applique and the immediate result of that was Kafka which you know is a nice popular thing on right now we're doing manage",
    "start": "2266060",
    "end": "2272110"
  },
  {
    "text": "Kafka - they announced that this morning so and that was good Kafka is a fine thing but it led you know we were",
    "start": "2272110",
    "end": "2279370"
  },
  {
    "text": "already working in that direction and qld B is one of those so the thing about QLD B is that the center of QLD B is",
    "start": "2279370",
    "end": "2286240"
  },
  {
    "text": "this big Journal and the transactions are at the front end of the journal where things go into it so you do your",
    "start": "2286240",
    "end": "2292660"
  },
  {
    "text": "transactions in an SQL ish thing and as a result everything that's on the",
    "start": "2292660",
    "end": "2297760"
  },
  {
    "text": "journal is a transactional a consistent chronologically consistent record of all",
    "start": "2297760",
    "end": "2303370"
  },
  {
    "text": "the changes that have been made to your datastore and then we read off the journal and build a summary which you can use it as a database and query it's",
    "start": "2303370",
    "end": "2311590"
  },
  {
    "text": "a really nice architecture what are some of the key points about it that I haven't already said oh yeah the summary",
    "start": "2311590",
    "end": "2317620"
  },
  {
    "text": "is is yeah it's summaries a database but the journal is actually one of the",
    "start": "2317620",
    "end": "2322690"
  },
  {
    "text": "tables in the database which is a really nice thing so you can query the current state of any different given record or",
    "start": "2322690",
    "end": "2327790"
  },
  {
    "text": "you can with equal facility query the the the the events that got it to be that way which turns out to be insanely",
    "start": "2327790",
    "end": "2333280"
  },
  {
    "text": "useful in a lot of applications the data are documents I don't know if you've ever noticed I on we shipped it a couple",
    "start": "2333280",
    "end": "2339070"
  },
  {
    "text": "of years ago it's adjacent super set with a few extra numeric and timestamp data types and alwah and of course it is",
    "start": "2339070",
    "end": "2346750"
  },
  {
    "text": "cryptographically chained which provides a lot of the semantics that the people who are blockchain boosters like to talk",
    "start": "2346750",
    "end": "2352330"
  },
  {
    "text": "about but it is not a distributed consensus thing so it's not a blockchain and slightest you know it's a it's just a database and most important of all",
    "start": "2352330",
    "end": "2360940"
  },
  {
    "text": "it's serverless you tell it you know what your tables are and you just start dumping data into them in querying them and we take care of scaling it out it's",
    "start": "2360940",
    "end": "2368110"
  },
  {
    "text": "it's a really nice piece of technology let me go back to that picture of the",
    "start": "2368110",
    "end": "2373390"
  },
  {
    "text": "back end of the work flow service and and talk about that so I told you we were we do the trend the consistency by",
    "start": "2373390",
    "end": "2381010"
  },
  {
    "text": "writing a journal into dynamo well Dynamo is a fine database but it's not particularly friendly to journals and we",
    "start": "2381010",
    "end": "2386770"
  },
  {
    "text": "were getting one of the highest high ops allocations of any Dynamo database in the world to support this so we are",
    "start": "2386770",
    "end": "2393220"
  },
  {
    "text": "actually as we speak rewriting that to use QLD B's journal and database for the purpose of that we don't have hard",
    "start": "2393220",
    "end": "2399460"
  },
  {
    "text": "numbers yet that I expect us to get absolutely dramatic qualitatively huge improvements",
    "start": "2399460",
    "end": "2405219"
  },
  {
    "text": "in in cost and performance by doing that and also spend a whole lot less money so",
    "start": "2405219",
    "end": "2410319"
  },
  {
    "text": "that's going to be a win so am I telling you that you should I'll drop everything and run out and start using QL DB for everything well you can't cuz I think",
    "start": "2410319",
    "end": "2416349"
  },
  {
    "text": "it's still in preview but even even if you could no but I think that any of you",
    "start": "2416349",
    "end": "2423640"
  },
  {
    "text": "who have distributed high transaction rate applications that need something",
    "start": "2423640",
    "end": "2430180"
  },
  {
    "text": "journal flavored or need transactions should go and take a good serious look",
    "start": "2430180",
    "end": "2435430"
  },
  {
    "text": "at this it is it is a fine piece of technology I I sleep pretty soundly at night when the services that I take care",
    "start": "2435430",
    "end": "2444130"
  },
  {
    "text": "of use it which I don't when they're using relational databases often okay",
    "start": "2444130",
    "end": "2449829"
  },
  {
    "text": "what else was I going to talk about containers oh that's right I was going",
    "start": "2449829",
    "end": "2456249"
  },
  {
    "text": "to talk about containers I finished databases so let's talk about containers a lot of you people are using containers",
    "start": "2456249",
    "end": "2461589"
  },
  {
    "text": "a lot of our people are using containers too here are some applications that actually have containers inside I",
    "start": "2461589",
    "end": "2467289"
  },
  {
    "text": "actually don't think we have very much to teach you about containers near as I can tell the way that we use them is",
    "start": "2467289",
    "end": "2472809"
  },
  {
    "text": "more or less exactly the same way that you use them as well I mean you know every developers like the aspect of a",
    "start": "2472809",
    "end": "2478390"
  },
  {
    "text": "container that you can you know with code deterministically and repeatably build an artifact with all its",
    "start": "2478390",
    "end": "2484749"
  },
  {
    "text": "dependencies in the right places that will execute on a given platform and that you can copy it around to deploy it and things like that so a lot of these",
    "start": "2484749",
    "end": "2493329"
  },
  {
    "text": "people are actually not only building but deploying containers they are almost entirely using ECF to do that there are",
    "start": "2493329",
    "end": "2501549"
  },
  {
    "text": "starting to see fire gate and I think we will see more and more Fargate because it's serverless and that buys you all that stuff where we are not as far as I",
    "start": "2501549",
    "end": "2509049"
  },
  {
    "text": "know using kubernetes at all although Amazon's a huge place and I'm sure if you poked around you could find some a we don't need it because we have you",
    "start": "2509049",
    "end": "2517539"
  },
  {
    "text": "know auto scaling and a lot of other things that do with useful things that kubernetes does and also because we try",
    "start": "2517539",
    "end": "2523839"
  },
  {
    "text": "and do service wherever possible and if you interviewed your server list that removes the need for that having said that kubernetes is just fine",
    "start": "2523839",
    "end": "2530079"
  },
  {
    "text": "we've got eks we have a lot of customers to use kubernetes to manage deployments",
    "start": "2530079",
    "end": "2535590"
  },
  {
    "text": "on ec2 there's nothing wrong with that I have a feeling that there may be a",
    "start": "2535590",
    "end": "2542130"
  },
  {
    "text": "vulnerability there I think kubernetes well I believe that easy things should be easy and difficult things should be",
    "start": "2542130",
    "end": "2549330"
  },
  {
    "text": "possible and kubernetes fails the first half of that pretty badly the learning",
    "start": "2549330",
    "end": "2555960"
  },
  {
    "text": "curve is brutal and I have this feeling in my gut that there might be something out there that only does maybe 20% of",
    "start": "2555960",
    "end": "2561360"
  },
  {
    "text": "what kubernetes does but is 80% easier to use and it does the right 20% I don't",
    "start": "2561360",
    "end": "2566850"
  },
  {
    "text": "know haven't seen it it's just that I think people are working too hard doing basic things in kubernetes and you",
    "start": "2566850",
    "end": "2572160"
  },
  {
    "text": "know containers yeah they're great there is a discussion to be had about how",
    "start": "2572160",
    "end": "2578550"
  },
  {
    "text": "serverless and containers interact with each other and Ben Ben Kehoe who's a",
    "start": "2578550",
    "end": "2583890"
  },
  {
    "start": "2582000",
    "end": "2582000"
  },
  {
    "text": "well-known loudmouth and friend of ours and Ben are you here don't see him has",
    "start": "2583890",
    "end": "2590550"
  },
  {
    "text": "asserted frequently that containers and service should be orthogonal and I like",
    "start": "2590550",
    "end": "2597300"
  },
  {
    "text": "that but at the moment we have a situation that I've Illustrated with this picture here that if you want to",
    "start": "2597300",
    "end": "2605070"
  },
  {
    "text": "have tens of thousands of TPS and you want to have response times in",
    "start": "2605070",
    "end": "2610160"
  },
  {
    "text": "milliseconds pretty well functions are what you got right you're gonna end up",
    "start": "2610160",
    "end": "2615180"
  },
  {
    "text": "using lambda because it's the only thing that can provide those kind of constraints because as everybody knows you know containers are slower to",
    "start": "2615180",
    "end": "2621480"
  },
  {
    "text": "startup in functions and VMs are still slower still oops they're not anymore as a firecracker they can boot from you",
    "start": "2621480",
    "end": "2629850"
  },
  {
    "text": "know bits on bits on storage to a fully running VM in like 125 milliseconds or",
    "start": "2629850",
    "end": "2635700"
  },
  {
    "text": "some shocking number like that so you could conceivably think about responding",
    "start": "2635700",
    "end": "2641790"
  },
  {
    "text": "to an HTTP request by spinning up a VM to take care of it I'm not sure I think that's a good idea but you know it's a",
    "start": "2641790",
    "end": "2648150"
  },
  {
    "text": "thing you could think about doing you know and and we can start these things that a thousands per minute so what am I",
    "start": "2648150",
    "end": "2655770"
  },
  {
    "text": "really driving at no no I'm not suggesting you should all go out and start responding to HTTP requests by spending at VMs but if we could do the",
    "start": "2655770",
    "end": "2663180"
  },
  {
    "text": "same thing with containers so that they could have that same kind of latency and flexibility then and I think",
    "start": "2663180",
    "end": "2670020"
  },
  {
    "text": "we should be able to I mean docker just wasn't designed with the notion that it should do a fast start but it but it you",
    "start": "2670020",
    "end": "2677910"
  },
  {
    "text": "could have a container like docker that maybe was I mean many docker images tend to have a huge chunk of a Linux user",
    "start": "2677910",
    "end": "2683370"
  },
  {
    "text": "line come along with them but maybe they don't have to and I envision a future in which you can get roughly the same kind",
    "start": "2683370",
    "end": "2690840"
  },
  {
    "text": "of concurrency in latency characteristics out of VMs and containers and functions and that's",
    "start": "2690840",
    "end": "2697260"
  },
  {
    "text": "going to really change the world because right now people tend to choose between these things based on how fast they want to be as opposed to the underlying",
    "start": "2697260",
    "end": "2703590"
  },
  {
    "text": "technical characteristics and so maybe in future we're going to be able to pick which way we want to deploy our compute",
    "start": "2703590",
    "end": "2708750"
  },
  {
    "text": "simply based on which one of these worlds it fits into better as opposed to how fast we need things to start so I'm",
    "start": "2708750",
    "end": "2715170"
  },
  {
    "text": "looking forward to that and I think that's gonna be great great fun ok what",
    "start": "2715170",
    "end": "2721200"
  },
  {
    "text": "else was I going to talk about I think I'm done with containers oh yes integration ok so I don't know about you",
    "start": "2721200",
    "end": "2728430"
  },
  {
    "start": "2725000",
    "end": "2725000"
  },
  {
    "text": "but I never get to build software that stands alone as proud silver tower in",
    "start": "2728430",
    "end": "2734190"
  },
  {
    "text": "the middle of an empty plane every piece of software I write has to integrate with stuff and when I talk to customers",
    "start": "2734190",
    "end": "2741240"
  },
  {
    "text": "people who are moving into the cloud you know they're doing some lift and shift they're doing some new cloud native",
    "start": "2741240",
    "end": "2746970"
  },
  {
    "text": "they're doing all sorts of different things usually all of those things at once and integration problems are at the",
    "start": "2746970",
    "end": "2752610"
  },
  {
    "text": "center of everything and in particular one of the things that I know I hear from customers who are going to modern",
    "start": "2752610",
    "end": "2759330"
  },
  {
    "text": "cloud native stuff is saying yeah but I still got to talk to the you know Accounts Payable system I still got to talk to this old thing I got to talk to",
    "start": "2759330",
    "end": "2766290"
  },
  {
    "text": "COBOL running on a mainframe you know don't laugh there's gonna be COBOL running on mainframes when we're all in our graves and and and how do you do",
    "start": "2766290",
    "end": "2773520"
  },
  {
    "text": "that so integration is something that we all ought to be thinking about a lot and",
    "start": "2773520",
    "end": "2778530"
  },
  {
    "text": "figuring out how to do it so I'm gonna claim it in 2018 there are three rough baskets here that integration problems",
    "start": "2778530",
    "end": "2785250"
  },
  {
    "text": "fall into I'm not gonna waste your time explaining to you what api's are everybody knows what they are we're all",
    "start": "2785250",
    "end": "2790500"
  },
  {
    "text": "pretty comfortable with them I mean it's a pretty broad brush term an API can be anything from a Linux system call to",
    "start": "2790500",
    "end": "2795990"
  },
  {
    "text": "some huge described restful thing that returns six hundred kfo but you know 18 seconds later but they",
    "start": "2795990",
    "end": "2804480"
  },
  {
    "text": "do have a common thread which is api's are generally associated with tight coupling you know I call an API and well",
    "start": "2804480",
    "end": "2811050"
  },
  {
    "text": "I stop and wait for the API to come back and tell me what I wanted to know or do",
    "start": "2811050",
    "end": "2816300"
  },
  {
    "text": "what I wanted done now okay that's not always the case sometimes you have API is that a fire-and-forget and you've",
    "start": "2816300",
    "end": "2821430"
  },
  {
    "text": "pulled to see what's happened or things like that and there's callbacks and so on but api is do represent i would think",
    "start": "2821430",
    "end": "2827430"
  },
  {
    "text": "in the general case fairly tight coupling and that can get you into a",
    "start": "2827430",
    "end": "2832530"
  },
  {
    "text": "world of hurt particularly in a distributed serverless application if I have serverless micro-service a calling",
    "start": "2832530",
    "end": "2840720"
  },
  {
    "text": "microservice b and we get a load surge such that the requests are hitting a 5%",
    "start": "2840720",
    "end": "2847050"
  },
  {
    "text": "faster than beacon can handle them you can get yourself into a world of hurt very very quickly and and that is a",
    "start": "2847050",
    "end": "2853470"
  },
  {
    "text": "consequence of synchronous coupling via API s so let's look at some of the alternatives so I'm going to talk about",
    "start": "2853470",
    "end": "2859890"
  },
  {
    "text": "two alternative patterns of coupling the first being orchestration now to some",
    "start": "2859890",
    "end": "2864960"
  },
  {
    "start": "2864000",
    "end": "2864000"
  },
  {
    "text": "extent here I am talking my book I am you know have my hands on step functions",
    "start": "2864960",
    "end": "2870270"
  },
  {
    "text": "I have code in it I'm probably the chief designer of the state's language so I'm biased on this one but I think I have",
    "start": "2870270",
    "end": "2877290"
  },
  {
    "text": "facts on my side if you look around amazon.com between step functions and",
    "start": "2877290",
    "end": "2883410"
  },
  {
    "text": "simple workflow and some earlier workflow engines we are running",
    "start": "2883410",
    "end": "2888990"
  },
  {
    "text": "literally tens of billions of workflows a week just to do business and be Amazon",
    "start": "2888990",
    "end": "2895910"
  },
  {
    "text": "because the fact of the matter is that in in the stuff we build there's a certain amount of stuff that a has",
    "start": "2895910",
    "end": "2902220"
  },
  {
    "text": "multiple steps and be the steps fail sometimes and see the steps take on predictable amounts of time and D need",
    "start": "2902220",
    "end": "2909869"
  },
  {
    "text": "to be handled as a unitary thing so the logon goes in one place and you can manage them as a unit and for those a",
    "start": "2909869",
    "end": "2916260"
  },
  {
    "text": "workflow is exactly the right kind of tools that you need to get the job done and if you're running big sophisticated",
    "start": "2916260",
    "end": "2923569"
  },
  {
    "text": "applications and you're not using workflows you're probably using something you pieced yourself together using sqs cues and messages and so on",
    "start": "2923569",
    "end": "2930540"
  },
  {
    "text": "and that stuff is a pain in the butt and it gets more more complex and less and less manageable as time goes on so so I drew",
    "start": "2930540",
    "end": "2937220"
  },
  {
    "text": "strongly counseled people to look closely at workflow technology and then",
    "start": "2937220",
    "end": "2942290"
  },
  {
    "text": "finally event-driven computing and event-driven integration so spoiler let",
    "start": "2942290",
    "end": "2948260"
  },
  {
    "start": "2943000",
    "end": "2943000"
  },
  {
    "text": "me give away the punchline this is a big deal a really big deal and it's becoming a bigger deal faster event-driven",
    "start": "2948260",
    "end": "2954579"
  },
  {
    "text": "computing by the way it also this is my future I plan to spend most of the next",
    "start": "2954579",
    "end": "2960680"
  },
  {
    "text": "year working on an event-driven computing stuff so we already have a lot of event-driven stuff at AWS those three",
    "start": "2960680",
    "end": "2967099"
  },
  {
    "text": "services I have there between them they can take events from literally dozens and dozens of different sources and",
    "start": "2967099",
    "end": "2972819"
  },
  {
    "text": "filter them and run them through lambdas and deliver them to dozens of different destinations mostly without you having",
    "start": "2972819",
    "end": "2979700"
  },
  {
    "text": "to write any code except for the code and lambda function perhaps with a lot of reliability and performance and",
    "start": "2979700",
    "end": "2985730"
  },
  {
    "text": "security and so on but there's still a lot of ways it could be better so so we're already doing a whole lot of event-driven computing so eventually if",
    "start": "2985730",
    "end": "2992810"
  },
  {
    "text": "in computing is by definition loosely coupled and and and almost and by",
    "start": "2992810",
    "end": "2999920"
  },
  {
    "text": "default scalable you know when you omit an event you don't have a tight contract",
    "start": "2999920",
    "end": "3005410"
  },
  {
    "text": "whoever's going to receive that event can do whatever they want with it and it's not your problem and in fact when I",
    "start": "3005410",
    "end": "3012640"
  },
  {
    "text": "say whoever it can be multiple parties once you've broadcast an event multiple different parties can start to use it and do things with it",
    "start": "3012640",
    "end": "3019000"
  },
  {
    "text": "and once you've got your reality exposed as an event stream you can use filtering",
    "start": "3019000",
    "end": "3024460"
  },
  {
    "text": "technology you can use routing technology you can use streaming technology you can talk to firehose and dump things in you can into redshift and",
    "start": "3024460",
    "end": "3031810"
  },
  {
    "text": "get analytics you can do analytics on the way through there's just a whole lot of stuff you can do so let me make this",
    "start": "3031810",
    "end": "3039069"
  },
  {
    "text": "into a really concrete example suppose you are the luckless developer who has been told ok for this up to work you",
    "start": "3039069",
    "end": "3046210"
  },
  {
    "text": "have to go pull change records out of the existing Accounts Payable system running on COBOL on the mainframe so it",
    "start": "3046210",
    "end": "3052750"
  },
  {
    "text": "sucks to be you but ok you got to do this so you're gonna go and find out how to call this API and assemble the a the",
    "start": "3052750",
    "end": "3058210"
  },
  {
    "text": "authentication credentials so you can actually make that call and get the information out of the old system so what I'm going to advise is that when",
    "start": "3058210",
    "end": "3065560"
  },
  {
    "text": "you do that don't just return the value to the caller take that value and drop it on an event bus somewhere because you had to",
    "start": "3065560",
    "end": "3072540"
  },
  {
    "text": "do a lot of work to get that so why just make it available to one application so once you've done that any subsequent",
    "start": "3072540",
    "end": "3077880"
  },
  {
    "text": "application cares about those changes merely have to subscribe to that event bus and it can start doing that you've",
    "start": "3077880",
    "end": "3083940"
  },
  {
    "text": "you just done a favor for your future self and we have you know lots of event",
    "start": "3083940",
    "end": "3089550"
  },
  {
    "text": "bus products there's SNS there's cloud watch events a lot of people don't know that much about cloud watch events",
    "start": "3089550",
    "end": "3094680"
  },
  {
    "text": "although it's a hugely successful service it turns out that you can inject your own events into cloud watch events just ad hoc events it's really cheap and",
    "start": "3094680",
    "end": "3101790"
  },
  {
    "text": "you can wrote them from account to account and region to region and service to service and do all sorts of nice stuff with them without writing any code",
    "start": "3101790",
    "end": "3108120"
  },
  {
    "text": "at all so I'm going to close because I'm down to five minutes here with an",
    "start": "3108120",
    "end": "3113370"
  },
  {
    "text": "example from another service so one of the things Brenner announced this morning was step functions now has",
    "start": "3113370",
    "end": "3119340"
  },
  {
    "text": "connectors so up till today step functions was able to talk to knew how",
    "start": "3119340",
    "end": "3124680"
  },
  {
    "text": "to talk to lambdas you had one lambda functions and it knew how to deal with polling activity workers well as of this",
    "start": "3124680",
    "end": "3130980"
  },
  {
    "text": "morning step functions can talk to EC I don't know the list ECS a dynamo SQS",
    "start": "3130980",
    "end": "3139280"
  },
  {
    "text": "batch glue sage maker a bunch of things like that s3 so you just have the way",
    "start": "3139280",
    "end": "3145080"
  },
  {
    "text": "you do that for those of you who know step functions it's where you would put the lamb the iron that addresses the lambda function you simply put a magic",
    "start": "3145080",
    "end": "3152880"
  },
  {
    "text": "iron that says dump this thing into dynamo and it just does it for you so so that's great now the other cool thing it",
    "start": "3152880",
    "end": "3159300"
  },
  {
    "text": "does is it lets you do something like run for example a glue job now glue does not have a synchronous API there's no",
    "start": "3159300",
    "end": "3164880"
  },
  {
    "text": "way to say run this and wait for it it just has a fire-and-forget API so the way that works is step functions does a",
    "start": "3164880",
    "end": "3172710"
  },
  {
    "start": "3170000",
    "end": "3170000"
  },
  {
    "text": "start it starts that job and then forgets about it but it's pulling this queue here and what happens is bash",
    "start": "3172710",
    "end": "3180060"
  },
  {
    "text": "thunders away our glue thunders away and does all that stuff and when it's finished it emits a cloud watch event whether it",
    "start": "3180060",
    "end": "3186750"
  },
  {
    "text": "succeeded or failed and we've written a rule into the customers account to catch that cloud watch event and drop it back",
    "start": "3186750",
    "end": "3192630"
  },
  {
    "text": "on the sqs queue that we're polling so the step functions finds out when it's",
    "start": "3192630",
    "end": "3199260"
  },
  {
    "text": "all done and the effect is from the point of view of the person doing the workflow we've made an asynchronous service look like",
    "start": "3199260",
    "end": "3205839"
  },
  {
    "text": "synchronous you can say take the data run it through a glue then do something else and to do that we have issued no",
    "start": "3205839",
    "end": "3213609"
  },
  {
    "text": "synchronous API calls we have done it in an event-based way a rule-based way no",
    "start": "3213609",
    "end": "3221020"
  },
  {
    "text": "coding involves just a cloud watching event rule and an sqs queue this is I think a substantial flavor of what the",
    "start": "3221020",
    "end": "3229690"
  },
  {
    "text": "future looks like event-based asynchronous serverless scalable robust",
    "start": "3229690",
    "end": "3238140"
  },
  {
    "text": "fast secure and very very safe okay now",
    "start": "3238140",
    "end": "3245500"
  },
  {
    "text": "I have pretty well used all my time so I'm not going to take questions from the stage but I will be happy to stroll out",
    "start": "3245500",
    "end": "3250750"
  },
  {
    "text": "in the hallway wherever that is that way or that way and talk to anybody who wants to talk about this stuff some more so thank you",
    "start": "3250750",
    "end": "3257079"
  },
  {
    "text": "for coming out and we'll see you all next year [Applause]",
    "start": "3257079",
    "end": "3262650"
  }
]