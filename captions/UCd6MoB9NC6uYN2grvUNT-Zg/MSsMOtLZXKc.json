[
  {
    "start": "0",
    "end": "198000"
  },
  {
    "text": "so let's kick off here again this is author and employee service applications with AWS Sam and again my name is Chris",
    "start": "60",
    "end": "6210"
  },
  {
    "text": "Muntz I'm currently a senior slash lead developer advocate for server lists at AWS I'm actually part of the lambda and",
    "start": "6210",
    "end": "11969"
  },
  {
    "text": "API gateway product teams and that includes service app repo Sam and kind",
    "start": "11969",
    "end": "17250"
  },
  {
    "text": "of our general ecosystem around service applications came down from New York for this here today and I've been an AWS for",
    "start": "17250",
    "end": "23699"
  },
  {
    "text": "just a little over six years across a couple different roles but previously before all of my time at AWS I came from",
    "start": "23699",
    "end": "29070"
  },
  {
    "text": "a fairly traditional what I would say is a operation slash sysadmin slash what we'd call DevOps or maybe an SRE type of",
    "start": "29070",
    "end": "35610"
  },
  {
    "text": "background and what I find so fascinating about the service space over the last couple years is it basically",
    "start": "35610",
    "end": "41010"
  },
  {
    "text": "takes everything that I did in my career before service and to a pretty large degree throws it out the window so I've",
    "start": "41010",
    "end": "47700"
  },
  {
    "text": "spent time in data centers doing racket stack and managing servers and clusters of servers and all of that and hopefully",
    "start": "47700",
    "end": "52829"
  },
  {
    "text": "if you've been here the last two days you've seen quite a lot of stuff about service and about lambda and probably got an idea of just how drastically it",
    "start": "52829",
    "end": "59489"
  },
  {
    "text": "changes things so why are we here today so it's really interesting out on the",
    "start": "59489",
    "end": "64739"
  },
  {
    "text": "hallway there's a board about the top topics that we've seen so far this week at the worldwide public sector summit",
    "start": "64739",
    "end": "70500"
  },
  {
    "text": "and right now lambda is number one by a very very very large majority and so we",
    "start": "70500",
    "end": "76259"
  },
  {
    "text": "first launched lambda back in November of 2014 AWS reinvent it went GA in April of 2015",
    "start": "76259",
    "end": "81900"
  },
  {
    "text": "and what we've seen in the last about just three years or so has been a really really huge growth and customers looking",
    "start": "81900",
    "end": "88650"
  },
  {
    "text": "at service being interested in server lists customers that are going from on-prem to cloud and starting with",
    "start": "88650",
    "end": "93810"
  },
  {
    "text": "server lists we're seeing a lot of customers that are completely bypassing the container space and going right into",
    "start": "93810",
    "end": "99390"
  },
  {
    "text": "server lists and so here in today's talk we're talking about Sam which is part of our ecosystem one of the kind of core",
    "start": "99390",
    "end": "104670"
  },
  {
    "text": "tools that we have here at AWS and I find it to be actually a really awesome tool and working in this space so real",
    "start": "104670",
    "end": "112259"
  },
  {
    "text": "quick here typically I wish I had done this talk earlier yesterday so you would probably already have been past this but",
    "start": "112259",
    "end": "117930"
  },
  {
    "text": "just for those of you who haven't been to any service talks yet this week in terms of service at AWS we have a pretty",
    "start": "117930",
    "end": "123270"
  },
  {
    "text": "firm definition I like to say that we have a pretty you know firm box that we paint our service products into and the",
    "start": "123270",
    "end": "129539"
  },
  {
    "text": "things that don't meet this criteria we don't consider server lists so for us sir bliss again it comes down to",
    "start": "129539",
    "end": "134730"
  },
  {
    "text": "four things no servers to provision or manage this means no physical virtual or even containers that you would manage as",
    "start": "134730",
    "end": "140580"
  },
  {
    "text": "a customer of a service platform should scale with usage so as requests come in we're gonna take those requests handle",
    "start": "140580",
    "end": "146670"
  },
  {
    "text": "them return back whatever the response or do whatever the work is based on your business logic never pay for idle so",
    "start": "146670",
    "end": "152580"
  },
  {
    "text": "there's lots of industry stats out there that talk about how much of a organization's resources are sitting idle the majority of the time it's well",
    "start": "152580",
    "end": "159480"
  },
  {
    "text": "more than 50% by most of the metrics out there and so what it means is effectively 50% of the money that you've",
    "start": "159480",
    "end": "165240"
  },
  {
    "text": "spent on those resources never returns any value to you as an organization and so with the service products you never",
    "start": "165240",
    "end": "170550"
  },
  {
    "text": "have to think about turning that knob for capacity such that you'd have idle resources sitting around being unused",
    "start": "170550",
    "end": "176010"
  },
  {
    "text": "then lastly availability and fault tolerance built-in so here at AWS we have a concept of regions inside of",
    "start": "176010",
    "end": "182460"
  },
  {
    "text": "those regions their availability zones and one of the most core basic foundational concepts of availability in",
    "start": "182460",
    "end": "188070"
  },
  {
    "text": "AWS is this concept of multi a-z and so with the service products you should never have to think about architecting",
    "start": "188070",
    "end": "193860"
  },
  {
    "text": "for this it's gonna be inherent in the products that we have so in the center of this world is AWS lambda again a",
    "start": "193860",
    "end": "201000"
  },
  {
    "start": "198000",
    "end": "198000"
  },
  {
    "text": "Tobias lambda is a compute service and the way that lambda works is you have your code today we have five primary",
    "start": "201000",
    "end": "207120"
  },
  {
    "text": "languages that we support that I would say that there's a very rich ecosystem of open-source tools that allow you to",
    "start": "207120",
    "end": "212550"
  },
  {
    "text": "run almost anything inside of that today so you write your code you upload it to the lambda service you can figure an",
    "start": "212550",
    "end": "218850"
  },
  {
    "text": "event source there's about 30 or so plus services today that can invoke lambda functions from AWS so it also has an API",
    "start": "218850",
    "end": "224820"
  },
  {
    "text": "that you can use to plug into your application code wherever you want and when a event comes in it causes a lambda",
    "start": "224820",
    "end": "231420"
  },
  {
    "text": "function to be triggered so what this means behind the scenes of the lambda team we run a massive massive massive",
    "start": "231420",
    "end": "236670"
  },
  {
    "text": "about a compute capacity in each of the regions that we're in we will go and essentially take one of those compute",
    "start": "236670",
    "end": "242190"
  },
  {
    "text": "resources align it to your account pull down your code boots drop that codes environment pull in the event request",
    "start": "242190",
    "end": "248630"
  },
  {
    "text": "your business logic is executed and maybe it talks to databases or data stores or other API is what have you and",
    "start": "248630",
    "end": "254760"
  },
  {
    "text": "then essentially returns back the results or acknowledgment or does what it needs to do and now we Bill you only",
    "start": "254760",
    "end": "260700"
  },
  {
    "text": "in the hundreds of milliseconds and so it's a very very very different way of thinking about how you build applications and how",
    "start": "260700",
    "end": "266880"
  },
  {
    "text": "you deal with infrastructure in the hundreds of milliseconds of time very small very focused business logic based",
    "start": "266880",
    "end": "272850"
  },
  {
    "text": "bits of code and so in terms of the anatomy of a lambda function there's",
    "start": "272850",
    "end": "277860"
  },
  {
    "start": "275000",
    "end": "275000"
  },
  {
    "text": "just kind of a couple of core concepts that matter to you the first and most important one I think is the handler the",
    "start": "277860",
    "end": "283560"
  },
  {
    "text": "handler is basically your entry point into a lambda function is basically where your logic of your code starts and",
    "start": "283560",
    "end": "289950"
  },
  {
    "text": "now that could obviously go out to other functions or talk to other libraries or other things inside of that but this is",
    "start": "289950",
    "end": "295320"
  },
  {
    "text": "basically the entry point that lambda is going to point its event into then you have the event object so the event",
    "start": "295320",
    "end": "300930"
  },
  {
    "text": "object is the actual data coming in from your event source in the case of an API this is gonna be the information passed",
    "start": "300930",
    "end": "306390"
  },
  {
    "text": "in from say an API gateway in the case of say something like s3 that invokes lambda that's gonna be information about",
    "start": "306390",
    "end": "312360"
  },
  {
    "text": "the object and the API activity that initiated that request and so typically",
    "start": "312360",
    "end": "317820"
  },
  {
    "text": "you're gonna pull in the event object process what's inside of it or gather some information in order to derive what",
    "start": "317820",
    "end": "323370"
  },
  {
    "text": "it is that your code is going to do and then there's a context object and this basically allows you to interface with",
    "start": "323370",
    "end": "329190"
  },
  {
    "text": "kind of the rest of the environment and some of the underlying configuration of your lambda function and you know pass",
    "start": "329190",
    "end": "334230"
  },
  {
    "text": "back success and stuff like that at the end of your functions execution so again kind of three core concepts here about a",
    "start": "334230",
    "end": "340620"
  },
  {
    "text": "lambda function for those of you who aren't familiar with it so a couple other things here about lambda again you",
    "start": "340620",
    "end": "346590"
  },
  {
    "text": "bring your own code this is a fairly open compute product you write your code however you want to write your peer code",
    "start": "346590",
    "end": "351930"
  },
  {
    "text": "if you want to include libraries whether they be open source or private you can again you can use one of the various",
    "start": "351930",
    "end": "357900"
  },
  {
    "text": "support languages that we have here one of the third-party frameworks that you could find terms of the resource model",
    "start": "357900",
    "end": "362910"
  },
  {
    "text": "there's basically one knob that you turn with lambda it's the amount of memory that your function has and today we support anywhere from 128 megabytes to 3",
    "start": "362910",
    "end": "370350"
  },
  {
    "text": "gigabytes and what comes with that is a proportional amount of CPU and networking capability so when you go",
    "start": "370350",
    "end": "376740"
  },
  {
    "text": "from 120 megabytes to 256 you effectively double the CPU capability that you have compared 228 and now at",
    "start": "376740",
    "end": "384780"
  },
  {
    "text": "one point eight gigabytes we go from giving you one core of CPU capability up to two so then you start having two",
    "start": "384780",
    "end": "390420"
  },
  {
    "text": "cores that you have access to so you can actually do parallel processing inside",
    "start": "390420",
    "end": "395490"
  },
  {
    "text": "of a lambda function across multiple cores above 1.8 gigabytes flexible to use so synchronous or",
    "start": "395490",
    "end": "401500"
  },
  {
    "text": "asynchronous we'll talk about this here a little more in a moment and then because it's AWS so we consider a security to be our top priority that",
    "start": "401500",
    "end": "407500"
  },
  {
    "text": "does not change anything with lambda here security is very deeply integrated into lambda we'll talk about some of the",
    "start": "407500",
    "end": "413289"
  },
  {
    "text": "concepts here as well and actually here we are so in terms of the permissions",
    "start": "413289",
    "end": "418780"
  },
  {
    "start": "416000",
    "end": "416000"
  },
  {
    "text": "model there's kind of two core concepts for lambda and what I'll boil it down to is it's kind of two things there's look",
    "start": "418780",
    "end": "424060"
  },
  {
    "text": "in my function do can my function talk to a dynamodb table can access data in an s3 bucket can it call say an API",
    "start": "424060",
    "end": "431560"
  },
  {
    "text": "inside of my accounts and then there's who can invoke my lambda function so am I going to allow a Kinesis stream to",
    "start": "431560",
    "end": "438940"
  },
  {
    "text": "invoke my lambda function am I going to allow an SNS topic to invoke my lambda function and so basically what that does",
    "start": "438940",
    "end": "444910"
  },
  {
    "text": "is give you kind of two core aspects of the security model for lambda and both of these policies here execution and",
    "start": "444910",
    "end": "451030"
  },
  {
    "text": "function policies are things that you must configure for lambda functions and more recently we actually got support",
    "start": "451030",
    "end": "456580"
  },
  {
    "text": "inside of the AWS config service which allows you to actually now to do kind of full governance and auditability of",
    "start": "456580",
    "end": "463960"
  },
  {
    "text": "these policies we actually have a couple of manage config rules in there that can say things like hey guess what your",
    "start": "463960",
    "end": "469210"
  },
  {
    "text": "execution policy is too permissive and so for organizations that want to have kind of very fine-grained constraints",
    "start": "469210",
    "end": "475750"
  },
  {
    "text": "around these you can actually now police them with config rules which i think is pretty cool so in terms of the execution",
    "start": "475750",
    "end": "482620"
  },
  {
    "start": "481000",
    "end": "481000"
  },
  {
    "text": "model there's three main ways of doing this today synchronous push so in this case we have for example an API gateway we have a",
    "start": "482620",
    "end": "488740"
  },
  {
    "text": "call to our order API that's going to directly invoke a lambda function and then we're expecting that lambda",
    "start": "488740",
    "end": "494050"
  },
  {
    "text": "function to return a result up to us we have asynchronous so take for example Amazon SNS implement notification",
    "start": "494050",
    "end": "500979"
  },
  {
    "text": "service or Amazon s3 simple storage service where we have say a message put into a topic with SNS or we've had an",
    "start": "500979",
    "end": "507370"
  },
  {
    "text": "object uploaded to an s3 bucket those services will then go and invoke the lambda function but we're not expecting",
    "start": "507370",
    "end": "513130"
  },
  {
    "text": "lambda to return a result up to them to talk to the client and you can think of use cases for example let's say that you",
    "start": "513130",
    "end": "519130"
  },
  {
    "text": "take a data file maybe are a report from folks out in the field report from",
    "start": "519130",
    "end": "524350"
  },
  {
    "text": "agency that you're working with that file goes into s3 you pull into lambda you do some data processing on it and it",
    "start": "524350",
    "end": "531070"
  },
  {
    "text": "goes back into a data warehouse somewhere it's not kind of thing you're going to respect expect a response back upstream and",
    "start": "531070",
    "end": "537120"
  },
  {
    "text": "lastly we have stream based so today inside of Emma's on dynamodb and Kinesis what we have for both of those services",
    "start": "537120",
    "end": "542790"
  },
  {
    "text": "is that we can stream activities or stream records that are put into them into lambda in this case the lambda",
    "start": "542790",
    "end": "548339"
  },
  {
    "text": "service pulls those looking for activity pulls down the records and can act upon them and now real real soon we pre",
    "start": "548339",
    "end": "554640"
  },
  {
    "text": "announce this back in April I guess we'll have support for sqs to be directly connected to lambda and this is",
    "start": "554640",
    "end": "560820"
  },
  {
    "text": "coming really really really soon it's gonna be really awesome so now you can have sqs directly invoke lambda do kind",
    "start": "560820",
    "end": "567029"
  },
  {
    "text": "of massive parallel processing your messages off of a queue and so that's going to be again coming here real soon",
    "start": "567029",
    "end": "574730"
  },
  {
    "text": "so some other bits here about lambda so in terms of authoring functions you can continue to use the same development",
    "start": "574730",
    "end": "580290"
  },
  {
    "start": "575000",
    "end": "575000"
  },
  {
    "text": "tools you've always used we've got plug-ins for visual studio code we've got plug-ins for Eclipse there's",
    "start": "580290",
    "end": "586350"
  },
  {
    "text": "community plug-ins for all sorts of other ideas out there we have our own ID Cloud 9 which I'll be demoing here a little bit in terms of monitoring and",
    "start": "586350",
    "end": "592830"
  },
  {
    "text": "logging this is another kind of core concept with lambda that's built-in so all you have to do is output messages",
    "start": "592830",
    "end": "598380"
  },
  {
    "text": "inside of your lambda function effectively a console dot log statement we're gonna capture that and put that",
    "start": "598380",
    "end": "603540"
  },
  {
    "text": "into Cloud trail logs for you and then also I'm starting to cloud watch logs and then in terms of metrics there's a",
    "start": "603540",
    "end": "609420"
  },
  {
    "text": "number of metrics that we captured by default but you could very easily in your code create new ones using the cloud watch api's terms of programming",
    "start": "609420",
    "end": "616350"
  },
  {
    "text": "models so this is a at the end of the day behind the scenes this is a true you know server running in the cloud",
    "start": "616350",
    "end": "621930"
  },
  {
    "text": "that you don't have to think about so you have access to processes threads there's temp storage space you can use networking sockets so again the way that",
    "start": "621930",
    "end": "628829"
  },
  {
    "text": "you've been developing applications doesn't have to change that drastically the lastly these are stateless so I",
    "start": "628829",
    "end": "634350"
  },
  {
    "text": "talked about how we will take your request we'll put it on side of a computer resource we spin up an execution environment for you what we",
    "start": "634350",
    "end": "641250"
  },
  {
    "text": "can't give you is any sort of affinity of that compute resource so you can't do for example things like sticky sessions",
    "start": "641250",
    "end": "646620"
  },
  {
    "text": "and while you do have access to stuff like temp space we kind of periodically",
    "start": "646620",
    "end": "651630"
  },
  {
    "text": "will go through and potentially have to pull back or delete the underlying instance that the lambda function is",
    "start": "651630",
    "end": "657300"
  },
  {
    "text": "executed upon and so you want to be really really careful about trying to persist any sort of data into a lambda",
    "start": "657300",
    "end": "662430"
  },
  {
    "text": "function kind of pushes upon you best practices of using a real true data store whether it be an memory cache or a true like in a",
    "start": "662430",
    "end": "669149"
  },
  {
    "text": "relational database or a no sequel database or say s3 to store your data and so because of this statelessness it",
    "start": "669149",
    "end": "675029"
  },
  {
    "text": "does change a little bit around the model of how you think about developing for lambda so going back to event",
    "start": "675029",
    "end": "681029"
  },
  {
    "start": "679000",
    "end": "679000"
  },
  {
    "text": "sources you know again we've got three different models today across this there's your so different products that can directly interface with lambda we've",
    "start": "681029",
    "end": "688439"
  },
  {
    "text": "got various data stores we've got endpoints so how many of you have an Alexa capable device at home a lot of",
    "start": "688439",
    "end": "695489"
  },
  {
    "text": "you awesome so I there's a very good chance when you ask our good friend Alexa to do something she's actually executing it",
    "start": "695489",
    "end": "701910"
  },
  {
    "text": "via a alexis skill that is powered by lambda and actually it's a really great way to get started with doing alexa",
    "start": "701910",
    "end": "707429"
  },
  {
    "text": "skills via lambda at basically no cost development management tools and then",
    "start": "707429",
    "end": "712459"
  },
  {
    "text": "event message services and actually the one there on the far bottom corner is one of my favorite you can actually have",
    "start": "712459",
    "end": "718439"
  },
  {
    "text": "scheduled lambda functions that act like prom and so in my years as a sysadmin I spent way too much time trying to do",
    "start": "718439",
    "end": "724829"
  },
  {
    "text": "highly available cron servers and dealing with failover and tracking locking and all of that and now you can",
    "start": "724829",
    "end": "729989"
  },
  {
    "text": "do it completely service ly without having to think about some of that stuff so in terms of common lambda use cases",
    "start": "729989",
    "end": "736829"
  },
  {
    "start": "734000",
    "end": "734000"
  },
  {
    "text": "it really kind of today spans almost anything you'd want to do we've got customers that are replacing say",
    "start": "736829",
    "end": "742139"
  },
  {
    "text": "traditional multi-tier Java Enterprise like applications with say single page app Web Apps so things like react and",
    "start": "742139",
    "end": "749879"
  },
  {
    "text": "view and some of the other JavaScript languages on the front end and then they've got api's in the backend power bi server lists and so you can basically",
    "start": "749879",
    "end": "756720"
  },
  {
    "text": "get rid of ever having to have any server power any part of your application with this backends for",
    "start": "756720",
    "end": "762329"
  },
  {
    "text": "mobile and IOT data processing so the ability to say pull in something like Kinesis to have it act on data in",
    "start": "762329",
    "end": "769379"
  },
  {
    "text": "near-real-time that's actually one of the biggest use cases for lambda by volume today so the customers doing many",
    "start": "769379",
    "end": "775259"
  },
  {
    "text": "many millions of invocations per day of real-time streaming processing with lambda chatbots so we're finding",
    "start": "775259",
    "end": "782249"
  },
  {
    "text": "chatbots popping up all over the place we see companies new chat BOTS both externally and internally chat BOTS for",
    "start": "782249",
    "end": "788519"
  },
  {
    "text": "example for things like internal HR tools internal facilities tools there's all sorts of things that you can do to",
    "start": "788519",
    "end": "794489"
  },
  {
    "text": "replace say a ticketing system or putting somebody on the phone with someone via chat BOTS Alexa which",
    "start": "794489",
    "end": "799949"
  },
  {
    "text": "already talked about and an IT automation which is probably where a lot of you will start to dip your toes but there's a lot of cool",
    "start": "799949",
    "end": "805560"
  },
  {
    "text": "stuff here and actually Capital One released a tool called cloud custodian which uses lambda behind the scenes as",
    "start": "805560",
    "end": "811410"
  },
  {
    "text": "part of its policy engine and so there's a lot of things that you can do from a management tool space from a compliance",
    "start": "811410",
    "end": "817620"
  },
  {
    "text": "from an audit ability from governance by plugging lambda into things for example clout rail config number the other",
    "start": "817620",
    "end": "823590"
  },
  {
    "text": "services that we have so it's got a big picture with lambda here let's get more",
    "start": "823590",
    "end": "829350"
  },
  {
    "text": "into the kind of the meat of what we're here to talk about and so we'll talk a little bit here about my good friend Sam so as we see here we've got this",
    "start": "829350",
    "end": "835620"
  },
  {
    "text": "wonderful little squirrel mascot you'll see Sam pop up all over the place this is the official mascot for service here",
    "start": "835620",
    "end": "840660"
  },
  {
    "text": "at AWS the the backstory is is a little bit of a mystery and so sometimes you'll",
    "start": "840660",
    "end": "847500"
  },
  {
    "text": "hear us come up with different reasons don't worry about the backstory just enjoy the cute little squirrel friend and again you'll see it in all sorts of",
    "start": "847500",
    "end": "854100"
  },
  {
    "text": "places for us but now Sam is actually a real thing so it stands for service application models it is a tool that you",
    "start": "854100",
    "end": "860910"
  },
  {
    "start": "856000",
    "end": "856000"
  },
  {
    "text": "can use to build and deploy surplus applications so this is a currently",
    "start": "860910",
    "end": "865920"
  },
  {
    "text": "today you consider it an extension built on top of CloudFormation so it uses CloudFormation behind the scenes but with some special resources",
    "start": "865920",
    "end": "872730"
  },
  {
    "text": "which we'll talk about here in a moment and so be chris is built on top of CloudFormation it supports essentially",
    "start": "872730",
    "end": "877980"
  },
  {
    "text": "almost anything that cloud formation can support and this is actually an open source specification we actually",
    "start": "877980",
    "end": "883890"
  },
  {
    "text": "recently just open-source the actual translator which takes the Sam code and translates it into CloudFormation and",
    "start": "883890",
    "end": "889560"
  },
  {
    "text": "we're really excited about some of the community driven pull request that we've gotten in looking at trying to expand",
    "start": "889560",
    "end": "896550"
  },
  {
    "text": "Sam so again sam's built on top of cloud formation cloud formations the service",
    "start": "896550",
    "end": "902190"
  },
  {
    "start": "899000",
    "end": "899000"
  },
  {
    "text": "that's been here at AWS for I think almost eight years now it's a template driven product where you write a template to define the resources for",
    "start": "902190",
    "end": "909390"
  },
  {
    "text": "your application or for inside of your AWS account and then you throw that into the cloud formation service and it's",
    "start": "909390",
    "end": "915000"
  },
  {
    "text": "going to do smart things like building out resources in the right order such as you have dependencies will do automatic resolution of that and so you can use it",
    "start": "915000",
    "end": "921990"
  },
  {
    "text": "to kind of track your infrastructure riyals code the kind of the entire lifecycle of that infrastructure and",
    "start": "921990",
    "end": "927630"
  },
  {
    "text": "application so it fits really well into CI NCD workflows and today we support",
    "start": "927630",
    "end": "933660"
  },
  {
    "text": "both JSON and you now if we were going to launch a service application with CloudFormation it would",
    "start": "933660",
    "end": "940109"
  },
  {
    "start": "937000",
    "end": "937000"
  },
  {
    "text": "look a little something like this here and now I'm not going to expect anyone to be able to read this it's a lot of text in a very small window this is not",
    "start": "940109",
    "end": "947160"
  },
  {
    "text": "desirable when it comes to building and launching service applications this is a whole lot of work so 80 lines of in this",
    "start": "947160",
    "end": "953129"
  },
  {
    "text": "case yamo which is a considerable amount of yem oh now if we were to take this exact same amount of CloudFormation",
    "start": "953129",
    "end": "958529"
  },
  {
    "text": "and write it in sam it looks like this so this is just about 20 so lines of",
    "start": "958529",
    "end": "963720"
  },
  {
    "text": "code again also yamo but this is an example of a Sam template and so there's a couple things that are going on inside",
    "start": "963720",
    "end": "969660"
  },
  {
    "text": "of the Sam template the very top we have our headers and the second line is the most important one that we have here",
    "start": "969660",
    "end": "975119"
  },
  {
    "text": "it's transform so CloudFormation has a concept of transforms these are basically special capabilities and cloud",
    "start": "975119",
    "end": "981329"
  },
  {
    "text": "formation that when it sees a transform header and says okay this is not a normal template this is a template that",
    "start": "981329",
    "end": "986459"
  },
  {
    "text": "I have to transform or expand into another way then what we have are two",
    "start": "986459",
    "end": "991980"
  },
  {
    "text": "different resources inside this template the first one is a service function and we see some properties related to lambda",
    "start": "991980",
    "end": "998100"
  },
  {
    "text": "the code URI the handler the runtime the policy then down below that though we have an event and we see that has an",
    "start": "998100",
    "end": "1004069"
  },
  {
    "text": "event name has an event type of API and then we see some properties there related to an API based event and so",
    "start": "1004069",
    "end": "1010220"
  },
  {
    "text": "what this top part here is going to do is build out a lambda function build out an API gateway give the policy such that",
    "start": "1010220",
    "end": "1016129"
  },
  {
    "text": "the API gateway can invoke the lambda function and then give my lambda function access for it to talk to or",
    "start": "1016129",
    "end": "1022790"
  },
  {
    "text": "give it a policy called Amazon DynamoDB read-only access the very bottom here we",
    "start": "1022790",
    "end": "1028220"
  },
  {
    "text": "have another resource called simple table and much like the name suggests this is actually a very basic dynamodb",
    "start": "1028220",
    "end": "1033769"
  },
  {
    "text": "table that'll be configured for you with a base read and write units of five each and so this very simple template again",
    "start": "1033769",
    "end": "1040548"
  },
  {
    "text": "it's gonna give you a lambda function an API gateway DynamoDB table all the permissions to glue all of this together",
    "start": "1040549",
    "end": "1046279"
  },
  {
    "text": "and again saving you from writing about another 70 or so lines of code another",
    "start": "1046279",
    "end": "1052909"
  },
  {
    "text": "way to think about this is we have an example that I'm going to show here in a little bit from an example in github",
    "start": "1052909",
    "end": "1058399"
  },
  {
    "text": "that's called Sam dance and we'll see this in a little bit and there's roughly about I think it's 16 or 17 lines of",
    "start": "1058399",
    "end": "1064519"
  },
  {
    "text": "code that expands out to seven resources inside of AWS and so this little diagram over here is",
    "start": "1064519",
    "end": "1070580"
  },
  {
    "text": "actually take it from the cloud formation designer and so you can see the resources their relation and what it",
    "start": "1070580",
    "end": "1075799"
  },
  {
    "text": "is that exists and again it's just some those about 16 or so lines of code so",
    "start": "1075799",
    "end": "1081500"
  },
  {
    "text": "again really really simplifying your life so let's talk a little bit more here about what you can do with Sam so",
    "start": "1081500",
    "end": "1087950"
  },
  {
    "start": "1084000",
    "end": "1084000"
  },
  {
    "text": "again today we have three special resources that are part of Sam function API and simple table and while you don't",
    "start": "1087950",
    "end": "1095330"
  },
  {
    "text": "have to write out all of the things that are here we pretty much expose to you almost all the capabilities and",
    "start": "1095330",
    "end": "1100509"
  },
  {
    "text": "configuration properties of the underlying resources but again what Sam does is it attempts to basically use",
    "start": "1100509",
    "end": "1106519"
  },
  {
    "text": "kind of very same defaults and pre create these resources without you having to define all of them if you were",
    "start": "1106519",
    "end": "1112250"
  },
  {
    "text": "to do this in raw CloudFormation there's a lot of these that you would have to define for example so you see here a",
    "start": "1112250",
    "end": "1117559"
  },
  {
    "text": "function and we have access to things like memory size and time out event structure tracing tags kind although all",
    "start": "1117559",
    "end": "1123889"
  },
  {
    "text": "the stuff we'd really care about if we were launching a lambda function in terms of API we've also got a number of",
    "start": "1123889",
    "end": "1129259"
  },
  {
    "text": "things that we can do here so we've got for example the ability to reference a swagger template swagger is another",
    "start": "1129259",
    "end": "1135559"
  },
  {
    "text": "templating engine for building deploying and managing AP is very common in the API world we could turn on things like",
    "start": "1135559",
    "end": "1141980"
  },
  {
    "text": "caching inside of our API gateway we could send a set our endpoint configuration there's actually a bunch",
    "start": "1141980",
    "end": "1148549"
  },
  {
    "text": "more that we can do here inside of the API definition these days the lastly",
    "start": "1148549",
    "end": "1154370"
  },
  {
    "text": "simple table and again this is a dynamodb table some of the basic properties here but again you don't have",
    "start": "1154370",
    "end": "1160250"
  },
  {
    "text": "to define all of these so pretty straightforward syntax again very",
    "start": "1160250",
    "end": "1166159"
  },
  {
    "text": "minimized from what if you were doing this in raw CloudFormation let's talk a little bit here about the event source",
    "start": "1166159",
    "end": "1171200"
  },
  {
    "start": "1170000",
    "end": "1170000"
  },
  {
    "text": "type so again we have about 30 or so events our services at AWS that can directly invoke lambda we don't have",
    "start": "1171200",
    "end": "1178159"
  },
  {
    "text": "support for all of those inside of Sam today but we hit the biggest categories of them and actually a number of the",
    "start": "1178159",
    "end": "1184159"
  },
  {
    "text": "services that support lambda today do it through Amazon SNS so that's kind of a gateway to a bunch of other capabilities",
    "start": "1184159",
    "end": "1190509"
  },
  {
    "text": "they all kind of fell out of the same structure so they you would specify them as an event they get a name there's a",
    "start": "1190509",
    "end": "1196549"
  },
  {
    "text": "type and then there's properties so all these are going to loosely look the same in terms of syntax",
    "start": "1196549",
    "end": "1202309"
  },
  {
    "text": "so for example here for s3 we see that we can define a bucket we can define the events that we care about so puts gets",
    "start": "1202309",
    "end": "1209629"
  },
  {
    "text": "and deletes and then we have the ability to specify rules so name and then you",
    "start": "1209629",
    "end": "1215149"
  },
  {
    "text": "could say either a prefix or the suffix so inside at s3 you typically are naming your objects related to some sort of key",
    "start": "1215149",
    "end": "1221330"
  },
  {
    "text": "space or you can think of it as maybe like a full during strategy inside an s3 and so this allows you to be the prefix",
    "start": "1221330",
    "end": "1227779"
  },
  {
    "text": "to find kind of a folder space inside of s3 that you care about terms of the suffix maybe we only care about certain",
    "start": "1227779",
    "end": "1233690"
  },
  {
    "text": "file types maybe we care about dot docx or dot PDF files and we don't care about anything else inside our s3 bucket for",
    "start": "1233690",
    "end": "1239960"
  },
  {
    "text": "this given lambda function and so we can specify that here in time in terms of the rules S&S pretty straightforward we",
    "start": "1239960",
    "end": "1247489"
  },
  {
    "text": "define the topic that we're going to be listening to that we're going to allow our lambda function to be invoked by Kinesis and DynamoDB also very similar",
    "start": "1247489",
    "end": "1255200"
  },
  {
    "text": "to each other we specify the stream arn and then we've got the starting position and the batch size which you can",
    "start": "1255200",
    "end": "1260239"
  },
  {
    "text": "configure let's give your api because already seeing that schedule so again",
    "start": "1260239",
    "end": "1265700"
  },
  {
    "text": "this is the cron job that you can do with lambda and so you can actually have a Sam template defines your lambda",
    "start": "1265700",
    "end": "1270739"
  },
  {
    "text": "function defines your cron schedule and it's the same syntax that you would use for cron if you've ever set up run on a",
    "start": "1270739",
    "end": "1276049"
  },
  {
    "text": "Linux or UNIX bake system and so it makes it really really easy to do that but we also support something called",
    "start": "1276049",
    "end": "1282019"
  },
  {
    "text": "rate expressions down here so you see a rate of 10 minutes or rate of 1 hour and that's gonna translate up to kind of the",
    "start": "1282019",
    "end": "1287899"
  },
  {
    "text": "standard cron syntax that you've we've known to use for years and then lastly",
    "start": "1287899",
    "end": "1294679"
  },
  {
    "text": "here again just gonna jump over some of these is Alexis skill and so this is the easiest of all you just say type Alexis",
    "start": "1294679",
    "end": "1300049"
  },
  {
    "text": "skill and this is going to allow your lambda function to be invoked by Alexa the rest of these here cloud watch",
    "start": "1300049",
    "end": "1306259"
  },
  {
    "text": "events I have T rules also pretty similar to API and to s3 certain rules",
    "start": "1306259",
    "end": "1311749"
  },
  {
    "text": "you can set but otherwise really really straightforward syntax to glue these things together now we also have a",
    "start": "1311749",
    "end": "1317929"
  },
  {
    "start": "1317000",
    "end": "1317000"
  },
  {
    "text": "development tool that we launched last summer that recently also got overhauled a bit usually previously what's called",
    "start": "1317929",
    "end": "1323239"
  },
  {
    "text": "Sam local now it's just called Sam CLI and so what Sam CLI allows you to do is actually build validate and test a",
    "start": "1323239",
    "end": "1329719"
  },
  {
    "text": "service application local in your environment so you can start at nothing both say on your workstation or your",
    "start": "1329719",
    "end": "1335509"
  },
  {
    "text": "laptop or inside a cloud 9 or any other environment that you have you can use a command called Sam in it and it will",
    "start": "1335509",
    "end": "1341630"
  },
  {
    "text": "create a tire environment for you to get started in but one of the coolest things about it why we used to call it Sam",
    "start": "1341630",
    "end": "1347090"
  },
  {
    "text": "locals do and the other key aspects about this is it actually will allow you to take your service application bundle",
    "start": "1347090",
    "end": "1352400"
  },
  {
    "text": "it up inside of a docker container and run that docker container locally as if it was mocking the lambda environment",
    "start": "1352400",
    "end": "1358100"
  },
  {
    "text": "for you and so we could do this with both a kind of a fake API gateway entry point into your lambda function we also",
    "start": "1358100",
    "end": "1364790"
  },
  {
    "text": "have the ability for you to pass invocations directly to it via is it passing or basically piping in a JSON",
    "start": "1364790",
    "end": "1371300"
  },
  {
    "text": "structure just like you would get from the other event sources that exist and so this allows you to do really really",
    "start": "1371300",
    "end": "1376640"
  },
  {
    "text": "in-depth local dev tests directly on your laptops without always having to be able to commit up to the live services",
    "start": "1376640",
    "end": "1384110"
  },
  {
    "text": "themselves so with Sam local again or Sim seal I should say pretty straightforward it's got a couple of",
    "start": "1384110",
    "end": "1390830"
  },
  {
    "text": "base commands so it has again in it allows you to create a new application from scratch package and deploy are the",
    "start": "1390830",
    "end": "1396890"
  },
  {
    "text": "two key commands for Sam that talked to CloudFormation and allow you to deploy your application the first one package",
    "start": "1396890",
    "end": "1402650"
  },
  {
    "text": "actually takes your application zips it up puts your artifact in s3 and updates your Sam template with the location of",
    "start": "1402650",
    "end": "1409640"
  },
  {
    "text": "it and then deploy actually executes a cloud formation change set create and then change execute in order to create",
    "start": "1409640",
    "end": "1416690"
  },
  {
    "text": "your environment inside a cloud formation now local invalidate or probably the two two key ones that you",
    "start": "1416690",
    "end": "1422540"
  },
  {
    "text": "use as part of an active developer so validate much like it sounds allows you to validate your Sam template is this",
    "start": "1422540",
    "end": "1427670"
  },
  {
    "text": "the correct format to have the correct values is actually really smart about making sure your Sam type ladies right and then again local is what's going to",
    "start": "1427670",
    "end": "1434390"
  },
  {
    "text": "take your environment throw it into a docker container start up the image run it locally for you or give you the",
    "start": "1434390",
    "end": "1439970"
  },
  {
    "text": "ability directly pipe events into it and so let me show you this here running so",
    "start": "1439970",
    "end": "1445220"
  },
  {
    "text": "I'm going to switch over to my laptop",
    "start": "1445220",
    "end": "1448150"
  },
  {
    "text": "demo God's always with you and you need to log into your laptop while on stage in front of a couple hundred people",
    "start": "1465750",
    "end": "1472460"
  },
  {
    "text": "there we go cool so I'm going to show you inside of cloud 9 here how this all",
    "start": "1472550",
    "end": "1478050"
  },
  {
    "text": "looks so cloud 9 again is an ide that AWS company actually we acquired and we",
    "start": "1478050",
    "end": "1484620"
  },
  {
    "text": "relaunched as an AWS product back at reinvent this past year it's a really really powerful IDE I've been doing all",
    "start": "1484620",
    "end": "1489780"
  },
  {
    "text": "my development inside of it now because it's got a number of kind of really awesome things built into it like any",
    "start": "1489780",
    "end": "1496110"
  },
  {
    "text": "other IDE we can see here I've got my text editor it does things like completion does validation and on the",
    "start": "1496110",
    "end": "1502080"
  },
  {
    "text": "fly like syntax checking a lot of good stuff here but what's really cool is kind of the integration that it has with the rest of the AMS environment so I can",
    "start": "1502080",
    "end": "1508860"
  },
  {
    "text": "actually go over here to a two Bs resources and I can actually do things like pull in other lambda functions that",
    "start": "1508860",
    "end": "1514290"
  },
  {
    "text": "I have configured right now and it will pull down the complete artifact put it into its local environment and allow me",
    "start": "1514290",
    "end": "1520110"
  },
  {
    "text": "to you know play with that code and so it's actually what I've done here so I have a environment running for an",
    "start": "1520110",
    "end": "1525810"
  },
  {
    "text": "application called Sam dance and so Sam dance does this demo that we have and",
    "start": "1525810",
    "end": "1530820"
  },
  {
    "text": "what it does is it draws a Sam on your screen and it talks back to an API that",
    "start": "1530820",
    "end": "1537090"
  },
  {
    "text": "tells it how many Sam's it should show on the screen and then they kind of bounce off of each other and move around",
    "start": "1537090",
    "end": "1542640"
  },
  {
    "text": "here and so the API is really straightforward all it does is return an integer that tells it how many Sam's you",
    "start": "1542640",
    "end": "1548250"
  },
  {
    "text": "should draw one interesting thing to note about when you have this number as high as I do and I believe this is that 255 as you can see they just kind of",
    "start": "1548250",
    "end": "1555660"
  },
  {
    "text": "like wiggle on top of each other it also is a really good way to stress out your computer and make it really hot so in",
    "start": "1555660",
    "end": "1562200"
  },
  {
    "text": "the cold months if you want to warm up your lap you fire up Sam demo ok your laptop it's like it's great I'm gonna",
    "start": "1562200",
    "end": "1568290"
  },
  {
    "text": "close this before my laptop burst into flames so I've pulled down the code for",
    "start": "1568290",
    "end": "1573360"
  },
  {
    "text": "this and actually you can find this code up in github and AW samples slash AWS",
    "start": "1573360",
    "end": "1578730"
  },
  {
    "text": "server let's am farm it's all out there so I've pulled in this environment live",
    "start": "1578730",
    "end": "1585930"
  },
  {
    "text": "from lambda and what I've got here right now is the Sam count is set to 5 what",
    "start": "1585930",
    "end": "1591300"
  },
  {
    "text": "there is is there is a multiplier so right now the multiplier is set to environment variable or it's a one and",
    "start": "1591300",
    "end": "1596630"
  },
  {
    "text": "then it's really straightforward it basically go and at some point it returns the account",
    "start": "1596630",
    "end": "1602789"
  },
  {
    "text": "that I have as well as some headers for this to go pass back through API gateway so really straightforward function I've",
    "start": "1602789",
    "end": "1610679"
  },
  {
    "text": "got a Sam template in here that's also pretty straightforward it's got some parameters that are gonna get passed in",
    "start": "1610679",
    "end": "1615860"
  },
  {
    "text": "and then it's got my resource which is just this single resource which is called get Sam party count so we can see",
    "start": "1615860",
    "end": "1622559"
  },
  {
    "text": "this is a service function it's got some very basic aspects about the function itself where the handler is the version",
    "start": "1622559",
    "end": "1629519"
  },
  {
    "text": "of nodejs the where the Cody or I would live which gets replaced during sam deploy i've got",
    "start": "1629519",
    "end": "1635820"
  },
  {
    "text": "x-ray turned on tracing active I've got my environment variables and then down below here I have my actual API event",
    "start": "1635820",
    "end": "1643169"
  },
  {
    "text": "definition and so I can go and play and hack around on this and then I can come over here to AWS resources and go up to",
    "start": "1643169",
    "end": "1650039"
  },
  {
    "text": "the top here where it shows my local function and I could say run local and so this is going to do is actually again",
    "start": "1650039",
    "end": "1657690"
  },
  {
    "text": "take my lambda function throw it into a docker container and pass in the invocation request for this lambda",
    "start": "1657690",
    "end": "1664110"
  },
  {
    "text": "function and so we see here bigger Oh",
    "start": "1664110",
    "end": "1669380"
  },
  {
    "text": "that's too big somewhere in the middle all right we've got back here my my",
    "start": "1669720",
    "end": "1675539"
  },
  {
    "text": "count of five all right so really straightforward now let's say I was going in here and I was as bad of a",
    "start": "1675539",
    "end": "1681210"
  },
  {
    "text": "developer as I am and for some reason I set Sam count to cats that is not a",
    "start": "1681210",
    "end": "1686610"
  },
  {
    "text": "valid integer way that most people think about integers and so in this case I actually get an error as we'd expect it",
    "start": "1686610",
    "end": "1693539"
  },
  {
    "text": "comes back and tells me where the error is so I can come back and say oh I accidentally set this to cats let's send",
    "start": "1693539",
    "end": "1700440"
  },
  {
    "text": "this to 20 come back run it and I get my",
    "start": "1700440",
    "end": "1707490"
  },
  {
    "text": "my updated value here and so again I could really quickly iterate on this lambda function do testing of it be able",
    "start": "1707490",
    "end": "1713970"
  },
  {
    "text": "to continue to iterate on my product all without having to leave my IDE all without having to push it up to the live",
    "start": "1713970",
    "end": "1719760"
  },
  {
    "text": "service and test it and I'm showing you now here's Sam CLI installed as part of",
    "start": "1719760",
    "end": "1725039"
  },
  {
    "text": "cloud 9 but I could just be doing this directly inside of my terminal window all the same I don't have to use cloud 9",
    "start": "1725039",
    "end": "1731789"
  },
  {
    "text": "as part of this well you should that's cool go back to slides now please",
    "start": "1731789",
    "end": "1739220"
  },
  {
    "text": "so in the question was in cloud 9 is same local running so Sam local or Sam",
    "start": "1744980",
    "end": "1750419"
  },
  {
    "text": "CLI is installed in cloud 9 and through the interface that's executing the the CLI commands it is sorry so the",
    "start": "1750419",
    "end": "1765539"
  },
  {
    "text": "squirrels moving around was in the live environment yeah ok so that was again",
    "start": "1765539",
    "end": "1771989"
  },
  {
    "text": "really quick environment here again inside a cloud 9 really easy to get started with this and then dive in and",
    "start": "1771989",
    "end": "1777570"
  },
  {
    "text": "start playing one thing that I didn't show was the Sam and it command so you can actually just fire up again a cloud",
    "start": "1777570",
    "end": "1782940"
  },
  {
    "text": "9 environment go into the terminal window so the cloud 9 runs on an ec2 instance so it gives you shell access do",
    "start": "1782940",
    "end": "1789779"
  },
  {
    "text": "say I'm in it or you could go through the GUI and create a lambda function and so I find this is probably the easiest way to get started with playing and",
    "start": "1789779",
    "end": "1795929"
  },
  {
    "text": "exploring and learning lambda is because there's basically nothing you have to install nothing you have to think about you can just dive right into it cool so",
    "start": "1795929",
    "end": "1805440"
  },
  {
    "text": "let's talk a little bit more here about Sam and about some of the capabilities so yeah this is a CloudFormation template and actually has nothing to do",
    "start": "1805440",
    "end": "1812039"
  },
  {
    "text": "with server lists but what I want you to get from this is that there are some common core capabilities of cloud formation that applies still to Sam",
    "start": "1812039",
    "end": "1818759"
  },
  {
    "text": "templates headers parameters mappings conditionals resources and outputs and so we've already talked a little bit",
    "start": "1818759",
    "end": "1825029"
  },
  {
    "text": "here about the headers and the resources but some of the rest of these sections are just as very as valuable to you so",
    "start": "1825029",
    "end": "1830669"
  },
  {
    "text": "parameters are what allows you basically at execution time to pass in data to your CloudFormation template this can be",
    "start": "1830669",
    "end": "1837330"
  },
  {
    "text": "for all sorts of use cases of you know user fed information into the template mappings are essentially a predefined",
    "start": "1837330",
    "end": "1844320"
  },
  {
    "text": "conditional case statements and we'll talk about it more about this here conditionals allow you to basically take",
    "start": "1844320",
    "end": "1849629"
  },
  {
    "text": "a look at a parameter that's passed in and decide whether or not you should do something inside of your template so",
    "start": "1849629",
    "end": "1854999"
  },
  {
    "text": "let's say that I had a parameter that was called environment and based on the environment being set to dev I want to",
    "start": "1854999",
    "end": "1860070"
  },
  {
    "text": "do one thing and being set to prod and want to do something else conditionals allow you to do that and then outputs are the actual results of",
    "start": "1860070",
    "end": "1866759"
  },
  {
    "text": "my CloudFormation stack so if my CloudFormation stack is going to create a lambda function an API gateway",
    "start": "1866759",
    "end": "1871859"
  },
  {
    "text": "endpoint dynamodb table I can go and look at the outputs and find the resources that were created I can also",
    "start": "1871859",
    "end": "1878219"
  },
  {
    "text": "take those outputs and do what's called exporting them and when you do an export that allows you to then import those",
    "start": "1878219",
    "end": "1884399"
  },
  {
    "text": "resources into another CloudFormation template without having to say pass it as a parameter so this allows you to do",
    "start": "1884399",
    "end": "1890729"
  },
  {
    "text": "all sorts of interesting cross stack resource sharing much simpler than with",
    "start": "1890729",
    "end": "1895859"
  },
  {
    "text": "having to pass it directly via parameter so again because Sam is built on top of",
    "start": "1895859",
    "end": "1902339"
  },
  {
    "start": "1899000",
    "end": "1899000"
  },
  {
    "text": "cloud formation it's pretty much anything that you could do in cloud formation so even though we only have three special resource types it doesn't",
    "start": "1902339",
    "end": "1909059"
  },
  {
    "text": "mean that you can't create inside of a Sam template say achenes to stream or define a VP C or create iam resources or",
    "start": "1909059",
    "end": "1916319"
  },
  {
    "text": "an RDS database or if you still care about servers create an ec2 instance for example all those capabilities are",
    "start": "1916319",
    "end": "1922859"
  },
  {
    "text": "supported in there it's just the VAT transform header and then the special resources that make a Sam template",
    "start": "1922859",
    "end": "1928709"
  },
  {
    "text": "unique again it supports the capabilities I just had before parameters mappings outputs etc supports",
    "start": "1928709",
    "end": "1934319"
  },
  {
    "text": "are called intrinsic functions this is kind of a core capability of CloudFormation again import/export and",
    "start": "1934319",
    "end": "1940139"
  },
  {
    "text": "you can write your Sam templates in either Y amel or JSON depending on what it is that you like to use let's talk a",
    "start": "1940139",
    "end": "1946679"
  },
  {
    "start": "1946000",
    "end": "1946000"
  },
  {
    "text": "little bit about some of the how you can put all this together do some cool stuff so inside of Lam that we have environment variables you can think",
    "start": "1946679",
    "end": "1952109"
  },
  {
    "text": "these as key value pairs that you could pass into your functions that again allow you to pass in all sorts of data",
    "start": "1952109",
    "end": "1957209"
  },
  {
    "text": "whether it be say feature flags or configuration information or even things like secrets data although we do prefer",
    "start": "1957209",
    "end": "1963599"
  },
  {
    "text": "that you use something like parameter stores secrets manager to do that today so we could take these environment",
    "start": "1963599",
    "end": "1968909"
  },
  {
    "text": "variables and you actually saw that inside of my Sam dance lambda function",
    "start": "1968909",
    "end": "1974249"
  },
  {
    "text": "it was taking in an environment variable for a multiplier on how many Sam's I should have but really really powerful",
    "start": "1974249",
    "end": "1980369"
  },
  {
    "text": "part of lambda we also have something called API gateway stage variables very",
    "start": "1980369",
    "end": "1985799"
  },
  {
    "start": "1982000",
    "end": "1982000"
  },
  {
    "text": "similar to lambda environment variables in this case it's again a key value pair",
    "start": "1985799",
    "end": "1990899"
  },
  {
    "text": "that you could pass in and then me stage variables are made available downstream to the backend for your API functions as",
    "start": "1990899",
    "end": "1998009"
  },
  {
    "text": "well as to API gateway to allow it to do some dynamic and so we could do is we can combine these two things inside of our template",
    "start": "1998009",
    "end": "2005059"
  },
  {
    "text": "the essay parameters or mappings and be able to make our templates very dynamic so we see here that I have a parameter",
    "start": "2005059",
    "end": "2012169"
  },
  {
    "start": "2011000",
    "end": "2011000"
  },
  {
    "text": "called my environment it has certain values that are allowed testing staging and prod I then down below have a",
    "start": "2012169",
    "end": "2017720"
  },
  {
    "text": "mapping and the mapping correlates actually with the various environments and then based on that I have some sort",
    "start": "2017720",
    "end": "2023059"
  },
  {
    "text": "of attribute called status and maybe you could think of this as a feature flag for my application and so inside of my",
    "start": "2023059",
    "end": "2030470"
  },
  {
    "text": "lambda function then I'm going to pass into the environment variables the environment for my function so I'm",
    "start": "2030470",
    "end": "2035480"
  },
  {
    "text": "roughing there that's an intrinsic function that exclamation ref I'm referring the parameter and then I also",
    "start": "2035480",
    "end": "2041809"
  },
  {
    "text": "have down under special feature one here another intrinsic function called find",
    "start": "2041809",
    "end": "2046970"
  },
  {
    "text": "and map and what this is going to do is it's going to say inside of the special feature one mapping pass in my",
    "start": "2046970",
    "end": "2053240"
  },
  {
    "text": "environment and pull out status and so based on if I was doing this in testing",
    "start": "2053240",
    "end": "2058878"
  },
  {
    "text": "for example status is on but if I was doing this in production status would be off and so I can do this inside of my",
    "start": "2058879",
    "end": "2065270"
  },
  {
    "text": "templates without having to change my code without having to modify my template and use this one template and",
    "start": "2065270",
    "end": "2070700"
  },
  {
    "text": "code base in all three of these environments and at the end of the day this is exactly what we want to encourage with CloudFormation",
    "start": "2070700",
    "end": "2076520"
  },
  {
    "text": "one template that can be used across any environment that you have across potentially any region that you have and",
    "start": "2076520",
    "end": "2082580"
  },
  {
    "text": "so that's a goal that you definitely want to chase after now we've got some other capabilities inside of Sam that",
    "start": "2082580",
    "end": "2089060"
  },
  {
    "start": "2086000",
    "end": "2086000"
  },
  {
    "text": "make it pretty powerful so one of these is called save deployments so inside of lambda we have a concept of what's",
    "start": "2089060",
    "end": "2094908"
  },
  {
    "text": "called alias traffic shifting it allows you basically to shift traffic towards a lambda function essentially the",
    "start": "2094909",
    "end": "2100369"
  },
  {
    "text": "invocations from one function to another and so what we can do here with Sam is",
    "start": "2100369",
    "end": "2105830"
  },
  {
    "text": "we can actually automate the deployment process such that we can safely deploy from one version of a function to a new",
    "start": "2105830",
    "end": "2110869"
  },
  {
    "text": "one ideally without impacting the majority of our customers so let's talk a little more what we can do here so",
    "start": "2110869",
    "end": "2116599"
  },
  {
    "start": "2116000",
    "end": "2116000"
  },
  {
    "text": "there's a parameter you have to specify or an attribute called auto publish alias and this is going to allow you to define an alias for your lambda function",
    "start": "2116599",
    "end": "2123109"
  },
  {
    "text": "and that's you can point your invocation sources app and then we have a deployment preference type and so we see",
    "start": "2123109",
    "end": "2128420"
  },
  {
    "text": "here a couple of predefined deployment preferences for example canary 10% 30 minutes",
    "start": "2128420",
    "end": "2133760"
  },
  {
    "text": "this says send 10% of the traffic to my new version for 30 minutes if everything",
    "start": "2133760",
    "end": "2139760"
  },
  {
    "text": "goes well increase it to a hundred percent we'll see here that if things don't go well how you can react we also",
    "start": "2139760",
    "end": "2145520"
  },
  {
    "text": "have linear configurations so we see linear 10% every 10 minutes as the name sounds every 10 minutes we're going to",
    "start": "2145520",
    "end": "2151880"
  },
  {
    "text": "increase traffic 10 percents again if things go good we'll keep increasing it if at some point things go bad we can",
    "start": "2151880",
    "end": "2157790"
  },
  {
    "text": "roll that back the ability rollback is based upon the fact that we also allow",
    "start": "2157790",
    "end": "2162800"
  },
  {
    "text": "you to do this deploy while watching certain alarms in cloud watch so you can specify key alarms inside a cloud watch",
    "start": "2162800",
    "end": "2169670"
  },
  {
    "text": "that you want to watch for such that if one of those alarms is triggered it will halt the deployment and roll it back for",
    "start": "2169670",
    "end": "2175550"
  },
  {
    "text": "you automatically and so inside of Amazon automated roll backs as part of a deploy process it's one of the key",
    "start": "2175550",
    "end": "2181250"
  },
  {
    "text": "things we do inside of our CI NCD pipelines to prevent you as customers from ever seeing failures and so we'll",
    "start": "2181250",
    "end": "2187340"
  },
  {
    "text": "roll traffic out are very very small percent let it run for a while we've got a number of alarms that we're looking",
    "start": "2187340",
    "end": "2192740"
  },
  {
    "text": "for if things go good then we continue on again if they don't we fall back we also have the ability to execute triggers",
    "start": "2192740",
    "end": "2199070"
  },
  {
    "text": "before traffic is sent to the new function and then after it and this can be used for things like put a message into slack that says deploy is happening",
    "start": "2199070",
    "end": "2206390"
  },
  {
    "text": "update your CMDB update a ticketing system there's all sorts of different things you can do as part of that and so",
    "start": "2206390",
    "end": "2212150"
  },
  {
    "text": "again this is part of safe deployments inside of Sam we also have a concept called Sam Global's and so what we see",
    "start": "2212150",
    "end": "2218990"
  },
  {
    "start": "2216000",
    "end": "2216000"
  },
  {
    "text": "here in this example of a single Sam template is I have three different lambda functions but up in the global",
    "start": "2218990",
    "end": "2225590"
  },
  {
    "text": "section what I've done here is defined a number of attributes that apply to all of these functions such that if I want",
    "start": "2225590",
    "end": "2231290"
  },
  {
    "text": "to add another function to my application I don't have to specify those attributes all over again and so",
    "start": "2231290",
    "end": "2236810"
  },
  {
    "text": "everything that exists up here and the Global's again will will roll down to all of these functions but if I wanted to overwrite them for example in a",
    "start": "2236810",
    "end": "2243410"
  },
  {
    "text": "function that's called here get Bird's function I have a timeout specified down there that timeout will take preference",
    "start": "2243410",
    "end": "2249560"
  },
  {
    "text": "over the Global's but again what this allows me to do is write even less Sam template code as part of deploying my",
    "start": "2249560",
    "end": "2256190"
  },
  {
    "text": "application we see here all that I have is basically the name the type a handler and then the event structure so again",
    "start": "2256190",
    "end": "2262640"
  },
  {
    "text": "really really simplifying and reducing the amount of code that you need to write in building and managing your service applications another helper that we have",
    "start": "2262640",
    "end": "2270860"
  },
  {
    "start": "2269000",
    "end": "2269000"
  },
  {
    "text": "is something called Sam policy templates and so we see here inside of my service function that I have a policy that",
    "start": "2270860",
    "end": "2277040"
  },
  {
    "text": "policy that's defined is called dynamodb crud policy and then it references a table name which we see down below is",
    "start": "2277040",
    "end": "2283610"
  },
  {
    "text": "from a simple table and so what this is actually going to do is expand out to a",
    "start": "2283610",
    "end": "2289430"
  },
  {
    "text": "full policy that's been predefined as part of Sam and so you can go actually into the Sam repo and you can find the",
    "start": "2289430",
    "end": "2296120"
  },
  {
    "text": "policy templates JSON and so again this one line and then a table name reference",
    "start": "2296120",
    "end": "2301790"
  },
  {
    "text": "is actually going to expand out to this full resource policy and it's in JSON and so I basically just cut off all of",
    "start": "2301790",
    "end": "2307820"
  },
  {
    "text": "the closing brackets here you can see all of the I am resource capabilities for dynamo DB that this one single line",
    "start": "2307820",
    "end": "2315890"
  },
  {
    "text": "allows us to do so again instead of writing all of this JSON or all of this yeah mul I write one line I reference my",
    "start": "2315890",
    "end": "2322280"
  },
  {
    "text": "table and it's gonna expand out to this for me again just making that much easier and we've got a whole whole slew",
    "start": "2322280",
    "end": "2328910"
  },
  {
    "text": "of these policies that exist inside of the templates JSON this is another area we've been getting really great",
    "start": "2328910",
    "end": "2334580"
  },
  {
    "text": "community feedback on how you can make this better and one of the things you'd like to see added so feel free to go in",
    "start": "2334580",
    "end": "2339770"
  },
  {
    "text": "an issue a Request or issue an issue or pull request against the repository for this so some best practices really try",
    "start": "2339770",
    "end": "2349520"
  },
  {
    "start": "2348000",
    "end": "2348000"
  },
  {
    "text": "to lean on parameters and mappings so you can have a very dynamic template again the goal that we have is that you",
    "start": "2349520",
    "end": "2354650"
  },
  {
    "text": "have one cloud formation or Sam template that could be used for your application in any environment that it runs whether",
    "start": "2354650",
    "end": "2361130"
  },
  {
    "text": "it be locally in test in prod and staging in dev in u.s. East one in US",
    "start": "2361130",
    "end": "2366860"
  },
  {
    "text": "East two in Dublin in Singapore wherever you're running lean on parameters and mappings to make that possible lean on",
    "start": "2366860",
    "end": "2374240"
  },
  {
    "text": "Global's and also those resource templates or resource policy templates to simplify what you have to write very",
    "start": "2374240",
    "end": "2380060"
  },
  {
    "text": "often when you have a service application and let's say you've got 20 lambda functions that represent an API they almost always are going to have the",
    "start": "2380060",
    "end": "2386270"
  },
  {
    "text": "same runtime environment the same timeout policies the same memory and so you could put all that up into Global's",
    "start": "2386270",
    "end": "2392420"
  },
  {
    "text": "and again reduce what you have to write inside of your template just streamline it that much more we didn't go into",
    "start": "2392420",
    "end": "2397730"
  },
  {
    "text": "imports and exports too much but you can read up about those in the cloud formation but it makes it really easy for you to say have a CloudFormation template that",
    "start": "2397730",
    "end": "2404690"
  },
  {
    "text": "defines say relational database and then be able to pass in se as an environment variable based on the environment your",
    "start": "2404690",
    "end": "2412280"
  },
  {
    "text": "application is running in which database you should connect to and so imports and exports really help with this ability",
    "start": "2412280",
    "end": "2418340"
  },
  {
    "text": "for you to have a single template that can be used in multiple places and then lastly and this is one that I always have to say you know there's a joke out",
    "start": "2418340",
    "end": "2424880"
  },
  {
    "text": "there that many people have testing environments some actually have it different than production and so think",
    "start": "2424880",
    "end": "2431120"
  },
  {
    "text": "about building out multiple environments aimed for that being kind of the beginning of your process and so really kind of start with parameters as",
    "start": "2431120",
    "end": "2437180"
  },
  {
    "text": "mappings as being a key way of inputting values and attributes into your cloud formation templates so that it's just",
    "start": "2437180",
    "end": "2442790"
  },
  {
    "text": "that much easier to do for example a dev test and prod one of the greatest aspects I think about server list is",
    "start": "2442790",
    "end": "2448310"
  },
  {
    "text": "that you only pay for what you use there's no idle so if you have various environments again testing development",
    "start": "2448310",
    "end": "2454010"
  },
  {
    "text": "pre prod that exists if you're not sending requests to them they don't cost you anything first if you had that say an ec2 or in a",
    "start": "2454010",
    "end": "2460880"
  },
  {
    "text": "container world you're paying for those environments when they're idle so again idle environments and server lists don't",
    "start": "2460880",
    "end": "2465980"
  },
  {
    "text": "cost you or shouldn't cost you anything and again makes it much easier to follow the best practices of development so in",
    "start": "2465980",
    "end": "2474560"
  },
  {
    "text": "terms of structuring service applications this is a big one it's a little bit deeper for those of you that might be newer to this we get a lot of",
    "start": "2474560",
    "end": "2480890"
  },
  {
    "text": "times people saying do I do a single function per repo do I do multiple applications inside of the same repo how",
    "start": "2480890",
    "end": "2486710"
  },
  {
    "text": "do I think about this essentially unless your function handlers unless various lambda functions that are part of the",
    "start": "2486710",
    "end": "2492560"
  },
  {
    "text": "same application need to share code put them into their own lambda function file",
    "start": "2492560",
    "end": "2498200"
  },
  {
    "text": "or their own jar for example and this is going to allow you to potentially if you ever have to split that application up",
    "start": "2498200",
    "end": "2504140"
  },
  {
    "text": "into say multiple services it makes it much easier versus if you have to pull out code from a single small codebase",
    "start": "2504140",
    "end": "2510500"
  },
  {
    "text": "and this is a great place where you to lean on things like language specific packages like NPM packages or PIP",
    "start": "2510500",
    "end": "2516200"
  },
  {
    "text": "packages or maven files or nougat packages for dotnet unless your lambda",
    "start": "2516200",
    "end": "2523220"
  },
  {
    "text": "functions share an event source completely split them into their own applications so if you have some lambda",
    "start": "2523220",
    "end": "2528350"
  },
  {
    "text": "functions that are for example taking data off of a Kinesis stream and writing data into DynamoDB",
    "start": "2528350",
    "end": "2534050"
  },
  {
    "text": "and then you have some functions that are behind an API gateway that pull data out of that DynamoDB table you actually",
    "start": "2534050",
    "end": "2540380"
  },
  {
    "text": "have two applications there you have a konista stream consuming application and you have an API based application even",
    "start": "2540380",
    "end": "2547700"
  },
  {
    "text": "though they share a common data source split those into two complete repositories two pipelines to everything",
    "start": "2547700",
    "end": "2553660"
  },
  {
    "text": "and then make that dynamodb resource something that is you know import it into each stack so that's kind of the",
    "start": "2553660",
    "end": "2560030"
  },
  {
    "text": "best practice there and then lastly it's really easy to use linting tools and syntax checking tools and Sam validate",
    "start": "2560030",
    "end": "2566390"
  },
  {
    "text": "to validate your cloud formation templates you want to do this before you commit so that you're not going into a",
    "start": "2566390",
    "end": "2572390"
  },
  {
    "text": "whole pipeline process and waiting for cloud formation to fail and all of that so do linting locally before you commit",
    "start": "2572390",
    "end": "2577640"
  },
  {
    "text": "I'll make that part of my commands that I run when I'm developing service applications and then do it again in",
    "start": "2577640",
    "end": "2582770"
  },
  {
    "text": "your CI NCD process really basic easy testing of your Sam templates that helps",
    "start": "2582770",
    "end": "2588290"
  },
  {
    "text": "you save time so we also have this thing called a service application repository",
    "start": "2588290",
    "end": "2594470"
  },
  {
    "text": "it's another great place to learn about service and share applications today you can go in there and find a couple",
    "start": "2594470",
    "end": "2600380"
  },
  {
    "text": "different app hundred applications ranging for things like Alexa skills two lambda functions that give you all sorts",
    "start": "2600380",
    "end": "2607400"
  },
  {
    "text": "of financial tooling capabilities like different calculations that you can do in mathematics and equations and the",
    "start": "2607400",
    "end": "2613640"
  },
  {
    "text": "service application repository is actually largely powered by Sam so in order to commit an application to the repository you have to have a Sam",
    "start": "2613640",
    "end": "2619910"
  },
  {
    "text": "template and so this is kind of powering this little ecosystem that we have here there's a lot of interesting stuff going",
    "start": "2619910",
    "end": "2626270"
  },
  {
    "text": "on it's only been out for about three months now but we see this being kind of one of the key ways that organizations",
    "start": "2626270",
    "end": "2631700"
  },
  {
    "text": "are starting to share code with each other for example a lot of the ISVs that we have companies like data dog and",
    "start": "2631700",
    "end": "2638300"
  },
  {
    "text": "Splunk have functions inside of the application repository that you can use in your account that allow you to better",
    "start": "2638300",
    "end": "2644000"
  },
  {
    "text": "use their services so check this out another great way to learn about you know quality service applications and",
    "start": "2644000",
    "end": "2650450"
  },
  {
    "text": "how to build them lastly pretty much everything that I've talked about here today can be found at AWS Amazon comm",
    "start": "2650450",
    "end": "2656300"
  },
  {
    "text": "service this is the home page for service that we have kind of in the middle white bar at the top there you'll",
    "start": "2656300",
    "end": "2661760"
  },
  {
    "text": "see a bunch of different links things like developer tools and resources getting started guides apps",
    "start": "2661760",
    "end": "2667610"
  },
  {
    "text": "to the service app repository and so you can start here and find all sorts of",
    "start": "2667610",
    "end": "2672740"
  },
  {
    "text": "things other talks webinars twitch videos white papers we've got all sorts of stuff there so check this out again",
    "start": "2672740",
    "end": "2680450"
  },
  {
    "text": "my name is Chris Mons I'm the lead developer advocate for server lists at AWS space down in New York City you can find me at months at amazon.com feel",
    "start": "2680450",
    "end": "2686810"
  },
  {
    "text": "free to reach out happy to help you out you can also come and nag me on Twitter to act Chris Mons always happy for a conversation there and then I'm gonna",
    "start": "2686810",
    "end": "2693680"
  },
  {
    "text": "take questions outside just so we could turn over the room for the next speaker thank you so much for coming please rate",
    "start": "2693680",
    "end": "2698720"
  },
  {
    "text": "this session and have a great rest of your day",
    "start": "2698720",
    "end": "2703540"
  }
]