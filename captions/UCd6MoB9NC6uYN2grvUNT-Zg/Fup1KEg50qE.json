[
  {
    "start": "0",
    "end": "33000"
  },
  {
    "text": "so let's get started hi my name is Deepak dyma I'm a product manager here in the container services team at AWS",
    "start": "30",
    "end": "7280"
  },
  {
    "text": "today we are going to talk about containerized app development with AWS",
    "start": "7280",
    "end": "13200"
  },
  {
    "text": "Fargate it's a technology we launched at reinvent 2017 we're excited to go over",
    "start": "13200",
    "end": "19830"
  },
  {
    "text": "some of the details of the product and not only that how to get started with it and some of the recent updates we you",
    "start": "19830",
    "end": "25800"
  },
  {
    "text": "had since launch so this is a 300 level",
    "start": "25800",
    "end": "31679"
  },
  {
    "text": "session we'll go over clickers to fast",
    "start": "31679",
    "end": "39629"
  },
  {
    "text": "so we'll go over first of all you know what is the motivation why did we build Fargate secondly apart from well sits in",
    "start": "39629",
    "end": "49500"
  },
  {
    "text": "the container ecosystem and the different layers you need to think about how to actually deploy your application",
    "start": "49500",
    "end": "55680"
  },
  {
    "text": "with Fargate and how to think about this as your data plane layer and thirdly you",
    "start": "55680",
    "end": "63870"
  },
  {
    "text": "some of the new enhancements that we have launched after the Fargate launch both for ECS and for Fargate so at first",
    "start": "63870",
    "end": "76530"
  },
  {
    "text": "we had ec2 right you could just have a virtual machine delivered via API you",
    "start": "76530",
    "end": "84150"
  },
  {
    "text": "could get as many as you wanted scale up scale down based on your requirements set up your auto scaling groups that was",
    "start": "84150",
    "end": "91079"
  },
  {
    "text": "wonderful and then came docker it enabled you to move to micro services",
    "start": "91079",
    "end": "97650"
  },
  {
    "start": "93000",
    "end": "109000"
  },
  {
    "text": "lower your footprint shift workloads across environments or data centers or",
    "start": "97650",
    "end": "103590"
  },
  {
    "text": "just run bad jobs in a very efficient way so you could now run hundreds or",
    "start": "103590",
    "end": "111720"
  },
  {
    "text": "even thousands of containers have a lower footprint of them have to provision fewer servers it's not you",
    "start": "111720",
    "end": "119460"
  },
  {
    "text": "know one application one server and have your model more agile in that way and also get the benefits of portability but",
    "start": "119460",
    "end": "129300"
  },
  {
    "start": "129000",
    "end": "146000"
  },
  {
    "text": "you still have to BIM pack them you still have Yeun for launching thousands of content you probably need a few dozen or a few",
    "start": "129300",
    "end": "137180"
  },
  {
    "text": "maybe you're a few hundred instances to launch them on so you have a bin packing problem cluster utilization and cluster",
    "start": "137180",
    "end": "144200"
  },
  {
    "text": "management problem and moreover a cluster state problem how do I know certain instance is is working for me",
    "start": "144200",
    "end": "152090"
  },
  {
    "start": "146000",
    "end": "277000"
  },
  {
    "text": "whether it's healthy or not how do i scale up and scale down that cluster while I'm launching for my applications",
    "start": "152090",
    "end": "158350"
  },
  {
    "text": "so we launched ECS what ECS does is basically there's it's a fully managed",
    "start": "158350",
    "end": "164270"
  },
  {
    "text": "for those who don't know it's a fully managed orchestration platform and enables you to do just that",
    "start": "164270",
    "end": "170660"
  },
  {
    "text": "it runs it operationalizes your containerized workloads at very high",
    "start": "170660",
    "end": "176090"
  },
  {
    "text": "scales without requiring you to install any software that runs as a master it's",
    "start": "176090",
    "end": "183470"
  },
  {
    "text": "a multi-tenant service that you can run and spin up as many clusters or services",
    "start": "183470",
    "end": "191450"
  },
  {
    "text": "or tasks underneath the placement the the the placement engine and the cluster",
    "start": "191450",
    "end": "198829"
  },
  {
    "text": "manager played different roles here the cluster manager maintains the health of the instances that are part of your",
    "start": "198829",
    "end": "205310"
  },
  {
    "text": "cluster if you set up auto scaling groups and register with your ECS",
    "start": "205310",
    "end": "210560"
  },
  {
    "text": "clusters the ACS is now aware of which what is the capacity that you now want",
    "start": "210560",
    "end": "216260"
  },
  {
    "text": "to launch your containers on whereas the placement engine enables much advanced",
    "start": "216260",
    "end": "221709"
  },
  {
    "text": "techniques for placing your tasks so that if you have a certain tasks that you want to land on a particular",
    "start": "221709",
    "end": "228500"
  },
  {
    "text": "instance type or if you want to get super efficient bin packing for better economics you can do that and finally we",
    "start": "228500",
    "end": "236239"
  },
  {
    "text": "have the scheduling and orchestration the service scheduler of ECS enables you",
    "start": "236239",
    "end": "242450"
  },
  {
    "text": "to run your containers based on the intent of the application itself you",
    "start": "242450",
    "end": "247730"
  },
  {
    "text": "want it to run as a highly available service that spans multiple availability zones you can do that it manages the",
    "start": "247730",
    "end": "256669"
  },
  {
    "text": "task queue based on the metrics as well so if you want to have to launch more",
    "start": "256669",
    "end": "261829"
  },
  {
    "text": "containers for your application to horizontally scale for incoming traffic for example",
    "start": "261830",
    "end": "267500"
  },
  {
    "text": "does that automatically without you having to worry about it so that's the that's the purpose of",
    "start": "267500",
    "end": "274010"
  },
  {
    "text": "these different components yet you find that you still end up managing more than",
    "start": "274010",
    "end": "280730"
  },
  {
    "start": "277000",
    "end": "312000"
  },
  {
    "text": "just containers if you really look over here you're running two containers that are running or other tasks here a task",
    "start": "280730",
    "end": "287690"
  },
  {
    "text": "by the way is a collection of containers that run together as a unit of your application so in this case you have any",
    "start": "287690",
    "end": "294290"
  },
  {
    "text": "c2 instance you're launching tasks on it and to support that you have to manage the operating system you have the docker",
    "start": "294290",
    "end": "301280"
  },
  {
    "text": "agent the ECS agent which is an open source component but you need require it",
    "start": "301280",
    "end": "306530"
  },
  {
    "text": "to register your ECS instances with your cluster so there's patching and",
    "start": "306530",
    "end": "313700"
  },
  {
    "start": "312000",
    "end": "322000"
  },
  {
    "text": "upgrading OS the agents and scaling the fleet for our optimization that all that",
    "start": "313700",
    "end": "318710"
  },
  {
    "text": "is required at the same time so you still have multiple layers of Management",
    "start": "318710",
    "end": "324680"
  },
  {
    "start": "322000",
    "end": "345000"
  },
  {
    "text": "and this is some this is what your layers of management end up looking like you have a completely managed",
    "start": "324680",
    "end": "332140"
  },
  {
    "text": "orchestration or container management layer at the same time you have these different layers of software management",
    "start": "332140",
    "end": "337970"
  },
  {
    "text": "just to run your applications you all you wanted here was to just run",
    "start": "337970",
    "end": "343220"
  },
  {
    "text": "containers and Fargate enables you to do just that so if you notice over here",
    "start": "343220",
    "end": "348470"
  },
  {
    "text": "there's no management of instances your infrastructure is ready to scale as your",
    "start": "348470",
    "end": "354919"
  },
  {
    "text": "application is there is no sort of two levels of management of scale anymore",
    "start": "354919",
    "end": "360169"
  },
  {
    "text": "you only define your requirements for the application in terms of a task how",
    "start": "360169",
    "end": "367610"
  },
  {
    "text": "how should the service scale what are the metrics we care about and how many more such containers are tasks do you",
    "start": "367610",
    "end": "375500"
  },
  {
    "text": "want ECS to launch so that brought us to a Tobias far gate we built it and",
    "start": "375500",
    "end": "382160"
  },
  {
    "text": "launched in November 2017 and the",
    "start": "382160",
    "end": "387440"
  },
  {
    "text": "benefits are it's completely managed infrastructure you don't have to worry about patching or upgrading or have to",
    "start": "387440",
    "end": "394370"
  },
  {
    "text": "worry about well how do I pick the right instance type instance size and get the right bin packing for my cluster",
    "start": "394370",
    "end": "401180"
  },
  {
    "text": "or anticipate for unknown Peaks that I will see in my as part of my my",
    "start": "401180",
    "end": "409460"
  },
  {
    "text": "application so and it is fully integrated with the AWS ecosystem so we",
    "start": "409460",
    "end": "415910"
  },
  {
    "text": "have over the years invested in making the task or the container a first level",
    "start": "415910",
    "end": "423250"
  },
  {
    "text": "primitive as of the AWS platform which means when it comes to I am resources or",
    "start": "423250",
    "end": "429290"
  },
  {
    "text": "networking or be able to have integration with load balancers on",
    "start": "429290",
    "end": "435200"
  },
  {
    "text": "digression with the VA wsv PC that is all built into ECS and interviews forget",
    "start": "435200",
    "end": "441710"
  },
  {
    "text": "takes advantage of that so your ecosystem looks something like this",
    "start": "441710",
    "end": "447830"
  },
  {
    "text": "this these are the services that we offer for container management when it comes to container management you have",
    "start": "447830",
    "end": "454120"
  },
  {
    "text": "two different variants we announce Amazon Elastic service for kubernetes",
    "start": "454120",
    "end": "460070"
  },
  {
    "text": "called Amazon eks at reinvent it's in",
    "start": "460070",
    "end": "465220"
  },
  {
    "text": "preview right now and we do plan to launch it sometime later this year we",
    "start": "465220",
    "end": "471980"
  },
  {
    "text": "also have Amazon ECS which we have which by which I introduced a little earlier at the same time you have based",
    "start": "471980",
    "end": "478670"
  },
  {
    "text": "regardless of which orchestration platform you choose based on your preferences or the existing tool chain",
    "start": "478670",
    "end": "485170"
  },
  {
    "text": "you can choose one of two different launch types you have an Amazon ec2",
    "start": "485170",
    "end": "490790"
  },
  {
    "text": "launch type which was the pre Fargate only flavor that was available and now",
    "start": "490790",
    "end": "496370"
  },
  {
    "text": "you also have a double use Fargate today you can launch on forget only using ECS",
    "start": "496370",
    "end": "502880"
  },
  {
    "text": "I do want to note that at a later time we will also support that for Amazon eks",
    "start": "502880",
    "end": "508670"
  },
  {
    "text": "and then there's you need to store your images somewhere your containers",
    "start": "508670",
    "end": "513979"
  },
  {
    "text": "containerized images can be stored on Amazon ECR the elastic container",
    "start": "513980",
    "end": "519080"
  },
  {
    "text": "registry you can use it regardless of which Orchestrator you are using some of our customers even use it for you know",
    "start": "519080",
    "end": "525650"
  },
  {
    "text": "Yunnan pram or something that they just run you know locally on AWS without any",
    "start": "525650",
    "end": "531170"
  },
  {
    "text": "Orchestrator for example so it it's really Universal in that sense so",
    "start": "531170",
    "end": "538520"
  },
  {
    "start": "538000",
    "end": "593000"
  },
  {
    "text": "who's using Fargate it's been three months four months producthunt it's a marketing toolkit for for makers",
    "start": "538520",
    "end": "547940"
  },
  {
    "text": "for people to be able to ship products they moved all in on Fargate and on AWS",
    "start": "547940",
    "end": "554660"
  },
  {
    "text": "as a result of Fargate earlier this year they started with the POC and their",
    "start": "554660",
    "end": "561410"
  },
  {
    "text": "requirements were not uncommon they wanted to manage as as as low",
    "start": "561410",
    "end": "569090"
  },
  {
    "text": "infrastructure as possible while still regaining control over the network policy and the security of the",
    "start": "569090",
    "end": "576560"
  },
  {
    "text": "application that they are deploying so the thing that liked about Fargate was",
    "start": "576560",
    "end": "582380"
  },
  {
    "text": "it scaled quickly for the production traffic when they did a POC they could run multiple services in a highly highly",
    "start": "582380",
    "end": "588890"
  },
  {
    "text": "available manner in the ECS clusters their architecture looks something like",
    "start": "588890",
    "end": "594710"
  },
  {
    "start": "593000",
    "end": "675000"
  },
  {
    "text": "this so far get not only solves their abstraction of infrastructure and how",
    "start": "594710",
    "end": "601640"
  },
  {
    "text": "containers run but it also gave gives them control over the networking and the",
    "start": "601640",
    "end": "607280"
  },
  {
    "text": "policies that they can set for example our integrations that we have built with VPC enables you to do routing between",
    "start": "607280",
    "end": "614450"
  },
  {
    "text": "Fargate tasks just like your ec2 instances can route use the routing table you can implement your security",
    "start": "614450",
    "end": "620990"
  },
  {
    "text": "groups policies just like you do for your ec2 instances or at a ini level",
    "start": "620990",
    "end": "626120"
  },
  {
    "text": "because each forget tasks gets an en I we get into networking a little bit later but that fulfill their",
    "start": "626120",
    "end": "632120"
  },
  {
    "text": "requirements this is not something that they were able to get based on some",
    "start": "632120",
    "end": "637490"
  },
  {
    "text": "higher level abstraction platforms that they were looking at so far gates have really met the sweet spot there now in",
    "start": "637490",
    "end": "646850"
  },
  {
    "text": "this case they are they are running multiple services they have node based front-end and using rails and graph QL",
    "start": "646850",
    "end": "655220"
  },
  {
    "text": "back-end for for them they actually used the notion of ECS services which is very",
    "start": "655220",
    "end": "662180"
  },
  {
    "text": "common it has integrated with the load balancer offerings that we have so your tasks",
    "start": "662180",
    "end": "667970"
  },
  {
    "text": "register as backends for the load balancers automatically as part of the ECS integration here are some of the",
    "start": "667970",
    "end": "676790"
  },
  {
    "start": "675000",
    "end": "705000"
  },
  {
    "text": "other customers the first quote you find on the right is the is from producthunt",
    "start": "676790",
    "end": "683980"
  },
  {
    "text": "shim ohn or on the other hand is as a very straightforward answer is that we just don't want to be in the business of",
    "start": "683980",
    "end": "689959"
  },
  {
    "text": "managing clusters it's not what our focus is you know you just want to launch your applications so some of our",
    "start": "689959",
    "end": "696589"
  },
  {
    "text": "customers have have worked with us launched and Fargate their production workloads and also given us very",
    "start": "696589",
    "end": "702860"
  },
  {
    "text": "valuable feedback so now we will get into ok so how do I run my containers",
    "start": "702860",
    "end": "709699"
  },
  {
    "start": "705000",
    "end": "744000"
  },
  {
    "text": "with Fargate the first is let's just talk about some of the constructs and it",
    "start": "709699",
    "end": "715879"
  },
  {
    "text": "is important to note here that from a service standpoint Fargate is not a different service that you have a",
    "start": "715879",
    "end": "722689"
  },
  {
    "text": "different endpoint that you have to hit per se you use your Orchestrator and",
    "start": "722689",
    "end": "727699"
  },
  {
    "text": "those are the api's and that is the interface you work with when launching your containers on Fargate it's just",
    "start": "727699",
    "end": "733970"
  },
  {
    "text": "that you have to do much fewer steps now because you don't have any of the other cluster setup involved anymore",
    "start": "733970",
    "end": "742930"
  },
  {
    "text": "so the first construct is task definition it's how you define your application this includes all the",
    "start": "743649",
    "end": "751189"
  },
  {
    "start": "744000",
    "end": "774000"
  },
  {
    "text": "different container images that you want us want us to launch from it includes the networking policy it includes how",
    "start": "751189",
    "end": "758660"
  },
  {
    "text": "you want us to do logging we cover all of these areas in greater detail later in the presentation",
    "start": "758660",
    "end": "764500"
  },
  {
    "text": "but this is essentially the schema that you give that you define to define what",
    "start": "764500",
    "end": "769759"
  },
  {
    "text": "the application should be now the second",
    "start": "769759",
    "end": "776059"
  },
  {
    "text": "is a cluster a cluster aid until we launch Fargate a cluster really meant a cluster of capacity ec2 instances and",
    "start": "776059",
    "end": "783139"
  },
  {
    "text": "you know how much you're using as part of the cluster with Fargate especially if you Roo use a cluster which has no",
    "start": "783139",
    "end": "789949"
  },
  {
    "text": "capacity or no easy to launch types is just a administrative boundary now and I'll get into how the permissions are",
    "start": "789949",
    "end": "796519"
  },
  {
    "text": "the cluster level work but now you simply specify this is the administrative boundary",
    "start": "796519",
    "end": "801560"
  },
  {
    "text": "in which a environment is set up for example you can have a deaf cluster a",
    "start": "801560",
    "end": "806660"
  },
  {
    "text": "prod cluster just for separation of application same application perhaps in",
    "start": "806660",
    "end": "812300"
  },
  {
    "text": "these different environments a task is",
    "start": "812300",
    "end": "817640"
  },
  {
    "start": "816000",
    "end": "895000"
  },
  {
    "text": "an instantiation of your task definition it's a collection of containers up to",
    "start": "817640",
    "end": "823970"
  },
  {
    "text": "ten containers that you can run together it's a unit of your application you can",
    "start": "823970",
    "end": "829220"
  },
  {
    "text": "add some of the utility software to go with your application as a different container they all share the same",
    "start": "829220",
    "end": "835460"
  },
  {
    "text": "networking interface they so you can apply a uniform policy to them and you",
    "start": "835460",
    "end": "842270"
  },
  {
    "text": "also have the notion of a service this is where the service scheduler comes in the service scheduler maintains the",
    "start": "842270",
    "end": "849080"
  },
  {
    "text": "desired state of your application how many tasks do you want to run do you want to run three tasks in each AZ and",
    "start": "849080",
    "end": "857540"
  },
  {
    "text": "in three availability zones all together service scheduler make sure that that is",
    "start": "857540",
    "end": "863089"
  },
  {
    "text": "the case we replace tasks that have that have gone unhealthy with new ones and",
    "start": "863089",
    "end": "868280"
  },
  {
    "text": "launch them and place them so let's now get into task definition over here you",
    "start": "868280",
    "end": "876050"
  },
  {
    "text": "have task definition you it's an immutable version document so you can",
    "start": "876050",
    "end": "881450"
  },
  {
    "text": "have a within a task definition you can have several revisions whenever you change it you can actually do a trigger",
    "start": "881450",
    "end": "887690"
  },
  {
    "text": "and your deployment and be able to have a replace your existing tasks within the",
    "start": "887690",
    "end": "896300"
  },
  {
    "start": "895000",
    "end": "930000"
  },
  {
    "text": "task definition you specify where you want us to launch or pull the container images from ECR is works with Fargate",
    "start": "896300",
    "end": "906560"
  },
  {
    "text": "right of the box the other registry we support are all public registries that",
    "start": "906560",
    "end": "912770"
  },
  {
    "text": "you can use we are also working on supporting third party public registry so if you have something that's username",
    "start": "912770",
    "end": "920060"
  },
  {
    "text": "password base sitting in your V PC and you want to use that instead of ECR we will be enabling that use case soon as",
    "start": "920060",
    "end": "927410"
  },
  {
    "text": "well now on the compute side you know",
    "start": "927410",
    "end": "933380"
  },
  {
    "start": "930000",
    "end": "939000"
  },
  {
    "text": "forget being primarily the container compute primitive so running",
    "start": "933380",
    "end": "939569"
  },
  {
    "text": "the easiest orchestration itself continues to be at no additional charge you only pay for what you use at the",
    "start": "939569",
    "end": "946529"
  },
  {
    "text": "request at the task level and the dimensions that we use today are CPU and",
    "start": "946529",
    "end": "953370"
  },
  {
    "text": "memory so you define what should my task level CPU and memory be and your",
    "start": "953370",
    "end": "961170"
  },
  {
    "text": "configurations can range from as low as 0.5% ooh that but essentially this is of",
    "start": "961170",
    "end": "968879"
  },
  {
    "text": "the size within which all your containers share the same resources",
    "start": "968879",
    "end": "974930"
  },
  {
    "text": "prior to that you always had container level resources which is what you define as limits for soft limits or hard limits",
    "start": "975379",
    "end": "984420"
  },
  {
    "start": "976000",
    "end": "1004000"
  },
  {
    "text": "for your containers so that you know when you know when your container exceeds a certain hard limit maybe",
    "start": "984420",
    "end": "989759"
  },
  {
    "text": "something is off but you can continue to define that at the container level yet",
    "start": "989759",
    "end": "995100"
  },
  {
    "text": "your containers will all still share the same task level resources you have defined because that's what you pay for",
    "start": "995100",
    "end": "1003670"
  },
  {
    "start": "1004000",
    "end": "1030000"
  },
  {
    "text": "we have 50 different configurations supported today for each of the CPU options you can based on your memory",
    "start": "1004610",
    "end": "1013089"
  },
  {
    "text": "memory heavy or CPU intensive workloads you can pick your CPU to memory ratio",
    "start": "1013089",
    "end": "1019160"
  },
  {
    "text": "and a particular configuration among these and you can go as high as 30 GB",
    "start": "1019160",
    "end": "1024798"
  },
  {
    "text": "for memory and as low as 512 MB so what",
    "start": "1024799",
    "end": "1031159"
  },
  {
    "start": "1030000",
    "end": "1069000"
  },
  {
    "text": "from from pricing perspective you only pay for what you provision which means",
    "start": "1031159",
    "end": "1036168"
  },
  {
    "text": "you only get billed for the time your task is running your billing begins when",
    "start": "1036169",
    "end": "1042589"
  },
  {
    "text": "your task image pool begins the in until then all the infrastructure is set up getting your Ani is ready getting a task",
    "start": "1042589",
    "end": "1049340"
  },
  {
    "text": "set up in your V PC is taken care of by Fargate and as soon as the task is terminated or or it dies your your",
    "start": "1049340",
    "end": "1057919"
  },
  {
    "text": "billing stops it's on a per second granularity and you have one minute",
    "start": "1057919",
    "end": "1063380"
  },
  {
    "text": "minimum for the billing",
    "start": "1063380",
    "end": "1066940"
  },
  {
    "text": "so let's talk about networking here so we have VPC integration what I mean by",
    "start": "1068779",
    "end": "1076350"
  },
  {
    "start": "1069000",
    "end": "1150000"
  },
  {
    "text": "that is when you launch your tasks in Fargate you specify the subnets within",
    "start": "1076350",
    "end": "1083850"
  },
  {
    "text": "your V PC that you want to launch the tasks in they the network interface that",
    "start": "1083850",
    "end": "1089070"
  },
  {
    "text": "we provision for your task is it belongs to that particular subnet so that way",
    "start": "1089070",
    "end": "1095190"
  },
  {
    "text": "your your network policies just apply as is you don't have to change anything",
    "start": "1095190",
    "end": "1100379"
  },
  {
    "text": "over there under the hood what do we do we actually provision a and I a",
    "start": "1100379",
    "end": "1106049"
  },
  {
    "text": "networking interface which is allocated from which gets allocated a private IP",
    "start": "1106049",
    "end": "1112169"
  },
  {
    "text": "from your subnet the eni is attached as part of your task set of workflow we",
    "start": "1112169",
    "end": "1118590"
  },
  {
    "text": "take care of setting up provisioning as well as D provisioning when your task terminates for example so this is this",
    "start": "1118590",
    "end": "1125279"
  },
  {
    "text": "process rather transparent from a user's perspective but once you have a private",
    "start": "1125279",
    "end": "1131220"
  },
  {
    "text": "IP your task is ready to do image pose and be able to talk to the outside wall",
    "start": "1131220",
    "end": "1136859"
  },
  {
    "text": "you can optionally also specify a public IP for your tasks if that's something",
    "start": "1136859",
    "end": "1143970"
  },
  {
    "text": "that you need for your particular application so here's the VPC",
    "start": "1143970",
    "end": "1151619"
  },
  {
    "start": "1150000",
    "end": "1236000"
  },
  {
    "text": "configuration if you look at it the networking mode here is AWS VPC this is",
    "start": "1151619",
    "end": "1157919"
  },
  {
    "text": "a mode that was launched again at reinvent what this are actually a couple",
    "start": "1157919",
    "end": "1163649"
  },
  {
    "text": "of weeks before rain went but what this mode does is basically we had bridge and",
    "start": "1163649",
    "end": "1169019"
  },
  {
    "text": "host mode until then where your tasks would share the same networking",
    "start": "1169019",
    "end": "1174899"
  },
  {
    "text": "interface for for communicating outside but with this networking mode what we",
    "start": "1174899",
    "end": "1182100"
  },
  {
    "text": "call a SS V PC its dedicated eni to each task so your network policy an",
    "start": "1182100",
    "end": "1189539"
  },
  {
    "text": "application policy can now actually be the same you're not reduced to lowest common denominator you get better performance",
    "start": "1189539",
    "end": "1198320"
  },
  {
    "text": "and other features like that come with the Eni like BBC flow logs just work as",
    "start": "1199290",
    "end": "1204450"
  },
  {
    "text": "is so in this case for the task definition I've specified the networking",
    "start": "1204450",
    "end": "1210600"
  },
  {
    "text": "configuration I've given the subnet ID so it's important to note that if you",
    "start": "1210600",
    "end": "1215850"
  },
  {
    "text": "want a multi easy application you specify subnets that are in different",
    "start": "1215850",
    "end": "1222810"
  },
  {
    "text": "Ozzy's and that's sort of an implicit multi easy deployment that you get out of it you don't have to separately we",
    "start": "1222810",
    "end": "1229830"
  },
  {
    "text": "have to specify those availability zones",
    "start": "1229830",
    "end": "1234769"
  },
  {
    "start": "1236000",
    "end": "1346000"
  },
  {
    "text": "so with respect to the internet access that Eni is used for all inbound and",
    "start": "1236780",
    "end": "1242490"
  },
  {
    "text": "outbound of access so you have to talk to other AWS resources for example which",
    "start": "1242490",
    "end": "1247950"
  },
  {
    "text": "may not have a private link yet you have or have to talk to the outside world you need to you use the TAS key and I we use",
    "start": "1247950",
    "end": "1256590"
  },
  {
    "text": "it for image pulls as well so any image that you provide as part of your task",
    "start": "1256590",
    "end": "1262230"
  },
  {
    "text": "definition we use your net the networking interface belonging to the tasks so that the networking policies",
    "start": "1262230",
    "end": "1269640"
  },
  {
    "text": "apply and also we use that for pushing logs to cloud watch log so there are two",
    "start": "1269640",
    "end": "1277740"
  },
  {
    "text": "common modes of setup we'll go over each one of those the first one is a private one with with no internet traffic but it",
    "start": "1277740",
    "end": "1287370"
  },
  {
    "text": "you do want to be able to talk to the outside world for the endpoints that I mentioned before the second one is a",
    "start": "1287370",
    "end": "1292650"
  },
  {
    "text": "public one so in the private task setup you have Annie and I over here you have",
    "start": "1292650",
    "end": "1298970"
  },
  {
    "text": "given a you have not specified public IP you have set up your nat gateway and",
    "start": "1298970",
    "end": "1304770"
  },
  {
    "text": "your internet gateway in the routing tables shown below so that your default route points to each of them the",
    "start": "1304770",
    "end": "1311730"
  },
  {
    "text": "Internet gateway sits in a public subnet and they not gateway is in actually not",
    "start": "1311730",
    "end": "1317190"
  },
  {
    "text": "gateway sits in your public subnet and your task sits in your private subnet so",
    "start": "1317190",
    "end": "1322770"
  },
  {
    "text": "the other setup you we have here is a public path setup in this case excuse me",
    "start": "1322770",
    "end": "1329070"
  },
  {
    "text": "it's rather straightforward you specify the the subnet you want us to launch the",
    "start": "1329070",
    "end": "1335290"
  },
  {
    "text": "Basking and you also specify that you would like us to use a public IP so you",
    "start": "1335290",
    "end": "1341200"
  },
  {
    "text": "say public IP is enabled for this particular task so moving on to the",
    "start": "1341200",
    "end": "1349510"
  },
  {
    "start": "1346000",
    "end": "1438000"
  },
  {
    "text": "topic of load balancing how does the elastic load balancing work I do want to",
    "start": "1349510",
    "end": "1355120"
  },
  {
    "text": "note that only the application load balancer and network load balancer is",
    "start": "1355120",
    "end": "1360160"
  },
  {
    "text": "supported not the classic load balancer with four gate so you register your target types in the",
    "start": "1360160",
    "end": "1366940"
  },
  {
    "text": "same way you used to as you did earlier but you do want to note one thing is that from a target",
    "start": "1366940",
    "end": "1373390"
  },
  {
    "text": "type perspective you cannot register an ec2 instance anymore because there's no instance to register it has to be an IP",
    "start": "1373390",
    "end": "1380200"
  },
  {
    "text": "target type that you will register so in the task definition itself you can",
    "start": "1380200",
    "end": "1385990"
  },
  {
    "text": "specify the port mappings you would like us to give sorry about the fount it",
    "start": "1385990",
    "end": "1391000"
  },
  {
    "text": "seems a little smaller than what I would expect it but essentially give us give",
    "start": "1391000",
    "end": "1396670"
  },
  {
    "text": "the port mappings within the container definition itself that that will map to your that will be registered as backends",
    "start": "1396670",
    "end": "1404140"
  },
  {
    "text": "for your load balancers so here is the",
    "start": "1404140",
    "end": "1409150"
  },
  {
    "text": "API example what you have is I'm creating a service here which needs to",
    "start": "1409150",
    "end": "1414190"
  },
  {
    "text": "register with a load balancer so that all the backends that come up as part of the service all the new tasks that are",
    "start": "1414190",
    "end": "1420670"
  },
  {
    "text": "launched registered with the with the load balance so that we have and here I have specified the load balancer",
    "start": "1420670",
    "end": "1426520"
  },
  {
    "text": "configuration include including the target group as well as the container name for which the the load balancer",
    "start": "1426520",
    "end": "1433690"
  },
  {
    "text": "will front the traffic for so this is a",
    "start": "1433690",
    "end": "1440050"
  },
  {
    "start": "1438000",
    "end": "1467000"
  },
  {
    "text": "example that you can actually use for internet-facing elastic load balancing in this case you",
    "start": "1440050",
    "end": "1447070"
  },
  {
    "text": "have a private task in a private subnet and your al be in a public public subnet and your you want to make sure that they",
    "start": "1447070",
    "end": "1455320"
  },
  {
    "text": "are in the same AC and you set up your alb rules to allow incoming traffic so",
    "start": "1455320",
    "end": "1463180"
  },
  {
    "text": "to speak to be able to speak to your task for you so in in this case you do want to note",
    "start": "1463180",
    "end": "1470110"
  },
  {
    "text": "that the task security group needs to point so that your application load",
    "start": "1470110",
    "end": "1475210"
  },
  {
    "text": "balancers as traffic is allowed into your task as part of your security group",
    "start": "1475210",
    "end": "1481570"
  },
  {
    "text": "definition so moving on to storage what are the storage options that are offered",
    "start": "1481570",
    "end": "1487300"
  },
  {
    "start": "1483000",
    "end": "1537000"
  },
  {
    "text": "today as of now for gate only supports ephemeral storage it is backed by EBS we",
    "start": "1487300",
    "end": "1496870"
  },
  {
    "text": "provide two different types over here two different volumes that are the use cases are a little different here one is",
    "start": "1496870",
    "end": "1503680"
  },
  {
    "text": "we call writable layer storage for a containers and the second is volume storage and we will just talk about that",
    "start": "1503680",
    "end": "1509830"
  },
  {
    "text": "right now from a layer storage perspective your docker images are",
    "start": "1509830",
    "end": "1514960"
  },
  {
    "text": "composed of multiple layers and the topmost layer is what you can write to it is only available to the container",
    "start": "1514960",
    "end": "1521770"
  },
  {
    "text": "other containers cannot view it but you may be writing some temporary data to it and this space available for that across",
    "start": "1521770",
    "end": "1529780"
  },
  {
    "text": "all containers is 10 GB we also have we",
    "start": "1529780",
    "end": "1537280"
  },
  {
    "start": "1537000",
    "end": "1581000"
  },
  {
    "text": "also have volume storage now you may want have use cases where you want to be",
    "start": "1537280",
    "end": "1543310"
  },
  {
    "text": "able to write to a FML storage yet the",
    "start": "1543310",
    "end": "1548350"
  },
  {
    "text": "data should be visible from different containers or they are probably writing for example logs or something for to be",
    "start": "1548350",
    "end": "1556120"
  },
  {
    "text": "emitted which is part of the same task for example so in this case you have a 4gb volume storage it can be mounted to",
    "start": "1556120",
    "end": "1563230"
  },
  {
    "text": "different if you mount a point but you it is across the task so it is 4 GB",
    "start": "1563230",
    "end": "1570340"
  },
  {
    "text": "across the task shared for all the containers you share the volume and you",
    "start": "1570340",
    "end": "1576220"
  },
  {
    "text": "do not specify the hosts pass because the source path here so again that's",
    "start": "1576220",
    "end": "1582490"
  },
  {
    "start": "1581000",
    "end": "1677000"
  },
  {
    "text": "that is also ephemeral it is terminated as soon as your task is now I do have to",
    "start": "1582490",
    "end": "1589060"
  },
  {
    "text": "warn here we will get we are getting into I am permissions is this the space may be a little more involved so bear",
    "start": "1589060",
    "end": "1597610"
  },
  {
    "text": "with me for the next you slides from a permission model point of view you have three different layers",
    "start": "1597610",
    "end": "1604390"
  },
  {
    "text": "of permissions the first is cluster level permissions which is who can actually run tasks or services or view",
    "start": "1604390",
    "end": "1612280"
  },
  {
    "text": "them within my own cluster so as I mentioned earlier cluster is now just a",
    "start": "1612280",
    "end": "1618970"
  },
  {
    "text": "administrative boundary so this is how you implement that secondly you who can",
    "start": "1618970",
    "end": "1624280"
  },
  {
    "text": "actually what are the resources that my task our application can access in the",
    "start": "1624280",
    "end": "1631120"
  },
  {
    "text": "AWS ecosystem so if I want to use a specific s3 bucket or a DynamoDB table",
    "start": "1631120",
    "end": "1636670"
  },
  {
    "text": "this is where it comes handy excuse me so we call it the task",
    "start": "1636670",
    "end": "1642520"
  },
  {
    "text": "I am robe and thirdly we call what we call as the housekeeping permissions permissions",
    "start": "1642520",
    "end": "1648270"
  },
  {
    "text": "these permissions allow us to be able to take certain actions as a service on",
    "start": "1648270",
    "end": "1654420"
  },
  {
    "text": "behalf of the application based on what you want to do for example create en",
    "start": "1654420",
    "end": "1661090"
  },
  {
    "text": "eyes as part of your task creation workflow being able to send your logs to cloud wash logs so they are under your",
    "start": "1661090",
    "end": "1667360"
  },
  {
    "text": "same account or be able to do an image pull from from Amazon ECR so so the",
    "start": "1667360",
    "end": "1678790"
  },
  {
    "start": "1677000",
    "end": "1717000"
  },
  {
    "text": "cluster level permissions you can actually tailor the permissions to be able to let's say say you know a",
    "start": "1678790",
    "end": "1685480"
  },
  {
    "text": "particular user can only have access to this particular task definition and this",
    "start": "1685480",
    "end": "1691150"
  },
  {
    "text": "is the resource that the i''m user can can access secondly you can also say",
    "start": "1691150",
    "end": "1696970"
  },
  {
    "text": "well I want to give read-only access to certain users because they just want to",
    "start": "1696970",
    "end": "1702400"
  },
  {
    "text": "view what's going on in the cluster what are the applications running but I don't want them to do run task or create",
    "start": "1702400",
    "end": "1708640"
  },
  {
    "text": "service within this particular cluster so you can use cluster level permissions",
    "start": "1708640",
    "end": "1713740"
  },
  {
    "text": "to implement those policies from application permissions point of view",
    "start": "1713740",
    "end": "1720160"
  },
  {
    "text": "this is the tasks role that I that I was speaking about so in this case your",
    "start": "1720160",
    "end": "1725200"
  },
  {
    "text": "application runs under a particular role and which one which you want us to run it as so",
    "start": "1725200",
    "end": "1731590"
  },
  {
    "text": "just like your ec2 instance can run as a roll there's the same concept here so if",
    "start": "1731590",
    "end": "1738070"
  },
  {
    "start": "1737000",
    "end": "1792000"
  },
  {
    "text": "you want to be able to get credentials down to your task or be able to access",
    "start": "1738070",
    "end": "1744460"
  },
  {
    "text": "other as I mentioned earlier then immediately be table or SNS topics you",
    "start": "1744460",
    "end": "1749830"
  },
  {
    "text": "want to use application permissions or what we call as a as a task task role to",
    "start": "1749830",
    "end": "1757900"
  },
  {
    "text": "be able to implement that you need to set up a trust relationship with ECS tasks this lets us assume the role and",
    "start": "1757900",
    "end": "1765100"
  },
  {
    "text": "pass down the credentials as as we get them and you need to add this iron to",
    "start": "1765100",
    "end": "1771790"
  },
  {
    "text": "your task definition so that we can identify which particular role you want this task to run as so this is",
    "start": "1771790",
    "end": "1780370"
  },
  {
    "text": "integrated with the enabler CLI or SDK and we all they it automatically uses",
    "start": "1780370",
    "end": "1785530"
  },
  {
    "text": "the tasks role credentials when talking to different services with an AWS the",
    "start": "1785530",
    "end": "1792370"
  },
  {
    "start": "1792000",
    "end": "1855000"
  },
  {
    "text": "next is housekeeping permissions so what I mean by that is to be able to take",
    "start": "1792370",
    "end": "1797410"
  },
  {
    "text": "certain actions on your behalf we use these permissions so there's a new role that we introduced around the",
    "start": "1797410",
    "end": "1805000"
  },
  {
    "text": "same time as we launch Fargate it's called task execution role what it does is basically it lets us send logs to",
    "start": "1805000",
    "end": "1812920"
  },
  {
    "text": "cloud wash logs or do an image pool and you will keep adding more functionality",
    "start": "1812920",
    "end": "1819040"
  },
  {
    "text": "there there which the service takes on your behalf but it's still for your account for example and then there is a",
    "start": "1819040",
    "end": "1826420"
  },
  {
    "text": "easier service linked role so I would like to you separate these two one is the first one is it's a execution role",
    "start": "1826420",
    "end": "1833830"
  },
  {
    "text": "here in the case of execution role you it's a default policy that it comes with",
    "start": "1833830",
    "end": "1839200"
  },
  {
    "text": "but you can actually modify to be able to let the service take only certain actions on your behalf the second is a",
    "start": "1839200",
    "end": "1846700"
  },
  {
    "text": "service link role which needs to actually create tasks tasks ian eyes for example and that's something that's",
    "start": "1846700",
    "end": "1852670"
  },
  {
    "text": "that's must have really so in the execution role as i mentioned earlier",
    "start": "1852670",
    "end": "1858190"
  },
  {
    "start": "1855000",
    "end": "1880000"
  },
  {
    "text": "you do a basically you can specify container read-only policy you can write to cloud",
    "start": "1858190",
    "end": "1864850"
  },
  {
    "text": "wash logs and you have to give these two permissions here in the execution role it comes as part of the default policy",
    "start": "1864850",
    "end": "1870940"
  },
  {
    "text": "and you need to establish trust with ECS tasks so you need to add that execution",
    "start": "1870940",
    "end": "1876970"
  },
  {
    "text": "role as part of your task definition now the service link role for ECS it's a",
    "start": "1876970",
    "end": "1883300"
  },
  {
    "start": "1880000",
    "end": "1929000"
  },
  {
    "text": "unique kind of a role over here because it actually is related to an AWS service",
    "start": "1883300",
    "end": "1889270"
  },
  {
    "text": "that you are using so in this case the services Amazon ECS and it is",
    "start": "1889270",
    "end": "1895990"
  },
  {
    "text": "automatically created on your behalf if you are using the console as part of your ECS cluster creation so it's",
    "start": "1895990",
    "end": "1901900"
  },
  {
    "text": "something you don't need to worry about really from a creation or set a point of view but it's definitely something to be",
    "start": "1901900",
    "end": "1908770"
  },
  {
    "text": "aware of when we talk about service link role for your for your containerized apps it has a predefined policy that we",
    "start": "1908770",
    "end": "1917260"
  },
  {
    "text": "set for the service that is required to be able to do certain actions for right",
    "start": "1917260",
    "end": "1922960"
  },
  {
    "text": "now it's specific to E and I and E lb permissions so moving on to visibility",
    "start": "1922960",
    "end": "1931150"
  },
  {
    "start": "1929000",
    "end": "1988000"
  },
  {
    "text": "and monitoring so I deployed my tasks I know how to set up networking I know how to set up the permissions how do I now",
    "start": "1931150",
    "end": "1938200"
  },
  {
    "text": "monitor now that the application is running we have options of logging so",
    "start": "1938200",
    "end": "1945520"
  },
  {
    "text": "the one that we have introduced as part of forget launch is CloudWatch logs",
    "start": "1945520",
    "end": "1950620"
  },
  {
    "text": "integration we call it the AWS logs driver so if you look in the log configuration over here you will see",
    "start": "1950620",
    "end": "1957820"
  },
  {
    "text": "that for each container you can specify which which particular stream prefix you",
    "start": "1957820",
    "end": "1963880"
  },
  {
    "text": "want the container logs to go to and the log group that you want to send us to and the region of course this is a this",
    "start": "1963880",
    "end": "1971620"
  },
  {
    "text": "is something that is supported today for Fargate and ECS but you do want to make",
    "start": "1971620",
    "end": "1978760"
  },
  {
    "text": "sure that when using cloud wash logs your policy allows for us to do that as",
    "start": "1978760",
    "end": "1985420"
  },
  {
    "text": "part of your task execution room here is a screenshot of how to actually just",
    "start": "1985420",
    "end": "1991840"
  },
  {
    "start": "1988000",
    "end": "2012000"
  },
  {
    "text": "view it in the console itself it's built you can option go to the ACA to the cloud wash locks",
    "start": "1991840",
    "end": "1997120"
  },
  {
    "text": "console but here it's built into the EC s console itself so you can look at your application your task and for each",
    "start": "1997120",
    "end": "2002970"
  },
  {
    "text": "container there's a drop down to see well what is the you know STD out for example for this particular container",
    "start": "2002970",
    "end": "2009120"
  },
  {
    "text": "within the task and you it's a nice integration you don't have to jump back and forth there are some other",
    "start": "2009120",
    "end": "2015539"
  },
  {
    "start": "2012000",
    "end": "2058000"
  },
  {
    "text": "visibility tools we also made some enhancements in the visibility area which I'll cover as part of the next",
    "start": "2015539",
    "end": "2021510"
  },
  {
    "text": "section which is the what's new section the other visibility tools we have our cloud watch events on task state changes",
    "start": "2021510",
    "end": "2030179"
  },
  {
    "text": "this is built as this was built as part of ECS itself so this is no different",
    "start": "2030179",
    "end": "2035700"
  },
  {
    "text": "whether your task is running as an ec2 launch type or a Fargate launch type we",
    "start": "2035700",
    "end": "2041669"
  },
  {
    "text": "also have service CPU and memory utilization metrics these are the metrics we use to be able to scale the",
    "start": "2041669",
    "end": "2050099"
  },
  {
    "text": "tasks based on the thresholds that you have provided or scale them in or scale them out basically launch more tasks",
    "start": "2050099",
    "end": "2057618"
  },
  {
    "text": "they are also available in cloud watch so there are some functionalities that",
    "start": "2057619",
    "end": "2062970"
  },
  {
    "start": "2058000",
    "end": "2090000"
  },
  {
    "text": "we launched recently as part of the new platform version for Fargate by the way",
    "start": "2062970",
    "end": "2069210"
  },
  {
    "text": "for each of these I do want to note that all then what's new section all the",
    "start": "2069210",
    "end": "2074730"
  },
  {
    "text": "functionality that we introduced it's really built for ECS regardless of which",
    "start": "2074730",
    "end": "2079740"
  },
  {
    "text": "launch type you use you can use choose to run on ec2 instances or or forget it doesn't matter the the features are",
    "start": "2079740",
    "end": "2086099"
  },
  {
    "text": "really for at the the container management layer so the first feature is task metadata what it does is earlier",
    "start": "2086099",
    "end": "2095339"
  },
  {
    "start": "2090000",
    "end": "2155000"
  },
  {
    "text": "you had access to the underlying ec2 instance so you could actually monitor",
    "start": "2095339",
    "end": "2101010"
  },
  {
    "text": "or try to look into what is going on in the tasks but now with Fargate there's",
    "start": "2101010",
    "end": "2106440"
  },
  {
    "text": "no notion of an instance anymore so you can actually query the task data by uniform within the task itself so",
    "start": "2106440",
    "end": "2114060"
  },
  {
    "text": "running as a container whether it's running from you know as a data dog container as a sidecar or your own your",
    "start": "2114060",
    "end": "2120720"
  },
  {
    "text": "one of your containers can simply query the stars' metadata to get all the information about what's running in the",
    "start": "2120720",
    "end": "2126599"
  },
  {
    "text": "tasks these are the two endpoints that we expose the first one we have is metadata for",
    "start": "2126599",
    "end": "2131970"
  },
  {
    "text": "the task itself it shows all the tasks and the containers when certain",
    "start": "2131970",
    "end": "2137100"
  },
  {
    "text": "containers started a tour stop that we will get into that in a second and the second one is docker stats we just omit",
    "start": "2137100",
    "end": "2142650"
  },
  {
    "text": "that we're sort of this endpoint is really sort of a pass through to see what docker stats you could access",
    "start": "2142650",
    "end": "2149400"
  },
  {
    "text": "before directly by using the docker API so these are the two endpoints you can",
    "start": "2149400",
    "end": "2156210"
  },
  {
    "text": "do it at the tasks level as well as the container level I do want to note that - this is the information part of the task",
    "start": "2156210",
    "end": "2163230"
  },
  {
    "text": "metadata just I've snipped out some container level part of it which covers",
    "start": "2163230",
    "end": "2168500"
  },
  {
    "text": "what is the task level information so one is you know what is the what is my task arm and what is the version of the",
    "start": "2168500",
    "end": "2176220"
  },
  {
    "text": "task definition that I'm running right now and what is the status for example and even the cluster name here so if you",
    "start": "2176220",
    "end": "2183570"
  },
  {
    "text": "look at the this is some of the container level information that that is",
    "start": "2183570",
    "end": "2190260"
  },
  {
    "text": "bubbled up one is you know what are the docker labels that I'm using what are the container definitions that I'm using where is the container image taken from",
    "start": "2190260",
    "end": "2197600"
  },
  {
    "text": "when did the container start stop and you know like for example when it might contain a pool begin so things like that",
    "start": "2197600",
    "end": "2204480"
  },
  {
    "text": "is are embedded into this particular information here's an example here with",
    "start": "2204480",
    "end": "2210690"
  },
  {
    "text": "one of our partners you can choose to work with any of our partners here if",
    "start": "2210690",
    "end": "2215700"
  },
  {
    "text": "that's what you're doing so here you're doing sorry about the flipped title here",
    "start": "2215700",
    "end": "2222300"
  },
  {
    "text": "but here you're doing basically monitoring with data raagh and you what",
    "start": "2222300",
    "end": "2227430"
  },
  {
    "text": "you can do is you it does dock data log auto-discovery looks for Dockery labels",
    "start": "2227430",
    "end": "2234120"
  },
  {
    "text": "for example in this case it's a reduced container and it's able to surface information for all reduced containers",
    "start": "2234120",
    "end": "2239940"
  },
  {
    "text": "that are running in your in your cluster so it auto detects your application the",
    "start": "2239940",
    "end": "2248160"
  },
  {
    "start": "2245000",
    "end": "2295000"
  },
  {
    "text": "second feature here is container health checks you can define custom health",
    "start": "2248160",
    "end": "2253440"
  },
  {
    "text": "checks sometimes it is not enough that the container is running but the question is is it healthy and uptime is",
    "start": "2253440",
    "end": "2262230"
  },
  {
    "text": "not always the same as healthy healthy container or a healthy task so what we",
    "start": "2262230",
    "end": "2267460"
  },
  {
    "text": "have introduced as part of contain health checks is docker health checks that you can specify using a custom",
    "start": "2267460",
    "end": "2274330"
  },
  {
    "text": "command as part of your container definition itself that you want us to run so that we can report whether the",
    "start": "2274330",
    "end": "2282100"
  },
  {
    "text": "container is healthy or not you can specify sort of things like timeout retries or even time you want us to wait",
    "start": "2282100",
    "end": "2288550"
  },
  {
    "text": "before we check for container health check for example excuse me and lastly",
    "start": "2288550",
    "end": "2296520"
  },
  {
    "start": "2295000",
    "end": "2336000"
  },
  {
    "text": "but not the least if it's a pretty major functionality that we launched which is",
    "start": "2296520",
    "end": "2301560"
  },
  {
    "text": "service this command its service discovery for ECS again it's available for both easy to launch type and Fargate",
    "start": "2301560",
    "end": "2308830"
  },
  {
    "text": "it's a managed service registry where your services as integrate and run with",
    "start": "2308830",
    "end": "2317400"
  },
  {
    "text": "route for route 53 auto naming service you register your backends automatically",
    "start": "2317400",
    "end": "2323350"
  },
  {
    "text": "as part of the integration and you can have multiple client backends that are",
    "start": "2323350",
    "end": "2329590"
  },
  {
    "text": "part of the same service that you get as part of the DNS capability that we have",
    "start": "2329590",
    "end": "2334890"
  },
  {
    "text": "you can span it across clusters if you want so this is how it works the first is you know route 53 provides the naming",
    "start": "2334890",
    "end": "2341950"
  },
  {
    "text": "service api's we create a namespace as part of that a private hosted zone like structure and you can have si names",
    "start": "2341950",
    "end": "2349450"
  },
  {
    "text": "per service so basically you can say for this particular service we'll have you",
    "start": "2349450",
    "end": "2356560"
  },
  {
    "text": "know IP based C names here registered what we do is as part of the task E and",
    "start": "2356560",
    "end": "2363160"
  },
  {
    "text": "I bring up when we get allocated a particular IP from a subnet we register that as back in with route 53 so as a",
    "start": "2363160",
    "end": "2372040"
  },
  {
    "start": "2371000",
    "end": "2425000"
  },
  {
    "text": "result you can actually have you know from a ECS service you see a scheduler point of view it's it's seamless where",
    "start": "2372040",
    "end": "2379630"
  },
  {
    "text": "the as part of the provisioning workflow of your task itself once your task is healthy we can use either container",
    "start": "2379630",
    "end": "2386140"
  },
  {
    "text": "health or we can use that as recently launched our DNS health doesn't matter",
    "start": "2386140",
    "end": "2391210"
  },
  {
    "text": "once it's healthy we register as a back-end to the route 53 auto naming and when you",
    "start": "2391210",
    "end": "2398099"
  },
  {
    "text": "actually query for the same application we can actually get multiple of those clients that you have multiple of those",
    "start": "2398099",
    "end": "2404520"
  },
  {
    "text": "clients registered as packets for that so this is client-side service discovery",
    "start": "2404520",
    "end": "2411270"
  },
  {
    "text": "here so just like in this case I've looked for a particular app here I'm",
    "start": "2411270",
    "end": "2417089"
  },
  {
    "text": "looking for web dot my app not local and it gives returns a this particular record for ten zero four five",
    "start": "2417089",
    "end": "2424250"
  },
  {
    "text": "what are the benefits here the first benefit is it is just it is managed you have two services that are managed",
    "start": "2424250",
    "end": "2431609"
  },
  {
    "start": "2425000",
    "end": "2464000"
  },
  {
    "text": "Amazon ECS and route 53 auto naming it you don't have to install any new",
    "start": "2431609",
    "end": "2438390"
  },
  {
    "text": "software second is it's tied to the high availability you get with route 53 as",
    "start": "2438390",
    "end": "2444720"
  },
  {
    "text": "well and secondly these are public API so it's extensible you can work across",
    "start": "2444720",
    "end": "2450270"
  },
  {
    "text": "clusters availability zones based on the high availability you want for application and it works across here AWS",
    "start": "2450270",
    "end": "2458069"
  },
  {
    "text": "services as well so with that we are coming to a conclusion of the things",
    "start": "2458069",
    "end": "2465480"
  },
  {
    "start": "2464000",
    "end": "2610000"
  },
  {
    "text": "that we covered in this presentation the first is Fargate is a new launch type",
    "start": "2465480",
    "end": "2472170"
  },
  {
    "text": "that is part of ECA that is part of that is that you can run as part of EECS",
    "start": "2472170",
    "end": "2477299"
  },
  {
    "text": "tasks you will also be able to run for eks tasks if you're thinking well should",
    "start": "2477299",
    "end": "2482700"
  },
  {
    "text": "i run my application as a easy to launch type or file gate launch type i would",
    "start": "2482700",
    "end": "2489950"
  },
  {
    "text": "strongly suggest that if you're if there's a new application you are just running it you get to what you were not",
    "start": "2489950",
    "end": "2495510"
  },
  {
    "text": "running on ec2 and you don't have specialized requirements think about using it on Fargate because there you're",
    "start": "2495510",
    "end": "2502049"
  },
  {
    "text": "making fewer assumptions about the underlying infrastructure now about dependent software that you have to",
    "start": "2502049",
    "end": "2509010"
  },
  {
    "text": "install sometimes that is not possible sometimes you need a specialized army",
    "start": "2509010",
    "end": "2514710"
  },
  {
    "text": "that you're using or a particular instance type that you care about you want to use GPUs for example and then it",
    "start": "2514710",
    "end": "2521520"
  },
  {
    "text": "totally makes sense to actually use the ec2 launch type because as you saw from",
    "start": "2521520",
    "end": "2526680"
  },
  {
    "text": "a functionality standpoint they still leverage the ECS orchestration and management",
    "start": "2526680",
    "end": "2532140"
  },
  {
    "text": "capabilities that we have so you know those are some of the considerations you",
    "start": "2532140",
    "end": "2538680"
  },
  {
    "text": "may have our eyes reserved instances or you may want to use dedicated instances sort of point in time feature",
    "start": "2538680",
    "end": "2545250"
  },
  {
    "text": "differences between the two that may dictate how which launch type you actually may go for right now also if",
    "start": "2545250",
    "end": "2553440"
  },
  {
    "text": "you have feedback word we always love to hear that that's how we built for gate because our customers told us to so it",
    "start": "2553440",
    "end": "2560580"
  },
  {
    "text": "is available in US East one we will continue to expand that in other regions",
    "start": "2560580",
    "end": "2565619"
  },
  {
    "text": "as we go on we have plans for that and you can use your existing if your",
    "start": "2565619",
    "end": "2570720"
  },
  {
    "text": "existing ECS user you can use those task definitions with very minimal changes you can actually run and run them on",
    "start": "2570720",
    "end": "2577530"
  },
  {
    "text": "Fargate today itself so with that I'll conclude this presentation we do have some Fargate",
    "start": "2577530",
    "end": "2584580"
  },
  {
    "text": "stickers over here here and at the back we also have our service team members Nate and underneath at the back if you",
    "start": "2584580",
    "end": "2592680"
  },
  {
    "text": "want to chat after the session and please do fill out the survey if you do",
    "start": "2592680",
    "end": "2598380"
  },
  {
    "text": "get a chance thank you",
    "start": "2598380",
    "end": "2601279"
  }
]