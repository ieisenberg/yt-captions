[
  {
    "start": "0",
    "end": "120000"
  },
  {
    "text": "all right Welcome to our talk uh this is uh web 306 we're going to be talking",
    "start": "599",
    "end": "6160"
  },
  {
    "text": "about uh UI testing low testing and performance testing your website on AWS",
    "start": "6160",
    "end": "12519"
  },
  {
    "text": "uh I'm Leo xowski I'm a Solutions architect at Amazon web services and I'll let Dave introduce himself yeah I'm",
    "start": "12519",
    "end": "19480"
  },
  {
    "text": "Dave moales I'm the quality assurance manager for Amazon Local so first of all why why do we low",
    "start": "19480",
    "end": "27320"
  },
  {
    "text": "test right why is it even important well the only way really see how your application is going to perform at a",
    "start": "27320",
    "end": "32840"
  },
  {
    "text": "certain level of traffic is to actually test it to that level of traffic um this",
    "start": "32840",
    "end": "38079"
  },
  {
    "text": "traditionally can be challenging to do but on AWS it's actually fairly simple uh the other really important thing is",
    "start": "38079",
    "end": "45160"
  },
  {
    "text": "when you low test your application you expose all kinds of information about your application you expose bottlenecks",
    "start": "45160",
    "end": "51920"
  },
  {
    "text": "uh you see how it performs that scale if you've built your application to be scalable you see whether it's actually",
    "start": "51920",
    "end": "57640"
  },
  {
    "text": "scaling up or down uh when it's supposed to be and what happens you know does anything break when that happens so you",
    "start": "57640",
    "end": "64640"
  },
  {
    "text": "need to do testing uh to figure that out so here's what we're going to talk",
    "start": "64640",
    "end": "70880"
  },
  {
    "text": "about today uh we're going to talk about UI testing so uh Dave is going to talk",
    "start": "70880",
    "end": "75960"
  },
  {
    "text": "about that and how uh that's done at Amazon Local uh then I'm going to talk about low testing and when you're low",
    "start": "75960",
    "end": "82439"
  },
  {
    "text": "testing on AWS there's some special uh considerations you know depending on whether you're testing a elastic load",
    "start": "82439",
    "end": "88320"
  },
  {
    "text": "balancer or Cloud front or uh whether you're testing if your auto scaling",
    "start": "88320",
    "end": "93600"
  },
  {
    "text": "groups work and then we're going to talk a little bit about performance testing so you know what data do you get from",
    "start": "93600",
    "end": "99680"
  },
  {
    "text": "your loow test how do you figure out what you need to fix what you need to optimize so we'll talk about cloudwatch",
    "start": "99680",
    "end": "105000"
  },
  {
    "text": "we'll talk about some application Monitoring Solutions that you can do so I'm going to hand it over to Dave",
    "start": "105000",
    "end": "112119"
  },
  {
    "text": "all right so I'm going to talk with you guys today about how Amazon does automated UI",
    "start": "112119",
    "end": "118039"
  },
  {
    "text": "testing um so why do automated UI testing um so uh I'm going to just go",
    "start": "118039",
    "end": "123719"
  },
  {
    "start": "120000",
    "end": "120000"
  },
  {
    "text": "ahead and answer this question and and kind of follow with a couple other follow-up questions here so why do UI",
    "start": "123719",
    "end": "128920"
  },
  {
    "text": "testing in general so the reason why we do UI testing is this interacts or this mimics how a user is going to interact",
    "start": "128920",
    "end": "135720"
  },
  {
    "text": "with your system so it's the the the most assured way of providing endtoend assurance that things are working um",
    "start": "135720",
    "end": "142000"
  },
  {
    "text": "properly so that's why we do UI testing so then why do we automate it so the",
    "start": "142000",
    "end": "147319"
  },
  {
    "text": "main reason in here is that manual testing doesn't scale so at Amazon Local we have 200,000 lines of code we're",
    "start": "147319",
    "end": "154080"
  },
  {
    "text": "deploying those 200,000 lines of code about in about one every 3",
    "start": "154080",
    "end": "159400"
  },
  {
    "text": "weeks um so when we're looking at that with that 200,000 lines of code and that's continuing to grow as we're",
    "start": "159400",
    "end": "165159"
  },
  {
    "text": "adding on features like how can we handle this without like how can we handle that scale if we're we're",
    "start": "165159",
    "end": "170760"
  },
  {
    "text": "continuing to add features so there's a couple options that we could go with we could hire more manual testers but",
    "start": "170760",
    "end": "176599"
  },
  {
    "text": "obviously that doesn't scale we could reduce what we test so maybe we're not going to test all the features that um",
    "start": "176599",
    "end": "183080"
  },
  {
    "text": "each U during each Sprint um which obviously as a quality assurance manager is not something that I'd be super happy",
    "start": "183080",
    "end": "189080"
  },
  {
    "text": "about um or we can automate the testing um so yeah and again like the",
    "start": "189080",
    "end": "195200"
  },
  {
    "text": "automated testing allows us to prevent provide end to-end assurance that everything is working",
    "start": "195200",
    "end": "201080"
  },
  {
    "text": "properly um so what do you test at the UI level so we don't like what there",
    "start": "201080",
    "end": "206560"
  },
  {
    "start": "202000",
    "end": "202000"
  },
  {
    "text": "might be a um a perception out there that well if automated testing is good we should just test everything at the UI",
    "start": "206560",
    "end": "212360"
  },
  {
    "text": "level because then that's going to give us assurance that everything's going to be working at the UI level but we actually don't do that at Amazon um so",
    "start": "212360",
    "end": "219519"
  },
  {
    "text": "we do not try to test everything at Amazon and the reason for that is if you try to add all of your tests at the UI",
    "start": "219519",
    "end": "224760"
  },
  {
    "text": "level they can actually become very difficult to maintain if your UI is changing frequently as ours is at Amazon",
    "start": "224760",
    "end": "231200"
  },
  {
    "text": "our UI changes very frequently as we're adding features so the maintenance cost of adding UI tests and updating those UI",
    "start": "231200",
    "end": "237799"
  },
  {
    "text": "tests can be high so what we to do is we actually try to take our test and then we push them down as close as we can to",
    "start": "237799",
    "end": "243439"
  },
  {
    "text": "the code um and if we can't test them at a lower level then we'll look at testing them at the UI",
    "start": "243439",
    "end": "249560"
  },
  {
    "text": "level so what do we test at the UI levels so what we'll do when we're we're",
    "start": "249560",
    "end": "254640"
  },
  {
    "text": "looking at a new feature that's going to be rolled out on Amazon locals we'll take a look at what are the tests that we want to run to make sure that that",
    "start": "254640",
    "end": "261079"
  },
  {
    "text": "that piece of code or that that feature is working then we'll look at what what level does it make sense to test it at",
    "start": "261079",
    "end": "267360"
  },
  {
    "text": "so the first thing we'll ask is can this be tested at the unit test level so can I actually just write a unit test for",
    "start": "267360",
    "end": "272880"
  },
  {
    "text": "this and then just validate that the function is working um validate that it's working at the",
    "start": "272880",
    "end": "278639"
  },
  {
    "text": "unit test level and if we can't do that then we'll look at the service level um so at the service level we'll say well",
    "start": "278639",
    "end": "284759"
  },
  {
    "text": "you know what are the tests that we can automate it at the service level and then if at that point if we can't",
    "start": "284759",
    "end": "289840"
  },
  {
    "text": "automate it at the UI or the service level then we'll look at testing it at the UI level but again we're not going",
    "start": "289840",
    "end": "294960"
  },
  {
    "text": "to try to test everything here what we' do is we'd look at all the test cases that we weren't able to test at the lower levels and then try to figure out",
    "start": "294960",
    "end": "301240"
  },
  {
    "text": "what are the most important test cases that we should be running at the uh the UI level so maybe you're just P1 and P0",
    "start": "301240",
    "end": "307759"
  },
  {
    "text": "test cases so say for example you have functionality like a login page um you",
    "start": "307759",
    "end": "313080"
  },
  {
    "text": "you'll want to automate the test cases that like absolutely just cannot break so you'll want to automate something",
    "start": "313080",
    "end": "318319"
  },
  {
    "text": "like can a a a user with valid credentials be able to log into the system and then um another one might be",
    "start": "318319",
    "end": "327000"
  },
  {
    "text": "if a user has the wrong password are they not able to log into the system so those are the types of things that we",
    "start": "327000",
    "end": "332039"
  },
  {
    "text": "would test like what are the most important things that that just cannot break um that we would look at testing",
    "start": "332039",
    "end": "337280"
  },
  {
    "text": "at the UI level um so now I'm going to talk with you about a couple of the different types of uh tests UI tests that we run",
    "start": "337280",
    "end": "344360"
  },
  {
    "text": "at Amazon so I mentioned a couple previously but here's a couple uh others that are out there so just some",
    "start": "344360",
    "end": "350120"
  },
  {
    "text": "functional test cases so uh at Amazon Local we want to make sure that somebody can get through and then place an order",
    "start": "350120",
    "end": "355560"
  },
  {
    "text": "on Amazon Local so we have a test that validates that um we might have have a test that validates that the price is",
    "start": "355560",
    "end": "361600"
  },
  {
    "text": "correct that you do something that would update the price of an item and you want to make sure that that's properly reflected in the UI um and then we might",
    "start": "361600",
    "end": "368400"
  },
  {
    "text": "have some negative test cases in there um like the can I order a sold out item",
    "start": "368400",
    "end": "374319"
  },
  {
    "text": "um so if an item is sold out you want to make sure that somebody can't go through and then purchase that sold out item so",
    "start": "374319",
    "end": "380160"
  },
  {
    "text": "those are a couple of the functional test cases that we might run at Amazon uh so in addition to those uh",
    "start": "380160",
    "end": "387280"
  },
  {
    "text": "functional tests we might actually do some display test so what we do in the display test is",
    "start": "387280",
    "end": "392360"
  },
  {
    "text": "we'll actually take a screenshot between our beta environment and our production environment and programmatically compare",
    "start": "392360",
    "end": "397599"
  },
  {
    "text": "those two screenshots to see if the two environments have changed like maybe we're pushing out some backend service",
    "start": "397599",
    "end": "403160"
  },
  {
    "text": "change and we want to make sure that the UI hasn't changed as a result of that so what we'll do is we'll we'll take the",
    "start": "403160",
    "end": "409639"
  },
  {
    "text": "screenshots of our beta and then production environments and then we programmatically compare them and then we'll get a a um a difference count on",
    "start": "409639",
    "end": "416639"
  },
  {
    "text": "the number of pixels between the two images and if uh it's above a certain threshold we might fail the test so in",
    "start": "416639",
    "end": "423319"
  },
  {
    "text": "this example here we have our production environment that's over on the left and then our beta environment on the right",
    "start": "423319",
    "end": "430160"
  },
  {
    "text": "so we'll programmatically compare those those two images and then we'll also spit out a third image that actually",
    "start": "430160",
    "end": "435199"
  },
  {
    "text": "shows us the difference sometimes it can be actually fairly difficult to figure out like you'll notice that there was a",
    "start": "435199",
    "end": "440639"
  },
  {
    "text": "pixel difference count but you can't exactly figure out where that pixel difference is so we'll spit out an image",
    "start": "440639",
    "end": "446039"
  },
  {
    "text": "like this where it actually will highlight um it'll highlight the the actual pixel differences between the two",
    "start": "446039",
    "end": "454199"
  },
  {
    "text": "images uh so what do we use for automated testing inside of Amazon Local so um how many people in the audience",
    "start": "454360",
    "end": "460599"
  },
  {
    "start": "456000",
    "end": "456000"
  },
  {
    "text": "are familiar with uh selenium web driver okay so it looks like it's a pretty good pretty good chunk of the",
    "start": "460599",
    "end": "466759"
  },
  {
    "text": "population here but um so selenium web driver for those of you that don't know is an open source UI testing tool um it",
    "start": "466759",
    "end": "473800"
  },
  {
    "text": "allows you to natively control browsers so you can do things like fill in forms click links um navigate backwards and",
    "start": "473800",
    "end": "480800"
  },
  {
    "text": "forwards um and then check Val uh various different elements in the page um it it has implementations for Firefox",
    "start": "480800",
    "end": "488240"
  },
  {
    "text": "Chrome Internet Explorer Safari Opera and then most of the mobile browsers so you can do automated testing on a a good",
    "start": "488240",
    "end": "494479"
  },
  {
    "text": "series of the different browsers that are out there um it's also been recently proposed as a W3 uh W3 standard which",
    "start": "494479",
    "end": "501520"
  },
  {
    "text": "you can read about there if you're interested um and it it's fairly ubiquitous in the industry Amazon",
    "start": "501520",
    "end": "507400"
  },
  {
    "text": "obviously uses it uh Google Facebook Apple Microsoft all use um selenium web",
    "start": "507400",
    "end": "514159"
  },
  {
    "text": "driver um so the next thing I'm going to do is I'm going to actually I'm going to just show you some code and then I'll do a little bit of a demo um so this code",
    "start": "514159",
    "end": "521000"
  },
  {
    "start": "516000",
    "end": "516000"
  },
  {
    "text": "is written in Java um so what you can see what I've done here is online one and two um I declare my um my test uh",
    "start": "521000",
    "end": "529920"
  },
  {
    "text": "annotation and then I um my test uh method declaration there on line two on",
    "start": "529920",
    "end": "535399"
  },
  {
    "text": "line four what I'm doing is I'm launching an instance of a Firefox browser uh lines five um I'm navigating",
    "start": "535399",
    "end": "542279"
  },
  {
    "text": "to the Las Vegas implementation of the Amazon Local page um Lin six um what I'm",
    "start": "542279",
    "end": "547880"
  },
  {
    "text": "doing is I'm clicking the sign-in button at the top of the page um which is going to direct me to the amazon.com login",
    "start": "547880",
    "end": "554320"
  },
  {
    "text": "page where I'm going to enter my um email address and then password and then click the signin um the signin button so",
    "start": "554320",
    "end": "561880"
  },
  {
    "text": "in this test what I'm doing is validating that I can click on the signin button and then get to the your",
    "start": "561880",
    "end": "566920"
  },
  {
    "text": "orders page and then I'm validating the um the uh the title of the page so on",
    "start": "566920",
    "end": "573480"
  },
  {
    "text": "line 12 this is actually what's called an assert for those of you that aren't familiar with what asserts are but this is where I'm actually doing the actual",
    "start": "573480",
    "end": "579959"
  },
  {
    "text": "check part of the test where I'm saying does this match this so um is anybody in",
    "start": "579959",
    "end": "587000"
  },
  {
    "text": "the crowd familiar with junit okay so can anybody see the bug in",
    "start": "587000",
    "end": "592480"
  },
  {
    "text": "my code does anybody see it okay so anyways the bug is what",
    "start": "592480",
    "end": "599680"
  },
  {
    "text": "you're supposed to do in asserts in junit is you're actually supposed to have the um the expected value on the",
    "start": "599680",
    "end": "605800"
  },
  {
    "text": "left and the actual value on the right and I got those swapped in My Demo so um",
    "start": "605800",
    "end": "612000"
  },
  {
    "text": "okay so now I'm actually just going to do a quick",
    "start": "612000",
    "end": "615920"
  },
  {
    "text": "demo Okay so here is the test uh it's that it's essentially the same code that",
    "start": "627399",
    "end": "632920"
  },
  {
    "text": "I had on the slide there's a couple things that I've done differently though um I actually added some sleeps in here",
    "start": "632920",
    "end": "638600"
  },
  {
    "text": "so it'll go a little bit slower so you can actually see what's going on um and it's actually going to fail the test",
    "start": "638600",
    "end": "643920"
  },
  {
    "text": "because the username and password that I have in here obviously not real credentials but you can kind of see what's going on so you'll notice what'll",
    "start": "643920",
    "end": "650920"
  },
  {
    "text": "happen here is it's launching the Firefox browser it'll click on the signin button",
    "start": "650920",
    "end": "657120"
  },
  {
    "text": "on the upper right hand corner of the screen it'll enter the email address the",
    "start": "657120",
    "end": "662880"
  },
  {
    "text": "password then it clicks on the signin button and then you can see that it obviously didn't get past there um so",
    "start": "662880",
    "end": "670360"
  },
  {
    "text": "then if I go back over to uh to Eclipse you can see um the the test is",
    "start": "670360",
    "end": "677200"
  },
  {
    "text": "failed is it six or is it seven yeah there we",
    "start": "678680",
    "end": "685120"
  },
  {
    "text": "go okay so um the other thing that we use at Amazon on locals we use what's",
    "start": "685120",
    "end": "690399"
  },
  {
    "start": "688000",
    "end": "688000"
  },
  {
    "text": "called a selenium grid so this allows us to actually run our tests on a machine that's different than the test the",
    "start": "690399",
    "end": "695480"
  },
  {
    "text": "machine that's actually executing the test um it also allows us to run our tests in parallel so essentially what",
    "start": "695480",
    "end": "701480"
  },
  {
    "text": "happens in a selenium grid is that you will have a hub that will communicate with various different nodes and those",
    "start": "701480",
    "end": "706920"
  },
  {
    "text": "nodes could be various different physical machines um virtual machines that connect to the node um that have a",
    "start": "706920",
    "end": "712639"
  },
  {
    "text": "certain number of browser instances that are available so what what will happen in a",
    "start": "712639",
    "end": "718440"
  },
  {
    "text": "a common scenario or tests are executed you'll have tests um on a specific machine that are executed and what",
    "start": "718440",
    "end": "724200"
  },
  {
    "text": "they'll do is they'll reach out to the hub uh and they'll say like hey I want to run these commands uh these selenium",
    "start": "724200",
    "end": "730120"
  },
  {
    "text": "commands what the Hub does is it'll cue the tests at the Hub until a browser instance becomes available on the",
    "start": "730120",
    "end": "736040"
  },
  {
    "text": "various different nodes um to run those um those various different commands so",
    "start": "736040",
    "end": "741639"
  },
  {
    "text": "I'll just kind of walk you through a quick demo here so we'll have some selenium commands that we want to run so",
    "start": "741639",
    "end": "746920"
  },
  {
    "text": "the tests are going to send those those commands over to the hub they'll be queued at the Hub until the browser",
    "start": "746920",
    "end": "752440"
  },
  {
    "text": "instance becomes available once the browser instance becomes available then it gets sent over to the",
    "start": "752440",
    "end": "759560"
  },
  {
    "text": "node so um so now how how do we do this at Amazon so one of the things that we've",
    "start": "759560",
    "end": "765720"
  },
  {
    "text": "done with Amazon or when we were looking at setting up this grid um a selenium grid for for Amazon Local and Amazon",
    "start": "765720",
    "end": "772839"
  },
  {
    "text": "what what we wanted to do was actually kind of not go with a um a a local",
    "start": "772839",
    "end": "778839"
  },
  {
    "text": "approach for our testing we didn't want to build like a a device lab that has various different browsers and you know",
    "start": "778839",
    "end": "784600"
  },
  {
    "text": "various different machines sitting in a closet someplace in Amazon uh we wanted to take our our testing infrastructure",
    "start": "784600",
    "end": "790639"
  },
  {
    "text": "and then move it to the cloud so my team I'm a quality assurance manager I manage quality insurance Engineers my team's",
    "start": "790639",
    "end": "796399"
  },
  {
    "text": "core competency isn't in in building physical Hardware um so I wanted to Offshore as much of that as I could so",
    "start": "796399",
    "end": "803040"
  },
  {
    "text": "that's why we looked at using Amazon ec2 for hosting of our grid so what we've",
    "start": "803040",
    "end": "808240"
  },
  {
    "text": "done is we've actually moved to the hub and then the various different browser nodes the different nodes into um",
    "start": "808240",
    "end": "814760"
  },
  {
    "text": "ec2 so we have um and uh we with ec2 uh",
    "start": "814760",
    "end": "821600"
  },
  {
    "text": "we have uh Windows versions 2003 2008 and 2012 which give you access to IE",
    "start": "821600",
    "end": "828880"
  },
  {
    "text": "versions 9 through 11 um and then they also allow us to install the the other various browsers Firefox and Chrome for",
    "start": "828880",
    "end": "835680"
  },
  {
    "text": "whatever versions that we need um so like I was mentioning on the previous slide um tests are cued uh at the",
    "start": "835680",
    "end": "842639"
  },
  {
    "text": "Hub but what what will happen is if you have thousands of people that are running the test um you you could see a",
    "start": "842639",
    "end": "848639"
  },
  {
    "text": "lot of tests just getting bottlenecked at the Hub waiting for browser instances to become available so what we've done is we've created Amis for our various",
    "start": "848639",
    "end": "855320"
  },
  {
    "text": "different nodes and then we can add those to the grid as needed um to increase the or decrease the time at",
    "start": "855320",
    "end": "860639"
  },
  {
    "text": "which the test run so if we need to add um various different nodes to it we can do it very",
    "start": "860639",
    "end": "866519"
  },
  {
    "text": "easily okay so how our tests executed so test are executed at a number a number",
    "start": "866519",
    "end": "871560"
  },
  {
    "text": "of different ways at Amazon so the first way might be that a developer would push uh code to a beta environment then he",
    "start": "871560",
    "end": "878199"
  },
  {
    "text": "wants to run the test to make sure that the code the code that he pushed to the beta environment is working properly so",
    "start": "878199",
    "end": "883800"
  },
  {
    "text": "a developer might execute the test on his or her desktop and then have them run against the beta environment they",
    "start": "883800",
    "end": "889560"
  },
  {
    "text": "might also run on a schedule so say they want the test to run at 1:00 in the morning they might set up like a crown",
    "start": "889560",
    "end": "894880"
  },
  {
    "text": "job or something to have the test run at a specific time um and finally they",
    "start": "894880",
    "end": "900079"
  },
  {
    "text": "might you know there's been a lot of talk this week about continuous deployment so they might run them as part of a continuous deployment",
    "start": "900079",
    "end": "906759"
  },
  {
    "text": "process so for those of you that aren't familiar with continuous deployment uh the way that I like to view it is a",
    "start": "906759",
    "end": "912160"
  },
  {
    "text": "combination between continuous integration and continuous delivery so changes made by software developers are",
    "start": "912160",
    "end": "918040"
  },
  {
    "text": "automatically integrated uh tested and pushed to production without any human",
    "start": "918040",
    "end": "923160"
  },
  {
    "text": "intervention so some of the tools that were announced at the keynote this week um code pipelines code deploy are things",
    "start": "923160",
    "end": "929120"
  },
  {
    "text": "are uh tools that we've used internally at Amazon that help us in our continuous deployment",
    "start": "929120",
    "end": "934880"
  },
  {
    "text": "process okay so I'm going to end it here with just a little bit of trivia um how many minutes of automated UI tests have",
    "start": "934880",
    "end": "941360"
  },
  {
    "start": "937000",
    "end": "937000"
  },
  {
    "text": "been run run at Amazon since July 1st so 200,000",
    "start": "941360",
    "end": "946839"
  },
  {
    "text": "300,000 1 million or 10 million can anybody take a",
    "start": "946839",
    "end": "952600"
  },
  {
    "text": "guess so it's close so it's actually 1 million so we've run over 1 million",
    "start": "953160",
    "end": "958399"
  },
  {
    "text": "automated test on ec2 um since July 1st so I'm going to hand it back over to Leo",
    "start": "958399",
    "end": "964680"
  },
  {
    "text": "and if you guys have any other questions feel free to just meet up with me at the end of the uh",
    "start": "964680",
    "end": "971000"
  },
  {
    "text": "presentation so now we're going to talk about low testing um so on AWS you can",
    "start": "975560",
    "end": "981720"
  },
  {
    "text": "easily spin up a low test environment really quickly and then turn it back off when you're not using it so you can use",
    "start": "981720",
    "end": "988519"
  },
  {
    "text": "spot pricing for this that may be you know a good strategy for for cost optimization there but it's really hard",
    "start": "988519",
    "end": "994120"
  },
  {
    "text": "to do this uh you know on premises so let's talk about some of the differences between low testing on AWS and low",
    "start": "994120",
    "end": "1001160"
  },
  {
    "text": "testing on premises so on premises it's really hard to replicate your production environment I mean you could test your",
    "start": "1001160",
    "end": "1006560"
  },
  {
    "text": "production environment that you have but if you're not really confident in your production environment you might you know break it so if you want to",
    "start": "1006560",
    "end": "1012480"
  },
  {
    "text": "replicate an exact copy of your production environment you have to have just as many servers and switches and all that stuff uh as you do in your",
    "start": "1012480",
    "end": "1018959"
  },
  {
    "text": "production environment so that's going to get expensive and difficult uh also you're typically dealing with a limited",
    "start": "1018959",
    "end": "1024760"
  },
  {
    "text": "set of IP addresses you're testing so you know you might have a load balancer you might have two load balancers for ha",
    "start": "1024760",
    "end": "1030760"
  },
  {
    "text": "they might share an IP address or have two IP addresses uh so that part is actually uh that's a little bit different than on AWS and you can have a",
    "start": "1030760",
    "end": "1037520"
  },
  {
    "text": "bottleneck in your network layer so if you saturate you know your load balancers uh network capacity for",
    "start": "1037520",
    "end": "1043720"
  },
  {
    "text": "example uh on premises you're going to have to get a bigger load balance for you know it's it's really hard to get past that without buying new hardware uh",
    "start": "1043720",
    "end": "1050960"
  },
  {
    "text": "on AWS you can replicate your production environment really quickly and really easily uh and you only pay for you know",
    "start": "1050960",
    "end": "1058440"
  },
  {
    "text": "however many hours of it you use uh you can use spot pricing sometimes you depending on how you set things up so",
    "start": "1058440",
    "end": "1063960"
  },
  {
    "text": "you can do a lot of things there uh you can use automation so you can use cloud formation or you know Chef or puppet or",
    "start": "1063960",
    "end": "1069720"
  },
  {
    "text": "opsw works or elastic beant stock or some combination of those things uh to just recreate exact copies of your",
    "start": "1069720",
    "end": "1075919"
  },
  {
    "text": "production environment that's really important because the the only way to you know actually accurately low test uh",
    "start": "1075919",
    "end": "1082320"
  },
  {
    "text": "is to have an exact copy of what you're doing in production um each layer of your app can be designed to be scalable",
    "start": "1082320",
    "end": "1089039"
  },
  {
    "text": "so you can Auto scale your web tier your app tier your elastic load balancers",
    "start": "1089039",
    "end": "1094880"
  },
  {
    "text": "scale themselves which we'll we'll talk about in a little bit um and your IP addresses are going to be variable so",
    "start": "1094880",
    "end": "1101000"
  },
  {
    "text": "that's really important uh and that changes how you load tests so on elastic load balancers uh it's a scalable",
    "start": "1101000",
    "end": "1107960"
  },
  {
    "text": "service that scal in the background so you have a static host name uh but you don't have a static IP address the",
    "start": "1107960",
    "end": "1113880"
  },
  {
    "text": "underlying IP addresses of elbs can and do change depending on how much traffic is going through it and how it's it's",
    "start": "1113880",
    "end": "1119559"
  },
  {
    "text": "scaled up and down in the background so that's that's going to be really important you don't want to be just testing against one IP address uh and",
    "start": "1119559",
    "end": "1127080"
  },
  {
    "text": "the horizontally scalable nature of ec2 allows you to scale past Network bottoms so each instance that you're running has",
    "start": "1127080",
    "end": "1133720"
  },
  {
    "text": "you know a certain amount of network capacity but you can horizontally scale you can add more instances the VPC uh",
    "start": "1133720",
    "end": "1139960"
  },
  {
    "text": "you know doesn't have any level of network capacity attached to it so you can just keep growing horizontally and",
    "start": "1139960",
    "end": "1145240"
  },
  {
    "text": "not have to worry about that so let's talk about load testing against Amazon",
    "start": "1145240",
    "end": "1151440"
  },
  {
    "start": "1148000",
    "end": "1148000"
  },
  {
    "text": "elastic load balancers so when you're testing against regular load balancers you typically ask some questions uh you",
    "start": "1151440",
    "end": "1156880"
  },
  {
    "text": "know how many application servers do I need to support various levels of traffic so how many servers do I need you know that that's what the goal of",
    "start": "1156880",
    "end": "1163200"
  },
  {
    "text": "your load test typically is how many load balancers do I need right so is my load balancer can it handle the capacity",
    "start": "1163200",
    "end": "1169240"
  },
  {
    "text": "that I'm throwing at it or do I need to upgrade my load balancers get bigger load balancers get more load balancers",
    "start": "1169240",
    "end": "1174559"
  },
  {
    "text": "and what happens to my application if there's a network failure or Hardware failure so you know you want to simulate",
    "start": "1174559",
    "end": "1179799"
  },
  {
    "text": "failure States what's really nice is on with elastic load balancers two of these",
    "start": "1179799",
    "end": "1185440"
  },
  {
    "start": "1183000",
    "end": "1183000"
  },
  {
    "text": "questions don't really matter um so you want to test if your application can scale up or not you want to use Auto",
    "start": "1185440",
    "end": "1191120"
  },
  {
    "text": "scaling groups but you don't really need to know you know how many application servers you're",
    "start": "1191120",
    "end": "1196760"
  },
  {
    "text": "going to need you're going need to know whether you can scale up or not and whether you can scale down properly how",
    "start": "1196760",
    "end": "1201960"
  },
  {
    "text": "many load balancers do I need again elbs take care of that for you so uh you just provision elb and it'll grow and Shrink",
    "start": "1201960",
    "end": "1209200"
  },
  {
    "text": "uh with the traffic that's being thrown at it uh you do need to know how your application is going to continue to",
    "start": "1209200",
    "end": "1214720"
  },
  {
    "text": "operate in the event of a network failure Hardware failure so if your instance fails or if the one of the",
    "start": "1214720",
    "end": "1221400"
  },
  {
    "text": "availability zones has some kind of issue so that's really important to test for and you should test with assumption",
    "start": "1221400",
    "end": "1227559"
  },
  {
    "text": "that any one thing fails so you don't have any single points of failure in your architecture uh so just some other",
    "start": "1227559",
    "end": "1233440"
  },
  {
    "start": "1233000",
    "end": "1233000"
  },
  {
    "text": "considerations for low testing against elbs first of all DNS so again do not",
    "start": "1233440",
    "end": "1238559"
  },
  {
    "text": "test against your elastic load Baler IP address because that will change and you might test against somebody else's uh",
    "start": "1238559",
    "end": "1244960"
  },
  {
    "text": "elb eventually you might not get an equal distribution of load because you're just testing against an IP address that's in one availability Zone",
    "start": "1244960",
    "end": "1252000"
  },
  {
    "text": "um and you want to ensure that your DNS is re resolved or you want to use multiple test clients and I'll show you how to do that so um when you resolve",
    "start": "1252000",
    "end": "1260600"
  },
  {
    "text": "the host name of an elb you'll get multiple IP addresses so you don't want it to hit the same IP address every time you want it to not cache the DNS and get",
    "start": "1260600",
    "end": "1267159"
  },
  {
    "text": "the results you know every single time it's doing a test because then uh when you run your actual test uh it'll have",
    "start": "1267159",
    "end": "1273720"
  },
  {
    "text": "an equal distribution of load uh you want to think about sticky sessions so uh if you have sticky sessions in your",
    "start": "1273720",
    "end": "1279679"
  },
  {
    "text": "application that can cause your uh load not to be equal behind your load balancer so you want to you know",
    "start": "1279679",
    "end": "1285200"
  },
  {
    "text": "consider you know your different things there right for for whether you have sticky sessions if you can disable",
    "start": "1285200",
    "end": "1291000"
  },
  {
    "text": "sticky sessions ideally uh and you want to think about your traffic growth so um",
    "start": "1291000",
    "end": "1296400"
  },
  {
    "text": "if your traffic growth is slow and steady the EB will scale for you um if your increase of load on your EB is more",
    "start": "1296400",
    "end": "1302799"
  },
  {
    "text": "than 50% every 5 minutes you're going to want to do what's called a pre-warm so um if you have spiky traffic basically",
    "start": "1302799",
    "end": "1309600"
  },
  {
    "text": "you want you're going to want to put in a ticket with AWS support and say I would like to pre-warm my elastic load",
    "start": "1309600",
    "end": "1314720"
  },
  {
    "text": "balancer here's the amount of traffic I'm expecting per second here's the average request size they might ask you",
    "start": "1314720",
    "end": "1320279"
  },
  {
    "text": "some more questions and they'll pre-warm it for you so that way it'll be pre-scaled and uh you you can then",
    "start": "1320279",
    "end": "1326360"
  },
  {
    "text": "handle the amount of spiky traffic that you're expecting uh you're going to want to think about instance sizing so like I",
    "start": "1326360",
    "end": "1332440"
  },
  {
    "text": "mentioned earlier each uh ec2 instance has uh different network art attached to it in general the instances whether it's",
    "start": "1332440",
    "end": "1339039"
  },
  {
    "text": "a C3 or an R3 or an I2 uh that end with eight extra large they have 10 GB",
    "start": "1339039",
    "end": "1345720"
  },
  {
    "text": "networking on them so that's the most networking you can GR get on an ec2 instance so if you're going to be",
    "start": "1345720",
    "end": "1351440"
  },
  {
    "text": "sending a lot of bandwidth a lot of traffic from any one instance for the low test uh those are the best uh",
    "start": "1351440",
    "end": "1357039"
  },
  {
    "text": "instances to use uh you want to make sure you're enabling enhanced networking so the C3 R3 I2 and now c4 instance",
    "start": "1357039",
    "end": "1364840"
  },
  {
    "text": "families have something called enhanced networking this allows you to get lower Jitter higher packets uh per second and",
    "start": "1364840",
    "end": "1371039"
  },
  {
    "text": "lower latency and it's a free feature you just have to make sure it's enabled it's enabled default by on Amazon Linux",
    "start": "1371039",
    "end": "1376440"
  },
  {
    "text": "Amis um on other distribution and on Windows there's directions on our documentation uh on how to enable that",
    "start": "1376440",
    "end": "1383400"
  },
  {
    "text": "so make sure you have that enabled and again uh low testing is a really good case for using spot instances you can",
    "start": "1383400",
    "end": "1389720"
  },
  {
    "text": "spin up a bunch of instances with spot pricing and uh you can then uh you know",
    "start": "1389720",
    "end": "1395480"
  },
  {
    "text": "save a lot of money over the on demand price and if you lose some of your instances because you know the price goes above your bid it's not a big deal",
    "start": "1395480",
    "end": "1401240"
  },
  {
    "text": "it's a low test you can fail back to On Demand if you have to so what I want to",
    "start": "1401240",
    "end": "1407000"
  },
  {
    "start": "1406000",
    "end": "1406000"
  },
  {
    "text": "show you here uh there's commercial low testing tools out there and uh you know",
    "start": "1407000",
    "end": "1412240"
  },
  {
    "text": "they're all really good I'm going to show you some open source tools uh that are free that you can easily use uh I'm",
    "start": "1412240",
    "end": "1418120"
  },
  {
    "text": "going to spin up an auto scaling group uh with those low testing Tools in them and so to bootstrap my my instances in",
    "start": "1418120",
    "end": "1424840"
  },
  {
    "text": "my Autos Skilling group I just have this really simple shell script so what I'm doing is I'm uh on boot it's running",
    "start": "1424840",
    "end": "1431000"
  },
  {
    "text": "this script I'm updating all the packages I'm running an Amazon Linux Ami if you wanted to do this in a bun to or",
    "start": "1431000",
    "end": "1436279"
  },
  {
    "text": "Debian based uh uh Linux distribution you just basically change out yum for app get and it should be pretty similar",
    "start": "1436279",
    "end": "1443120"
  },
  {
    "text": "uh so then I'm enabling the eple repository that's a repository with some extra packages in it and uh then I'm",
    "start": "1443120",
    "end": "1449559"
  },
  {
    "text": "installing the tools that I want to get so almost all the tools I'm showing here except curl loader I can just get off of",
    "start": "1449559",
    "end": "1454760"
  },
  {
    "text": "RPM so I'm installing AB which is Apache bench uh I'm installing Siege which is",
    "start": "1454760",
    "end": "1459799"
  },
  {
    "text": "another low testing tool and I'm installing all the stuff I need to compile Cur loaders so GCC autom make",
    "start": "1459799",
    "end": "1465399"
  },
  {
    "text": "autoc COV all that kind of stuff and then downloading a cur loader I'm",
    "start": "1465399",
    "end": "1470640"
  },
  {
    "text": "extracting it and I'm just making and make installing it and this runs as root so I don't need to do pseudo anywhere",
    "start": "1470640",
    "end": "1475919"
  },
  {
    "text": "because it's it's a I'm going to put this in user data so then I'm making an auto scaling group so all I'm all I did",
    "start": "1475919",
    "end": "1483600"
  },
  {
    "text": "here is uh again instead of putting that script in user data I might want to change something with that script and I",
    "start": "1483600",
    "end": "1488679"
  },
  {
    "text": "don't want to have to change my user data each time so I put that script in an uh in a file in an S3 bucket and I'm",
    "start": "1488679",
    "end": "1494919"
  },
  {
    "text": "just W getting that file from my S3 bucket um giving it execute permissions and I'm running it on boot so uh what",
    "start": "1494919",
    "end": "1501480"
  },
  {
    "text": "this allows me to do is you know if I want to change the script I just change it upload it to my bucket and I don't",
    "start": "1501480",
    "end": "1506799"
  },
  {
    "text": "have to change anything on my auto scaling group it'll just get the latest script so uh I've created my auto",
    "start": "1506799",
    "end": "1513600"
  },
  {
    "text": "scaling group I'm using c38 excels yeah you can use other instance types um that's the one I chose CU I wanted to",
    "start": "1513600",
    "end": "1519360"
  },
  {
    "text": "have a lot of network capacity um not really doing anything else special here I'm making sure each instance has a",
    "start": "1519360",
    "end": "1525000"
  },
  {
    "text": "public IP address and it's going to be on a public Subnet in my VPC PC uh and I'm running the default stock uh Amazon",
    "start": "1525000",
    "end": "1532039"
  },
  {
    "text": "Linux hvm Oni so uh I've created my launch configuration and now I'm going",
    "start": "1532039",
    "end": "1537880"
  },
  {
    "text": "to create my actual Auto scaling group so my auto scaling group is going to default at zero for a minimum size and",
    "start": "1537880",
    "end": "1543600"
  },
  {
    "text": "maximum size of 200 I might want to scale it up really big and it's going to be across three availability zones and",
    "start": "1543600",
    "end": "1549840"
  },
  {
    "text": "uh so because it's zero it's not going to cost me any money unless I'm actually using it and so if I want to use it I",
    "start": "1549840",
    "end": "1555320"
  },
  {
    "text": "just change my minimum and desired capacity to whatever I want it to be and it'll start spinning up instances and",
    "start": "1555320",
    "end": "1560399"
  },
  {
    "text": "bootstrapping them this Auto Skilling group does need to be in the load balancer so it's not attached to one so",
    "start": "1560399",
    "end": "1566679"
  },
  {
    "start": "1566000",
    "end": "1566000"
  },
  {
    "text": "the first thing I'm going to demo is aache bench Apache bench is a really common Tool uh that's out there and um",
    "start": "1566679",
    "end": "1573520"
  },
  {
    "text": "so the thing with Apache bench though is it caches DNS um so you're going to want to run it across a lot of instances such",
    "start": "1573520",
    "end": "1579640"
  },
  {
    "text": "as in this Auto scaling group so it it's going to be coming from a lot of clients so let's do an actual demo uh and I'll",
    "start": "1579640",
    "end": "1585919"
  },
  {
    "text": "show you what I did here so just going to switch over my screen so okay so here we",
    "start": "1585919",
    "end": "1594840"
  },
  {
    "text": "go so what I'm using is I have a fabric so script so fabric is just a python",
    "start": "1594840",
    "end": "1600520"
  },
  {
    "text": "framework for running parallel commands and I've written the little script that allows me to pull out the host names uh",
    "start": "1600520",
    "end": "1606000"
  },
  {
    "text": "from my auto scaling group and run SSH against all the host names so whether I have two instances or 20 it'll",
    "start": "1606000",
    "end": "1611600"
  },
  {
    "text": "automatically run a command that I want on there so what I'm going to do here is",
    "start": "1611600",
    "end": "1618399"
  },
  {
    "text": "I'm just going to run my fabric script across all these instances so I've got a uh just a stock WordPress install uh",
    "start": "1618399",
    "end": "1625799"
  },
  {
    "text": "that I set up with elastic bean stock and uh it's it's got an RDS instance and",
    "start": "1625799",
    "end": "1630840"
  },
  {
    "text": "one regular instance and so it's not doing anything uh really special there and so what I'm going to do is I'm going to run fabric",
    "start": "1630840",
    "end": "1637880"
  },
  {
    "text": "so let me the font size here a little bit uh so I'm going to run it as the",
    "start": "1637880",
    "end": "1643559"
  },
  {
    "text": "default user so it's going to be ec2 user I'm going to run it in parallel I'm going to run it on my low testing tools",
    "start": "1643559",
    "end": "1650640"
  },
  {
    "text": "uh Auto Skilling group and I'm just going to type in the command so I'm going to run Apache bench I'm going to run 100 tests with a concurrency level",
    "start": "1650640",
    "end": "1657600"
  },
  {
    "text": "of 20 and I'm going to run them on my demo uh WordPress here",
    "start": "1657600",
    "end": "1663919"
  },
  {
    "text": "so oh oh I have a typo one second",
    "start": "1667519",
    "end": "1675640"
  },
  {
    "text": "there we go so see it's got all the host names of all of my instances and it's",
    "start": "1679039",
    "end": "1684240"
  },
  {
    "text": "running the same command on all of them so it's going to run this command um here we we're going to get the output",
    "start": "1684240",
    "end": "1689919"
  },
  {
    "text": "from all the instances and basically when it's done uh what you're going to want to do is uh you want to add up all",
    "start": "1689919",
    "end": "1696480"
  },
  {
    "text": "the results so um you know I think I have 10 instances so uh you're going to want to figure out well I'm doing 100",
    "start": "1696480",
    "end": "1703039"
  },
  {
    "text": "requests per instance that's a th000 requests and a concurrency level of 20 so I'm actually doing a concurr level of",
    "start": "1703039",
    "end": "1708799"
  },
  {
    "text": "100 and if you look at the uh your elb Cloud watch logs for this you'll see that the traffic is going to be equally",
    "start": "1708799",
    "end": "1714559"
  },
  {
    "text": "distributed because it's coming from different 10 different instances across uh three different availability zones so",
    "start": "1714559",
    "end": "1720720"
  },
  {
    "text": "here we go it returned the results uh and uh that's that's really basic kind of loow test so uh now let's let's talk",
    "start": "1720720",
    "end": "1730120"
  },
  {
    "text": "about Siege a little bit so Siege is a different open source low testing tool",
    "start": "1730120",
    "end": "1735600"
  },
  {
    "text": "um the cool thing about Siege is that you can give it a list of URLs so um what I've done here is I've just uh I",
    "start": "1735600",
    "end": "1742440"
  },
  {
    "text": "have another WordPress install that I use for demos and so I put both of them in here or you can just put multiple you",
    "start": "1742440",
    "end": "1748320"
  },
  {
    "text": "know URLs or pages from the same website so whatever just a text file with different URLs in it um and I'm going to",
    "start": "1748320",
    "end": "1754679"
  },
  {
    "text": "run Siege again across my auto scaling group and I'm going to run it um for 1 minute uh and I get a concurrency level",
    "start": "1754679",
    "end": "1761679"
  },
  {
    "text": "of 100 uh so switch back here okay",
    "start": "1761679",
    "end": "1769720"
  },
  {
    "text": "so now I'm going to go back here and I'm going to just run instead of running",
    "start": "1769720",
    "end": "1776399"
  },
  {
    "text": "paty bench I'm going to run",
    "start": "1776399",
    "end": "1780039"
  },
  {
    "text": "Siege so one minute and um if you notice in my",
    "start": "1784720",
    "end": "1790200"
  },
  {
    "text": "bootstrap script I didn't have my URLs uh there so what I ended up doing was I just put the URLs into um an S3 bucket",
    "start": "1790200",
    "end": "1798120"
  },
  {
    "text": "and uh I just did a W for that uh URL for for the S3 bucket uh from all my",
    "start": "1798120",
    "end": "1804159"
  },
  {
    "text": "instances so now I'm running Siege so it's going to run this command and it's going to start giving me output and uh",
    "start": "1804159",
    "end": "1810880"
  },
  {
    "text": "so that's another way to do a low test so again nice thing about Siege is it's got a little if you you know do Siege",
    "start": "1810880",
    "end": "1816000"
  },
  {
    "text": "minus help it's got a little bit more uh more options there so this going to take",
    "start": "1816000",
    "end": "1821440"
  },
  {
    "text": "a minute so it's going to keep running um so let's let's talk about um C loader",
    "start": "1821440",
    "end": "1828440"
  },
  {
    "text": "so Cur loader is another good tool out there",
    "start": "1828440",
    "end": "1833559"
  },
  {
    "text": "so Cur loader uh the cool thing about C loers is it can simulate multiple clients so uh you can give it multiple",
    "start": "1833559",
    "end": "1841840"
  },
  {
    "text": "IP addresses so the way you would make this work on ec2 instan is you attach uh multiple elastic network interfaces to",
    "start": "1841840",
    "end": "1848480"
  },
  {
    "text": "your instances uh you give them each a different private address you give them each a different um elastic IP address",
    "start": "1848480",
    "end": "1855960"
  },
  {
    "text": "so they your instance is going to have multiple elastic IPS and then you just you know set up this config file here so",
    "start": "1855960",
    "end": "1861639"
  },
  {
    "text": "the config file just tells it how many clients you want to simulate uh what the IP address space is um how many cycles",
    "start": "1861639",
    "end": "1869120"
  },
  {
    "text": "so how many times you want to test and what you're actually testing so for this one um this low test",
    "start": "1869120",
    "end": "1877399"
  },
  {
    "text": "is still going but I actually wanted to show just on one instance so I have a different instance here because it's got",
    "start": "1877399",
    "end": "1882799"
  },
  {
    "text": "different uh elastic network interfaces on it so I'm going to H into my instance uh it's probably going to be yeah there",
    "start": "1882799",
    "end": "1888600"
  },
  {
    "text": "we go um and so I'm just going to run Cur loer now Cur loer has to be run as root so I'm just going to do pseudo here",
    "start": "1888600",
    "end": "1894919"
  },
  {
    "text": "let me actually show you my config file here so I've got my Cur loader config file um I just I have got two of my IP",
    "start": "1894919",
    "end": "1903120"
  },
  {
    "text": "addresses on my instance loaded in here and I'm load testing the same URL I was before so I'm just going to run curl",
    "start": "1903120",
    "end": "1912519"
  },
  {
    "text": "Pudo curl loader and all you have to do is give it the config file",
    "start": "1912519",
    "end": "1918760"
  },
  {
    "text": "so it's going to start running and uh you can you know parse these results later",
    "start": "1918760",
    "end": "1925519"
  },
  {
    "text": "so let see if my other low test is done here yeah it is so now I've done my low",
    "start": "1925519",
    "end": "1930639"
  },
  {
    "text": "test uh so this um the CG actually gives you uh you know your how much what your",
    "start": "1930639",
    "end": "1936159"
  },
  {
    "text": "average time is how much data has been transferred how many transactions per second it was able to achieve so all kinds of useful information",
    "start": "1936159",
    "end": "1943279"
  },
  {
    "text": "so let's talk about uh load test testing against cloudfront so again cloudfront",
    "start": "1943279",
    "end": "1951159"
  },
  {
    "start": "1949000",
    "end": "1949000"
  },
  {
    "text": "it also has multiple IP addresses when you resolve a cloudfront URL it is in uh",
    "start": "1951159",
    "end": "1957240"
  },
  {
    "text": "it's going to resolve it's going to give you a bunch of latency based uh results right um there's I believe 53 uh Edge",
    "start": "1957240",
    "end": "1965240"
  },
  {
    "text": "locations for cloudfront at this point so it's not within a region it's all around the world so to really test",
    "start": "1965240",
    "end": "1970440"
  },
  {
    "text": "against cloudfront uh you want to use multiple clients ideally in multiple regions so you can take you know",
    "start": "1970440",
    "end": "1976880"
  },
  {
    "text": "something like what I've done here here uh you can write a little cloud formation template on it that recreates the auto scaling groups and the user",
    "start": "1976880",
    "end": "1983320"
  },
  {
    "text": "data and just launch it in a bunch of in uh instances across the world um and",
    "start": "1983320",
    "end": "1988440"
  },
  {
    "text": "again you don't want to cash your DNS because it's really important to be picking up fresh DNS uh so a really good",
    "start": "1988440",
    "end": "1994559"
  },
  {
    "text": "tool to use wealth with cloudfront and elbs is called bees with machine guns so",
    "start": "1994559",
    "end": "1999799"
  },
  {
    "text": "this was a it's an open source tool it's uh it was created Believe by the Chicago Tribune Tech Team um and it's really",
    "start": "1999799",
    "end": "2006480"
  },
  {
    "text": "easy to install so it's install you would run this command on your laptop actually uh or whatever your testing",
    "start": "2006480",
    "end": "2012440"
  },
  {
    "text": "machine is uh because it doesn't do the actual low test from your machine it spins up a bunch of instances to do it so you just do pip install bees with",
    "start": "2012440",
    "end": "2019000"
  },
  {
    "text": "machine guns pretty simple then you spin up a bunch of bees the bees are spun up are uh T1 micros uh so it this command",
    "start": "2019000",
    "end": "2026799"
  },
  {
    "text": "here would spin up uh four T1 micros it would uh you specify your security group",
    "start": "2026799",
    "end": "2032679"
  },
  {
    "text": "that you want them to be in and your key uh and then in a few minutes or less than a minute it'll it'll spin up your",
    "start": "2032679",
    "end": "2039399"
  },
  {
    "text": "actual uh bees and uh then you run your attack right against your website it's",
    "start": "2039399",
    "end": "2045440"
  },
  {
    "text": "really important to do this against your own website if you're doing it against somebody else's website it's you know you're going to hear from from our",
    "start": "2045440",
    "end": "2050839"
  },
  {
    "text": "security team um so uh I'm going to be what I've tested here is I have another",
    "start": "2050839",
    "end": "2057079"
  },
  {
    "text": "WordPress that's slightly uh more fancy it's using elastic cache and multiz RDS and it's an auto scaling group so you",
    "start": "2057079",
    "end": "2063118"
  },
  {
    "text": "can take more traffic um so I'm going to send uh 10,000 requests at a concurrency",
    "start": "2063119",
    "end": "2070560"
  },
  {
    "text": "level of 250 at a time here so let me show you how that actually",
    "start": "2070560",
    "end": "2075720"
  },
  {
    "text": "works so in the interest of time here I'm actually I've already spun up my",
    "start": "2075720",
    "end": "2081599"
  },
  {
    "text": "bees so what I did to do that was uh just uh I gave it my key I spun up 10",
    "start": "2081599",
    "end": "2088679"
  },
  {
    "text": "bees I made a security group called bees uh that can uh uh accept that SSH",
    "start": "2088679",
    "end": "2094599"
  },
  {
    "text": "connection so we can actually connect to these things and um I'm targeting a certain availability zone for them so",
    "start": "2094599",
    "end": "2100920"
  },
  {
    "text": "now I want to actually do my my attack so in the interest of time I'm going to do a little bit less traffic here but",
    "start": "2100920",
    "end": "2106200"
  },
  {
    "text": "I'm going to do bees attack I'm going to do th concurrency",
    "start": "2106200",
    "end": "2113960"
  },
  {
    "text": "level of 500 and I'm going to give it the",
    "start": "2113960",
    "end": "2121839"
  },
  {
    "text": "URL there we go",
    "start": "2125079",
    "end": "2129480"
  },
  {
    "text": "so see my bees are already running so so they've already run their test so",
    "start": "2130200",
    "end": "2137119"
  },
  {
    "text": "uh in in in this example my target easily you know took that level of traffic now if I want if I want to you",
    "start": "2137119",
    "end": "2144119"
  },
  {
    "text": "know make this more interesting again we can do say 10,000 with a concurrency",
    "start": "2144119",
    "end": "2149400"
  },
  {
    "text": "level 500 so it's so each B is going to fire a",
    "start": "2149400",
    "end": "2154440"
  },
  {
    "text": "th rounds 50 at a time this will take a little bit more time here and hopefully still won't",
    "start": "2154440",
    "end": "2161800"
  },
  {
    "text": "knock over my website but if it does I will have learned an interesting lesson about it",
    "start": "2161800",
    "end": "2168040"
  },
  {
    "text": "so all right so it looks like uh on I I was doing about 747 request a second uh",
    "start": "2168040",
    "end": "2176640"
  },
  {
    "text": "it was getting about half a second response time so that's pretty good right so you basically want to keep",
    "start": "2176640",
    "end": "2182440"
  },
  {
    "text": "testing it until you actually break your website and so you know uh what What's actually broken how to scale up from",
    "start": "2182440",
    "end": "2187680"
  },
  {
    "text": "there and uh you know what capacity you have",
    "start": "2187680",
    "end": "2194640"
  },
  {
    "text": "so how do you actually know when you're testing against cloudfront whether your cach is working right if if if uh your",
    "start": "2198079",
    "end": "2205359"
  },
  {
    "text": "CDN is just passing all the traffic back to your origin um you're not you're not really taking the advantage of of",
    "start": "2205359",
    "end": "2212280"
  },
  {
    "text": "cloudfront of a CDN so we've got a popular object report in cloudfront so that you to see is like what are the",
    "start": "2212280",
    "end": "2218599"
  },
  {
    "text": "most popular objects against my distribution what's really important here is you want to look at the hits and misses so a Miss means it had to go to",
    "start": "2218599",
    "end": "2224960"
  },
  {
    "text": "the origin uh for your um for your uh request so that means it didn't get",
    "start": "2224960",
    "end": "2230920"
  },
  {
    "text": "cashed and a hit means it just came straight out of cash so if that you know you get a lot of misses you want to look",
    "start": "2230920",
    "end": "2236560"
  },
  {
    "text": "at what are your uh cache headers for your for your object so for example for",
    "start": "2236560",
    "end": "2241960"
  },
  {
    "text": "things like CSS files JavaScript uh HTML uh you probably want to have like a 24",
    "start": "2241960",
    "end": "2247520"
  },
  {
    "text": "per hour at least cash on them so you can configure that in your engine X or Apache or I um we also have a report",
    "start": "2247520",
    "end": "2254079"
  },
  {
    "text": "called uh a this is a new feature actually so you can get a bunch of Statistics so the one that's really important here is you want to look at",
    "start": "2254079",
    "end": "2260160"
  },
  {
    "text": "data transferred from The cloudfront Edge to your users that's how much data is going from The Edge locations to your",
    "start": "2260160",
    "end": "2266680"
  },
  {
    "text": "actual users and you want to compare that to uh how much traffic is going",
    "start": "2266680",
    "end": "2271800"
  },
  {
    "text": "against your origin so here's an example cloudwatch chart of network out from a",
    "start": "2271800",
    "end": "2277160"
  },
  {
    "text": "whole Auto scaling group and that should ideally be a fraction of what's actually coming out of cloudfront so that means your caching is actually working and you",
    "start": "2277160",
    "end": "2284280"
  },
  {
    "text": "can get all kinds of Statistics that are grouped by autoscaling group uh there's different uh Cloud watch metrics you can",
    "start": "2284280",
    "end": "2289720"
  },
  {
    "text": "get from elbs so there's all kinds of useful stuff you can do here um so then how do you test if your",
    "start": "2289720",
    "end": "2296599"
  },
  {
    "start": "2295000",
    "end": "2295000"
  },
  {
    "text": "auto scaling groups are working how do you even know when you're scaling up or down uh you know refreshing your console",
    "start": "2296599",
    "end": "2302400"
  },
  {
    "text": "is isn't uh super uh efficient right so you probably want to create autoscaling",
    "start": "2302400",
    "end": "2308319"
  },
  {
    "text": "notifications so uh using that CLI command you basically you would first you want to create an SNS topic you want",
    "start": "2308319",
    "end": "2314480"
  },
  {
    "text": "to subscribe to that topic um and then you want to run that command and then you'll get a notification every time",
    "start": "2314480",
    "end": "2320920"
  },
  {
    "text": "there's an instance spun up or shut down by Auto scaling you also get a notification if it fails to launch for",
    "start": "2320920",
    "end": "2327359"
  },
  {
    "text": "some reason uh so that actually tell you if your auto scaling is working or not so the other thing you want to do is",
    "start": "2327359",
    "end": "2335400"
  },
  {
    "text": "you want to make sure you're using the right trigger for for your auto scaling um so if you have the wrong trigger it's never going to scale up or down your",
    "start": "2335400",
    "end": "2341880"
  },
  {
    "text": "website could not be functioning right so this is an example of a cloud cloud watch metric for CPU utilization and so",
    "start": "2341880",
    "end": "2348520"
  },
  {
    "text": "you see we had 100 CPU there for uh for about an hour so that's an example of uh",
    "start": "2348520",
    "end": "2353760"
  },
  {
    "text": "CPU bottl neck so if if you do a load test and you see that your instances are you know bottlenecking on CPU you want",
    "start": "2353760",
    "end": "2360480"
  },
  {
    "text": "to make your autoscaling trigger CPU s so you'll say if my CPU s is over 85%",
    "start": "2360480",
    "end": "2366359"
  },
  {
    "text": "for 10 minutes bunch more instances right it could be you could use other metrics as well you use custom metrics",
    "start": "2366359",
    "end": "2371680"
  },
  {
    "text": "you can inject custom metric and um have your auto scaling trigger off of that but whatever it is you want to make sure you're actually triggering off the right",
    "start": "2371680",
    "end": "2378240"
  },
  {
    "text": "thing um and then the other thing that's important is while you're doing your low test it's it's cool to see you know how",
    "start": "2378240",
    "end": "2383839"
  },
  {
    "start": "2380000",
    "end": "2380000"
  },
  {
    "text": "much traffic your website can sustain but you want more data than that you want to see what's actually slow uh you",
    "start": "2383839",
    "end": "2389400"
  },
  {
    "text": "know do I need to scale up my database uh or do I need scale out my database do I need to get more instances um is it pH",
    "start": "2389400",
    "end": "2397520"
  },
  {
    "text": "P something in PHP slows or slow query so there's a lot of good uh third party uh tools out there for that um in the",
    "start": "2397520",
    "end": "2404240"
  },
  {
    "text": "expo hall I'm sure if you walk around you'll see them just uh to highlight a few of them so New Relic uh New Relic",
    "start": "2404240",
    "end": "2410079"
  },
  {
    "text": "you run an agent on your instance there's a server monitoring uh agent and then there's an agent that runs inside",
    "start": "2410079",
    "end": "2416440"
  },
  {
    "text": "the actual application so it supports PHP and Java and Ruby and python node.js",
    "start": "2416440",
    "end": "2423240"
  },
  {
    "text": "um so you basically run this agent and it'll give you some really good good insights so here it's it's showing you",
    "start": "2423240",
    "end": "2430079"
  },
  {
    "text": "uh it's breaking it down by database by net by cues if you have mcash they'll",
    "start": "2430079",
    "end": "2435359"
  },
  {
    "text": "show you how much time things are taking memcached um so you can also set uh",
    "start": "2435359",
    "end": "2441200"
  },
  {
    "text": "alerting based on this so you can emails when your application isn't performing well so it's really important to look at something like this during low test it",
    "start": "2441200",
    "end": "2447800"
  },
  {
    "text": "also has an app score so it kind of rates your how well your how response of your app is so all kinds of cool",
    "start": "2447800",
    "end": "2453200"
  },
  {
    "text": "features there and it's easy to integ with autoscaling or with elastic beanock because you just install the agent on",
    "start": "2453200",
    "end": "2458520"
  },
  {
    "text": "boot and it'll start reporting up to the neic service uh boundary is also agent based that's another application",
    "start": "2458520",
    "end": "2463760"
  },
  {
    "text": "monitoring solution boundary gives you some really good insight about uh how much data is going between different layers of your application on the on the",
    "start": "2463760",
    "end": "2470000"
  },
  {
    "text": "network layer so just to to conclude here um you",
    "start": "2470000",
    "end": "2475240"
  },
  {
    "text": "want to test your application at every level so you want to test your UI uh which is what Dave talked about uh you",
    "start": "2475240",
    "end": "2481119"
  },
  {
    "text": "want to do lad testing and you want to do performance monitoring right so you want to see you know how how what",
    "start": "2481119",
    "end": "2488359"
  },
  {
    "text": "lessons did I learn from this and a base allows you to do realistic lad tests really easily um I have customers who",
    "start": "2488359",
    "end": "2494400"
  },
  {
    "text": "spin up hundreds of instances you know to do a load test and shut them down that's totally normal and it works great",
    "start": "2494400",
    "end": "2500040"
  },
  {
    "text": "and most importantly testing inspires confidence in your app if you can show some hard data uh to you know your",
    "start": "2500040",
    "end": "2505960"
  },
  {
    "text": "managers to to your customers saying I've tested this out my application can sustain this",
    "start": "2505960",
    "end": "2512000"
  },
  {
    "text": "level of traffic we've identified these weak points we've mitigated them it's going to make your your you more",
    "start": "2512000",
    "end": "2517440"
  },
  {
    "text": "confident it's going to make your team more confident and it's going to result in a better application and it lastly allows you to uh exercise your actual",
    "start": "2517440",
    "end": "2523680"
  },
  {
    "text": "scaling scenarios so Auto scaling how how do you scale up and down it's really important to make sure that's working",
    "start": "2523680",
    "end": "2528800"
  },
  {
    "text": "because you don't want to find out that's not working as it should uh you know when you're in production and you",
    "start": "2528800",
    "end": "2533839"
  },
  {
    "text": "actually have to scale um so that's our talk uh thank you for coming uh we're",
    "start": "2533839",
    "end": "2539119"
  },
  {
    "text": "going to take questions out there's a question Booth out there afterwards if anyone has any thank you",
    "start": "2539119",
    "end": "2546400"
  }
]