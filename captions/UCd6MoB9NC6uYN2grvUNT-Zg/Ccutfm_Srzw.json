[
  {
    "start": "0",
    "end": "30000"
  },
  {
    "text": "Hi, my name is Ryan,  \nand welcome to another edition of",
    "start": "7595",
    "end": "9865"
  },
  {
    "text": "'This Is My Architecture.'",
    "start": "9865",
    "end": "11136"
  },
  {
    "text": "I'm joined by Sergey, \nDirector of Engineering for Zulily.",
    "start": "11136",
    "end": "14160"
  },
  {
    "text": "Sergey, tell us a little bit about Zulily.",
    "start": "14160",
    "end": "16279"
  },
  {
    "text": "Hey, Ryan.\nZulily is an e-commerce retailer.",
    "start": "16280",
    "end": "19240"
  },
  {
    "text": "We offer amazing deals on unique products\nfor moms, kids, and babies,",
    "start": "19240",
    "end": "22930"
  },
  {
    "text": "and we do it in a fun and engaging way.",
    "start": "22930",
    "end": "24954"
  },
  {
    "text": "Excellent. So, tell us a little bit about\nthe business problem",
    "start": "24954",
    "end": "28062"
  },
  {
    "text": "that you were trying to solve\nwith this architecture.",
    "start": "28062",
    "end": "30292"
  },
  {
    "start": "30000",
    "end": "86000"
  },
  {
    "text": "Yeah, we were trying to create\na suggestive search experience",
    "start": "30292",
    "end": "33508"
  },
  {
    "text": "for our customers that's inspired by\nwhat other people do in our apps.",
    "start": "33508",
    "end": "38068"
  },
  {
    "text": "So, let me walk you through this.",
    "start": "38068",
    "end": "39582"
  },
  {
    "text": "So, we start with the customer\nbeing on the mobile phone,",
    "start": "39582",
    "end": "42460"
  },
  {
    "text": "and as customers navigate the app,",
    "start": "42460",
    "end": "46675"
  },
  {
    "text": "they view pages, they click on things.",
    "start": "47306",
    "end": "49501"
  },
  {
    "text": "We record all of that in AWS Kinesis.\nThis is our clickstream pipeline.",
    "start": "49501",
    "end": "54100"
  },
  {
    "text": "Now for search, specifically,\nwe only care about search events.",
    "start": "55081",
    "end": "58360"
  },
  {
    "text": "And so, we put together a filter",
    "start": "58360",
    "end": "61053"
  },
  {
    "text": "on top of this clickstream dataset\nthat's in real-time",
    "start": "62152",
    "end": "65512"
  },
  {
    "text": "through a very simple SQL statement,",
    "start": "65512",
    "end": "67556"
  },
  {
    "text": "filters out search keywords out of\nthis massive data set of everything.",
    "start": "68230",
    "end": "72364"
  },
  {
    "text": "And then it chains it up and\nwrites it to another Kinesis Stream.",
    "start": "72364",
    "end": "76517"
  },
  {
    "text": "And so, this is our way to\nbasically do this filtering",
    "start": "76875",
    "end": "80422"
  },
  {
    "text": "with no servers involved, and,\nyou know, at scale.",
    "start": "80422",
    "end": "84453"
  },
  {
    "text": "Excellent. Very cool. Okay, so you're \ndoing some filtering with Kinesis.",
    "start": "84454",
    "end": "89147"
  },
  {
    "start": "86000",
    "end": "170000"
  },
  {
    "text": "Tell me a little bit more about\nthis next phase of the diagram.",
    "start": "90109",
    "end": "92825"
  },
  {
    "text": "Sure. So, once we've got\nour search keywords identified,",
    "start": "92825",
    "end": "96479"
  },
  {
    "text": "we want to look at corresponding brands\nand product categories for those.",
    "start": "97129",
    "end": "100522"
  },
  {
    "text": "And so this is what Transformer\nimplemented in AWS Lambda does.",
    "start": "100523",
    "end": "106033"
  },
  {
    "text": "For every search keyword,\nit makes a call to the Search API",
    "start": "106033",
    "end": "110164"
  },
  {
    "text": "and brings back related brands\nand product categories.",
    "start": "112945",
    "end": "118022"
  },
  {
    "text": "And then the second thing it does,\nit writes a document",
    "start": "118022",
    "end": "121468"
  },
  {
    "text": "to our data store which is implemented\non top of DocumentDB.",
    "start": "121468",
    "end": "126184"
  },
  {
    "text": "Excellent. DocumentDB. Okay.",
    "start": "126184",
    "end": "128519"
  },
  {
    "text": "And tell us a little bit about some of\nthe metrics around the documents.",
    "start": "128901",
    "end": "133084"
  },
  {
    "text": "How big are the documents?",
    "start": "133084",
    "end": "134147"
  },
  {
    "text": "What are your transaction \nthroughput numbers, etcetera?",
    "start": "134147",
    "end": "136999"
  },
  {
    "text": "We have around 650 million documents\nsitting in this database,",
    "start": "136999",
    "end": "142060"
  },
  {
    "text": "rounding about less than 1000 TPS,\ntypically, transactions per seconds.",
    "start": "142403",
    "end": "148125"
  },
  {
    "text": "We've got a seven-day TTL \non those documents.",
    "start": "148832",
    "end": "153006"
  },
  {
    "text": "And, just probably another factoid,\nwe are running three availability zones,",
    "start": "154020",
    "end": "157874"
  },
  {
    "text": "so there's a primary and two replicas.",
    "start": "157874",
    "end": "160148"
  },
  {
    "text": "Excellent. Okay, great.",
    "start": "160148",
    "end": "161648"
  },
  {
    "text": "And then, before we jump to\nthe next part of that,",
    "start": "161735",
    "end": "164179"
  },
  {
    "text": "you know, I'm sure when you guys\nwere evaluating the architecture,",
    "start": "164484",
    "end": "167180"
  },
  {
    "text": "you made some trade-offs\nand looked at some other technologies.",
    "start": "167180",
    "end": "169607"
  },
  {
    "text": "Can you talk through some of that?",
    "start": "169608",
    "end": "171036"
  },
  {
    "start": "170000",
    "end": "208000"
  },
  {
    "text": "Yeah, our team is actually\nwell-versed in Mongrel,",
    "start": "171036",
    "end": "173213"
  },
  {
    "text": "and that was our first suggestion\nfor this particular feature.",
    "start": "173214",
    "end": "176953"
  },
  {
    "text": "But then we realized, you know,\nDocumentDB is available,",
    "start": "176953",
    "end": "179241"
  },
  {
    "text": "it provides full compatibility,\nand really it came down to",
    "start": "179241",
    "end": "182686"
  },
  {
    "text": "what we wanted to focus on,",
    "start": "182686",
    "end": "184231"
  },
  {
    "text": "business logic or the database.",
    "start": "184231",
    "end": "187370"
  },
  {
    "text": "And so I remember,\nI was having a conversation ",
    "start": "187370",
    "end": "189344"
  },
  {
    "text": "with one of the engineers, and I said,\n\"dude, do you want to be a MongoDB expert,\"",
    "start": "189344",
    "end": "193236"
  },
  {
    "text": "or do you want to be a search expert?\"",
    "start": "193236",
    "end": "194883"
  },
  {
    "text": "And so he said, \"well, of course\nI want to be a search expert.\"",
    "start": "194883",
    "end": "196800"
  },
  {
    "text": "And that kind of was\nthe final straw in the argument,",
    "start": "196800",
    "end": "199903"
  },
  {
    "text": "and we went with DocumentDB.",
    "start": "199903",
    "end": "201358"
  },
  {
    "text": "Excellent. Very cool.",
    "start": "201358",
    "end": "202881"
  },
  {
    "text": "So, that was DocumentDB\nand how it's integrated with Lambda.",
    "start": "202881",
    "end": "206120"
  },
  {
    "text": "So, talk to us a little bit about\nthis third phase of the architecture.",
    "start": "206120",
    "end": "209245"
  },
  {
    "text": "Yeah, the third phase of\nthe architecture is--",
    "start": "209245",
    "end": "211636"
  },
  {
    "text": "So, this Lambda writes to DocumentDB.",
    "start": "211636",
    "end": "213860"
  },
  {
    "text": "We've got another Lambda\nthat reads from DocumentDB.",
    "start": "213860",
    "end": "216491"
  },
  {
    "text": "This Lambda runs on schedule\nevery x minutes.",
    "start": "216491",
    "end": "219735"
  },
  {
    "text": "It pulls the data from the DocumentDB...",
    "start": "219735",
    "end": "222135"
  },
  {
    "text": "And for every search keyword,\nfor every brand",
    "start": "223274",
    "end": "226920"
  },
  {
    "text": "and for every product category,\nit does a look up against an inventory API.",
    "start": "226920",
    "end": "230611"
  },
  {
    "text": "This is super important for us because\nthe nature of Zulily's business,",
    "start": "230611",
    "end": "234366"
  },
  {
    "text": "we have products in our apps\nand on the site",
    "start": "234366",
    "end": "236664"
  },
  {
    "text": "available for typically up to 72 hours,\nand then they rotate.",
    "start": "236664",
    "end": "239882"
  },
  {
    "text": "So, we must ensure that\nwe have those products in stock",
    "start": "239882",
    "end": "243341"
  },
  {
    "text": "before we can sell them,\nbefore we can offer them",
    "start": "243341",
    "end": "245174"
  },
  {
    "text": "in our search suggestions.",
    "start": "245174",
    "end": "246954"
  },
  {
    "text": "And so, this Lambda does the check\nand then once the check is complete,",
    "start": "246954",
    "end": "251319"
  },
  {
    "text": "it writes data to \nElasticache for Redis",
    "start": "252546",
    "end": "257273"
  },
  {
    "text": "and that in turn, it goes to our...",
    "start": "257274",
    "end": "259564"
  },
  {
    "text": "customers on their mobile devices\nthrough a search API.",
    "start": "260990",
    "end": "264021"
  },
  {
    "text": "Very cool. So we've got multiple\nKinesis services that are running",
    "start": "264021",
    "end": "268026"
  },
  {
    "text": "and doing some of the filtering for\nsome of the data ",
    "start": "268026",
    "end": "270058"
  },
  {
    "text": "that the users are typing in.",
    "start": "270058",
    "end": "271771"
  },
  {
    "text": "We've got Lambda to help transform that\nand integrate that with",
    "start": "271771",
    "end": "275094"
  },
  {
    "text": "some of that data into DocumentDB.",
    "start": "275094",
    "end": "277152"
  },
  {
    "text": "We've got Lambda,\nwhich is cross-referencing",
    "start": "277152",
    "end": "278882"
  },
  {
    "text": "some of that data with\nthe inventory that's on hand",
    "start": "278882",
    "end": "281482"
  },
  {
    "text": "and then Redis on the backend\nto integrate with the search API",
    "start": "281482",
    "end": "284375"
  },
  {
    "text": "and return the results to the user.\nSo, very cool.",
    "start": "284375",
    "end": "286908"
  },
  {
    "text": "Sergey, thank you so much for\nsharing your architecture with us.",
    "start": "286908",
    "end": "290177"
  },
  {
    "text": "And thank you, everybody.\nThis is Ryan from 'This Is My Architecture.'",
    "start": "290691",
    "end": "293956"
  }
]