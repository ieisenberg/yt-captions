[
  {
    "start": "0",
    "end": "60000"
  },
  {
    "text": "evening everybody uh so welcome to the Dynamo streams and cross application talk I know it's probably been a long",
    "start": "399",
    "end": "8000"
  },
  {
    "text": "work day for you guys so I'll try to make this short um and as Steve said you know put your hand up uh we have a",
    "start": "8000",
    "end": "14440"
  },
  {
    "text": "pretty small intimate crowd here today so I'd like to be interrupted more if you have any questions during the",
    "start": "14440",
    "end": "19840"
  },
  {
    "text": "presentation the presentation itself should only take about 20 to 30 minutes um including the live demo at the end",
    "start": "19840",
    "end": "26880"
  },
  {
    "text": "which should be hopefully very fun for everybody um so again you know if you have questions questions are good keep",
    "start": "26880",
    "end": "33760"
  },
  {
    "text": "asking uh I'm going to pause also at different intervals to make sure that people understand um but before I start",
    "start": "33760",
    "end": "40200"
  },
  {
    "text": "there's a bit of fundamentals of Dynamo DB I just want like a quick show of hands you know what no seel is have",
    "start": "40200",
    "end": "46239"
  },
  {
    "text": "worked with a little bit before no what Dynam okay so very good crowd um I'm going to rush a little bit through the",
    "start": "46239",
    "end": "53039"
  },
  {
    "text": "the beginnings of Noy cool because there's just a few slides I threw in there just in case not everybody was on the same page um so quick overview we'll",
    "start": "53039",
    "end": "60680"
  },
  {
    "start": "60000",
    "end": "90000"
  },
  {
    "text": "go through a bit of motivations basics of Dynam DB uh I want to focus a lot of",
    "start": "60680",
    "end": "65799"
  },
  {
    "text": "the presentation on how streams actually works for Dynam DB how consuming streams is a challenge sometimes um the",
    "start": "65799",
    "end": "72799"
  },
  {
    "text": "differences between AWS Lambda advantages of using uh either ad Lambda or Kinesis client library to consume",
    "start": "72799",
    "end": "79720"
  },
  {
    "text": "dyal DB streams and finally the demo on building an actual application which is cross application on top of it um not",
    "start": "79720",
    "end": "87560"
  },
  {
    "text": "going to spend too much time there's obviously a bunch of advantages moving to a nosql especially under the AWS",
    "start": "87560",
    "end": "94079"
  },
  {
    "text": "ecosystem fully managed um you get a lot of uh consistency availability durability",
    "start": "94079",
    "end": "100200"
  },
  {
    "start": "100000",
    "end": "150000"
  },
  {
    "text": "guarantees uh quick review of the data model in Dynamo DB there's no instance that you connect to you basically go to",
    "start": "100200",
    "end": "106520"
  },
  {
    "text": "the console or use our uh apis uh use our uh sdks create a table and then you",
    "start": "106520",
    "end": "111600"
  },
  {
    "text": "can immediately start writing data to it uh the table we call it a table uh it's",
    "start": "111600",
    "end": "117640"
  },
  {
    "text": "really like a a gigantic document um the way that it's displayed here is just you",
    "start": "117640",
    "end": "123759"
  },
  {
    "text": "know I can fit it on my slides better um but you can think of each Road as sort of like one document and then each",
    "start": "123759",
    "end": "129840"
  },
  {
    "text": "document itself can have sub elements what we call attributes so in this case there are two items or documents and",
    "start": "129840",
    "end": "138120"
  },
  {
    "text": "each item has a number of attributes the first one has four the second one has three attributes um so it's not required",
    "start": "138120",
    "end": "145400"
  },
  {
    "text": "that you have um an attribute for each single item EX except the primary key so",
    "start": "145400",
    "end": "151879"
  },
  {
    "start": "150000",
    "end": "170000"
  },
  {
    "text": "you can have an attribute that you define as the key for your table and this attribute must be present for every",
    "start": "151879",
    "end": "157879"
  },
  {
    "text": "single item in the table and this case is called record ID uh there's another case where you want to have two",
    "start": "157879",
    "end": "163920"
  },
  {
    "text": "attributes as the primary key and that's the has range key um a lot of this is on very well documented on our official",
    "start": "163920",
    "end": "171080"
  },
  {
    "start": "170000",
    "end": "215000"
  },
  {
    "text": "documentation I want to talk a little bit of partitions uh very important Concept in Dynamo DB it's how we do",
    "start": "171080",
    "end": "176920"
  },
  {
    "text": "horizontal scaling uh so uh in this case you have tables and you have items",
    "start": "176920",
    "end": "182480"
  },
  {
    "text": "inside the tables we take your hash key value in this case the hash key is record ID um then we hash it into some",
    "start": "182480",
    "end": "189840"
  },
  {
    "text": "uh you know random value in the key space and then we place it on disk and as your table gets more and more items",
    "start": "189840",
    "end": "196200"
  },
  {
    "text": "or more more throughput we need to scale out in order to maintain performance um",
    "start": "196200",
    "end": "201480"
  },
  {
    "text": "or optimize for performance and that's just more and more partitions so as your table grows you can expect the number of",
    "start": "201480",
    "end": "207360"
  },
  {
    "text": "partitions in your table to grow with it um and this is a very important concept uh because I'm going to start talking",
    "start": "207360",
    "end": "213560"
  },
  {
    "text": "about Dynamo DB streams okay so that was the foundation of dyal DB uh questions",
    "start": "213560",
    "end": "220159"
  },
  {
    "text": "anybody not clear yeah yeah so essentially D is kind of",
    "start": "220159",
    "end": "229439"
  },
  {
    "text": "like you have a",
    "start": "229439",
    "end": "233760"
  },
  {
    "text": "asking IND yes you can basally yes you can yeah",
    "start": "242519",
    "end": "249879"
  },
  {
    "text": "that's covered um extensively on our documentation um but what you mentioned for sure uh you know mongod DB also",
    "start": "249879",
    "end": "256079"
  },
  {
    "text": "another in SQL database I think this like not having uh the same attribute",
    "start": "256079",
    "end": "261799"
  },
  {
    "text": "for every item and think ofing as a document is a is a fundamental principle that applies across all Nole databases",
    "start": "261799",
    "end": "268840"
  },
  {
    "text": "yeah go you had",
    "start": "268840",
    "end": "271720"
  },
  {
    "text": "question yeah so um in this case if the third partition splits into two partitions that's usually how we split",
    "start": "288240",
    "end": "295160"
  },
  {
    "text": "it in twos um it will land in one of the partitions and the pre the original",
    "start": "295160",
    "end": "300759"
  },
  {
    "text": "partition would basically be an inactive um so what happens is right now the key space is divided between AA and FF",
    "start": "300759",
    "end": "307520"
  },
  {
    "text": "depending on where the hash is it'll land on either the first half or the second half um and that will keep",
    "start": "307520",
    "end": "313880"
  },
  {
    "text": "splitting so it'll always land in one of the what we call children part partitions and the children partitions",
    "start": "313880",
    "end": "320000"
  },
  {
    "text": "are going to be the only active partitions and the parent partition would be made inactive so basically you",
    "start": "320000",
    "end": "325240"
  },
  {
    "text": "think of it as splitting the key space okay so I'm going to continue talking about Dynamo be streams um so if",
    "start": "325240",
    "end": "332840"
  },
  {
    "start": "330000",
    "end": "390000"
  },
  {
    "text": "you don't know what it is uh it was a relatively new service Le this slide is from like a few months ago uh we we went",
    "start": "332840",
    "end": "340080"
  },
  {
    "text": "to General availability last year actually uh what it does it basically think of it as a stream of continuous",
    "start": "340080",
    "end": "346400"
  },
  {
    "text": "pipeline that records what happens to your table um in today's world we only",
    "start": "346400",
    "end": "351680"
  },
  {
    "text": "have three uh write operations to Dynamo DB uh that's put item so inserting a new",
    "start": "351680",
    "end": "357080"
  },
  {
    "text": "item update item updating an existing item and delete item um so you can get",
    "start": "357080",
    "end": "362680"
  },
  {
    "text": "three types of sort of you can think of it as records in this log and the log just says you know you inserted an item",
    "start": "362680",
    "end": "368680"
  },
  {
    "text": "or you updated an item you deleted an item and this log has to scale similarly",
    "start": "368680",
    "end": "373840"
  },
  {
    "text": "to how the table scales the log has to scale also with table size and throughput because your tables can have",
    "start": "373840",
    "end": "380199"
  },
  {
    "text": "thousands of partitions and your log needs to have some sort of a logical ordering and I'll talk about that a",
    "start": "380199",
    "end": "386360"
  },
  {
    "text": "little later so let's look inside what a record looks like like very simple example we want to do an update to an",
    "start": "386360",
    "end": "392800"
  },
  {
    "text": "existing item before the update record ID equals to one name equals to Alice we",
    "start": "392800",
    "end": "398560"
  },
  {
    "text": "just want to change the name from Alice to Allison so we do that and afterwards the record becomes record ID equals to",
    "start": "398560",
    "end": "405039"
  },
  {
    "text": "one name equals to Allison um when you enable the stream on the table uh you",
    "start": "405039",
    "end": "410440"
  },
  {
    "text": "have to choose what view type you want so this is like when you enable the stream you're going to say I only want",
    "start": "410440",
    "end": "416879"
  },
  {
    "text": "to see this view of the change log um so take the first one for example if I",
    "start": "416879",
    "end": "422000"
  },
  {
    "text": "enabled the stream on this table and I said I only want to see the old image which means you'll only get the before",
    "start": "422000",
    "end": "428800"
  },
  {
    "text": "update image for every single operation so in this case the record will only show you record equals to one name",
    "start": "428800",
    "end": "435160"
  },
  {
    "text": "equals to Alice um and similarly for example if you had old and new image you'd get two images per like record um",
    "start": "435160",
    "end": "443160"
  },
  {
    "text": "and that is the before update record and the uh before update image and the after update image um so we don't actually",
    "start": "443160",
    "end": "449720"
  },
  {
    "text": "store the Delta we store the entire image like what the item was um and in",
    "start": "449720",
    "end": "455000"
  },
  {
    "text": "the case of say like a delete um before the delete there was an item after the delete there's nothing so old image",
    "start": "455000",
    "end": "461800"
  },
  {
    "text": "would be the item and New Image would be null and that's how we represent delete and insert is vice versa the reverse",
    "start": "461800",
    "end": "468759"
  },
  {
    "text": "last case Keys only some of our customers they just want to audit like how many times did I write to a certain",
    "start": "468759",
    "end": "475879"
  },
  {
    "text": "key for instance um and they you know for cost and performance reasons they just choose Keys only so the event log",
    "start": "475879",
    "end": "482759"
  },
  {
    "text": "only shows you know you wrote to record one once twice you know Etc so this is",
    "start": "482759",
    "end": "488360"
  },
  {
    "text": "in the details I'm going back to the overview now uh so I talked about partitions in this case we have a table",
    "start": "488360",
    "end": "494400"
  },
  {
    "text": "with three partitions 0 1 and two um and I want to talk about how the sharding",
    "start": "494400",
    "end": "499720"
  },
  {
    "text": "and the stream works so the entire big box on the right is the stream for this one table right now the mapping is one",
    "start": "499720",
    "end": "507800"
  },
  {
    "text": "partition maps to a whole lineage of shards so that's like one row of shards",
    "start": "507800",
    "end": "513399"
  },
  {
    "text": "um what I mean by a whole row of shards is at one time the the changes that happen to a partition won't be stored on",
    "start": "513399",
    "end": "520640"
  },
  {
    "text": "the Single Shard in the Stream however The Shard approximately four to six hours currently The Shard actually",
    "start": "520640",
    "end": "527440"
  },
  {
    "text": "closes itself and opens a new one so that future rights to the same partition will go to the new Shard so it's a",
    "start": "527440",
    "end": "533920"
  },
  {
    "text": "lineage if you think about in this case if we look at the top row zero was the oldest shard zero closed and one opened",
    "start": "533920",
    "end": "541200"
  },
  {
    "text": "and and then the rights were going to one and then one Clos and two open Etc so now we're on four so four is the only",
    "start": "541200",
    "end": "548560"
  },
  {
    "text": "active shard in what we call a lineage so what a lineage is you have parent and",
    "start": "548560",
    "end": "554320"
  },
  {
    "text": "then you have child and then you have children of that child so grandchildren um and that's I will go through that",
    "start": "554320",
    "end": "559399"
  },
  {
    "text": "this in a little bit more detail um but this is actually the uh sort of fundamental scaling principle behind",
    "start": "559399",
    "end": "565560"
  },
  {
    "text": "streams is we're able to create more shards so that it can keep serving a data at the same uh",
    "start": "565560",
    "end": "572000"
  },
  {
    "text": "latency so let's look at it in a little bit more detail the first the top one um",
    "start": "572000",
    "end": "577360"
  },
  {
    "text": "so I've used dotted white lines to indicate the same lineage right so the top one forms one lineage it's a simple",
    "start": "577360",
    "end": "583760"
  },
  {
    "text": "lineage so I want to go through that one first uh so say you have an item that is",
    "start": "583760",
    "end": "589160"
  },
  {
    "text": "sits on partition zero um and we're updating this one item again and again",
    "start": "589160",
    "end": "594560"
  },
  {
    "text": "what happens is these updates will be recorded on The Shard starting from Shard zero approximately 4 hours later",
    "start": "594560",
    "end": "601399"
  },
  {
    "text": "this Shard will close a new Shard Shard one will come up and now updates to this",
    "start": "601399",
    "end": "606600"
  },
  {
    "text": "partition will all go to one zero is still there if you want to read from it but it can no longer be be written to",
    "start": "606600",
    "end": "613360"
  },
  {
    "text": "you can only write to one active Shard at a time this keeps going and say you know it's been you know uh you know four",
    "start": "613360",
    "end": "620720"
  },
  {
    "text": "times five so five out it's been 20 20 hours now it's writing to the latest uh",
    "start": "620720",
    "end": "626360"
  },
  {
    "text": "open Shard we can we call A Shard open and close closed um and that's the uh number four sh number four up there and",
    "start": "626360",
    "end": "634360"
  },
  {
    "text": "what this is an important concept because you have to follow The Shard ordering in order to U make sure that",
    "start": "634360",
    "end": "640600"
  },
  {
    "text": "you follow correctness and consistency right um yeah",
    "start": "640600",
    "end": "646480"
  },
  {
    "text": "go so there's various reasons on the back end that this happens uh fundamentally it's because once you have",
    "start": "648639",
    "end": "655680"
  },
  {
    "text": "too much data on one Shard uh on the back end it becomes very difficult to serve the performance with low latency",
    "start": "655680",
    "end": "662720"
  },
  {
    "text": "so we need to start with a new Shard so you're not um this is just uh you know like on the back end there's",
    "start": "662720",
    "end": "668720"
  },
  {
    "text": "dependencies and and this was something that was enforced in order to do this",
    "start": "668720",
    "end": "674040"
  },
  {
    "text": "um the thing that I I was talking about is with lineage if you're updating a",
    "start": "674040",
    "end": "679320"
  },
  {
    "text": "record um say you're uh incrementing something and you're going one two 3 four five um and it lands on different",
    "start": "679320",
    "end": "686360"
  },
  {
    "text": "shards because you're doing this say over a few hours you want to make sure you process a",
    "start": "686360",
    "end": "691440"
  },
  {
    "text": "parent Shard before you process its child right because you want to make sure that you process it in time",
    "start": "691440",
    "end": "697040"
  },
  {
    "text": "ordering otherwise you're going to lose that ordering guarantee and you're going to get random data like 1 five 2 three",
    "start": "697040",
    "end": "702839"
  },
  {
    "text": "you're going to lose the consistency and the correctness in the data um and this becomes very important when you are",
    "start": "702839",
    "end": "708240"
  },
  {
    "text": "thinking about how do I want to consume A Shard I want to make sure that I start from the oldest Shard and then I follow",
    "start": "708240",
    "end": "714440"
  },
  {
    "text": "that ordering so I have to find the child of the parent process that child then process process it's trial Etc in a",
    "start": "714440",
    "end": "721480"
  },
  {
    "text": "more complicated example I'm going to the second white box now a partition can split so in Dynamo DB partitions will",
    "start": "721480",
    "end": "729560"
  },
  {
    "text": "split in order to keep you know again going back to the latency through performance um it can split on based on",
    "start": "729560",
    "end": "735920"
  },
  {
    "text": "size or throughput um there's a lot of information out here um out on the web",
    "start": "735920",
    "end": "741040"
  },
  {
    "text": "uh for Dynamo DBS how partitions split and and how to calculate how many partitions you have uh essentially when",
    "start": "741040",
    "end": "747040"
  },
  {
    "text": "a partition splits it's shard split as well so in this case partition one has",
    "start": "747040",
    "end": "753440"
  },
  {
    "text": "its own lineage of shards just like the first one but it'll split into two part child partitions partition two and three",
    "start": "753440",
    "end": "761199"
  },
  {
    "text": "and each of them will get its own lineage um so this is now interesting because uh an update that used to go to",
    "start": "761199",
    "end": "768639"
  },
  {
    "text": "partition one into one of the one of its shards now has to land in Partition two",
    "start": "768639",
    "end": "775279"
  },
  {
    "text": "or three so this goes back to um what go asked ear what happens to an item when",
    "start": "775279",
    "end": "781000"
  },
  {
    "text": "it splits it'll land in one of the two partitions but not both so it'll be one",
    "start": "781000",
    "end": "786560"
  },
  {
    "text": "or the other uh it'll be mutually exclusive basically um and then in that case all of its updates will be recorded",
    "start": "786560",
    "end": "793760"
  },
  {
    "text": "in the corresponding Shard lineage so it can so if an update went to you know say",
    "start": "793760",
    "end": "800480"
  },
  {
    "text": "uh The Shard lineage for partition 2 you will never see it in the other lineage",
    "start": "800480",
    "end": "805839"
  },
  {
    "text": "again very important when you're trying to like track different items across time and space and you want to make sure",
    "start": "805839",
    "end": "812160"
  },
  {
    "text": "you process the records in the same order uh so to summarize yes so what",
    "start": "812160",
    "end": "817720"
  },
  {
    "text": "about deletions how does that work uh deletions work the same way so if you delete it from partition one then that",
    "start": "817720",
    "end": "825160"
  },
  {
    "text": "record will show up in say like the uh Shard number four in its lineage and",
    "start": "825160",
    "end": "830639"
  },
  {
    "text": "later on uh when this partition splits it splits it based on keyspace so the existing items also becomes uh got gets",
    "start": "830639",
    "end": "839120"
  },
  {
    "text": "transferred onto partition 2 and three and depending on which item you delete you might see a delete uh record show up",
    "start": "839120",
    "end": "845839"
  },
  {
    "text": "in in Partition 2's lineage or you might see a delete record show up in Partition 3's lineage yeah so for the purpose of",
    "start": "845839",
    "end": "853519"
  },
  {
    "text": "lineage the Zer underlit considered children of under",
    "start": "853519",
    "end": "859040"
  },
  {
    "text": "the original yes exactly um so if you think",
    "start": "859040",
    "end": "864120"
  },
  {
    "start": "860000",
    "end": "900000"
  },
  {
    "text": "about it in this way uh the top example zero is a parent of one one is apparent",
    "start": "864120",
    "end": "869399"
  },
  {
    "text": "of two in this case um like like you mentioned um in the bottom example uh",
    "start": "869399",
    "end": "875160"
  },
  {
    "text": "Shard number four of partition one is a parent of both its children which is zeros of the partition two and three um",
    "start": "875160",
    "end": "883040"
  },
  {
    "text": "so that's actually a good point I should probably make a different diagram um so",
    "start": "883040",
    "end": "888120"
  },
  {
    "text": "a a child a parent Shard now can have two children because the partition split into two two partitions um so it causes",
    "start": "888120",
    "end": "895720"
  },
  {
    "text": "two new shards to be created uh yes so how fast is the par",
    "start": "895720",
    "end": "903680"
  },
  {
    "text": "question is basically while par you have right are the rights buffered until the",
    "start": "903680",
    "end": "910480"
  },
  {
    "text": "are done and then decide where the new are going to go or how does that work so",
    "start": "910480",
    "end": "916480"
  },
  {
    "text": "I don't know the all the details like the nuances um first of all uh it",
    "start": "916480",
    "end": "922000"
  },
  {
    "text": "definitely only shows up either once in the parent or once in one of the CH child you won't see like the same record",
    "start": "922000",
    "end": "928199"
  },
  {
    "text": "show up twice for sure for correctness um in terms of whether it's buffered I believe what happens in this",
    "start": "928199",
    "end": "935519"
  },
  {
    "text": "case is they actually um they actually like add two partitions first so the two",
    "start": "935519",
    "end": "942680"
  },
  {
    "text": "two partitions um now I don't quote me on this but I think how it works is that",
    "start": "942680",
    "end": "948079"
  },
  {
    "text": "they're all in sync like all three partitions are in sync and receiving all the rights at the same time and then at",
    "start": "948079",
    "end": "953920"
  },
  {
    "text": "once everything gets dropped like half of it gets dropped imediately available during partition time yeah there's no",
    "start": "953920",
    "end": "960000"
  },
  {
    "text": "downtime um so when when this split happens uh depending on like yeah",
    "start": "960000",
    "end": "967360"
  },
  {
    "text": "basically the the short answer is there's no downtime um the long answer is sometimes you will receive like an",
    "start": "967360",
    "end": "972800"
  },
  {
    "text": "internal server error like a 500 but that should only be that like last like",
    "start": "972800",
    "end": "978240"
  },
  {
    "text": "maybe less than two seconds and that's when like you happen to want to make a right which has to go to the master but",
    "start": "978240",
    "end": "985079"
  },
  {
    "text": "at that moment the master is being transferred um that's why it has to last like less than two seconds but we have",
    "start": "985079",
    "end": "991120"
  },
  {
    "text": "like slas internally to to monitor those those metrics any more questions seems",
    "start": "991120",
    "end": "997440"
  },
  {
    "text": "like there's a lot of interest on this slide um it's a little bit of a tricky concept but I think uh it's it's",
    "start": "997440",
    "end": "1004720"
  },
  {
    "text": "interesting to understand because it's a it's a classic distributive system problem yeah",
    "start": "1004720",
    "end": "1011199"
  },
  {
    "text": "yes yes so if you want to read yeah like you said uh 0 1 2 3 4 and now you don't",
    "start": "1024559",
    "end": "1031199"
  },
  {
    "text": "know where your item went depending on how it split so you have to read both zeros and both ones once you find it",
    "start": "1031199",
    "end": "1038199"
  },
  {
    "text": "then you can eliminate the other one because you know it's in this lineage for sure so it'll stay in the same lineage yes how do you know how do you",
    "start": "1038199",
    "end": "1046760"
  },
  {
    "text": "know it's end",
    "start": "1046760",
    "end": "1050840"
  },
  {
    "text": "cons yeah so um if you're tracking a specific record um most of our use cases",
    "start": "1068600",
    "end": "1075880"
  },
  {
    "text": "you're just processing batches of Records right but if you're tracking a specific one then you'd have to do what",
    "start": "1075880",
    "end": "1081000"
  },
  {
    "text": "I said which is you have to go to both uh children um and like I said A Shard",
    "start": "1081000",
    "end": "1086240"
  },
  {
    "text": "lasts like four hours so you probably find it in one of the shards in the first one if not and you're unlucky then",
    "start": "1086240",
    "end": "1093520"
  },
  {
    "text": "you have to go to the children for both shards to to keep to keep searching for it um you just want",
    "start": "1093520",
    "end": "1101200"
  },
  {
    "text": "to mod",
    "start": "1103880",
    "end": "1107880"
  },
  {
    "text": "next update in theen how does someone deter so there's no there's actually no",
    "start": "1108919",
    "end": "1115720"
  },
  {
    "text": "time Concept in streams currently I don't know if it's coming um there's just a sequence number that's sure",
    "start": "1115720",
    "end": "1124000"
  },
  {
    "text": "yeah yeah is easy way to which branch it goes to",
    "start": "1124000",
    "end": "1129360"
  },
  {
    "text": "sequence sequence yeah so so yeah there's a monotonically increasing sequence number that'll tell you like",
    "start": "1129360",
    "end": "1135120"
  },
  {
    "text": "this record came after this one um and then that's that's how we determine order um but there's no way to",
    "start": "1135120",
    "end": "1141880"
  },
  {
    "text": "deterministically uh decide which which Shard it actually went to",
    "start": "1141880",
    "end": "1147919"
  },
  {
    "text": "yeah so what happens then if somehow your stre your sh how is your lamb yeah",
    "start": "1161720",
    "end": "1170520"
  },
  {
    "text": "so I'll go through this in like two more slides is Lambda actually hides all of this away I'm talking about this uh",
    "start": "1170520",
    "end": "1177400"
  },
  {
    "text": "simply for the sake of like it's interesting to understand how how stream scales and what a consumer needs to do",
    "start": "1177400",
    "end": "1184280"
  },
  {
    "text": "in order to process everything correctly um because Lambda is a managed service and it's awesome um it actually hides",
    "start": "1184280",
    "end": "1190360"
  },
  {
    "text": "away a lot of this uh which I'll talk about and if you still have a question after that slide then then we can discuss a little bit more um so with all",
    "start": "1190360",
    "end": "1197799"
  },
  {
    "text": "that in mind uh there's some there's a lot of requirements I just put some of the ones that are more interesting up",
    "start": "1197799",
    "end": "1203000"
  },
  {
    "start": "1198000",
    "end": "1308000"
  },
  {
    "text": "here um as the stream scales for most large tables you need distributed workers there's no way that all this",
    "start": "1203000",
    "end": "1209200"
  },
  {
    "text": "processing will happen on the single node for a table that's like 100 terabytes for example um and it must",
    "start": "1209200",
    "end": "1215400"
  },
  {
    "text": "follow the Shard lineage I talked about this to ensure correctness and consistency um and most of the time it",
    "start": "1215400",
    "end": "1222200"
  },
  {
    "text": "should support checkpointing uh which is both the optimization and the correctness guarantee to prevent losing",
    "start": "1222200",
    "end": "1227880"
  },
  {
    "text": "data what this means is we only keep the records active and readable from streams",
    "start": "1227880",
    "end": "1233480"
  },
  {
    "text": "for 24 hours so if you have a node that's processing these incoming stream and it's not checkpointing and it dies",
    "start": "1233480",
    "end": "1241480"
  },
  {
    "text": "and another node will come in and it doesn't know where the processing ended so the best they can do is start from",
    "start": "1241480",
    "end": "1248320"
  },
  {
    "text": "the very beginning of the stream and start over but the problem with that is you have a lot of catch up to do so in",
    "start": "1248320",
    "end": "1254039"
  },
  {
    "text": "the meantime you might get more records that come in and if you don't catch up within in that 24-hour window you would",
    "start": "1254039",
    "end": "1260440"
  },
  {
    "text": "have lost older records and then that point if the node fails again and the new node comes in and starts processing",
    "start": "1260440",
    "end": "1267080"
  },
  {
    "text": "from the beginning you would have missed like a bunch of record that you didn't process so it's both like a correctness",
    "start": "1267080",
    "end": "1272240"
  },
  {
    "text": "issue and a performance um optimization to ensure that you regularly checkpoint",
    "start": "1272240",
    "end": "1277600"
  },
  {
    "text": "and like record somewhere like I've processed records up to this point so that the new node when it comes back",
    "start": "1277600",
    "end": "1283640"
  },
  {
    "text": "from a failure it can just pick up where it left off um I will go through kinesis client Library which does this quite",
    "start": "1283640",
    "end": "1290200"
  },
  {
    "text": "well uh a little bit like three slides down and you you see what I mean there and of course I already talked about",
    "start": "1290200",
    "end": "1295960"
  },
  {
    "text": "partial failure recovery so there needs to be some logical way of Distributing the work among multiple nodes or",
    "start": "1295960",
    "end": "1301400"
  },
  {
    "text": "machines um so that each machine is processing a subset of the",
    "start": "1301400",
    "end": "1307200"
  },
  {
    "text": "stream so uh I talked about aw's Lambda super awesome service it's really easy",
    "start": "1307200",
    "end": "1313840"
  },
  {
    "start": "1308000",
    "end": "1558000"
  },
  {
    "text": "and quick to set up I'm actually going to use uh AWS Lambda in My Demo because it's so easy to to Showcase something uh",
    "start": "1313840",
    "end": "1321000"
  },
  {
    "text": "it's a managed service which means you get official AWS support um and it's cost efficient I say this because the",
    "start": "1321000",
    "end": "1328200"
  },
  {
    "text": "pricing model for Dynamo be streams is based on a polling model so you have to go to streams every time and and say",
    "start": "1328200",
    "end": "1334000"
  },
  {
    "text": "give me some records give me some records some of those polls if you have a period of inactivity on your table are",
    "start": "1334000",
    "end": "1339640"
  },
  {
    "text": "going to come back empty and say you know there's no changes since last time you asked me um and but you have you",
    "start": "1339640",
    "end": "1345000"
  },
  {
    "text": "still have to pay for those polls because every time you ask Dynamo DB for B of Records it's it's charged based on",
    "start": "1345000",
    "end": "1350640"
  },
  {
    "text": "the number of calls now the benefit of using Lambda is Lambda only executes",
    "start": "1350640",
    "end": "1356360"
  },
  {
    "text": "your function if there are records so it effectively hides away the cost of doing",
    "start": "1356360",
    "end": "1361880"
  },
  {
    "text": "those empty polls so that's why I say it's cost efficient sometimes depending on your traffic pattern um but if you",
    "start": "1361880",
    "end": "1368880"
  },
  {
    "text": "have a table that only occasionally has rights then I think most of the time LDA will come up to be more uh cost",
    "start": "1368880",
    "end": "1375520"
  },
  {
    "text": "efficient and of course built-in monitoring and and Metric on CL Cloud watch with most AWS Services we use",
    "start": "1375520",
    "end": "1382840"
  },
  {
    "text": "kin's client Library sometimes also because first of all it already exists it's open sourced it's on GitHub it",
    "start": "1382840",
    "end": "1389600"
  },
  {
    "text": "actually was written originally for the Kinesis stream a few years back when we released Dynamo DB streams we simply",
    "start": "1389600",
    "end": "1394960"
  },
  {
    "text": "wrote an adapter because the apis are so similar so you can use the same Library",
    "start": "1394960",
    "end": "1400480"
  },
  {
    "text": "just attach the adapter to it and then consume from Dynamo be stream as well it allows for a lot more customization more",
    "start": "1400480",
    "end": "1407880"
  },
  {
    "text": "control your code um there's different customers with different requests so for",
    "start": "1407880",
    "end": "1413159"
  },
  {
    "text": "more advanced customers that want to go beyond what Lambda is able to provide them um the one of the most uh important",
    "start": "1413159",
    "end": "1419520"
  },
  {
    "text": "ones is state for processing so how Lambda Works um just a quick quick overview is Lambda will pull the stream",
    "start": "1419520",
    "end": "1426840"
  },
  {
    "text": "and if it gets a batch of Records um you give it a function so it'll execute the",
    "start": "1426840",
    "end": "1431880"
  },
  {
    "text": "function on top of the records so whatever processing you want to do with the records it'll spin up execute it and",
    "start": "1431880",
    "end": "1438120"
  },
  {
    "text": "then spin itself down there's no stateful transitions between the two so if you want to like save some sort of",
    "start": "1438120",
    "end": "1443480"
  },
  {
    "text": "State across processes processing um that's not possible with Lambda because",
    "start": "1443480",
    "end": "1448559"
  },
  {
    "text": "it's completely stateless which is also one of its advantages but in this case",
    "start": "1448559",
    "end": "1453799"
  },
  {
    "text": "um if you want to do like for for example if you just want to do like some simple buffering between uh batches of",
    "start": "1453799",
    "end": "1459840"
  },
  {
    "text": "Records you can't do that in Lambda because you can't actually hold the state anywhere um if you run Kinesis",
    "start": "1459840",
    "end": "1465360"
  },
  {
    "text": "client Library yourself on ec2 or your own machines you can definitely do that um and right now there's a lot of",
    "start": "1465360",
    "end": "1472080"
  },
  {
    "text": "documentation on cl's client Library so some customers definitely prefer to run it on their own and one of the other",
    "start": "1472080",
    "end": "1479200"
  },
  {
    "text": "bigger advantages that I've noticed in working with customers is that Lambda currently only supports in region in",
    "start": "1479200",
    "end": "1487039"
  },
  {
    "text": "invocations so you can only invoke a Lambda function on a stream that's in the same region as that function um some",
    "start": "1487039",
    "end": "1494320"
  },
  {
    "text": "customers want to do cross Regional calls for different reasons um so in this case you can run your Kinesis",
    "start": "1494320",
    "end": "1499559"
  },
  {
    "text": "client library in an ec2 instance In Like Us West and you can still attach or",
    "start": "1499559",
    "end": "1505279"
  },
  {
    "text": "or call do cross Regional polling calls to a stream in Us East and that that's",
    "start": "1505279",
    "end": "1511240"
  },
  {
    "text": "perfectly fine you can't do that in Lambda so that's sort of the the uh a lot I got a lot of questions on on",
    "start": "1511240",
    "end": "1517320"
  },
  {
    "text": "Lambda versus Kinesis I would say as a start most people should just go to Lambda it's easy to setup you don't have",
    "start": "1517320",
    "end": "1523039"
  },
  {
    "text": "to understand the code you don't have to really write code against it Kinesis client library is definitely for more",
    "start": "1523039",
    "end": "1528520"
  },
  {
    "text": "advanced users and sometimes if you want to customize how about the checkpointing between these two it's the same yeah",
    "start": "1528520",
    "end": "1535360"
  },
  {
    "text": "they both perform checkpoints um I'll actually go through the details of KCl because it's really interesting Landa I",
    "start": "1535360",
    "end": "1542039"
  },
  {
    "text": "believe uses a very similar structure as what KCl does behind the scenes it's just managed for you and obviously they",
    "start": "1542039",
    "end": "1548679"
  },
  {
    "text": "do their own optimizations to make it a better service but the checkpointing is is uh is automatically done for both of",
    "start": "1548679",
    "end": "1556640"
  },
  {
    "text": "these so I talked about Distributing work um how do you actually build a",
    "start": "1556640",
    "end": "1562440"
  },
  {
    "start": "1558000",
    "end": "1735000"
  },
  {
    "text": "consumer that follows the lineage and distributes work automatically um the central most important Concept in KCl",
    "start": "1562440",
    "end": "1570279"
  },
  {
    "text": "and how it consumes a distributed stream is actually a lease table in Dynamo DB",
    "start": "1570279",
    "end": "1575640"
  },
  {
    "text": "um so sort of uses Dynam DB as like the single source of metadata in order to distribute work um so in this case I",
    "start": "1575640",
    "end": "1582960"
  },
  {
    "text": "didn't draw all the leases out but what happens is U for a table with two partitions each partition has its own",
    "start": "1582960",
    "end": "1589279"
  },
  {
    "text": "lineage of shards from 0 to four so there's actually 10 shards available",
    "start": "1589279",
    "end": "1595039"
  },
  {
    "text": "only two are available for right but you can read from all 10 uh what happens is",
    "start": "1595039",
    "end": "1600279"
  },
  {
    "text": "the KCl actually goes in and when it initializes it creates a lease table and",
    "start": "1600279",
    "end": "1605440"
  },
  {
    "text": "it creates like what what they call a lease which means there is work to be done for each Single Shard um I for",
    "start": "1605440",
    "end": "1612760"
  },
  {
    "text": "shorthand I said lease 0 0 so what that means is lease for partition zero Shard",
    "start": "1612760",
    "end": "1618760"
  },
  {
    "text": "zero so technically this lease table should have 10 entries so 0 0 0 1 02 0 3",
    "start": "1618760",
    "end": "1625559"
  },
  {
    "text": "04 and then one Z one1 Etc um it creates all these leases which are all these",
    "start": "1625559",
    "end": "1631559"
  },
  {
    "text": "entries in the table uh for workers to go and read the table so they know okay this is all the work I need to do and I",
    "start": "1631559",
    "end": "1638279"
  },
  {
    "text": "also need to distribute it among the workers available and then two slides down I will show how that that's",
    "start": "1638279",
    "end": "1644159"
  },
  {
    "text": "actually done so the least table name in Dynamo DB becomes super important uh",
    "start": "1644159",
    "end": "1650279"
  },
  {
    "text": "some customers use the same lease table name and that becomes really confusing because if you have an application",
    "start": "1650279",
    "end": "1655880"
  },
  {
    "text": "that's consuming from one stream you want to make sure it has a unique name so all the workers can go to the same",
    "start": "1655880",
    "end": "1660919"
  },
  {
    "text": "table to check for work if you use the same name for multiple streams then what's going to happen is different",
    "start": "1660919",
    "end": "1667200"
  },
  {
    "text": "workers for different streams are going to go go to the same table and create leases and it's going to mess things up a lot um So within KCl um they actually",
    "start": "1667200",
    "end": "1675519"
  },
  {
    "text": "make it very clear that for each application that consumes from streams you need to make sure that has a unique",
    "start": "1675519",
    "end": "1681640"
  },
  {
    "text": "what they call an application name but that name just gets used for the lease table so taking a very very quick um",
    "start": "1681640",
    "end": "1688880"
  },
  {
    "text": "breather step back how this all works and comes together with KCl you have an",
    "start": "1688880",
    "end": "1694600"
  },
  {
    "text": "application that writes data to a table so that's the partitions and all the wrs gets recorded",
    "start": "1694600",
    "end": "1701159"
  },
  {
    "text": "in a stream which is composed of different shs as I mentioned earlier and",
    "start": "1701159",
    "end": "1706480"
  },
  {
    "text": "in order to consume from this stream over multiple shards you probably have",
    "start": "1706480",
    "end": "1711600"
  },
  {
    "text": "multiple nodes doing the work in this case I just put one worker per node you can have multiple but usually it makes",
    "start": "1711600",
    "end": "1718799"
  },
  {
    "text": "sense to have just one worker working on one node the representation is a little easier and these workers read and write",
    "start": "1718799",
    "end": "1725320"
  },
  {
    "text": "from the one lease table single lease table in order to distribute work and I'll talk about how in the next",
    "start": "1725320",
    "end": "1732840"
  },
  {
    "text": "slide okay so here is a very quick snapshot of a lease table that we had",
    "start": "1732840",
    "end": "1739120"
  },
  {
    "start": "1735000",
    "end": "2003000"
  },
  {
    "text": "back in the day and the First Column is a simple lease key that's just the Shard ID it's Unique to each Shard um so",
    "start": "1739120",
    "end": "1746919"
  },
  {
    "text": "remember this gets initialized at the beginning and then there's a attribute for checkpoint so if I'm a node and I'm",
    "start": "1746919",
    "end": "1752960"
  },
  {
    "text": "making Pro progress I once in a while I'll record the the record ID as a",
    "start": "1752960",
    "end": "1758720"
  },
  {
    "text": "checkpoint to say hey I've processed everything up to this checkpoint if I die earlier uh later and then another",
    "start": "1758720",
    "end": "1765000"
  },
  {
    "text": "node comes up then I can uh go to this checkpoint that I saved earlier to start from that point onwards and then there's",
    "start": "1765000",
    "end": "1771360"
  },
  {
    "text": "a lease counter field so for each node that's consuming streams it needs to",
    "start": "1771360",
    "end": "1776600"
  },
  {
    "text": "have some kind of a health check or health monitor so this is like a heartbeat so it increments the lease",
    "start": "1776600",
    "end": "1781760"
  },
  {
    "text": "counter to say hey I'm alive I'm working and I'm processing records actively and",
    "start": "1781760",
    "end": "1787399"
  },
  {
    "text": "other workers can monitor this field this lease counter field and if I don't update this field in a given amount of",
    "start": "1787399",
    "end": "1793960"
  },
  {
    "text": "time it's configurable then the other worker knows okay you fail to health check you're probably unresponsive or",
    "start": "1793960",
    "end": "1800240"
  },
  {
    "text": "not working I'm going to take over the lease instead to take over the lease you actually write your worker ID into the",
    "start": "1800240",
    "end": "1806440"
  },
  {
    "text": "lease owner field so and this is a conditional right to make sure no two workers um grab the same lease at the",
    "start": "1806440",
    "end": "1813360"
  },
  {
    "text": "same time right so if I'm worker one and I die and there's two other workers two",
    "start": "1813360",
    "end": "1818519"
  },
  {
    "text": "and three trying to take over my lease one of them will win because one of them will will take over um and and and the",
    "start": "1818519",
    "end": "1825480"
  },
  {
    "text": "conditional right will go through and then finally to keep track of lineage remember I said the consumer has to",
    "start": "1825480",
    "end": "1831559"
  },
  {
    "text": "consume the records in a in a given lineage um each Shard actually has a parent Shard ID that's recorded in the",
    "start": "1831559",
    "end": "1838240"
  },
  {
    "text": "table so that if I'm a worker and I start working on the first Shard I don't know if I can start working on it yet",
    "start": "1838240",
    "end": "1844559"
  },
  {
    "text": "because earlier shards like my parent shards may not have been processed by the application so you don't want to",
    "start": "1844559",
    "end": "1850640"
  },
  {
    "text": "process later records before earlier records have been completely processed so I can use the parent Shard ID go into",
    "start": "1850640",
    "end": "1858279"
  },
  {
    "text": "the table check for the parent Shard ID to see hey is my parent Shard processing completed um and if it's completed the",
    "start": "1858279",
    "end": "1865000"
  },
  {
    "text": "checkpoint field will actually say Shard end so that's how I know that's completed once I see it's completed then",
    "start": "1865000",
    "end": "1872240"
  },
  {
    "text": "I can start processing the current Shard so that's how KCl keeps track of um the",
    "start": "1872240",
    "end": "1878039"
  },
  {
    "text": "processing so the so the this lease table becomes so important because it becomes a single source of read and",
    "start": "1878039",
    "end": "1884200"
  },
  {
    "text": "write in order to keep track of which work are being done and which workers are alive um and there's a ton of",
    "start": "1884200",
    "end": "1890440"
  },
  {
    "text": "tunable configurations within KCl to optimize for performance for instance how long is the health check period how",
    "start": "1890440",
    "end": "1896679"
  },
  {
    "text": "long do I wait until I take over a lease and assume another worker is basically non-responsive or dead um how long do I",
    "start": "1896679",
    "end": "1904279"
  },
  {
    "text": "wait between polling the parent sh to see if the parent processing is done if I pay PLL too frequently it might take",
    "start": "1904279",
    "end": "1910559"
  },
  {
    "text": "up too much you know CPU time unnecessarily if I'm keep if I'm always asking are you done are you done um how",
    "start": "1910559",
    "end": "1917279"
  },
  {
    "text": "long should I wait between empty polls when I'm asking the stream service if there are new records right the more I",
    "start": "1917279",
    "end": "1923360"
  },
  {
    "text": "pull um arguably the more I pay because there's a lot of um cost associated with",
    "start": "1923360",
    "end": "1928840"
  },
  {
    "text": "asking streams for new records um so luckily KCl is a really well studied",
    "start": "1928840",
    "end": "1934000"
  },
  {
    "text": "Library a lot of people use it both for Kinesis and Dynam DB so the official documentation and the open source",
    "start": "1934000",
    "end": "1940080"
  },
  {
    "text": "Community has a lot of sort of best practices and just user experience um",
    "start": "1940080",
    "end": "1945159"
  },
  {
    "text": "that's available on the internet um again a Lambda is awesome because you don't",
    "start": "1945159",
    "end": "1950360"
  },
  {
    "text": "have to worry about any of this no checkpointing table no Distributing work",
    "start": "1950360",
    "end": "1955639"
  },
  {
    "text": "ads Lambda handles all that for you all you have to give Lambda is a function is",
    "start": "1955639",
    "end": "1960960"
  },
  {
    "text": "your code like what you want to do with a record and then it'll just spin up you",
    "start": "1960960",
    "end": "1966159"
  },
  {
    "text": "know internally some service that runs your code based on these records it'll checkpoint it for you to make sure that",
    "start": "1966159",
    "end": "1972120"
  },
  {
    "text": "you don't lose records um it's fully managed a lot of metrics and in the demo",
    "start": "1972120",
    "end": "1978159"
  },
  {
    "text": "later I'll actually show you the the cloud watch metrics and",
    "start": "1978159",
    "end": "1983399"
  },
  {
    "text": "logs okay so that was a lot of information uh any questions before I",
    "start": "1983399",
    "end": "1988880"
  },
  {
    "text": "move on to the demo awesome if you have questions uh",
    "start": "1988880",
    "end": "1994279"
  },
  {
    "text": "later feel free to stop me after the presentation we can chat offline if you think your question is uh very Advanced",
    "start": "1994279",
    "end": "2000639"
  },
  {
    "text": "and don't want to take up sort of presentation time so bit of a spoiler",
    "start": "2000639",
    "end": "2006720"
  },
  {
    "start": "2003000",
    "end": "2105000"
  },
  {
    "text": "earlier but I'm going to show cross replication as the application because it's a very straightforward application",
    "start": "2006720",
    "end": "2012559"
  },
  {
    "text": "to demo using dynb streams and Lambda a very quick overview just to",
    "start": "2012559",
    "end": "2017840"
  },
  {
    "text": "make sure everybody's on the same page what I'm doing here um so there are rights that happen to Dynamo DB in Us",
    "start": "2017840",
    "end": "2024519"
  },
  {
    "text": "East one and we're going to turn on streams on that table and that's recording the rights now using a",
    "start": "2024519",
    "end": "2030720"
  },
  {
    "text": "consumer in my case I'm I'm going to use Lambda um but you could use KCl or some other open source consumer um to",
    "start": "2030720",
    "end": "2038720"
  },
  {
    "text": "basically replicate the the rights now on the open source Library uh we",
    "start": "2038720",
    "end": "2044399"
  },
  {
    "text": "actually as the Dynam be team we actually wrote Our Own library on top of KCl uses KCl to replicate as well um and",
    "start": "2044399",
    "end": "2053000"
  },
  {
    "text": "that's just to provide like a another example of how we could use KCl to do something like this and some people want",
    "start": "2053000",
    "end": "2059040"
  },
  {
    "text": "to do like only replicate certain records so there's filtering delayed replica so you delay for a certain",
    "start": "2059040",
    "end": "2064760"
  },
  {
    "text": "period of time before you replicate to prevent against logical corruption U so it's nice to have something open source",
    "start": "2064760",
    "end": "2071040"
  },
  {
    "text": "that you can read and and look at um so right now we're actually in the process of refactoring that library to make it",
    "start": "2071040",
    "end": "2076720"
  },
  {
    "text": "look cleaner update the documentation so by next week it should be up and updated on GitHub there is an existing version",
    "start": "2076720",
    "end": "2083040"
  },
  {
    "text": "on GitHub that's a little more cluttered um but just to let everybody know that that's available in my case I'm only",
    "start": "2083040",
    "end": "2089599"
  },
  {
    "text": "going to replicate to one other table um in this case it's showing hey after you have the records you can replay the",
    "start": "2089599",
    "end": "2096079"
  },
  {
    "text": "changes on both tables and then you get an exact replica uh for real time before",
    "start": "2096079",
    "end": "2101960"
  },
  {
    "text": "I go to the Lambda function itself here is the what I consider to be sort of the heavy lifting part of the",
    "start": "2101960",
    "end": "2108760"
  },
  {
    "start": "2105000",
    "end": "2190000"
  },
  {
    "text": "function you're going to see this later too but I wanted to put it on the slide um so I have the records in a buffer so",
    "start": "2108760",
    "end": "2116240"
  },
  {
    "text": "a for loop around the buffer for every single um record in the buffer I get the",
    "start": "2116240",
    "end": "2121839"
  },
  {
    "text": "old image and the new image and what I do is this is figure out what type of request I need to send based on the",
    "start": "2121839",
    "end": "2127280"
  },
  {
    "text": "images um obviously there's some validation that's done in the images to make sure everything's legal um but if the old",
    "start": "2127280",
    "end": "2135040"
  },
  {
    "text": "image is valid um but the new image is not that means I have an old image but I",
    "start": "2135040",
    "end": "2141040"
  },
  {
    "text": "don't have a new image so that change is a delete item so that's what the first if does apply the the delete item change",
    "start": "2141040",
    "end": "2148280"
  },
  {
    "text": "on the key now if in the other case else if if if the new image is valid that",
    "start": "2148280",
    "end": "2155200"
  },
  {
    "text": "means that's either an update or an insert but since we have the entire",
    "start": "2155200",
    "end": "2161319"
  },
  {
    "text": "image already we don't really care we can just clobber the existing item if it's an update it'll just replace it um",
    "start": "2161319",
    "end": "2168119"
  },
  {
    "text": "if it's a put and it'll insert it um so we just do put item in that case for",
    "start": "2168119",
    "end": "2173160"
  },
  {
    "text": "both operations it's bit of an optimization um else you know error if we don't recognize what kind of",
    "start": "2173160",
    "end": "2179200"
  },
  {
    "text": "operation we need to do um and then there's some management of like how many inflight requests do I have so I can",
    "start": "2179200",
    "end": "2184640"
  },
  {
    "text": "keep track of um I I'll show this a little bit",
    "start": "2184640",
    "end": "2189560"
  },
  {
    "start": "2190000",
    "end": "2302000"
  },
  {
    "text": "later um you see it in the actual function this is a code snippet so like validate I wrote myself",
    "start": "2192040",
    "end": "2200480"
  },
  {
    "text": "yeah no it doesn't do that um so um no it's just every every time uh",
    "start": "2210560",
    "end": "2219119"
  },
  {
    "text": "every time a change happens the node our storage backend that processes that",
    "start": "2219119",
    "end": "2224680"
  },
  {
    "text": "change publishes that change directly to streams so if you you insert a new item",
    "start": "2224680",
    "end": "2230680"
  },
  {
    "text": "it'll just publish a a change log to streams to say item inserted here is the",
    "start": "2230680",
    "end": "2235839"
  },
  {
    "text": "item and if you updated an item it'll when it updates the item it has the old",
    "start": "2235839",
    "end": "2241200"
  },
  {
    "text": "image so it'll publish the old image and then after it updates it'll publish the new image in the same record",
    "start": "2241200",
    "end": "2249078"
  },
  {
    "text": "update or yeah so that's the optimization I talked about um in thisa in this case we don't care because you",
    "start": "2255520",
    "end": "2262240"
  },
  {
    "text": "have the new image so you know it'll end up being here at some point so we just put the entire thing in you could take",
    "start": "2262240",
    "end": "2268880"
  },
  {
    "text": "the old and the new and then do it in a conditional right if you're doing some sort of you know fancy and in this case",
    "start": "2268880",
    "end": "2275240"
  },
  {
    "text": "because it's so simple we're just copying the record as is we don't need to do update or put we just put the",
    "start": "2275240",
    "end": "2280839"
  },
  {
    "text": "entire thing in cuz if you only updated a field it doesn't matter we have the updated item anyway so we just clobber",
    "start": "2280839",
    "end": "2286280"
  },
  {
    "text": "everything in the existing so this becomes complicated if you have like two writers and you made like some",
    "start": "2286280",
    "end": "2291920"
  },
  {
    "text": "additional wrs to the to the destination table and then you clobber everything there so you lose data um but for the",
    "start": "2291920",
    "end": "2297720"
  },
  {
    "text": "sake of demoing I thought this was like the simplest way to to code it up okay so we can go to the demo just",
    "start": "2297720",
    "end": "2305160"
  },
  {
    "start": "2302000",
    "end": "2520000"
  },
  {
    "text": "going to quit this um I realized that I can't actually see",
    "start": "2305160",
    "end": "2310200"
  },
  {
    "text": "that very well so I need to mirror my displays",
    "start": "2310200",
    "end": "2315480"
  },
  {
    "text": "good so uh we have our demo uh sort of Dev account that we use uh I just need",
    "start": "2315480",
    "end": "2322520"
  },
  {
    "text": "to go to Dynamo DB to show you guys which table I'm going to",
    "start": "2322520",
    "end": "2327880"
  },
  {
    "text": "use so I'm in uh North Virginia can you guys see everything is that off the",
    "start": "2329640",
    "end": "2334880"
  },
  {
    "text": "screen",
    "start": "2334880",
    "end": "2337880"
  },
  {
    "text": "interesting that's better okay so we're in uh Us East one or Us",
    "start": "2343960",
    "end": "2351839"
  },
  {
    "text": "East and I have a bunch of tables I'm just going to use one of them as a source uh I created this one earlier if",
    "start": "2351839",
    "end": "2359200"
  },
  {
    "text": "you look under items this is our Dynam DB console if any of you don't know I inserted an item the uh primary key is",
    "start": "2359200",
    "end": "2366839"
  },
  {
    "text": "ID as a made of something and then I inserted an attribute called Daniela um",
    "start": "2366839",
    "end": "2371880"
  },
  {
    "text": "right now if you go to overview you can see that there is no stream enabled uh there was in the past which",
    "start": "2371880",
    "end": "2379160"
  },
  {
    "text": "is why it shows a stream AR in but it doesn't matter the view type is no so um",
    "start": "2379160",
    "end": "2384839"
  },
  {
    "text": "when you create a Lambda function you can actually let it enable the stream for you but since we're already here I want to show you the interface so you",
    "start": "2384839",
    "end": "2391480"
  },
  {
    "text": "can click on manage streams and it chooses one of the view types if you",
    "start": "2391480",
    "end": "2396560"
  },
  {
    "text": "want to change view type after you've enabled it you have to disable the current one and then enable the new",
    "start": "2396560",
    "end": "2402520"
  },
  {
    "text": "stream so that's sort of a Nuance to be careful so in",
    "start": "2402520",
    "end": "2408640"
  },
  {
    "text": "this uh it could change uh I don't know honestly the enough details about the backend to know whether that can",
    "start": "2410319",
    "end": "2416640"
  },
  {
    "text": "dynamically change I think it might make the management of the streams a little bit more complicated uh so I'm going to",
    "start": "2416640",
    "end": "2422280"
  },
  {
    "text": "go ahead and choose new and old images and enable it and it say you see this spinning uh",
    "start": "2422280",
    "end": "2429920"
  },
  {
    "text": "it'll take a maybe a few seconds it's in updating mode so if I refresh and scroll",
    "start": "2429920",
    "end": "2436400"
  },
  {
    "text": "down still updating while that's happening I will go and create a new table my destination table",
    "start": "2436400",
    "end": "2444880"
  },
  {
    "text": "uh which region let's just do Northern California I work in pal Alto so I use this region a lot um so less there's",
    "start": "2444880",
    "end": "2451760"
  },
  {
    "text": "nothing in here so we create a table and we'll call it demo replica",
    "start": "2451760",
    "end": "2458480"
  },
  {
    "text": "the partition ID obviously has to be the same because you're replicating the same items so",
    "start": "2458480",
    "end": "2464040"
  },
  {
    "text": "ID uh I think it was a string yeah it was a string okay and then use default",
    "start": "2464040",
    "end": "2471120"
  },
  {
    "text": "[Music] settings this is so annoying",
    "start": "2471120",
    "end": "2477599"
  },
  {
    "text": "create okay so now that's been created I don't need to turn on streams on my destination table unless I want a daisy",
    "start": "2477599",
    "end": "2483400"
  },
  {
    "text": "chain so I'm just going to leave it this one should be done",
    "start": "2483400",
    "end": "2488640"
  },
  {
    "text": "now yeah so you see it's active and if we go back to click on",
    "start": "2488640",
    "end": "2493800"
  },
  {
    "text": "it uh you see that it's enabled and it",
    "start": "2493800",
    "end": "2499200"
  },
  {
    "text": "has the new and old images this one should be done now so we'll close it",
    "start": "2499200",
    "end": "2505640"
  },
  {
    "text": "yeah so now the demo replica is also active so we'll go to our Lambda console make sure it's in the same region North",
    "start": "2505640",
    "end": "2512599"
  },
  {
    "text": "Virginia as my source table in North Virginia called query test",
    "start": "2512599",
    "end": "2518599"
  },
  {
    "text": "um I actually wrote the function earlier to test it but for the sake of the demo",
    "start": "2518599",
    "end": "2524079"
  },
  {
    "start": "2520000",
    "end": "2535000"
  },
  {
    "text": "I'm going to copy the code and create a new function make sure that this is not",
    "start": "2524079",
    "end": "2529359"
  },
  {
    "text": "enabled yeah so it's disabled cool so let's pretend we're creating a new",
    "start": "2529359",
    "end": "2534480"
  },
  {
    "text": "Lambda function uh so Lambda actually creates a bunch of really helpful blueprints for you to get started in",
    "start": "2534480",
    "end": "2540720"
  },
  {
    "start": "2535000",
    "end": "2590000"
  },
  {
    "text": "this case I wrote my own code so I don't need it but there's one on like process stream so you can have like a very basic",
    "start": "2540720",
    "end": "2546880"
  },
  {
    "text": "Bo template of of how how to process records from a stream I can skip this step and then my function name let's say",
    "start": "2546880",
    "end": "2555280"
  },
  {
    "text": "Meetup demo description replicates data cross regions uh runtime so you can actually",
    "start": "2555280",
    "end": "2561839"
  },
  {
    "text": "write code in Java no. JS and python right now I think there are more language support coming later uh I just",
    "start": "2561839",
    "end": "2567559"
  },
  {
    "text": "wrote it in node.js because when it first launched it was just no. JS so I started using it for Lambda more um but",
    "start": "2567559",
    "end": "2575880"
  },
  {
    "text": "could have done it in anything oh and also it's nicer to use node.js or python because they provide this inline support",
    "start": "2575880",
    "end": "2582680"
  },
  {
    "text": "um if you choose Java you have to upload like a zip with your files which I like the inline support um so in this",
    "start": "2582680",
    "end": "2591079"
  },
  {
    "start": "2590000",
    "end": "2791000"
  },
  {
    "text": "function uh it automatically includes a custom Library which is the AWS SDK since you're on AWS um and then the",
    "start": "2591079",
    "end": "2598880"
  },
  {
    "text": "native libraries for no JS but if you need custom libraries then you have to write it and package it up as a zip and",
    "start": "2598880",
    "end": "2604520"
  },
  {
    "text": "then upload it in this case I'm doing something so simple that I don't need anything other than the SDK so I'm",
    "start": "2604520",
    "end": "2610440"
  },
  {
    "text": "pasting my code here um want to walk through it a little bit it does a bunch of setup I actually timed it just so",
    "start": "2610440",
    "end": "2617119"
  },
  {
    "text": "that the logs show something interesting um a bunch of sort of just configurations I was making earlier uh",
    "start": "2617119",
    "end": "2624119"
  },
  {
    "text": "here is the important part destination region and table I'm writing to um so",
    "start": "2624119",
    "end": "2629200"
  },
  {
    "text": "I'm writing to North California so that's us West one and my table name",
    "start": "2629200",
    "end": "2635480"
  },
  {
    "text": "what I call it demo replica got it",
    "start": "2635480",
    "end": "2641480"
  },
  {
    "text": "oops demo replica um so this sets up the SDK the",
    "start": "2642880",
    "end": "2648720"
  },
  {
    "text": "region and it initializes the Dynamo to be client uh this part does some uh very",
    "start": "2648720",
    "end": "2655720"
  },
  {
    "text": "basic logging uh this one actually takes all the records and buffers it",
    "start": "2655720",
    "end": "2662400"
  },
  {
    "text": "um and then handle response this is the call back function for node.js it just says what happens after the",
    "start": "2662400",
    "end": "2668839"
  },
  {
    "text": "requests are finished it either logs the error if there was an error or if it succeeded I actually keep check of the",
    "start": "2668839",
    "end": "2675680"
  },
  {
    "text": "number of inflight requests I have so that when it goes to zero meaning I've processed all the requests and they've",
    "start": "2675680",
    "end": "2680800"
  },
  {
    "text": "all completed I can actually call contact succeed what context succeed happens in Lambda it means in Lambda is",
    "start": "2680800",
    "end": "2687720"
  },
  {
    "text": "you're saying okay I'm done processing shut down my Lambda function everything succeeded and I then print out something",
    "start": "2687720",
    "end": "2694440"
  },
  {
    "text": "in the log so I can see how many records I cuz remember like you're getting like batches of records from Lambda so you",
    "start": "2694440",
    "end": "2701400"
  },
  {
    "text": "could get like a 100 and you want to make sure you processed all 100 before you end the function um so this is the",
    "start": "2701400",
    "end": "2707880"
  },
  {
    "text": "snippet that you saw earlier on the slide um exactly the same I literally just copied it and I'm you know",
    "start": "2707880",
    "end": "2714480"
  },
  {
    "text": "incrementing the counter to make sure I'm keeping track and then validate is down here I just validate whether the image is actually defined",
    "start": "2714480",
    "end": "2722960"
  },
  {
    "text": "yeah be as orinal the what the right units the right units oh uh it should at",
    "start": "2723920",
    "end": "2731520"
  },
  {
    "text": "least be the uh like at at least be the same right because if you if you want to",
    "start": "2731520",
    "end": "2737359"
  },
  {
    "text": "keep the input and output this um if you're doing other operations on it you might have to um provision",
    "start": "2737359",
    "end": "2743640"
  },
  {
    "text": "more sometimes if you want like to self throttle a little bit it might be okay",
    "start": "2743640",
    "end": "2749040"
  },
  {
    "text": "to to have like 80% of it the danger is if you have that like indefinitely obviously you're going to fall behind",
    "start": "2749040",
    "end": "2755040"
  },
  {
    "text": "right in your in your replication process so that's like um the good thing is with that you you just monitor it in",
    "start": "2755040",
    "end": "2761640"
  },
  {
    "text": "the in the console like you monitor with the with the Laten see",
    "start": "2761640",
    "end": "2767880"
  },
  {
    "text": "yeah oh no so streams right now is for uh data plan operations only yeah",
    "start": "2774480",
    "end": "2781720"
  },
  {
    "text": "control playing I think you can use cloud trails to audit the control playing operations um um an iops change",
    "start": "2781720",
    "end": "2788680"
  },
  {
    "text": "would go to update table yeah okay so validate uh pretty simple I actually",
    "start": "2788680",
    "end": "2795520"
  },
  {
    "start": "2791000",
    "end": "2860000"
  },
  {
    "text": "want to show the rest of it because it can be a bit tricky uh Handler it's just your your file automatically gets called",
    "start": "2795520",
    "end": "2801520"
  },
  {
    "text": "index. uh JS and Handler up here you can see that oops",
    "start": "2801520",
    "end": "2808359"
  },
  {
    "text": "um I called like export Handler so it just matches to make sure which function it's actually running um roll so this is",
    "start": "2808359",
    "end": "2815599"
  },
  {
    "text": "actually a really important concept cept inside AWS most of you probably know about this but for Lambda to execute you",
    "start": "2815599",
    "end": "2822119"
  },
  {
    "text": "actually need to give it some permissions to execute um and that's an IM role identity man access management",
    "start": "2822119",
    "end": "2828920"
  },
  {
    "text": "uh so what that means is you have to create like a a user kind of like a role and then you have to attach a policy to",
    "start": "2828920",
    "end": "2834760"
  },
  {
    "text": "it and the policy has to say I'm allowed to as you know use these operations I'm",
    "start": "2834760",
    "end": "2840280"
  },
  {
    "text": "not allowed to do this and this so I want to go through that um so you can use an existing role um I prefer",
    "start": "2840280",
    "end": "2847240"
  },
  {
    "text": "creating a new one just to show people what are was happening so there's templates again you can create one based",
    "start": "2847240",
    "end": "2853119"
  },
  {
    "text": "on Dynam the be event stream and then if you click on it actually brings you to the console for I am which is really",
    "start": "2853119",
    "end": "2859040"
  },
  {
    "text": "nice um in most cases uh if you read like security principles you want to",
    "start": "2859040",
    "end": "2864480"
  },
  {
    "start": "2860000",
    "end": "2963000"
  },
  {
    "text": "give the minimum the least the least privileged principles so in Cross region replication what you need to give the",
    "start": "2864480",
    "end": "2871359"
  },
  {
    "text": "privilege is technically reading from The Source table stream and writing to",
    "start": "2871359",
    "end": "2876680"
  },
  {
    "text": "the the the so put item delete item update item to the destination table and",
    "start": "2876680",
    "end": "2882000"
  },
  {
    "text": "that's all you want to keep the policy privileges to uh in this case I'm just going to uh do like resource star just",
    "start": "2882000",
    "end": "2888880"
  },
  {
    "text": "for the sake of time uh so here you have Lambda dyal V streams role that's the",
    "start": "2888880",
    "end": "2894319"
  },
  {
    "text": "name they they give to the default role and then you can create a policy um so",
    "start": "2894319",
    "end": "2900400"
  },
  {
    "text": "here's a policy I used before we can take a look at it so an Lambda invoke function that's",
    "start": "2900400",
    "end": "2909359"
  },
  {
    "text": "important you need to be given privileges to do that and then it allows a bunch of actions get records get shart",
    "start": "2909359",
    "end": "2916359"
  },
  {
    "text": "iterator describe stream those three are all stream related and then there's list",
    "start": "2916359",
    "end": "2921640"
  },
  {
    "text": "streams um there's also logs because the Lambda function is going to be publishing logs to Cloud watch and then",
    "start": "2921640",
    "end": "2930200"
  },
  {
    "text": "a bunch of other you know update table put item update item delete item uh with the resource like I said you should",
    "start": "2930200",
    "end": "2936200"
  },
  {
    "text": "really only limit it to the two tables in this case just let's just for the sake of time just allow",
    "start": "2936200",
    "end": "2943319"
  },
  {
    "text": "it okay so now we have a roll um a bunch of these tunable parameters uh in this",
    "start": "2943319",
    "end": "2949319"
  },
  {
    "text": "case I don't think we need to touch it but yeah VPC support you can tune a bunch of",
    "start": "2949319",
    "end": "2955359"
  },
  {
    "text": "things and then we can review everything uh looks good create",
    "start": "2955359",
    "end": "2961720"
  },
  {
    "text": "function okay so the function is created um but if you know notice what we haven't done is actually tell it which",
    "start": "2962880",
    "end": "2969559"
  },
  {
    "start": "2963000",
    "end": "2975000"
  },
  {
    "text": "stream to to uh read from so that's actually an event source so you can",
    "start": "2969559",
    "end": "2975480"
  },
  {
    "start": "2975000",
    "end": "3108000"
  },
  {
    "text": "actually attach multiple event sources if you want to replicate multiple tables um but in this case I'm just going to",
    "start": "2975480",
    "end": "2982000"
  },
  {
    "text": "click on add event Source Event Source type is a Dynamo DB stream so you choose",
    "start": "2982000",
    "end": "2987880"
  },
  {
    "text": "the table my Event Source is query test so let's scroll down to query test",
    "start": "2987880",
    "end": "2995440"
  },
  {
    "text": "batch size so the maximum is a th I believe minimum is one uh so this batch",
    "start": "2995440",
    "end": "3001440"
  },
  {
    "text": "size is just going to dynamoob be streams and asking uh give me a batch up",
    "start": "3001440",
    "end": "3006480"
  },
  {
    "text": "to this size so if you ask for 100 you're not going to get 100 you might get one if there's one available so",
    "start": "3006480",
    "end": "3012440"
  },
  {
    "text": "it'll return as long as there's something um the default is 100 so we'll leave it there starting position trim",
    "start": "3012440",
    "end": "3018079"
  },
  {
    "text": "Horizon latest so what this means is start at the beginning of the stream or start from now like start from",
    "start": "3018079",
    "end": "3024319"
  },
  {
    "text": "everything from this point onwards um we'll start from the beginning it doesn't matter I haven't written to the table anyway um it just reminds you to",
    "start": "3024319",
    "end": "3032160"
  },
  {
    "text": "add Dynamo DB permissions to to your role which I did so that's good enable it",
    "start": "3032160",
    "end": "3038520"
  },
  {
    "text": "submit okay so now it's enabled and no records processed",
    "start": "3038520",
    "end": "3045960"
  },
  {
    "text": "so your stream based on like a key value or something I'm just thinking of",
    "start": "3050400",
    "end": "3057799"
  },
  {
    "text": "data say only updating upates Toes that",
    "start": "3057799",
    "end": "3065760"
  },
  {
    "text": "Associated filter something like that yeah right now that's not supported",
    "start": "3069079",
    "end": "3076119"
  },
  {
    "text": "um I know it's a big customer ask so they're working on sort of like almost like tagging the record to say hey it's",
    "start": "3076119",
    "end": "3082880"
  },
  {
    "text": "for this key and then in the Lambda function you can say I only want to process this key so you give it the ones",
    "start": "3082880",
    "end": "3089760"
  },
  {
    "text": "that you want to process and the function would then be specifically um so what happens behind the scenes is it",
    "start": "3089760",
    "end": "3095480"
  },
  {
    "text": "only invoke the Lambda function if it's that that record um and that's sort of tagging SL filtering um probably an",
    "start": "3095480",
    "end": "3102359"
  },
  {
    "text": "upcoming feature I don't have like road map or anything um but a big customer ass so so good question um so it should",
    "start": "3102359",
    "end": "3108880"
  },
  {
    "start": "3108000",
    "end": "3292000"
  },
  {
    "text": "be active now here's the monitoring I was talking about earlier you can see invocations duration errors throttles if",
    "start": "3108880",
    "end": "3116000"
  },
  {
    "text": "you click on it it actually just brings you to the cloudwatch console which has the full set of data or you can say say",
    "start": "3116000",
    "end": "3122319"
  },
  {
    "text": "view logs in cloudwatch and it shows you the logs um let's play with this first",
    "start": "3122319",
    "end": "3127559"
  },
  {
    "text": "though so this is my source table Us East one um and then I can actually edit",
    "start": "3127559",
    "end": "3133559"
  },
  {
    "text": "this to say Daniela let's say my last name meow save so it should actually uh",
    "start": "3133559",
    "end": "3141160"
  },
  {
    "text": "replicate the entire",
    "start": "3141160",
    "end": "3144798"
  },
  {
    "text": "entire thing over so here's my replica in North",
    "start": "3148920",
    "end": "3154680"
  },
  {
    "text": "California uh bring up the items there we go so uh because it's",
    "start": "3154680",
    "end": "3161000"
  },
  {
    "text": "doing a put item even though this had nothing in it before uh it just copied the entire stream um I've actually tried",
    "start": "3161000",
    "end": "3167720"
  },
  {
    "text": "to get it to work such that um I want to see if I can beat the replication time",
    "start": "3167720",
    "end": "3173000"
  },
  {
    "text": "but it's actually so fast that I couldn't um but we can put Alias dym",
    "start": "3173000",
    "end": "3179640"
  },
  {
    "text": "that's my Alias at Amazon um and I'm going to try to refresh that one as soon as possible so I can save go over",
    "start": "3179640",
    "end": "3186799"
  },
  {
    "text": "refresh oh it's already there yeah so it seems to be really really fast um",
    "start": "3186799",
    "end": "3193400"
  },
  {
    "text": "probably also because going from us East to us West is only across the continent might be a little bit slower from us",
    "start": "3193400",
    "end": "3199280"
  },
  {
    "text": "East to like Sydney um but it's pretty cool and we can try like a few things like and create an item and say like",
    "start": "3199280",
    "end": "3205960"
  },
  {
    "text": "blah blah uh and then I can even add like an different attribute so hello oops",
    "start": "3205960",
    "end": "3214359"
  },
  {
    "text": "whatever typo save so that adds an item and then if I refresh shows up yeah um",
    "start": "3214359",
    "end": "3222040"
  },
  {
    "text": "so that was pretty simple for a function I can delete it um and then over here",
    "start": "3222040",
    "end": "3228200"
  },
  {
    "text": "let's delete it yeah so I've never really been able to like manually beat the the check across um and and this",
    "start": "3228200",
    "end": "3235280"
  },
  {
    "text": "scan is actually eventually consistent so um but here let's go back to the monitoring just to take a quick look uh",
    "start": "3235280",
    "end": "3242319"
  },
  {
    "text": "if we like I don't know if this refreshes it so you can see it's invoked",
    "start": "3242319",
    "end": "3247440"
  },
  {
    "text": "twice there's a bunch of metrics with regards to like how long it took um if you click on",
    "start": "3247440",
    "end": "3254839"
  },
  {
    "text": "logs uh where's my log group so if there's sometimes the cloud",
    "start": "3258760",
    "end": "3265319"
  },
  {
    "text": "watch can because is eventually consistent only publishes periodically can take a little bit before it shows up",
    "start": "3265319",
    "end": "3271200"
  },
  {
    "text": "um other times if there's no error it actually doesn't show up for a long time um I'm guessing what happens with Lambda",
    "start": "3271200",
    "end": "3277000"
  },
  {
    "text": "is it only flush the logs if there's an error and then so it wants you to see it right away and if everything is going um",
    "start": "3277000",
    "end": "3283880"
  },
  {
    "text": "successfully they only flush it periodically um but if there was an error here you you'd see like like an",
    "start": "3283880",
    "end": "3290160"
  },
  {
    "text": "error Spike um so it's pretty cool and then you can change the code um and",
    "start": "3290160",
    "end": "3296960"
  },
  {
    "start": "3292000",
    "end": "3483000"
  },
  {
    "text": "what else oh so in debug mode you can actually turn off you can just click on",
    "start": "3296960",
    "end": "3302000"
  },
  {
    "text": "it and disable it once you disable it I didn't actually yet you can actually test the code and in configure test",
    "start": "3302000",
    "end": "3308680"
  },
  {
    "text": "event you can create your own like sample record to see like oh what happens if I try to do this um and then",
    "start": "3308680",
    "end": "3316240"
  },
  {
    "text": "you can use a template I think there's a Dynamo DV",
    "start": "3316240",
    "end": "3320559"
  },
  {
    "text": "one where is it there used to be a oh there we go it's up",
    "start": "3323160",
    "end": "3330319"
  },
  {
    "text": "here oh there we go sorry I can't see anything okay so if you choose the",
    "start": "3333440",
    "end": "3338920"
  },
  {
    "text": "template that it gives you like a a really",
    "start": "3338920",
    "end": "3343880"
  },
  {
    "text": "nice basically a sample record so if you save and test I actually wonder what happens in this time oh I think down",
    "start": "3344200",
    "end": "3351000"
  },
  {
    "text": "here it'll it'll say something",
    "start": "3351000",
    "end": "3356880"
  },
  {
    "text": "and if you go to error no error interesting yeah so I",
    "start": "3357200",
    "end": "3363520"
  },
  {
    "text": "mean things to play with anything so can you do",
    "start": "3363520",
    "end": "3369559"
  },
  {
    "text": "Direction so you can set up our Lambda function and then another one and then",
    "start": "3369559",
    "end": "3375319"
  },
  {
    "text": "do it across um but what happens is if you're writing the same item and there's",
    "start": "3375319",
    "end": "3381520"
  },
  {
    "text": "no like infinite Loop then that's okay but if you think about it the right will get propagated to the the the",
    "start": "3381520",
    "end": "3387359"
  },
  {
    "text": "destination table and then what it'll do is it'll actually propagate that same right over back because you have you",
    "start": "3387359",
    "end": "3393960"
  },
  {
    "text": "have lamba functions going both way um but uh in this case with Crossen replication it's okay because if you",
    "start": "3393960",
    "end": "3401400"
  },
  {
    "text": "write the same item and it doesn't actually change the item then you don't see an event log so Dynam DB stream is",
    "start": "3401400",
    "end": "3408480"
  },
  {
    "text": "not uh does not record no Ops where there's basically no operation done um",
    "start": "3408480",
    "end": "3413839"
  },
  {
    "text": "so it'll propagate once to the destination table the destination table will try to propagate it back it'll be a",
    "start": "3413839",
    "end": "3419359"
  },
  {
    "text": "no op and it'll stop there um but if you're like saying like if you're like incrementing something and you're",
    "start": "3419359",
    "end": "3426520"
  },
  {
    "text": "updating um",
    "start": "3426520",
    "end": "3430079"
  },
  {
    "text": "[Music] and so you're saying um no conflicts for",
    "start": "3434970",
    "end": "3442880"
  },
  {
    "text": "for example aend only append only would work in this case but the thing is the",
    "start": "3442880",
    "end": "3448760"
  },
  {
    "text": "function itself doesn't do that validation for you so your application would have to do that by directional",
    "start": "3448760",
    "end": "3454720"
  },
  {
    "text": "there go okay I mean that's the end of the demo um I'm hoping to publish this",
    "start": "3454720",
    "end": "3459960"
  },
  {
    "text": "template as a blueprint but they have various constraints um so I'm in the process of dealing with it but hopefully",
    "start": "3459960",
    "end": "3465920"
  },
  {
    "text": "it'll show up as a as a blueprint um so you can actually when you create a function you can see it um but this is",
    "start": "3465920",
    "end": "3471640"
  },
  {
    "text": "just something I wrote up quickly for for this presentation so cool thank you very much",
    "start": "3471640",
    "end": "3480799"
  }
]