[
  {
    "start": "0",
    "end": "90000"
  },
  {
    "text": "good afternoon or good evening I'm not sure I think the Sun is set right I",
    "start": "2120",
    "end": "8160"
  },
  {
    "text": "don't know this is one of those transition periods my name is josue",
    "start": "8160",
    "end": "14099"
  },
  {
    "text": "Sorensen technically that's not my name my name is James Christopher Sorensen the third gesso is my Amazon given name",
    "start": "14099",
    "end": "20189"
  },
  {
    "text": "so if you want to email me email gesso at amazon.com",
    "start": "20189",
    "end": "25769"
  },
  {
    "text": "I'm a senior principal engineer at Amazon I've been with AWS for about 14 years as one of the original developers",
    "start": "25769",
    "end": "32758"
  },
  {
    "text": "on s3 way back when I launched our IOT product and for the last couple of years",
    "start": "32759",
    "end": "38760"
  },
  {
    "text": "I've been working on DynamoDB and today what I wanted to do was give a talk",
    "start": "38760",
    "end": "45149"
  },
  {
    "text": "about under the hood kind of how dynamo works and the way I plan on approaching",
    "start": "45149",
    "end": "51149"
  },
  {
    "text": "this is how we onboard engineers to the Dynamo team so the first thing that an",
    "start": "51149",
    "end": "57539"
  },
  {
    "text": "engineer when they joined dynamo has to do is interact with the API they kind of",
    "start": "57539",
    "end": "64110"
  },
  {
    "text": "take the role that you guys as customers have you know they probably haven't used",
    "start": "64110",
    "end": "69479"
  },
  {
    "text": "dynamo you know especially that guys we hire out of college we have them do things like make a table create indexes",
    "start": "69479",
    "end": "76650"
  },
  {
    "text": "set up streams a lot of the you know the public facing API of dynamodb and once",
    "start": "76650",
    "end": "83490"
  },
  {
    "text": "they get done with that we move on to what this talk is going to be or the onboarding so what are the goals of this",
    "start": "83490",
    "end": "91320"
  },
  {
    "start": "90000",
    "end": "90000"
  },
  {
    "text": "talk well wanna hopefully you'll learn about some of the features of dynamo and how they work but I think the real goal",
    "start": "91320",
    "end": "98159"
  },
  {
    "text": "or that and I hope you take away from this is understanding how this tool",
    "start": "98159",
    "end": "103170"
  },
  {
    "text": "works and can work better for you I think an analogy is kind of appropriate here",
    "start": "103170",
    "end": "109409"
  },
  {
    "text": "you know if dynamo is a tool and the analogy I think of is a car right a car",
    "start": "109409",
    "end": "116009"
  },
  {
    "text": "is a tool that you use to get to work and if if you start driving your car and you know nothing about a car and you're",
    "start": "116009",
    "end": "122490"
  },
  {
    "text": "driving down the road and the engine's going right screaming really loud and",
    "start": "122490",
    "end": "128200"
  },
  {
    "text": "and you're going along with traffic if you know nothing about cars you think hey everything's fine and dandy right",
    "start": "128200",
    "end": "134200"
  },
  {
    "text": "but the reality is you've probably shifted it into first gear and you're streaming along and that car is gonna",
    "start": "134200",
    "end": "140020"
  },
  {
    "text": "last you for maybe 5,000 miles total because you're gonna wear it out now you're not gonna wear out DynamoDB but",
    "start": "140020",
    "end": "146860"
  },
  {
    "text": "clearly using the tool the way it's intended to be used can give you much better results and so understanding how",
    "start": "146860",
    "end": "153430"
  },
  {
    "text": "dynamo works on the inside I think is will let you more effectively use dynamo",
    "start": "153430",
    "end": "159540"
  },
  {
    "text": "so the way we're going to do this is kind of walk through these five different features of dynamo we're gonna",
    "start": "159540",
    "end": "166300"
  },
  {
    "text": "start with like really the simplest and move on toward until we get to global tables so we'll talk about how do you",
    "start": "166300",
    "end": "172720"
  },
  {
    "text": "get an item and put an item talk about auto scaling and provision how backup a restorer works in dynamo and we talked a",
    "start": "172720",
    "end": "180370"
  },
  {
    "text": "little bit about streams and wrap up with global tables so when you get an",
    "start": "180370",
    "end": "186519"
  },
  {
    "text": "item from dynamo you make a call and you come through the network and dynamo doesn't care whether you're coming from",
    "start": "186519",
    "end": "191560"
  },
  {
    "text": "the public Internet whether you're coming from the ec2 network or a VP see a virtual private cloud we don't care",
    "start": "191560",
    "end": "198340"
  },
  {
    "text": "how you get to dynamodb but when you get there you land on a process that we call",
    "start": "198340",
    "end": "205720"
  },
  {
    "start": "201000",
    "end": "201000"
  },
  {
    "text": "the request router and this is the public facing API for dynamo and the",
    "start": "205720",
    "end": "211510"
  },
  {
    "text": "first thing the request router does is it authenticates the request it makes sure that the caller is who they say they are and this",
    "start": "211510",
    "end": "219400"
  },
  {
    "text": "authentication system is common among all AWS components we use the same same",
    "start": "219400",
    "end": "225489"
  },
  {
    "text": "subsystem for that the other thing the request order do will do is make sure",
    "start": "225489",
    "end": "231100"
  },
  {
    "text": "that you are authorized to do whatever you're doing or asking to do so in this",
    "start": "231100",
    "end": "236530"
  },
  {
    "text": "case you're trying to get an item and there would be some policy in this can I'm just showing a sample policy here it",
    "start": "236530",
    "end": "243250"
  },
  {
    "start": "239000",
    "end": "239000"
  },
  {
    "text": "gives me permission to get an item from from dynamo this is I just threw this up",
    "start": "243250",
    "end": "249100"
  },
  {
    "text": "as an example the details are not really important for this but after we've authenticated and authorized the next",
    "start": "249100",
    "end": "257349"
  },
  {
    "text": "thing that the request router will do is it makes a call out to our storage now and this is where your actual data is",
    "start": "257349",
    "end": "264100"
  },
  {
    "start": "258000",
    "end": "258000"
  },
  {
    "text": "stored and the stories node will look up the piece of data that you're asking for",
    "start": "264100",
    "end": "269170"
  },
  {
    "text": "the key I'll get the data associated data with it send it back to the request router and then on to back to you pretty",
    "start": "269170",
    "end": "277330"
  },
  {
    "text": "straightforward a port gets to be a little bit more complicated the request",
    "start": "277330",
    "end": "284080"
  },
  {
    "text": "router will talk to a storage node and it'll tell it to put this data the",
    "start": "284080",
    "end": "289990"
  },
  {
    "text": "stories you know and will store it locally and it has because we need to durably store your data putting it on",
    "start": "289990",
    "end": "296170"
  },
  {
    "text": "one server clearly puts the data at risk so what dino does is it writes it to",
    "start": "296170",
    "end": "301570"
  },
  {
    "text": "tells to other storage nodes to store that data and the reality of what dinamo",
    "start": "301570",
    "end": "307390"
  },
  {
    "text": "does is it waits for one other node to acknowledge it to reduce latency the third the third",
    "start": "307390",
    "end": "314080"
  },
  {
    "text": "node is usually really close behind but we just have to get it to two nodes and then we the request the storage node",
    "start": "314080",
    "end": "320650"
  },
  {
    "text": "will acknowledge to the request router send the best send you back the the results for them for the put the say",
    "start": "320650",
    "end": "328450"
  },
  {
    "text": "that we were successful now I bet a lot of you have hopefully read the Dynamo",
    "start": "328450",
    "end": "335770"
  },
  {
    "text": "paper we published his paper notes but 11 years ago 10 years ago something like",
    "start": "335770",
    "end": "340810"
  },
  {
    "text": "that they talked about dynamo and the Dynamo that's explained in that paper is",
    "start": "340810",
    "end": "348400"
  },
  {
    "text": "not the same dynamo that we use today dynamodb has evolved from dynamo and so",
    "start": "348400",
    "end": "354940"
  },
  {
    "text": "in the Dynamo paper we talked about quorum and that's how Dino Dynamo",
    "start": "354940",
    "end": "361300"
  },
  {
    "text": "guaranteed correctness is we did quorum puts quorum reads dynamo DB doesn't do",
    "start": "361300",
    "end": "366669"
  },
  {
    "text": "that and instead we use something called packed cells well so Paxos is this",
    "start": "366669",
    "end": "372700"
  },
  {
    "start": "369000",
    "end": "369000"
  },
  {
    "text": "algorithm that Leslie Lamport wrote this paper called the part-time Parliament a long long time ago in 1989",
    "start": "372700",
    "end": "380350"
  },
  {
    "text": "I guess it was and this paper didn't get a lot of recognition err or notice at",
    "start": "380350",
    "end": "386979"
  },
  {
    "text": "the time in 2001 he wrote the follow-up paper called paxos made simple and I",
    "start": "386979",
    "end": "393550"
  },
  {
    "text": "guess it was at that time that really people understood the the power of the thing that he had proposed in this original",
    "start": "393550",
    "end": "399980"
  },
  {
    "text": "paper and what paxos is is a way of getting a bunch of distributed machines",
    "start": "399980",
    "end": "405380"
  },
  {
    "text": "to all agree on a certain value whatever that value is that you're trying to",
    "start": "405380",
    "end": "410900"
  },
  {
    "text": "agree on an in dynamo case that thing that we're trying to get it to agree on",
    "start": "410900",
    "end": "416030"
  },
  {
    "text": "is a leader so Dinamo is running Paxos",
    "start": "416030",
    "end": "421160"
  },
  {
    "text": "among the storage nodes to elect a leader for that partition or four-year table and so what happens when you do",
    "start": "421160",
    "end": "429140"
  },
  {
    "text": "the put is the point is sent to the leaders storage node and there's the",
    "start": "429140",
    "end": "434810"
  },
  {
    "text": "leader is always up-to-date definitionally to allow it to even become leader you have to know that you",
    "start": "434810",
    "end": "440990"
  },
  {
    "text": "have all the mutations up until that point if you don't you have to go to you",
    "start": "440990",
    "end": "446240"
  },
  {
    "text": "one of your peers get yourself caught up because you you can't you know like when",
    "start": "446240",
    "end": "452630"
  },
  {
    "text": "you're doing a put a conditional put you have to know that you have the correct value to compare the put to so we elect",
    "start": "452630",
    "end": "460370"
  },
  {
    "text": "the leader and then again we propagate that data out to the peer storage nodes",
    "start": "460370",
    "end": "468100"
  },
  {
    "start": "468000",
    "end": "468000"
  },
  {
    "text": "then what happens is that that leader is periodically part beating I think right",
    "start": "468100",
    "end": "473570"
  },
  {
    "text": "now we heartbeat once every 1.5 seconds out to the storage nodes to the peers",
    "start": "473570",
    "end": "479090"
  },
  {
    "text": "and if those peers miss some heartbeats two heartbeats three heartbeats you",
    "start": "479090",
    "end": "485720"
  },
  {
    "text": "should know that number exactly if they miss the heartbeats what will happen is that storage it'll say whoa the leaders",
    "start": "485720",
    "end": "492470"
  },
  {
    "text": "go on and it will initiate a new election round and say I would like to be leader now I think the other guy is gone and if his peers agree he'll become",
    "start": "492470",
    "end": "500450"
  },
  {
    "text": "the leader and take over the leadership of the partition modulo him having been",
    "start": "500450",
    "end": "506300"
  },
  {
    "text": "caught up to the with the most current rights so as you might guess dynamo",
    "start": "506300",
    "end": "513200"
  },
  {
    "text": "doesn't have one request router in three storage nodes we have thousands of them many thousands of them and like any well",
    "start": "513200",
    "end": "524260"
  },
  {
    "text": "architected AWS application like we you know we give guidance to our customers",
    "start": "524260",
    "end": "529730"
  },
  {
    "text": "say you need to be in multiple availability zones to have high availability well Dinamo is no different and we have",
    "start": "529730",
    "end": "535639"
  },
  {
    "text": "these storage nodes in different availability zones we have the request routers in different availability zones",
    "start": "535639",
    "end": "541399"
  },
  {
    "text": "so when you make this request you'll hit some arbitrary request router the request routers themselves are stateless",
    "start": "541399",
    "end": "547970"
  },
  {
    "text": "so it doesn't matter which one of those green boxes you land on to make your request that request router then will",
    "start": "547970",
    "end": "554510"
  },
  {
    "text": "make a call to the to the storage you know that is the leader of the partition that you need to talk to and then he'll",
    "start": "554510",
    "end": "560959"
  },
  {
    "text": "talk in turn to other storage nodes in the other availability zones this points",
    "start": "560959",
    "end": "569690"
  },
  {
    "text": "out an extra piece of complexity in the system that we didn't talk about initially and that is partition metadata",
    "start": "569690",
    "end": "576470"
  },
  {
    "text": "somehow that request router even though he's stateless has to know which one of",
    "start": "576470",
    "end": "581510"
  },
  {
    "text": "all those storage nodes is actually the leader for that partition so we have this other piece of subsystem called the",
    "start": "581510",
    "end": "587779"
  },
  {
    "text": "partition metadata service and we'll talk a little bit more about that later",
    "start": "587779",
    "end": "593560"
  },
  {
    "text": "the next thing I wanted to talk about is kind of how dynamo sets up tables now",
    "start": "594069",
    "end": "599300"
  },
  {
    "text": "this is pretty basic stuff for dynamo but I want to make sure that we're all on the same page so when you make a",
    "start": "599300",
    "end": "605329"
  },
  {
    "text": "table in dynamo you have to tell us a primary key a primary hash key as a matter of fact so in this example we",
    "start": "605329",
    "end": "613190"
  },
  {
    "text": "have some data about some customers where they live and who they are if you",
    "start": "613190",
    "end": "618829"
  },
  {
    "text": "really care those are all the members of my family my daughter is studying in",
    "start": "618829",
    "end": "623930"
  },
  {
    "text": "London and but what we so we have and we",
    "start": "623930",
    "end": "629630"
  },
  {
    "text": "have a customer ID and we're gonna choose that customer ID to be the primary key the primary hash key for",
    "start": "629630",
    "end": "635240"
  },
  {
    "text": "this table so the thing that dynamo then does on in the background is it computes",
    "start": "635240",
    "end": "641449"
  },
  {
    "start": "640000",
    "end": "640000"
  },
  {
    "text": "a hash given that that primary key and what that hash function is is you know",
    "start": "641449",
    "end": "648860"
  },
  {
    "text": "we don't publish it it's arbitrary but it is always the same hash function we",
    "start": "648860",
    "end": "655370"
  },
  {
    "text": "then take these hash values and sort the data essentially by these hash values now this is really happening as the",
    "start": "655370",
    "end": "661970"
  },
  {
    "text": "table is being built but we'll sort them and as you can see we've decided to partition this table",
    "start": "661970",
    "end": "667770"
  },
  {
    "text": "into three partitions so the first partition is going from hex value 0 to something like 0-7 something something",
    "start": "667770",
    "end": "675390"
  },
  {
    "text": "something and so on the second partition is going from the 7 to I don't know",
    "start": "675390",
    "end": "680580"
  },
  {
    "text": "maybe it looks like something like C I don't know and then we have our third partition we take these partitions and",
    "start": "680580",
    "end": "688170"
  },
  {
    "text": "now they have to get mapped out into the storage nodes so again we pick a we have",
    "start": "688170",
    "end": "693750"
  },
  {
    "text": "to pick a storage node in each of the three availability zones and then it's up to those storage nodes in the",
    "start": "693750",
    "end": "699930"
  },
  {
    "text": "availability zones to choose who's going to be the leader via the Paxos algorithm",
    "start": "699930",
    "end": "706279"
  },
  {
    "start": "706000",
    "end": "706000"
  },
  {
    "text": "this brings up a point or an opportunity to explain what eventual consistency",
    "start": "706640",
    "end": "711660"
  },
  {
    "text": "means inside of Dynamo and you know because puts it like I said have to be",
    "start": "711660",
    "end": "718470"
  },
  {
    "text": "consistent we have to talk to the leader but in Dinamo you can you can request that Dinamo allows you to do an",
    "start": "718470",
    "end": "725940"
  },
  {
    "text": "eventually consistent read and the way that happens and why it's eventually can",
    "start": "725940",
    "end": "730980"
  },
  {
    "text": "eventually consistent is because we let the request router randomly choose any",
    "start": "730980",
    "end": "736410"
  },
  {
    "text": "one of the three storage notes that are hosting that partition so if for",
    "start": "736410",
    "end": "742350"
  },
  {
    "text": "whatever reason this lower storage node is falling a little bit behind you may not get the most recent put to your data",
    "start": "742350",
    "end": "749400"
  },
  {
    "text": "now the odds of this are actually pretty low because well low is some definition",
    "start": "749400",
    "end": "756480"
  },
  {
    "text": "of low right because the leader we know is always up to date and we know that",
    "start": "756480",
    "end": "761550"
  },
  {
    "text": "one other storage node has to be up-to-date too for us to acknowledge the put so the odds that you're talking to a",
    "start": "761550",
    "end": "768210"
  },
  {
    "text": "storage node that is doesn't have the latest data is at worst one in three so",
    "start": "768210",
    "end": "775890"
  },
  {
    "text": "most of the time even with a eventually consistent read two-thirds of the time you will still get a consistent read but",
    "start": "775890",
    "end": "782430"
  },
  {
    "text": "you might not get the most consistent read and the thing about this is well",
    "start": "782430",
    "end": "788160"
  },
  {
    "text": "usually the question then arises well how inconsistent is it and that is part",
    "start": "788160",
    "end": "793589"
  },
  {
    "text": "of the problem with eventual consistency is eventually that node will get caught up I don't have an answer and it",
    "start": "793589",
    "end": "800499"
  },
  {
    "text": "can depend a lot on network traffic how far behind it fell you know did it just",
    "start": "800499",
    "end": "805600"
  },
  {
    "text": "recently get rebooted and it has a whole bunch of log to replay I mean so there are times where it can be quite a ways",
    "start": "805600",
    "end": "811600"
  },
  {
    "text": "behind but almost all the time it's within milliseconds of the leader the",
    "start": "811600",
    "end": "819790"
  },
  {
    "start": "819000",
    "end": "819000"
  },
  {
    "text": "next thing I'd like to do is kind of dig into what happens inside these storage nodes so the storage nodes have two data",
    "start": "819790",
    "end": "827949"
  },
  {
    "text": "structures in them there's a B+ tree or a B tree and the replication log so the B tree is where we do all the query and",
    "start": "827949",
    "end": "837029"
  },
  {
    "text": "user interactions so we have to put your item into the B tree when we do a get we",
    "start": "837029",
    "end": "842319"
  },
  {
    "text": "look and we use the B trees index to go find the item that you're looking for or scans or queries those are all against",
    "start": "842319",
    "end": "849850"
  },
  {
    "text": "the B tree and then we have a replication log and the replication log is recording every mutation that happens",
    "start": "849850",
    "end": "856869"
  },
  {
    "text": "against that particular partition so these are the really the two internal data structures to a storage I mentioned",
    "start": "856869",
    "end": "865809"
  },
  {
    "start": "864000",
    "end": "864000"
  },
  {
    "text": "our partition metadata service dynamo has this component we call it auto admin",
    "start": "865809",
    "end": "871779"
  },
  {
    "text": "and auto admin has many many roles in dynamo one of its roles is to make sure",
    "start": "871779",
    "end": "877660"
  },
  {
    "text": "that the partition metadata system is up-to-date and it's always being updated with the location and who the leader is",
    "start": "877660",
    "end": "885189"
  },
  {
    "text": "for a particular partition or for actually for all partitions auto admin",
    "start": "885189",
    "end": "892779"
  },
  {
    "start": "892000",
    "end": "892000"
  },
  {
    "text": "has another role and that is partition repair so when auto admin is he's",
    "start": "892779",
    "end": "899499"
  },
  {
    "text": "monitoring he/she/it is monitoring all the components or all the storage nodes",
    "start": "899499",
    "end": "904899"
  },
  {
    "text": "in dynamo and if there's a failure if it detects a failure it's an auto admins job to go figure out how to repair this",
    "start": "904899",
    "end": "912309"
  },
  {
    "text": "and the way it does that is by in listing another storage node to take",
    "start": "912309",
    "end": "919089"
  },
  {
    "text": "over that partition and so what we'll do is we'll copy the B tree from one of the",
    "start": "919089",
    "end": "924189"
  },
  {
    "text": "store existing stories notes clearly we can't go to the grey one because for whatever reason it's down so we go to",
    "start": "924189",
    "end": "931269"
  },
  {
    "text": "one the other storage nodes we start copying that b-tree to the new destination we",
    "start": "931269",
    "end": "937720"
  },
  {
    "text": "copy the replication log then we make sure that the replication log is applied to the B tree and once that process is",
    "start": "937720",
    "end": "944529"
  },
  {
    "text": "done the new node is essentially caught up with the leader and it actually is",
    "start": "944529",
    "end": "950379"
  },
  {
    "text": "even eligible eligible to become the leader of the partition and so this is",
    "start": "950379",
    "end": "955540"
  },
  {
    "text": "just an example of one of the things that our OTO admin does I wanted to talk",
    "start": "955540",
    "end": "963610"
  },
  {
    "start": "961000",
    "end": "961000"
  },
  {
    "text": "a little bit about secondary indexes so let's go back to this same table that we were talking about a little while ago",
    "start": "963610",
    "end": "969699"
  },
  {
    "text": "and now let's just build a secondary index on the name attributes for our",
    "start": "969699",
    "end": "975490"
  },
  {
    "text": "items so the process is very similar to a regular base table and that is we take",
    "start": "975490",
    "end": "983110"
  },
  {
    "text": "the the attribute that we're going to build the secondary index on we do the hash on it we sort it and then send it",
    "start": "983110",
    "end": "992019"
  },
  {
    "text": "to different partitions so again the top the purple partition is going maybe it's",
    "start": "992019",
    "end": "997269"
  },
  {
    "text": "split at zero eight zero eight zero zero hex something like that but one a key",
    "start": "997269",
    "end": "1004050"
  },
  {
    "text": "point here is that these secondary indexes don't have the same partitioning scheme the same number of partitions",
    "start": "1004050",
    "end": "1010860"
  },
  {
    "text": "they're actually independent of what happened with the base table which",
    "start": "1010860",
    "end": "1016290"
  },
  {
    "text": "sometimes is a little confusing but now",
    "start": "1016290",
    "end": "1023579"
  },
  {
    "text": "what happens when you update that secondary index the process for the base",
    "start": "1023579",
    "end": "1028918"
  },
  {
    "text": "table is exactly what we had described before but now we have to get the index",
    "start": "1028919",
    "end": "1034558"
  },
  {
    "text": "partitions updated and we do that with this process in independent process",
    "start": "1034559",
    "end": "1039750"
  },
  {
    "text": "called the log propagator and what the log propagator is doing is watching the replication log on the storage nodes and",
    "start": "1039750",
    "end": "1046579"
  },
  {
    "text": "taking its aware of the schema for your table what things are the secondary",
    "start": "1046579",
    "end": "1053100"
  },
  {
    "text": "index and it executes to put essentially",
    "start": "1053100",
    "end": "1058110"
  },
  {
    "text": "like the request router would do for the base table and it sends that that update",
    "start": "1058110",
    "end": "1064200"
  },
  {
    "text": "to the index partition but it's a little can be a little bit more complicated",
    "start": "1064200",
    "end": "1069480"
  },
  {
    "text": "than that if you update an item say the customer chain who said you know we had",
    "start": "1069480",
    "end": "1075720"
  },
  {
    "text": "our customer Bob and Bob wants to be known as Robert we would do an update to",
    "start": "1075720",
    "end": "1081179"
  },
  {
    "text": "the base table to change that attribute from Bob to Robert well what would happen is we would remove Bob from",
    "start": "1081179",
    "end": "1087690"
  },
  {
    "text": "someplace in the old index and rewrite that index someplace else so this points",
    "start": "1087690",
    "end": "1093120"
  },
  {
    "text": "out that you can get amplification of your rights to your secondary indexes even though you're only doing one put to",
    "start": "1093120",
    "end": "1100080"
  },
  {
    "text": "the table and it can get worse than that we allow you to have right now up to five global secondary indexes so a",
    "start": "1100080",
    "end": "1108210"
  },
  {
    "text": "single put to a base table can end up hitting eleven different storage nodes",
    "start": "1108210",
    "end": "1115490"
  },
  {
    "text": "or eleven different partitions and ultimately 33 different storage nodes",
    "start": "1115490",
    "end": "1120990"
  },
  {
    "text": "can be involved in that single update to a put",
    "start": "1120990",
    "end": "1125450"
  },
  {
    "start": "1127000",
    "end": "1127000"
  },
  {
    "text": "so I mentioned Auto admin and auto admin is kind of magic isn't the right word",
    "start": "1127730",
    "end": "1135630"
  },
  {
    "text": "it's the heart of DynamoDB it's the piece that that you know we call it the",
    "start": "1135630",
    "end": "1141600"
  },
  {
    "text": "DBA for dynamo it's a job is doing things like the repair that we talked about creating tables it does table",
    "start": "1141600",
    "end": "1148500"
  },
  {
    "text": "provisioning it is involved in splitting partitions when it they need to be split",
    "start": "1148500",
    "end": "1154679"
  },
  {
    "text": "lots of other things rebooting servers it's essentially our DBA like and and",
    "start": "1154679",
    "end": "1161190"
  },
  {
    "text": "the kind of the design principle that we have is that if a human had to do something to dynamo we need to get Auto",
    "start": "1161190",
    "end": "1168510"
  },
  {
    "text": "admin to do it because humans cannot manage a system at the scale of dynamo so yeah cool let's move on and talk a",
    "start": "1168510",
    "end": "1180299"
  },
  {
    "text": "little bit about provisioning table capacity this is probably all of your",
    "start": "1180299",
    "end": "1188250"
  },
  {
    "text": "favorite point part of dynamo when we build a table there's really there's",
    "start": "1188250",
    "end": "1195600"
  },
  {
    "start": "1189000",
    "end": "1189000"
  },
  {
    "text": "only two things we ever asked you that you have to give us one is the table name and two is what is the",
    "start": "1195600",
    "end": "1202110"
  },
  {
    "text": "primary key for that table but you can also have us or specify the read",
    "start": "1202110",
    "end": "1209250"
  },
  {
    "text": "capacity unit and the right capacity units for your table that's essentially how many reads are you allowed going to",
    "start": "1209250",
    "end": "1216060"
  },
  {
    "text": "do per second so a read capacity unit is is not just a single item read it",
    "start": "1216060",
    "end": "1221940"
  },
  {
    "text": "actually is based on the size of your item so one RCU will allow you to read",
    "start": "1221940",
    "end": "1226980"
  },
  {
    "text": "up to 4k of 4k object if your object is 20 K to read that item you will need 5",
    "start": "1226980",
    "end": "1235710"
  },
  {
    "text": "RC use in that second to do the read and the same is the true for writes so the",
    "start": "1235710",
    "end": "1243060"
  },
  {
    "text": "thing about provisioning though is that this is a really hard problem for you",
    "start": "1243060",
    "end": "1249390"
  },
  {
    "start": "1244000",
    "end": "1244000"
  },
  {
    "text": "guys and we know that because you know your goal is or desire is to pay as",
    "start": "1249390",
    "end": "1255840"
  },
  {
    "text": "little for Dynamo as possible and so you want that provisioning number as low as",
    "start": "1255840",
    "end": "1261270"
  },
  {
    "text": "possible but if you set it to low and your traffic changes in any any way at",
    "start": "1261270",
    "end": "1267630"
  },
  {
    "text": "all you're going to get throttled and depending on whether there are applications that that are fine that",
    "start": "1267630",
    "end": "1275220"
  },
  {
    "text": "with being throttled they're not that many of them but they don't care but for",
    "start": "1275220",
    "end": "1280830"
  },
  {
    "text": "the most part people really do care they want to get to the data that's sitting in dynamo DB so they end up over",
    "start": "1280830",
    "end": "1286230"
  },
  {
    "text": "provisioning their tables and like I said this is a hard trade-off and what I wanted to do today is walk through an",
    "start": "1286230",
    "end": "1293250"
  },
  {
    "text": "example where where we talk about some of the improvements and how these",
    "start": "1293250",
    "end": "1299250"
  },
  {
    "start": "1294000",
    "end": "1294000"
  },
  {
    "text": "improvements are made for provisioning and dinamo so this example is gonna go through we're gonna because right RC or",
    "start": "1299250",
    "end": "1308340"
  },
  {
    "text": "WRs WCU's are completely analogous to read RC use we're just gonna look at the",
    "start": "1308340",
    "end": "1315660"
  },
  {
    "text": "read side of the equation everything that we're talking about would be identical on the right side but we can",
    "start": "1315660",
    "end": "1320820"
  },
  {
    "text": "just ignore it for this example so we go back to our table and we have",
    "start": "1320820",
    "end": "1327000"
  },
  {
    "text": "this table provisioned for 300 our see us so what dynamo will do",
    "start": "1327000",
    "end": "1332039"
  },
  {
    "text": "split that up among the partitions and each partition will get a hundred RC use",
    "start": "1332039",
    "end": "1337529"
  },
  {
    "text": "to read the data and the way we implement these RC use is by a fairly",
    "start": "1337529",
    "end": "1344879"
  },
  {
    "start": "1344000",
    "end": "1344000"
  },
  {
    "text": "classic algorithm called a token bucket or token bucket algorithm and the way these coke and buckets work",
    "start": "1344879",
    "end": "1351929"
  },
  {
    "text": "is they have a fill rate and in dynamo the fill rate is the RC use so in our",
    "start": "1351929",
    "end": "1359129"
  },
  {
    "text": "example we're giving it a hundred tokens per second is how many we add to the bucket and we take one token out for",
    "start": "1359129",
    "end": "1366179"
  },
  {
    "text": "each read operation that you do modulo the size of the object that I was talking about a moment ago",
    "start": "1366179",
    "end": "1371629"
  },
  {
    "text": "if there are no tokens in the bucket when you read comes in we actually",
    "start": "1371629",
    "end": "1376739"
  },
  {
    "text": "respond with a throttle so this token bucket has a capacity of 300 times your",
    "start": "1376739",
    "end": "1385289"
  },
  {
    "start": "1380000",
    "end": "1380000"
  },
  {
    "text": "RC you and the reason that we choose 300 is that gives you five minutes of tokens",
    "start": "1385289",
    "end": "1391679"
  },
  {
    "text": "available so if your if you do not do a read against your table for five minutes",
    "start": "1391679",
    "end": "1397739"
  },
  {
    "text": "we will actually you will Bank 300 X your our see you in tokens if you don't",
    "start": "1397739",
    "end": "1406679"
  },
  {
    "start": "1406000",
    "end": "1406000"
  },
  {
    "text": "do any reading and once you get that token bucket full those tokens just start falling on the floor so it'll max",
    "start": "1406679",
    "end": "1413159"
  },
  {
    "text": "out in our example at 30,000 tokens but again it's 300 times whatever year and",
    "start": "1413159",
    "end": "1418320"
  },
  {
    "text": "provisioned our C user what's cool about this is that we allow you to burst into",
    "start": "1418320",
    "end": "1425070"
  },
  {
    "start": "1422000",
    "end": "1422000"
  },
  {
    "text": "this capacity so if a spike in traffic comes in four you will have essentially",
    "start": "1425070",
    "end": "1432960"
  },
  {
    "text": "five minutes worth of tokens to execute these gets against now dynamo can't",
    "start": "1432960",
    "end": "1440129"
  },
  {
    "text": "actually a storage node can't actually support 30,000 requests within a second",
    "start": "1440129",
    "end": "1446519"
  },
  {
    "text": "we wouldn't be able to handle that but if you say spread those 30,000 requests",
    "start": "1446519",
    "end": "1451950"
  },
  {
    "text": "over about 20 30 seconds we will honor that and we will let your traffic burst",
    "start": "1451950",
    "end": "1459239"
  },
  {
    "text": "too to accommodate that that increase in temporary spike increases",
    "start": "1459239",
    "end": "1467720"
  },
  {
    "start": "1468000",
    "end": "1468000"
  },
  {
    "text": "but if you have sustained traffic like let's say Bob here is some busy customer",
    "start": "1472730",
    "end": "1480120"
  },
  {
    "text": "I don't know we're doing lots of lookups against Bob and our RC use become",
    "start": "1480120",
    "end": "1485520"
  },
  {
    "text": "unbalanced in on that particular partition what'll happen is eventually",
    "start": "1485520",
    "end": "1493500"
  },
  {
    "text": "if that load is sustained first thing will no longer help us because the token",
    "start": "1493500",
    "end": "1498690"
  },
  {
    "text": "bucket is only getting refilled at a hundred tokens per second so if the load",
    "start": "1498690",
    "end": "1505200"
  },
  {
    "text": "stays at 150 per second 50 of those are going to end up getting throttled again",
    "start": "1505200",
    "end": "1511830"
  },
  {
    "text": "not such a cool thing to have happen especially given that you actually still",
    "start": "1511830",
    "end": "1517770"
  },
  {
    "text": "have 75 RC use I'm not a table in aggregate that you could be using but",
    "start": "1517770",
    "end": "1523529"
  },
  {
    "text": "we're throttling you because you have a hot partition so what do we do here",
    "start": "1523529",
    "end": "1529730"
  },
  {
    "text": "but a couple years ago we introduced this thing called adaptive capacity and and what adaptive capacity does is it",
    "start": "1529730",
    "end": "1537630"
  },
  {
    "text": "changes how quickly your token bucket is getting filled if we could fill the",
    "start": "1537630",
    "end": "1543000"
  },
  {
    "text": "token bucket at 150 tokens per second we would be able to sustain the load that we were that we were just seeing and",
    "start": "1543000",
    "end": "1549990"
  },
  {
    "text": "have no throttling and the way we do this is by this thing we call the",
    "start": "1549990",
    "end": "1556020"
  },
  {
    "text": "adaptive capacity multiplier and that multiplier is just a number that we",
    "start": "1556020",
    "end": "1562830"
  },
  {
    "text": "multiply by your RC use and change the fill rate of that bucket the token",
    "start": "1562830",
    "end": "1568020"
  },
  {
    "text": "bucket so here we're showing the token bucket is now getting filled at a hundred and fifty tokens per second now",
    "start": "1568020",
    "end": "1574559"
  },
  {
    "text": "this multiplier is actually applied to every partition in on your table and so",
    "start": "1574559",
    "end": "1582590"
  },
  {
    "text": "going back to our picture here so at this rate we even though each partition",
    "start": "1582590",
    "end": "1588990"
  },
  {
    "text": "is provisioned at a hundred RCU we will let that traffic go through at 150 RC",
    "start": "1588990",
    "end": "1595350"
  },
  {
    "text": "you so how do we do this well we usually",
    "start": "1595350",
    "end": "1600400"
  },
  {
    "start": "1599000",
    "end": "1599000"
  },
  {
    "text": "think of big controller so pick controllers are you know super common in",
    "start": "1600400",
    "end": "1607230"
  },
  {
    "text": "industrial design for controlling you know lots of different processes the pin",
    "start": "1607230",
    "end": "1612460"
  },
  {
    "text": "stands for proportional integrated differentiated feedback something",
    "start": "1612460",
    "end": "1619360"
  },
  {
    "text": "something something I'll just call it a pig controller and but what is doing is",
    "start": "1619360",
    "end": "1625720"
  },
  {
    "text": "a pig controller is trying to control a process and and set a value such that",
    "start": "1625720",
    "end": "1631930"
  },
  {
    "text": "the feedback loop meets makes it so that the system is in some kind of",
    "start": "1631930",
    "end": "1637750"
  },
  {
    "text": "equilibrium and what we do with this pig controller is we give it several inputs",
    "start": "1637750",
    "end": "1644140"
  },
  {
    "text": "we give it your consumed capacity how much is this table using an aggregate what is your provision capacity on the",
    "start": "1644140",
    "end": "1651100"
  },
  {
    "text": "table what is the throttle rate and because it's a pig controller it needs to know about the the current value to",
    "start": "1651100",
    "end": "1656920"
  },
  {
    "text": "compute the new value and then its output is a new multiplier for this table then we take that and we apply to",
    "start": "1656920",
    "end": "1664210"
  },
  {
    "text": "all the partitions in your table and that will adaptively change the capacity",
    "start": "1664210",
    "end": "1672250"
  },
  {
    "text": "the provisioning on your table so you guys are probably thinking hey I can",
    "start": "1672250",
    "end": "1678280"
  },
  {
    "text": "game this right you know okay there's partition is now getting a hundred and",
    "start": "1678280",
    "end": "1683860"
  },
  {
    "text": "fifty RC use that's a hundred and fifty over what I'm paying for at 300 RC you",
    "start": "1683860",
    "end": "1690720"
  },
  {
    "text": "so this condition will last for a little while but what will happen is our pit",
    "start": "1690720",
    "end": "1697930"
  },
  {
    "text": "controller will notice that your capacity is above your provision capacity and that multiplier will go",
    "start": "1697930",
    "end": "1703930"
  },
  {
    "text": "back down to one and in a little while if your capacity or your load stays",
    "start": "1703930",
    "end": "1709210"
  },
  {
    "text": "identical we will each each partition will get a hundred RCU and each of them",
    "start": "1709210",
    "end": "1715300"
  },
  {
    "text": "will get throttled 50 we're back to throttling so this isn't so cool",
    "start": "1715300",
    "end": "1721990"
  },
  {
    "text": "but at least we're giving you what you're paying for right so what do we do here well last year we launched this",
    "start": "1721990",
    "end": "1730360"
  },
  {
    "start": "1728000",
    "end": "1728000"
  },
  {
    "text": "thing called autos Kaling and this is the next solution in the problem so when you set up your",
    "start": "1730360",
    "end": "1736110"
  },
  {
    "text": "table you can set up auto scaling and we'll ask you some questions about what",
    "start": "1736110",
    "end": "1741779"
  },
  {
    "text": "you want how you want auto scaling to work so the you can set a lower bound on your capacity and an upper bound and",
    "start": "1741779",
    "end": "1748970"
  },
  {
    "text": "some target utilization 70 is usually a pretty good number for this if you know",
    "start": "1748970",
    "end": "1754710"
  },
  {
    "text": "your load is actually really flat and doesn't have a lot of variants in it you can set your target utilization much",
    "start": "1754710",
    "end": "1760799"
  },
  {
    "text": "higher if you know that your load is really spiky you might want to set that utilization a little bit lower but we",
    "start": "1760799",
    "end": "1767820"
  },
  {
    "text": "could set this utilization and the reason that we have to ask you this is now we're changing the provisioning of",
    "start": "1767820",
    "end": "1772889"
  },
  {
    "text": "your table and we're gonna change the amount of money that you get charged from dinamo by changing the provisioning",
    "start": "1772889",
    "end": "1778649"
  },
  {
    "text": "so you obviously have to opt in to this and we really do encourage you guys to opt in to this I'll show you a graph in",
    "start": "1778649",
    "end": "1784769"
  },
  {
    "text": "a minute of what it did for one of Amazon's internal tables so if we're",
    "start": "1784769",
    "end": "1792809"
  },
  {
    "text": "sitting in that situation where we were at 150 our ciues per table auto scaling",
    "start": "1792809",
    "end": "1798450"
  },
  {
    "text": "will take the provisioning to this table in this example to 640 provision and the",
    "start": "1798450",
    "end": "1803730"
  },
  {
    "text": "reason that it's 640 is 70 percent of 640 is 450 are consumed capacity is 450",
    "start": "1803730",
    "end": "1811139"
  },
  {
    "text": "so it'll end up setting our provision capacity to 640 so how does this auto",
    "start": "1811139",
    "end": "1818039"
  },
  {
    "text": "scaling thing work well hopefully most of you know or and looked at your cloud",
    "start": "1818039",
    "end": "1823859"
  },
  {
    "text": "watch graphs for the tables that you have because dinamo is publishing these",
    "start": "1823859",
    "end": "1829440"
  },
  {
    "text": "metrics to cloud watch and so the the",
    "start": "1829440",
    "end": "1834600"
  },
  {
    "text": "metrics are sent to cloud watch and AWS has a service called AWS auto scaling and what that does is it sets alarms on",
    "start": "1834600",
    "end": "1841830"
  },
  {
    "text": "on certain values that are sitting in cloud watch so auto scaling actually",
    "start": "1841830",
    "end": "1848129"
  },
  {
    "text": "sets two alarms per table technically for but again we're just talking about the read side of the equation rights are",
    "start": "1848129",
    "end": "1854669"
  },
  {
    "text": "symmetrical it sets two alarms one for your provisioned value and one for the",
    "start": "1854669",
    "end": "1860609"
  },
  {
    "text": "target consume the value and if you go in a look at your out of scale in council you can actually",
    "start": "1860609",
    "end": "1866909"
  },
  {
    "text": "see these provisioned alarms the reason it sets two is clearly the consumed one",
    "start": "1866909",
    "end": "1873059"
  },
  {
    "text": "is so that it can change the value the reason it sets a alarm on the provision",
    "start": "1873059",
    "end": "1878970"
  },
  {
    "text": "is if you go through the API or the console and change the provisioning that's the way that auto-scaling learns",
    "start": "1878970",
    "end": "1884820"
  },
  {
    "text": "that you changed it otherwise you could it wouldn't be able to adjust the ratios",
    "start": "1884820",
    "end": "1890070"
  },
  {
    "text": "correctly the other thing that auto-scaling will do is it when if your",
    "start": "1890070",
    "end": "1895409"
  },
  {
    "text": "load goes down maybe it's the middle of the night and now we're running at 10 RC use per partition auto scaling will",
    "start": "1895409",
    "end": "1903149"
  },
  {
    "text": "scale your table down and in this case that we're actually consuming 30 so we",
    "start": "1903149",
    "end": "1908399"
  },
  {
    "text": "need about 43 provisioned I ops to have our utilization at 70% here's this graph",
    "start": "1908399",
    "end": "1916710"
  },
  {
    "start": "1916000",
    "end": "1916000"
  },
  {
    "text": "I was talking about this is some Amazon internal tables and you can see what the",
    "start": "1916710",
    "end": "1923220"
  },
  {
    "text": "auto scaling has done and how nicely it actually follows the curb you know at",
    "start": "1923220",
    "end": "1929669"
  },
  {
    "text": "one point they're on you know around 9:30 or so we actually got really quite",
    "start": "1929669",
    "end": "1935190"
  },
  {
    "text": "close and had the load been a lot spike year maybe we would have suffered a little bit of throttling but I'm really",
    "start": "1935190",
    "end": "1942750"
  },
  {
    "text": "amazed and pleased at how well auto scaling tracks the provisioning of the",
    "start": "1942750",
    "end": "1948000"
  },
  {
    "text": "table or the consumed capacity of the tables you know a little quick recap",
    "start": "1948000",
    "end": "1953759"
  },
  {
    "start": "1950000",
    "end": "1950000"
  },
  {
    "text": "about provisioning when Dynamo launched we dynamo expected you to have a very",
    "start": "1953759",
    "end": "1960389"
  },
  {
    "text": "very balanced workload each partition getting essentially the same amount of work and over the same period of time",
    "start": "1960389",
    "end": "1969230"
  },
  {
    "text": "but you know we noticed or heard from our customers and understood that",
    "start": "1969230",
    "end": "1974610"
  },
  {
    "text": "there's this problem with the imbalance of load over time you know it might be the top of the hour and you're gonna run",
    "start": "1974610",
    "end": "1980730"
  },
  {
    "text": "some report and you make a bunch of queries against dynamo your your request",
    "start": "1980730",
    "end": "1986639"
  },
  {
    "text": "rate is imbalanced in time and so we built bursting to help solve that one you can have imbalance in your key space",
    "start": "1986639",
    "end": "1994080"
  },
  {
    "text": "in my example I said hey Bob was a really hot customer that partition was getting a lot of load",
    "start": "1994080",
    "end": "1999920"
  },
  {
    "text": "because of the imbalance in our key key space so we did adaptive capacity to",
    "start": "1999920",
    "end": "2005350"
  },
  {
    "text": "solve that you know our workloads change",
    "start": "2005350",
    "end": "2010690"
  },
  {
    "text": "over time you know hopefully our systems grow and get bigger and we get more",
    "start": "2010690",
    "end": "2015940"
  },
  {
    "text": "adoption and as that changing workload happens we built auto scaling to solve",
    "start": "2015940",
    "end": "2021670"
  },
  {
    "text": "that and you know I think we're gonna have to continue to iterate on this because like I said we understand that",
    "start": "2021670",
    "end": "2029080"
  },
  {
    "text": "this is one of the pain points of of using dynamo next I want to talk about",
    "start": "2029080",
    "end": "2036400"
  },
  {
    "text": "backup restore and how we've implemented backup restore so dynamo has two kinds",
    "start": "2036400",
    "end": "2043480"
  },
  {
    "start": "2041000",
    "end": "2041000"
  },
  {
    "text": "of backup restore we have a point in time recovery where you can specify a point within the last 35 days when you",
    "start": "2043480",
    "end": "2050169"
  },
  {
    "text": "want your cable restored to or we can take on-demand backups and you can restore them at some point in time in",
    "start": "2050169",
    "end": "2056110"
  },
  {
    "text": "the future where would you durably store",
    "start": "2056110",
    "end": "2062020"
  },
  {
    "text": "backup data they wouldn't this is this",
    "start": "2062020",
    "end": "2067120"
  },
  {
    "text": "is a little bit of bureaucracy here I'm not allowed to say s3 I told you I",
    "start": "2067120",
    "end": "2072850"
  },
  {
    "text": "worked on s3 when I started out I have to say the first time I use this Amazon",
    "start": "2072850",
    "end": "2077860"
  },
  {
    "text": "simple storage service I don't think anybody knows that it's called that it's s3 right we store our data in s3 dynamo",
    "start": "2077860",
    "end": "2086590"
  },
  {
    "text": "does the same thing and what we do is we move those replication logs to s3 so we",
    "start": "2086590",
    "end": "2092648"
  },
  {
    "start": "2089000",
    "end": "2089000"
  },
  {
    "text": "aggregate some amount of data essentially as a file we upload that to",
    "start": "2092649",
    "end": "2098200"
  },
  {
    "text": "s3 before before we delete it off the storage node we make sure that we've uploaded it into s3 now we don't",
    "start": "2098200",
    "end": "2104500"
  },
  {
    "text": "actually upload three copies of the data we'll see what the storage nodes will look at what their peers have done and",
    "start": "2104500",
    "end": "2110620"
  },
  {
    "text": "if their peers have already uploaded it we won't upload it again but we upload that data to s3 now these boxes on the",
    "start": "2110620",
    "end": "2118180"
  },
  {
    "text": "right kind of represent the different logs for each partition and if you'll notice there is no coordination about",
    "start": "2118180",
    "end": "2124180"
  },
  {
    "text": "when these logs are uploaded the storage nodes make independent choices",
    "start": "2124180",
    "end": "2130750"
  },
  {
    "text": "when they want to upload their data so if their discs are fill starting to fill up or whatever they can just say oh yeah",
    "start": "2130750",
    "end": "2136900"
  },
  {
    "text": "I can make disk space I'll upload some logs so I can delete them it also",
    "start": "2136900",
    "end": "2142090"
  },
  {
    "text": "periodically uploads a scan of the B tree now I say snapshot of the B tree",
    "start": "2142090",
    "end": "2149410"
  },
  {
    "text": "because it's not a snapshot in the classic sense what we're doing is we're scanning that B tree getting all the",
    "start": "2149410",
    "end": "2156520"
  },
  {
    "text": "data out of it and that scan takes time so the the the actual upload of the B",
    "start": "2156520",
    "end": "2162220"
  },
  {
    "text": "tree is not a consistent view of of your dynamo partition and so kind of over",
    "start": "2162220",
    "end": "2171790"
  },
  {
    "text": "time you'll see that you know just periodically dynamo will decide I'm gonna take a new snapshot of this",
    "start": "2171790",
    "end": "2177580"
  },
  {
    "text": "partition and again these things are not coordinated among the partitions so",
    "start": "2177580",
    "end": "2183150"
  },
  {
    "start": "2183000",
    "end": "2183000"
  },
  {
    "text": "later on if you want to restore each you pick a time that you need to restore",
    "start": "2183150",
    "end": "2189460"
  },
  {
    "text": "your table at the first thing the Dynamo does is it looks at all the artifacts",
    "start": "2189460",
    "end": "2194470"
  },
  {
    "text": "that it's stored in s3 for that table and says these are the pieces that I need to restore this table so it finds",
    "start": "2194470",
    "end": "2201430"
  },
  {
    "text": "some snapshot in the past and then all the logs from when the snapshot started",
    "start": "2201430",
    "end": "2207940"
  },
  {
    "text": "whatever log was active at that point through the any logs up and past the",
    "start": "2207940",
    "end": "2213430"
  },
  {
    "text": "time of the point of restore and it then will make up partitions in this case it",
    "start": "2213430",
    "end": "2220630"
  },
  {
    "text": "would make three partitions in the new table for you apply those snapshots and then or restore the snapshots and then",
    "start": "2220630",
    "end": "2227230"
  },
  {
    "text": "apply the logs to those snapshots if you choose a point in time restored not that",
    "start": "2227230",
    "end": "2232869"
  },
  {
    "text": "you would even know that there's a snapshot being taken at this point in time but if it does happen that it's a",
    "start": "2232869",
    "end": "2238119"
  },
  {
    "text": "snapshot being taken well at the restore point we still can't use that snapshot",
    "start": "2238119",
    "end": "2243220"
  },
  {
    "text": "because it doesn't have the consistent view and but if you do choose the one afterwards we can use that snapshot and",
    "start": "2243220",
    "end": "2249700"
  },
  {
    "text": "then we don't need that stuff in the past it's a little bit about how we do point in time recovery but it gets a",
    "start": "2249700",
    "end": "2257560"
  },
  {
    "start": "2256000",
    "end": "2256000"
  },
  {
    "text": "little bit more complicated so Dynamo will split your partitions if the data and a partition gets too large",
    "start": "2257560",
    "end": "2264310"
  },
  {
    "text": "Auto admin will decide that hey that partition needs to be split and it will in this case we're showing the green",
    "start": "2264310",
    "end": "2270490"
  },
  {
    "text": "partition it's going to get split and now if you choose to do a restore at",
    "start": "2270490",
    "end": "2275530"
  },
  {
    "text": "some point in time we have a slightly more complicated problem to solve and",
    "start": "2275530",
    "end": "2281620"
  },
  {
    "text": "that is how do we restore this light green partition well they're both rooted in the snapshot that dark green snapshot",
    "start": "2281620",
    "end": "2289060"
  },
  {
    "text": "but now they have separate key spaces so when we do the restore we will take the",
    "start": "2289060",
    "end": "2294400"
  },
  {
    "text": "whatever key range the partition split that that will get restored unto the first partition we'll use the keys from",
    "start": "2294400",
    "end": "2301450"
  },
  {
    "text": "the snapshot of the higher part of the range for the light green restart partition and then apply the logs from",
    "start": "2301450",
    "end": "2307210"
  },
  {
    "text": "there undemanding",
    "start": "2307210",
    "end": "2312340"
  },
  {
    "start": "2310000",
    "end": "2310000"
  },
  {
    "text": "so on demand backups are kind of similar to point in time point in time restores",
    "start": "2312340",
    "end": "2321160"
  },
  {
    "text": "for us clearly functionally they're very different for you but what it what a",
    "start": "2321160",
    "end": "2326440"
  },
  {
    "text": "point or an on-demand backup is it's essentially like we want to do a point in time recovery at right now at the",
    "start": "2326440",
    "end": "2333160"
  },
  {
    "text": "instant that you asked for the on-demand backup now the problem here is that we don't",
    "start": "2333160",
    "end": "2339550"
  },
  {
    "text": "necessarily we were not going to have the logs that we need in s3 for this",
    "start": "2339550",
    "end": "2344710"
  },
  {
    "text": "backup but we're gonna have pretty much everything almost everything up to it so one of the very first things that we do",
    "start": "2344710",
    "end": "2350500"
  },
  {
    "text": "as soon as you tell us that you want to take an on-demand backup is we have to go tell the storage nodes upload your",
    "start": "2350500",
    "end": "2357070"
  },
  {
    "text": "logs up through this the current point in time and now we have all the data that we need to do the restore sitting",
    "start": "2357070",
    "end": "2364720"
  },
  {
    "text": "in s3 and so like in this backup of this massive fifty-nine by table I made for",
    "start": "2364720",
    "end": "2371920"
  },
  {
    "text": "this demo you can see that my backup has become available and it becomes available once those logs are up inside",
    "start": "2371920",
    "end": "2379240"
  },
  {
    "text": "of s3 and now we could go restore it to a new table if we so chose so some of",
    "start": "2379240",
    "end": "2387760"
  },
  {
    "start": "2386000",
    "end": "2386000"
  },
  {
    "text": "you might have noticed that there were first of all you might be surprised to find that we're moving all this data to",
    "start": "2387760",
    "end": "2394450"
  },
  {
    "text": "s3 all the time right and we don't charge for that data except if you turn pitter",
    "start": "2394450",
    "end": "2400960"
  },
  {
    "text": "on excuse me we start charging for it and why is that well because these snapshots and the",
    "start": "2400960",
    "end": "2409839"
  },
  {
    "text": "logs are kind of our insurance policy but we get to control when we take",
    "start": "2409839",
    "end": "2416979"
  },
  {
    "text": "snapshots when we delete logs so we're always optimizing it to take the to do",
    "start": "2416979",
    "end": "2424150"
  },
  {
    "text": "the on demand backup right now and so without pitter enabled if we take this",
    "start": "2424150",
    "end": "2429999"
  },
  {
    "text": "snapshot here as soon as that snapshot is complete we can go back and we can",
    "start": "2429999",
    "end": "2435249"
  },
  {
    "text": "look at all the artifacts that are sitting in s3 before that and we can delete them because we know we're never",
    "start": "2435249",
    "end": "2441099"
  },
  {
    "text": "going to need them we have a current snapshot but when you turn pitter on",
    "start": "2441099",
    "end": "2447089"
  },
  {
    "text": "from the time that you turn pitter on we start a clock and we say okay for this",
    "start": "2447089",
    "end": "2452200"
  },
  {
    "text": "table we have to keep all these artifacts through the pettin into the past so that we can do pitter at any",
    "start": "2452200",
    "end": "2459069"
  },
  {
    "text": "point in time that you guys request us to do a restore so now when we take that snapshot we have to maintain this data",
    "start": "2459069",
    "end": "2466059"
  },
  {
    "text": "for at least 35 days the pitter window that we offer and the reality is is that these snapshots sometimes they're",
    "start": "2466059",
    "end": "2472479"
  },
  {
    "text": "substantially older than that we have to keep them around because it's cost-effective for us to hold you know",
    "start": "2472479",
    "end": "2479440"
  },
  {
    "text": "if you're not making a lot of changes to your table the logs don't grow very fast so we",
    "start": "2479440",
    "end": "2484960"
  },
  {
    "text": "might keep that snapchat around for a lot longer period of time and have more",
    "start": "2484960",
    "end": "2489999"
  },
  {
    "text": "time worth of logs to apply even though it might data wise not be a lot so that",
    "start": "2489999",
    "end": "2498609"
  },
  {
    "text": "kind of explains why we how we do our doing the billing for pitter I wanted to",
    "start": "2498609",
    "end": "2505630"
  },
  {
    "text": "move on to dynamo streams we'll just touch on this a little bit so dynamodb",
    "start": "2505630",
    "end": "2512619"
  },
  {
    "text": "screams is a way of getting all the mutations against your table so we are",
    "start": "2512619",
    "end": "2517719"
  },
  {
    "text": "every put update and delete anything that changes the table one of the cool things about dynamo streams is there are",
    "start": "2517719",
    "end": "2524229"
  },
  {
    "text": "no duplicates in the stream and we'll tell you why that's I think that's",
    "start": "2524229",
    "end": "2529509"
  },
  {
    "text": "important in a moment they're in order now there's an it I put a parenthesis around that by key every",
    "start": "2529509",
    "end": "2537910"
  },
  {
    "text": "mutation in the stream will guaranteed for a key for a particular key to always",
    "start": "2537910",
    "end": "2543579"
  },
  {
    "text": "happen in the order that you executed those operations against a key but they",
    "start": "2543579",
    "end": "2549819"
  },
  {
    "text": "may not be in the order that that they were happening against multiple keys",
    "start": "2549819",
    "end": "2556779"
  },
  {
    "text": "because the partitions aren't actually operating in sync but a key will always",
    "start": "2556779",
    "end": "2562719"
  },
  {
    "text": "be in the same partition and the partition ordering will always be maintained the other thing I think is",
    "start": "2562719",
    "end": "2569619"
  },
  {
    "text": "cool about this is we give you the new and the old image item image in in these",
    "start": "2569619",
    "end": "2575859"
  },
  {
    "text": "records so the way dynamodb streams works is really riding on top of",
    "start": "2575859",
    "end": "2583359"
  },
  {
    "text": "essentially the same technology that amazon Kinesis is built on top of so a",
    "start": "2583359",
    "end": "2588999"
  },
  {
    "text": "lot of the concepts in Kinesis if you're familiar with Kinesis are the same as they are for DynamoDB streams we have",
    "start": "2588999",
    "end": "2596049"
  },
  {
    "text": "the concept of a shard they have a concept of a shard you actually use the Kinesis client library",
    "start": "2596049",
    "end": "2602410"
  },
  {
    "text": "to talk to DynamoDB streams I'll have an architecture picture in a moment here so",
    "start": "2602410",
    "end": "2607930"
  },
  {
    "text": "we have things like records and checkpointing and so on because this is writing on that same technology but what",
    "start": "2607930",
    "end": "2616119"
  },
  {
    "start": "2616000",
    "end": "2616000"
  },
  {
    "text": "we do differently is you need the DynamoDB streams Kinesis adapter so the",
    "start": "2616119",
    "end": "2622089"
  },
  {
    "text": "KCl talks to that intermediate layer and then talks down to streams so the API looks from the read side is identical to",
    "start": "2622089",
    "end": "2630130"
  },
  {
    "text": "a Kinesis stream but clearly we don't let you put into your dynamodb stream",
    "start": "2630130",
    "end": "2635650"
  },
  {
    "text": "the way the stream is written is from the storage node so the storage node is",
    "start": "2635650",
    "end": "2642150"
  },
  {
    "text": "applying these two shard so that in each stream is composed of many different",
    "start": "2642150",
    "end": "2648849"
  },
  {
    "text": "shards but a shard is an inorder list of those mutations and it's the storage",
    "start": "2648849",
    "end": "2655449"
  },
  {
    "text": "node that is writing those to the to the shard and again this is asynchronous you",
    "start": "2655449",
    "end": "2661930"
  },
  {
    "text": "know if if that subsystem is having issues the leader of the story that partition",
    "start": "2661930",
    "end": "2667150"
  },
  {
    "text": "stories node will know what was committed into the dynamo stream and what wasn't and we'll catch up a little",
    "start": "2667150",
    "end": "2673330"
  },
  {
    "text": "bit later our typical latencies here are on the order of tens of milliseconds for",
    "start": "2673330",
    "end": "2678790"
  },
  {
    "text": "that data to get through the stream we're into the stream I don't need the",
    "start": "2678790",
    "end": "2684430"
  },
  {
    "text": "laser and finally the last thing I wanted to talk about was a little bit about global tables so global tables we",
    "start": "2684430",
    "end": "2692830"
  },
  {
    "text": "launched last year I think it reinvent and the idea here is that you can get a",
    "start": "2692830",
    "end": "2699880"
  },
  {
    "text": "system of tables in multiple regions to all work together and have the same data",
    "start": "2699880",
    "end": "2705010"
  },
  {
    "text": "in them so I've set up a small global table here with in three different regions and oh I gotta go back I wanted",
    "start": "2705010",
    "end": "2716440"
  },
  {
    "text": "to point out one thing so one of the things that that's interesting about global tables is you have to there's an",
    "start": "2716440",
    "end": "2721690"
  },
  {
    "text": "IM role associated for global tables global tables for the most part is",
    "start": "2721690",
    "end": "2727780"
  },
  {
    "text": "operating as a external service to Dinamo for the most part so you have to",
    "start": "2727780",
    "end": "2735520"
  },
  {
    "text": "have we have to have permission to write into your table it's not like the request router the request router is it",
    "start": "2735520",
    "end": "2741310"
  },
  {
    "text": "got direct access to a storage node global tables is going through request routers and it needs to pass the same",
    "start": "2741310",
    "end": "2748290"
  },
  {
    "text": "authentication checks that any other user was and that's why we have this service role for DynamoDB replication so",
    "start": "2748290",
    "end": "2759570"
  },
  {
    "start": "2758000",
    "end": "2758000"
  },
  {
    "text": "when we propagate this data from from one region to the other we have the",
    "start": "2759570",
    "end": "2765760"
  },
  {
    "text": "we're essentially building a stream reader in the source region and that reader is is just consuming all the",
    "start": "2765760",
    "end": "2772840"
  },
  {
    "text": "mutations and shipping them over to dynamodb in the second region but global",
    "start": "2772840",
    "end": "2780400"
  },
  {
    "start": "2779000",
    "end": "2779000"
  },
  {
    "text": "tables is multi masters so we actually have to go in the other direction as well so in the other region we will have",
    "start": "2780400",
    "end": "2786580"
  },
  {
    "text": "a stream reader that's looking at the mutations now this is kind of like the",
    "start": "2786580",
    "end": "2792040"
  },
  {
    "text": "snake eating its tail right i mutate it here it goes into the stream it's gonna go to the other side that makes a mutation there",
    "start": "2792040",
    "end": "2797970"
  },
  {
    "text": "that's gonna go into the stream it's gonna come back around well doesn't quite happen that way and we'll cut you",
    "start": "2797970",
    "end": "2803849"
  },
  {
    "text": "a little bit on why we don't get into the circular loop Global tables is all",
    "start": "2803849",
    "end": "2810270"
  },
  {
    "start": "2808000",
    "end": "2808000"
  },
  {
    "text": "the also multi region and we have multi region replication so when that stream",
    "start": "2810270",
    "end": "2815760"
  },
  {
    "text": "reader reads that data it actually has to ship it not only to one region but",
    "start": "2815760",
    "end": "2822960"
  },
  {
    "text": "any of the regions that are below that belong to that global table and so you",
    "start": "2822960",
    "end": "2828359"
  },
  {
    "text": "know with three regions you have all these stream readers and you quickly get this complicated connected mesh where",
    "start": "2828359",
    "end": "2835080"
  },
  {
    "text": "every stream reader is talking to all the other different regions so this is",
    "start": "2835080",
    "end": "2840210"
  },
  {
    "text": "kind of the high-level architecture of what's going on now like I said for the mote you could you guys could build",
    "start": "2840210",
    "end": "2846450"
  },
  {
    "text": "global tables yourselves relatively easily if you guarantee that your table",
    "start": "2846450",
    "end": "2853020"
  },
  {
    "text": "only has one partition so that there's only one shard and your regions are",
    "start": "2853020",
    "end": "2858180"
  },
  {
    "text": "fixed and so on but to really build global tables it gets a lot lot more",
    "start": "2858180",
    "end": "2863369"
  },
  {
    "start": "2862000",
    "end": "2862000"
  },
  {
    "text": "complicated and so this is actually the real architecture for how global tables",
    "start": "2863369",
    "end": "2868859"
  },
  {
    "text": "work so we don't really have a stream reader we have this thing we call it rep out the replication out engine and it is",
    "start": "2868859",
    "end": "2875970"
  },
  {
    "text": "consuming from the streams API just like any other application would but the",
    "start": "2875970",
    "end": "2881460"
  },
  {
    "text": "problem or the complexity for global tables comes in is when your partition split streams will have more shards in",
    "start": "2881460",
    "end": "2889230"
  },
  {
    "text": "it and we have to guarantee that we have a rep out process reading the data from",
    "start": "2889230",
    "end": "2896160"
  },
  {
    "text": "every shard of your streams and and so the way that is happening is we have",
    "start": "2896160",
    "end": "2902730"
  },
  {
    "text": "some some metadata from our control plane the repple admin is watching what's happening with the partitions and",
    "start": "2902730",
    "end": "2910430"
  },
  {
    "text": "it when it sees that a new partition comes along we and queue a piece of work",
    "start": "2910430",
    "end": "2915750"
  },
  {
    "text": "into this sq sq and it sent that piece of work simply says hey there's a shard",
    "start": "2915750",
    "end": "2921420"
  },
  {
    "text": "over here and you need to start replicating it one of the processes in the rep out will read that off and say",
    "start": "2921420",
    "end": "2927570"
  },
  {
    "text": "oh I need to do some more work I will pick up doing the work here and this essentially feedback loop",
    "start": "2927570",
    "end": "2933270"
  },
  {
    "text": "continues on so that we have a rep out reading from every shard of every global",
    "start": "2933270",
    "end": "2938910"
  },
  {
    "text": "table stream and then because the",
    "start": "2938910",
    "end": "2944760"
  },
  {
    "text": "streams API is actually a batch API rep out doesn't talk directly to the request",
    "start": "2944760",
    "end": "2951840"
  },
  {
    "text": "routers in the other region it talks to a process we call rep in in the",
    "start": "2951840",
    "end": "2957270"
  },
  {
    "text": "destination region and that process rep in is the one that drives the the",
    "start": "2957270",
    "end": "2962790"
  },
  {
    "text": "request router locally and when the batch is done then we'll tell the rep",
    "start": "2962790",
    "end": "2968040"
  },
  {
    "text": "out and the rep out will know that it can check points a stream that that data has been properly replicated so here's a",
    "start": "2968040",
    "end": "2979170"
  },
  {
    "text": "little example where I've made a really small table and I put one value in it I said the key is key and the value is",
    "start": "2979170",
    "end": "2985500"
  },
  {
    "text": "value and if you do this in the console on the global table this is what you'll see there's but as soon as I hit refresh",
    "start": "2985500",
    "end": "2994950"
  },
  {
    "text": "I get these other three values this is that very same table and you know within",
    "start": "2994950",
    "end": "3001670"
  },
  {
    "text": "if you refresh within less than a second these three values will show up and what",
    "start": "3001670",
    "end": "3006950"
  },
  {
    "text": "has happened here is rep out has read the item from the stream and says oh",
    "start": "3006950",
    "end": "3013670"
  },
  {
    "text": "here's a piece of data that the customer has added to the table or mutated either way and and it but it doesn't have any",
    "start": "3013670",
    "end": "3022250"
  },
  {
    "text": "of this replication metadata on it so that's a signal to the rep out process that this data needs to be sent to the",
    "start": "3022250",
    "end": "3029300"
  },
  {
    "text": "other regions so it adds the source region that it came from so I was doing this from us east or west - and it give",
    "start": "3029300",
    "end": "3038270"
  },
  {
    "text": "us a timestamp of when this item was mutated now it looks like we're",
    "start": "3038270",
    "end": "3044060"
  },
  {
    "text": "recording this as milliseconds but the route because it's got six digits after",
    "start": "3044060",
    "end": "3049070"
  },
  {
    "text": "the decimal in reality what it's doing is it's keeping it accurate to the millisecond and those three-digit",
    "start": "3049070",
    "end": "3054740"
  },
  {
    "text": "counters are how many events happened in that millisecond and that means that allows us to guarantee that a partition",
    "start": "3054740",
    "end": "3063440"
  },
  {
    "text": "that the timestamp for partition is always unique because we reset the counter every time the",
    "start": "3063440",
    "end": "3069019"
  },
  {
    "text": "millisecond clicks we start from one again so if you do a tag if you could do over a thousand operations per second on",
    "start": "3069019",
    "end": "3075829"
  },
  {
    "text": "a partition which is the limit for a partition that counter would roll over but it doesn't it can't so we set this",
    "start": "3075829",
    "end": "3085190"
  },
  {
    "text": "up update time you'll see that this deleting flag is set to false it's not really important why that why that is",
    "start": "3085190",
    "end": "3092690"
  },
  {
    "text": "false I mean actually that's a misstatement it is hugely important why",
    "start": "3092690",
    "end": "3098749"
  },
  {
    "text": "that is false but you'll never see it true because it only is set true during",
    "start": "3098749",
    "end": "3104749"
  },
  {
    "text": "the time that rep out is trying to delete the the item and so it's a very very transient state most of the time",
    "start": "3104749",
    "end": "3111289"
  },
  {
    "text": "it'll be false the way global tables does conflict resolution if you mutate",
    "start": "3111289",
    "end": "3117920"
  },
  {
    "start": "3115000",
    "end": "3115000"
  },
  {
    "text": "the same item in two different regions at the same time we do last writer wins",
    "start": "3117920",
    "end": "3123249"
  },
  {
    "text": "and again we have this down to millisecond timing with that additional",
    "start": "3123249",
    "end": "3128660"
  },
  {
    "text": "counter at the end it is conceivable that you could make it happen and those",
    "start": "3128660",
    "end": "3134390"
  },
  {
    "text": "two time stamps would be identical I believe the region is then used to",
    "start": "3134390",
    "end": "3139579"
  },
  {
    "text": "disambiguate and one of them is guaranteed to win over the other one but essentially it's last writer wins it's",
    "start": "3139579",
    "end": "3145309"
  },
  {
    "text": "the thing that gives you gives us the conflict resolution",
    "start": "3145309",
    "end": "3151959"
  },
  {
    "start": "3152000",
    "end": "3152000"
  },
  {
    "text": "so today I've covered a bunch of things like I said if you know this is these",
    "start": "3153349",
    "end": "3159529"
  },
  {
    "text": "are hopefully things that are helpful for you guys in understanding how dynamo",
    "start": "3159529",
    "end": "3166160"
  },
  {
    "text": "works and maybe leveraging dynamo better for you in the future so we've talked about the the get input auto scaling the",
    "start": "3166160",
    "end": "3172640"
  },
  {
    "text": "provisioning I hope that helps a lot and how global tables works there's a whole",
    "start": "3172640",
    "end": "3178069"
  },
  {
    "text": "bunch of things that we didn't cover there are things like fleet management metering monitoring capacity planning",
    "start": "3178069",
    "end": "3183739"
  },
  {
    "text": "and like I said these are this is a talk that we would typically give to onboarding new engineers to Dynamo they",
    "start": "3183739",
    "end": "3190849"
  },
  {
    "text": "would clearly need to learn how this stuff works especially if that's the area that they're going to work in but I",
    "start": "3190849",
    "end": "3196219"
  },
  {
    "text": "don't think it's gonna be really helpful for you guys to understand how this works in dynamo you know and the next",
    "start": "3196219",
    "end": "3203359"
  },
  {
    "text": "step if you were developers on dynamo the next step we would be doing right now is we start digging into code we'd",
    "start": "3203359",
    "end": "3208519"
  },
  {
    "text": "say hey if you go work on an Auto admin here's the code base start reading it and with that I think thank you for your",
    "start": "3208519",
    "end": "3218269"
  },
  {
    "text": "time thank you [Applause]",
    "start": "3218269",
    "end": "3224030"
  }
]