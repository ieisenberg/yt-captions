[
  {
    "text": "hi",
    "start": "8080",
    "end": "8800"
  },
  {
    "text": "and welcome to part two in the getting",
    "start": "8800",
    "end": "10960"
  },
  {
    "text": "started with aws",
    "start": "10960",
    "end": "12559"
  },
  {
    "text": "iot sitewise video series my name is",
    "start": "12559",
    "end": "15839"
  },
  {
    "text": "dave malone",
    "start": "15839",
    "end": "16640"
  },
  {
    "text": "and i'm an iot solutions architect for",
    "start": "16640",
    "end": "18720"
  },
  {
    "text": "aws",
    "start": "18720",
    "end": "21199"
  },
  {
    "text": "in the last video we covered simple",
    "start": "21199",
    "end": "23279"
  },
  {
    "text": "model creation",
    "start": "23279",
    "end": "24640"
  },
  {
    "text": "asset creation and tagging in this video",
    "start": "24640",
    "end": "28000"
  },
  {
    "text": "we will take the next step and connect",
    "start": "28000",
    "end": "30240"
  },
  {
    "text": "to an opcua server",
    "start": "30240",
    "end": "32320"
  },
  {
    "text": "producing data like you would see in a",
    "start": "32320",
    "end": "34800"
  },
  {
    "text": "manufacturing facility",
    "start": "34800",
    "end": "36719"
  },
  {
    "text": "we'll configure the edge gateway and",
    "start": "36719",
    "end": "38960"
  },
  {
    "text": "gateway connector",
    "start": "38960",
    "end": "40239"
  },
  {
    "text": "which will allow us to see the data flow",
    "start": "40239",
    "end": "42160"
  },
  {
    "text": "from the opcua server to sitewise",
    "start": "42160",
    "end": "45680"
  },
  {
    "text": "again for this demo we're a manufacturer",
    "start": "45680",
    "end": "49200"
  },
  {
    "text": "producing widgets and i already have my",
    "start": "49200",
    "end": "52640"
  },
  {
    "text": "three widget machines created",
    "start": "52640",
    "end": "54320"
  },
  {
    "text": "in a sitewise model again",
    "start": "54320",
    "end": "57440"
  },
  {
    "text": "while this demo will only show three",
    "start": "57440",
    "end": "59520"
  },
  {
    "text": "assets and simple tags",
    "start": "59520",
    "end": "61600"
  },
  {
    "text": "all the concepts still apply whether you",
    "start": "61600",
    "end": "63920"
  },
  {
    "text": "have hundreds of assets",
    "start": "63920",
    "end": "65680"
  },
  {
    "text": "thousands or even more in fact the value",
    "start": "65680",
    "end": "68960"
  },
  {
    "text": "of automation",
    "start": "68960",
    "end": "69920"
  },
  {
    "text": "and letting sitewise do the heavy",
    "start": "69920",
    "end": "71439"
  },
  {
    "text": "lifting grows with scale",
    "start": "71439",
    "end": "73840"
  },
  {
    "text": "even if the initial setup of creating",
    "start": "73840",
    "end": "75840"
  },
  {
    "text": "assets and tags and hierarchies may take",
    "start": "75840",
    "end": "78400"
  },
  {
    "text": "a little longer",
    "start": "78400",
    "end": "80240"
  },
  {
    "text": "so the next step is to connect my",
    "start": "80240",
    "end": "82560"
  },
  {
    "text": "on-premises equipment",
    "start": "82560",
    "end": "84080"
  },
  {
    "text": "data via ua for the purposes of this",
    "start": "84080",
    "end": "88240"
  },
  {
    "text": "demo",
    "start": "88240",
    "end": "89119"
  },
  {
    "text": "we will use kept server ex to help me",
    "start": "89119",
    "end": "92159"
  },
  {
    "text": "produce",
    "start": "92159",
    "end": "92799"
  },
  {
    "text": "my demo data i have it running on an aws",
    "start": "92799",
    "end": "96560"
  },
  {
    "text": "ec2 instance and i've already set it up",
    "start": "96560",
    "end": "99439"
  },
  {
    "text": "to show",
    "start": "99439",
    "end": "100159"
  },
  {
    "text": "my three machines creating data",
    "start": "100159",
    "end": "104880"
  },
  {
    "text": "here you can see the data being created",
    "start": "108320",
    "end": "110960"
  },
  {
    "text": "through",
    "start": "110960",
    "end": "111759"
  },
  {
    "text": "kept server ex's device simulator",
    "start": "111759",
    "end": "116399"
  },
  {
    "text": "to connect this opc ua server data into",
    "start": "119680",
    "end": "122640"
  },
  {
    "text": "sitewise",
    "start": "122640",
    "end": "123600"
  },
  {
    "text": "i need a gateway aws iot",
    "start": "123600",
    "end": "126880"
  },
  {
    "text": "sitewise gateway software is provided as",
    "start": "126880",
    "end": "129679"
  },
  {
    "text": "a pre-packaged connector",
    "start": "129679",
    "end": "131520"
  },
  {
    "text": "that runs on aws iot greengrass",
    "start": "131520",
    "end": "134720"
  },
  {
    "text": "so i'll use that",
    "start": "134720",
    "end": "137840"
  },
  {
    "text": "for the sake of time and this will be a",
    "start": "138080",
    "end": "141040"
  },
  {
    "text": "little bit like a cooking show",
    "start": "141040",
    "end": "144319"
  },
  {
    "text": "i will pull my ready and pre-configured",
    "start": "148800",
    "end": "151680"
  },
  {
    "text": "aws",
    "start": "151680",
    "end": "152480"
  },
  {
    "text": "iot green grass gateway out of the oven",
    "start": "152480",
    "end": "156319"
  },
  {
    "text": "i have an aws iot green grass server",
    "start": "156319",
    "end": "159440"
  },
  {
    "text": "ready with the necessary im policy set",
    "start": "159440",
    "end": "162560"
  },
  {
    "text": "so the gateway can access aws iot",
    "start": "162560",
    "end": "165360"
  },
  {
    "text": "sidewise",
    "start": "165360",
    "end": "166480"
  },
  {
    "text": "and my green grass groups are connected",
    "start": "166480",
    "end": "169200"
  },
  {
    "text": "for step-by-step",
    "start": "169200",
    "end": "170319"
  },
  {
    "text": "instructions on how to configure this",
    "start": "170319",
    "end": "173120"
  },
  {
    "text": "see",
    "start": "173120",
    "end": "173519"
  },
  {
    "text": "the developer documentation for both aws",
    "start": "173519",
    "end": "176160"
  },
  {
    "text": "iot green grass",
    "start": "176160",
    "end": "177760"
  },
  {
    "text": "and aws iot sitewise",
    "start": "177760",
    "end": "181040"
  },
  {
    "text": "a couple of things to note your green",
    "start": "181040",
    "end": "184400"
  },
  {
    "text": "grass group settings",
    "start": "184400",
    "end": "185680"
  },
  {
    "text": "you will need to properly configure your",
    "start": "185680",
    "end": "187840"
  },
  {
    "text": "green grass group's imroll",
    "start": "187840",
    "end": "191040"
  },
  {
    "text": "and edit your stream manager settings",
    "start": "191040",
    "end": "194159"
  },
  {
    "text": "to enable stream manager as it a",
    "start": "194159",
    "end": "196840"
  },
  {
    "text": "prerequisite for aws",
    "start": "196840",
    "end": "198959"
  },
  {
    "text": "iot sitewise",
    "start": "198959",
    "end": "202080"
  },
  {
    "text": "okay now i'm ready to configure the aws",
    "start": "210239",
    "end": "213360"
  },
  {
    "text": "iot sitewise connector on my greengrass",
    "start": "213360",
    "end": "216560"
  },
  {
    "text": "group",
    "start": "216560",
    "end": "217599"
  },
  {
    "text": "to do this while in the greengrass",
    "start": "217599",
    "end": "219519"
  },
  {
    "text": "console click on the groups",
    "start": "219519",
    "end": "221680"
  },
  {
    "text": "navigation menu item then go ahead and",
    "start": "221680",
    "end": "224959"
  },
  {
    "text": "select",
    "start": "224959",
    "end": "225440"
  },
  {
    "text": "your green grass group",
    "start": "225440",
    "end": "228480"
  },
  {
    "text": "and then select the connectors menu item",
    "start": "230159",
    "end": "234480"
  },
  {
    "text": "and go ahead and click on add a",
    "start": "234480",
    "end": "235920"
  },
  {
    "text": "connector",
    "start": "235920",
    "end": "238480"
  },
  {
    "text": "here go ahead and search for the",
    "start": "238879",
    "end": "240959"
  },
  {
    "text": "sitewise connector",
    "start": "240959",
    "end": "242959"
  },
  {
    "text": "select the option for the iot sitewise",
    "start": "242959",
    "end": "245200"
  },
  {
    "text": "collect connector",
    "start": "245200",
    "end": "246799"
  },
  {
    "text": "and click next",
    "start": "246799",
    "end": "249599"
  },
  {
    "text": "if your opcua server requires",
    "start": "251680",
    "end": "254159"
  },
  {
    "text": "authentication",
    "start": "254159",
    "end": "255200"
  },
  {
    "text": "you can create aws secrets manager",
    "start": "255200",
    "end": "257759"
  },
  {
    "text": "secrets",
    "start": "257759",
    "end": "258560"
  },
  {
    "text": "with the server's username and password",
    "start": "258560",
    "end": "260799"
  },
  {
    "text": "that you'll need to authenticate against",
    "start": "260799",
    "end": "262639"
  },
  {
    "text": "your opc ua server",
    "start": "262639",
    "end": "264960"
  },
  {
    "text": "then you can attach each secret to your",
    "start": "264960",
    "end": "266960"
  },
  {
    "text": "greengrass group",
    "start": "266960",
    "end": "268400"
  },
  {
    "text": "and select them from the available list",
    "start": "268400",
    "end": "270720"
  },
  {
    "text": "of arn's",
    "start": "270720",
    "end": "272560"
  },
  {
    "text": "for more information about how to create",
    "start": "272560",
    "end": "274639"
  },
  {
    "text": "and configure secrets",
    "start": "274639",
    "end": "276320"
  },
  {
    "text": "see the configure source authentication",
    "start": "276320",
    "end": "278720"
  },
  {
    "text": "page",
    "start": "278720",
    "end": "279520"
  },
  {
    "text": "in the aws iot sitewise documentation",
    "start": "279520",
    "end": "283840"
  },
  {
    "text": "if you have set up your gateway with a",
    "start": "283840",
    "end": "285840"
  },
  {
    "text": "different path",
    "start": "285840",
    "end": "287040"
  },
  {
    "text": "then forward slash var forward slash",
    "start": "287040",
    "end": "289520"
  },
  {
    "text": "sitewise",
    "start": "289520",
    "end": "292080"
  },
  {
    "text": "there's a place to dictate the path that",
    "start": "292479",
    "end": "295040"
  },
  {
    "text": "you use for local",
    "start": "295040",
    "end": "296000"
  },
  {
    "text": "storage here you can also configure",
    "start": "296000",
    "end": "299040"
  },
  {
    "text": "maximum disk buffer size if your",
    "start": "299040",
    "end": "302479"
  },
  {
    "text": "aws iot greengrass core loses connection",
    "start": "302479",
    "end": "305840"
  },
  {
    "text": "to the aws cloud",
    "start": "305840",
    "end": "307520"
  },
  {
    "text": "the connector caches data until it",
    "start": "307520",
    "end": "310160"
  },
  {
    "text": "successfully reconnects",
    "start": "310160",
    "end": "312320"
  },
  {
    "text": "if the cache exceeds the maximum disk",
    "start": "312320",
    "end": "314720"
  },
  {
    "text": "buffer size specified here",
    "start": "314720",
    "end": "316880"
  },
  {
    "text": "it will automatically discard the oldest",
    "start": "316880",
    "end": "319120"
  },
  {
    "text": "data from the queue",
    "start": "319120",
    "end": "320960"
  },
  {
    "text": "for now we're going to use the defaults",
    "start": "320960",
    "end": "323120"
  },
  {
    "text": "so go ahead and click",
    "start": "323120",
    "end": "324080"
  },
  {
    "text": "add",
    "start": "324080",
    "end": "326400"
  },
  {
    "text": "now we're ready to deploy all of this",
    "start": "328160",
    "end": "330240"
  },
  {
    "text": "configuration",
    "start": "330240",
    "end": "331440"
  },
  {
    "text": "to your greengrass instance in our case",
    "start": "331440",
    "end": "334479"
  },
  {
    "text": "it's running on an aws ec2 instance",
    "start": "334479",
    "end": "338639"
  },
  {
    "text": "click on the actions menu and then",
    "start": "338639",
    "end": "341840"
  },
  {
    "text": "select deploy",
    "start": "341840",
    "end": "344080"
  },
  {
    "text": "you can track the deployment status",
    "start": "344080",
    "end": "345840"
  },
  {
    "text": "under the deployments portion",
    "start": "345840",
    "end": "347360"
  },
  {
    "text": "of your greengrass group page",
    "start": "347360",
    "end": "350639"
  },
  {
    "text": "alternatively you can use a cloud",
    "start": "350639",
    "end": "353039"
  },
  {
    "text": "formation template",
    "start": "353039",
    "end": "354160"
  },
  {
    "text": "to set up a virtual ec2 greengrass group",
    "start": "354160",
    "end": "357919"
  },
  {
    "text": "with sitewise connector deployed to it",
    "start": "357919",
    "end": "360639"
  },
  {
    "text": "you can learn more about that",
    "start": "360639",
    "end": "362560"
  },
  {
    "text": "in the sitewise documentation under",
    "start": "362560",
    "end": "365120"
  },
  {
    "text": "configuring ec2",
    "start": "365120",
    "end": "366639"
  },
  {
    "text": "gateway after your deployment has",
    "start": "366639",
    "end": "369680"
  },
  {
    "text": "completed",
    "start": "369680",
    "end": "370400"
  },
  {
    "text": "we're going to add our gateway to aws",
    "start": "370400",
    "end": "373440"
  },
  {
    "text": "iot sitewise",
    "start": "373440",
    "end": "376479"
  },
  {
    "text": "now we'll go into the aws iot sitewise",
    "start": "376800",
    "end": "379520"
  },
  {
    "text": "console",
    "start": "379520",
    "end": "381840"
  },
  {
    "text": "and select gateways",
    "start": "383120",
    "end": "386319"
  },
  {
    "text": "go ahead and click create a gateway and",
    "start": "387120",
    "end": "390160"
  },
  {
    "text": "follow the prompts",
    "start": "390160",
    "end": "391840"
  },
  {
    "text": "in our case we're going to give the",
    "start": "391840",
    "end": "393440"
  },
  {
    "text": "gateway a name of",
    "start": "393440",
    "end": "395120"
  },
  {
    "text": "widget factory in",
    "start": "395120",
    "end": "398639"
  },
  {
    "text": "florida and for the green grass group",
    "start": "398639",
    "end": "401440"
  },
  {
    "text": "we're going to select the green grass",
    "start": "401440",
    "end": "403039"
  },
  {
    "text": "group to which we deployed",
    "start": "403039",
    "end": "404479"
  },
  {
    "text": "our sitewise connector",
    "start": "404479",
    "end": "407520"
  },
  {
    "text": "click create gateway",
    "start": "407520",
    "end": "410638"
  },
  {
    "text": "with our gateway created we can now add",
    "start": "415360",
    "end": "417919"
  },
  {
    "text": "our sources",
    "start": "417919",
    "end": "419599"
  },
  {
    "text": "go ahead and click on the manage link",
    "start": "419599",
    "end": "421759"
  },
  {
    "text": "above your newly created gateway",
    "start": "421759",
    "end": "423840"
  },
  {
    "text": "and select view details and then select",
    "start": "423840",
    "end": "426639"
  },
  {
    "text": "add source",
    "start": "426639",
    "end": "429280"
  },
  {
    "text": "to do this we'll have to give it a name",
    "start": "430080",
    "end": "433520"
  },
  {
    "text": "in this case we'll go use widget factory",
    "start": "433520",
    "end": "437360"
  },
  {
    "text": "one",
    "start": "437360",
    "end": "437919"
  },
  {
    "text": "opc ua server",
    "start": "437919",
    "end": "441280"
  },
  {
    "text": "for the address we need to get the",
    "start": "441759",
    "end": "444080"
  },
  {
    "text": "private ip address",
    "start": "444080",
    "end": "445759"
  },
  {
    "text": "from our opc ua server in our case",
    "start": "445759",
    "end": "449680"
  },
  {
    "text": "that is the ip address from the kep",
    "start": "449680",
    "end": "452240"
  },
  {
    "text": "server ex",
    "start": "452240",
    "end": "453120"
  },
  {
    "text": "instance that's running on ec2",
    "start": "453120",
    "end": "456639"
  },
  {
    "text": "once you have that the naming convention",
    "start": "456639",
    "end": "458639"
  },
  {
    "text": "for the local endpoint",
    "start": "458639",
    "end": "459919"
  },
  {
    "text": "is opc dot tcp",
    "start": "459919",
    "end": "464000"
  },
  {
    "text": "colon forward slash forward slash and",
    "start": "464000",
    "end": "466560"
  },
  {
    "text": "then your private address that we just",
    "start": "466560",
    "end": "468319"
  },
  {
    "text": "looked up",
    "start": "468319",
    "end": "469440"
  },
  {
    "text": "and the port number that will be",
    "start": "469440",
    "end": "470800"
  },
  {
    "text": "available for this opc ua server",
    "start": "470800",
    "end": "473759"
  },
  {
    "text": "in our case that is the default port of",
    "start": "473759",
    "end": "476840"
  },
  {
    "text": "49320",
    "start": "476840",
    "end": "479840"
  },
  {
    "text": "in this case we will use the ip address",
    "start": "482560",
    "end": "484960"
  },
  {
    "text": "from our cap server ex",
    "start": "484960",
    "end": "486800"
  },
  {
    "text": "ec2 instance",
    "start": "486800",
    "end": "489840"
  },
  {
    "text": "next we need to configure the message",
    "start": "490879",
    "end": "492879"
  },
  {
    "text": "security mode",
    "start": "492879",
    "end": "494639"
  },
  {
    "text": "i am going to select the same one that",
    "start": "494639",
    "end": "496879"
  },
  {
    "text": "we would have configured on our kept",
    "start": "496879",
    "end": "498560"
  },
  {
    "text": "server ex",
    "start": "498560",
    "end": "499520"
  },
  {
    "text": "instance which is basic 128",
    "start": "499520",
    "end": "503120"
  },
  {
    "text": "rsa 15 sign and encrypt",
    "start": "503120",
    "end": "507840"
  },
  {
    "text": "what this does is determines the",
    "start": "513440",
    "end": "515599"
  },
  {
    "text": "algorithm used",
    "start": "515599",
    "end": "516640"
  },
  {
    "text": "for encryption and signing of the opcua",
    "start": "516640",
    "end": "519120"
  },
  {
    "text": "messages exchanged between the gateway",
    "start": "519120",
    "end": "521599"
  },
  {
    "text": "and the opcua server next",
    "start": "521599",
    "end": "524959"
  },
  {
    "text": "if authentication is set to none we can",
    "start": "524959",
    "end": "527600"
  },
  {
    "text": "allow",
    "start": "527600",
    "end": "528160"
  },
  {
    "text": "the anonymous login option based on what",
    "start": "528160",
    "end": "531200"
  },
  {
    "text": "we configure",
    "start": "531200",
    "end": "532240"
  },
  {
    "text": "on our server ex opc ua server",
    "start": "532240",
    "end": "536959"
  },
  {
    "text": "finally we're going to configure the",
    "start": "536959",
    "end": "538800"
  },
  {
    "text": "nodes we're going to use for our",
    "start": "538800",
    "end": "540399"
  },
  {
    "text": "selection",
    "start": "540399",
    "end": "541920"
  },
  {
    "text": "in our case we had three nodes we made",
    "start": "541920",
    "end": "544560"
  },
  {
    "text": "under the widget machine path",
    "start": "544560",
    "end": "546399"
  },
  {
    "text": "that we created earlier this will ensure",
    "start": "546399",
    "end": "549040"
  },
  {
    "text": "the gateway only sends data",
    "start": "549040",
    "end": "551040"
  },
  {
    "text": "from these three nodes to the sitewise",
    "start": "551040",
    "end": "553200"
  },
  {
    "text": "service",
    "start": "553200",
    "end": "554399"
  },
  {
    "text": "you could also use wildcards here to",
    "start": "554399",
    "end": "556240"
  },
  {
    "text": "send data from a group of nodes",
    "start": "556240",
    "end": "558720"
  },
  {
    "text": "you will eventually have to map each of",
    "start": "558720",
    "end": "560720"
  },
  {
    "text": "these nodes to sitewise",
    "start": "560720",
    "end": "562160"
  },
  {
    "text": "asset measurements using property",
    "start": "562160",
    "end": "564399"
  },
  {
    "text": "aliases",
    "start": "564399",
    "end": "565600"
  },
  {
    "text": "before the data is accepted by the",
    "start": "565600",
    "end": "567839"
  },
  {
    "text": "service",
    "start": "567839",
    "end": "569440"
  },
  {
    "text": "more on that in the next video when we",
    "start": "569440",
    "end": "571680"
  },
  {
    "text": "dive deeper into asset modeling",
    "start": "571680",
    "end": "573680"
  },
  {
    "text": "and configuration",
    "start": "573680",
    "end": "577839"
  },
  {
    "text": "with all of that complete we can now hit",
    "start": "589040",
    "end": "591600"
  },
  {
    "text": "add source",
    "start": "591600",
    "end": "594319"
  },
  {
    "text": "now that we've configured our sitewise",
    "start": "596480",
    "end": "598720"
  },
  {
    "text": "gateway",
    "start": "598720",
    "end": "599519"
  },
  {
    "text": "we can go back to the opc ua server to",
    "start": "599519",
    "end": "602160"
  },
  {
    "text": "make sure it's correctly configured",
    "start": "602160",
    "end": "604240"
  },
  {
    "text": "to allow the gateway to access the opcwa",
    "start": "604240",
    "end": "607920"
  },
  {
    "text": "data",
    "start": "607920",
    "end": "610000"
  },
  {
    "text": "using the opcua configuration manager",
    "start": "610000",
    "end": "619839"
  },
  {
    "text": "we will need to select trust to allow",
    "start": "621040",
    "end": "624160"
  },
  {
    "text": "the client",
    "start": "624160",
    "end": "625440"
  },
  {
    "text": "with the credential for aws iot sitewise",
    "start": "625440",
    "end": "629120"
  },
  {
    "text": "gateway client to access the data",
    "start": "629120",
    "end": "632160"
  },
  {
    "text": "from this server",
    "start": "632160",
    "end": "634879"
  },
  {
    "text": "now we've configured our gateway to",
    "start": "637279",
    "end": "639279"
  },
  {
    "text": "start sending data to sitewise",
    "start": "639279",
    "end": "641519"
  },
  {
    "text": "however at this point while the gateway",
    "start": "641519",
    "end": "644000"
  },
  {
    "text": "is attempting to send data into sitewise",
    "start": "644000",
    "end": "646640"
  },
  {
    "text": "the property alias is not yet set up to",
    "start": "646640",
    "end": "649680"
  },
  {
    "text": "map to your sitewise assets",
    "start": "649680",
    "end": "651920"
  },
  {
    "text": "so sitewise will reject it and if you",
    "start": "651920",
    "end": "654959"
  },
  {
    "text": "were to check",
    "start": "654959",
    "end": "655680"
  },
  {
    "text": "in cloudwatch which is one way to see if",
    "start": "655680",
    "end": "658000"
  },
  {
    "text": "your data is flowing",
    "start": "658000",
    "end": "659440"
  },
  {
    "text": "you will see that it is failing in the",
    "start": "659440",
    "end": "662160"
  },
  {
    "text": "next video",
    "start": "662160",
    "end": "663120"
  },
  {
    "text": "we will show you how to edit your assets",
    "start": "663120",
    "end": "665200"
  },
  {
    "text": "and map the data streams",
    "start": "665200",
    "end": "666720"
  },
  {
    "text": "to your sitewise assets via the property",
    "start": "666720",
    "end": "668959"
  },
  {
    "text": "alias",
    "start": "668959",
    "end": "670079"
  },
  {
    "text": "so the data will properly flow",
    "start": "670079",
    "end": "675839"
  },
  {
    "text": "you",
    "start": "676720",
    "end": "678800"
  }
]