[
  {
    "start": "0",
    "end": "166000"
  },
  {
    "text": "hi everyone good evening I'm Gauri one of the solutions architect based out",
    "start": "0",
    "end": "5220"
  },
  {
    "text": "of Seattle thanks for coming over to our session I know this probably last session of the day hope you'll have some",
    "start": "5220",
    "end": "11519"
  },
  {
    "text": "takeaways before you hit the casinos or pubs today I would all I would like to also introduce my colleague Fernando",
    "start": "11519",
    "end": "18900"
  },
  {
    "text": "dinkler from fresh team so before we start just a quick poll how",
    "start": "18900",
    "end": "26460"
  },
  {
    "text": "many of you are from retail industry because oh that's a good number and how",
    "start": "26460",
    "end": "31650"
  },
  {
    "text": "many of you probably have board or experience with serverless architectures like lambda dynamodb so today I will be",
    "start": "31650",
    "end": "45989"
  },
  {
    "text": "talking about how certain retailers are already achieving greater results on AWS I will also introduce you to the",
    "start": "45989",
    "end": "53039"
  },
  {
    "text": "benefits of server less architecture so that you can decide how to take advantage of this architecture for your",
    "start": "53039",
    "end": "58649"
  },
  {
    "text": "needs and of course I will talk about some of the services that are used in cervelas the second part Fernanda will",
    "start": "58649",
    "end": "66330"
  },
  {
    "text": "talk about Amazon fresh rather less architecture and the best practices that they have followed I am sure most of the",
    "start": "66330",
    "end": "77549"
  },
  {
    "text": "retailers like yourself may be dealing with brick and mortar as well as online sales model today is what is special",
    "start": "77549",
    "end": "85590"
  },
  {
    "text": "today cyber monday right there is a lot of traffic to a recom US platform how do",
    "start": "85590",
    "end": "92850"
  },
  {
    "text": "you ensure you are able to meet your customers demand throughout the year whether it is cyber monday Black Friday",
    "start": "92850",
    "end": "98909"
  },
  {
    "text": "Christmas Mother's Day or any other day and while doing that do you want spend",
    "start": "98909",
    "end": "104340"
  },
  {
    "text": "lot of money in capital expenses as opposed to operational expenses and what",
    "start": "104340",
    "end": "109740"
  },
  {
    "text": "kind of apps do you want to deliver quickly to your customers so that you can differentiate yourself and stay",
    "start": "109740",
    "end": "115079"
  },
  {
    "text": "ahead of the competition and what about unlacing your data customers data no",
    "start": "115079",
    "end": "120329"
  },
  {
    "text": "matter where they are coming from and deciding what they want and making up into them as a retailer these are all",
    "start": "120329",
    "end": "128670"
  },
  {
    "text": "things you desire and certainly AWS can help you with",
    "start": "128670",
    "end": "134420"
  },
  {
    "text": "if you look at some of the retailers for running the bottles on AWS for example",
    "start": "134549",
    "end": "140560"
  },
  {
    "text": "Brooks whether they are us-based fashion retailer they're able to launch a test",
    "start": "140560",
    "end": "146739"
  },
  {
    "text": "and launch new features much faster than before there is another retailer in UK made",
    "start": "146739",
    "end": "151959"
  },
  {
    "text": "calm they could handle the peak without any disruption by running their critical applications on AWS these are not just",
    "start": "151959",
    "end": "159280"
  },
  {
    "text": "to give an up examples how retailers are already achieving greater results let's",
    "start": "159280",
    "end": "166810"
  },
  {
    "start": "166000",
    "end": "166000"
  },
  {
    "text": "move on based on our experience retailers are",
    "start": "166810",
    "end": "171849"
  },
  {
    "text": "focusing on three particular areas to start with e-commerce or digital",
    "start": "171849",
    "end": "177069"
  },
  {
    "text": "commerce you may have some platform that is scattering customer traffic coming from omni-channel like web mobile",
    "start": "177069",
    "end": "184000"
  },
  {
    "text": "Android iOS and point-of-sale system the",
    "start": "184000",
    "end": "189849"
  },
  {
    "text": "second is about big data analyzing customers data no matter where they are",
    "start": "189849",
    "end": "196540"
  },
  {
    "text": "coming whether it is big or small whether it is structured data or unstructured data petabyte scale or",
    "start": "196540",
    "end": "203290"
  },
  {
    "text": "terabyte scaled you really want to unless your customers data to understand",
    "start": "203290",
    "end": "208479"
  },
  {
    "text": "and to gain some insights for your business as well as to provide some",
    "start": "208479",
    "end": "213549"
  },
  {
    "text": "recommendations for your customers we are delving into digital customer",
    "start": "213549",
    "end": "219400"
  },
  {
    "text": "experience Amazon is doing a lot of work with Alexa a lot of our customers are",
    "start": "219400",
    "end": "224680"
  },
  {
    "text": "building voice and chat interfaces and using applications like digital shopping assistant chat BOTS leveraging machine",
    "start": "224680",
    "end": "232329"
  },
  {
    "text": "learning kind of technologies to to talk to customers and predict understand what they want",
    "start": "232329",
    "end": "237659"
  },
  {
    "text": "not to mention IOT Internet of Things for automation of your stores and",
    "start": "237659",
    "end": "243609"
  },
  {
    "text": "deliver delivery systems and so on imagine what kind of technologies are",
    "start": "243609",
    "end": "248979"
  },
  {
    "text": "infrastructure that you need to build and manage to make these things work our",
    "start": "248979",
    "end": "254229"
  },
  {
    "text": "answer is you don't need to a double ace has been continuously expanding its services and features we have about 90",
    "start": "254229",
    "end": "261400"
  },
  {
    "text": "plus services across various domains servers storage data machine learning Big Data to name I",
    "start": "261400",
    "end": "270099"
  },
  {
    "text": "would tea that allows you to build virtually any type of workload to meet your business requirements on AWS if you",
    "start": "270099",
    "end": "281500"
  },
  {
    "text": "look at what one of the major retailers and Nostrum they are built a near real-time data processing system that",
    "start": "281500",
    "end": "287590"
  },
  {
    "text": "provides personalized recommendations to their customers not only that they're",
    "start": "287590",
    "end": "292930"
  },
  {
    "text": "able to do this much faster like for example they were able to provide these recommendations in seconds then which",
    "start": "292930",
    "end": "299710"
  },
  {
    "text": "used to be in minutes and with the lower cost if you look at the type of the",
    "start": "299710",
    "end": "310870"
  },
  {
    "start": "307000",
    "end": "307000"
  },
  {
    "text": "customers for deploying their workload on AWS we see lot of customers use AC -",
    "start": "310870",
    "end": "318069"
  },
  {
    "text": "I think most of you probably familiar with it ec2 is most like a de facto choice when especially when you are migrating from",
    "start": "318069",
    "end": "324610"
  },
  {
    "text": "on from ice to 12 and we see a lot of retailers use easy tools to deploy",
    "start": "324610",
    "end": "330279"
  },
  {
    "text": "applications like digital commerce tracks like ASAP hybrids and IBM despair commerce and so on and we have a lot of",
    "start": "330279",
    "end": "339250"
  },
  {
    "text": "instance types to support wide range of use cases on the other hand we have",
    "start": "339250",
    "end": "345789"
  },
  {
    "text": "Amazon SES elastic container service we have we have seen customers like Expedia",
    "start": "345789",
    "end": "351909"
  },
  {
    "text": "NAB so they are leveraging easiest to run micro services using docker",
    "start": "351909",
    "end": "358539"
  },
  {
    "text": "containers and these we see lot of customers using long running applications bad jobs using ECS",
    "start": "358539",
    "end": "366750"
  },
  {
    "text": "interestingly there is a good trend of customers started leveraging what we",
    "start": "367110",
    "end": "372849"
  },
  {
    "text": "call a server less compute also known as lambda what is civil is compute it's all",
    "start": "372849",
    "end": "381069"
  },
  {
    "text": "about building and running applications without thinking about servers so you don't have to provision manage or patch",
    "start": "381069",
    "end": "388930"
  },
  {
    "text": "the servers you don't have to worry about high availability or scalability of the service because AWS will take",
    "start": "388930",
    "end": "394750"
  },
  {
    "text": "care of for for you all you need to do is develop you application dollop your code and",
    "start": "394750",
    "end": "400860"
  },
  {
    "text": "uploaded so we have a service that will execute your code and the service called",
    "start": "400860",
    "end": "406050"
  },
  {
    "text": "aw slander there are a number of ways you can trigger lamda I will talk about it in a while I have mentioned about",
    "start": "406050",
    "end": "413910"
  },
  {
    "text": "notch trans recommendation story so they have used natively as lamda and other managed services to build that",
    "start": "413910",
    "end": "419669"
  },
  {
    "text": "capability so likewise you could also build many real-time data processing",
    "start": "419669",
    "end": "425460"
  },
  {
    "text": "application using lamda and other a SS managed services to serve use cases such as like clickstream analysis",
    "start": "425460",
    "end": "432650"
  },
  {
    "text": "recommendation engine and social media analysis IOT analysis so many many such",
    "start": "432650",
    "end": "438000"
  },
  {
    "text": "data processing application you can do and also you can build a back-end applications for your e-commerce talks",
    "start": "438000",
    "end": "443250"
  },
  {
    "text": "ecommerce tracks sorry like web web map but backends mobile",
    "start": "443250",
    "end": "449490"
  },
  {
    "text": "backends I vote you backends and so on you can also use chat BOTS build chat BOTS and Alexa enabled applications",
    "start": "449490",
    "end": "456900"
  },
  {
    "text": "using this server less computing model I mentioned about the retailer's focus",
    "start": "456900",
    "end": "462419"
  },
  {
    "text": "area so many of those focus areas you can clea aging server less computing model let's look at some of the",
    "start": "462419",
    "end": "469560"
  },
  {
    "text": "advantages of server let's compute of course it helps you to focus on your core business logic because there is no",
    "start": "469560",
    "end": "476250"
  },
  {
    "text": "servers to manage this way you can it helps you to release your application much faster so you can release new",
    "start": "476250",
    "end": "482490"
  },
  {
    "text": "functions and features to your customers much faster additionally it is cost",
    "start": "482490",
    "end": "487680"
  },
  {
    "text": "effective because all you're paying is paying only the time when your code is executed and the number of times the",
    "start": "487680",
    "end": "494909"
  },
  {
    "text": "code is executed when the code is not executed you are not paying for any any anything and it automatically scales to",
    "start": "494909",
    "end": "502380"
  },
  {
    "text": "your workload especially valid for retail use cases because you have a spiky workload so these are some of the",
    "start": "502380",
    "end": "509250"
  },
  {
    "text": "advantages where we see lot of customers started thinking about serverless computing model let's look at the",
    "start": "509250",
    "end": "517680"
  },
  {
    "start": "517000",
    "end": "517000"
  },
  {
    "text": "typical components of serverless architectures any server less architecture starts with the lambda",
    "start": "517680",
    "end": "523169"
  },
  {
    "text": "because lambda is kind of a central backbone and that is where your core application logic runs how do you",
    "start": "523169",
    "end": "530820"
  },
  {
    "text": "trigger lambda there are a number of ways you can trigger lambda you could have a streaming data that can trigger lambda",
    "start": "530820",
    "end": "536819"
  },
  {
    "text": "or there are even sources so even sources are nothing but other aw services that emits events and that",
    "start": "536819",
    "end": "544199"
  },
  {
    "text": "emits events can be captured and processed by your code in the lambda function and what you do with the lambda",
    "start": "544199",
    "end": "551190"
  },
  {
    "text": "it's a purely depends on your application logic you process the results and store in another data store",
    "start": "551190",
    "end": "557459"
  },
  {
    "text": "for example Amazon DynamoDB or s3 or you could you could call another lambda",
    "start": "557459",
    "end": "562560"
  },
  {
    "text": "function or another api's and so on so let me give a simple example how you can",
    "start": "562560",
    "end": "568529"
  },
  {
    "text": "use our surveillance architecture it is very common in retail industry you get us some kind of updates",
    "start": "568529",
    "end": "574589"
  },
  {
    "text": "it could be product updates and pricing updates from your vendors or partners and you want to update your customer",
    "start": "574589",
    "end": "580920"
  },
  {
    "text": "database so that you can provide the latest information to your customers let's say the file which contains the",
    "start": "580920",
    "end": "586470"
  },
  {
    "text": "updates is received in our storage service s3 as soon as the file arrives",
    "start": "586470",
    "end": "591810"
  },
  {
    "text": "you can you can trigger a lambda using a feature called even notification so you",
    "start": "591810",
    "end": "597360"
  },
  {
    "text": "inside the lambda then you can you can process the file and then store the results back in dynamo dB this is simple",
    "start": "597360",
    "end": "604500"
  },
  {
    "text": "use case so likewise you can implement many such architectural using solderless",
    "start": "604500",
    "end": "610610"
  },
  {
    "text": "architecture pattern today I will be",
    "start": "610610",
    "end": "616410"
  },
  {
    "start": "615000",
    "end": "615000"
  },
  {
    "text": "talking about one of many serverless reference architectures this is server less web mobile",
    "start": "616410",
    "end": "622589"
  },
  {
    "text": "applications why I have choosen this architecture the reason is this is what",
    "start": "622589",
    "end": "627870"
  },
  {
    "text": "Amazon fresh has leveraged to address their customer needs let's look at this",
    "start": "627870",
    "end": "633630"
  },
  {
    "text": "architecture so we are leveraging lambda and a tubeless managed services ap a gateway and DynamoDB to provide a",
    "start": "633630",
    "end": "640170"
  },
  {
    "text": "completely serverless applications so with the lambda with other managed",
    "start": "640170",
    "end": "645389"
  },
  {
    "text": "services you don't have to worry about managing the infrastructure and it is automatically scales and it's fully",
    "start": "645389",
    "end": "652019"
  },
  {
    "text": "managed in this case your customer traffic gets you are receiving customer",
    "start": "652019",
    "end": "658139"
  },
  {
    "text": "traffic from omni-channel like web mobile and other sources the request gets laundered into AP gateway AP",
    "start": "658139",
    "end": "665250"
  },
  {
    "text": "gateway process the results but calling lambdai triggers it calls the lambda and lambda processes the",
    "start": "665250",
    "end": "670740"
  },
  {
    "text": "request and based on your logic you can store the results in dynamo or or give",
    "start": "670740",
    "end": "675990"
  },
  {
    "text": "the data back to the caller so this is a simple use case this is how you serve the dynamic content for your web",
    "start": "675990",
    "end": "682470"
  },
  {
    "text": "applications using this architecture you can also add additional functionalities",
    "start": "682470",
    "end": "688680"
  },
  {
    "text": "like if you want to provide static content you could use s3 to store your",
    "start": "688680",
    "end": "694080"
  },
  {
    "text": "static content you can use our cloud front service to provide caching of your static content close to your users so",
    "start": "694080",
    "end": "700410"
  },
  {
    "text": "this is a sample architecture let me look at let's let me dive deep into the",
    "start": "700410",
    "end": "707130"
  },
  {
    "text": "some of the services that are used in this architecture to start with lambda",
    "start": "707130",
    "end": "713240"
  },
  {
    "text": "lambda we talked about its server less compute service the good thing is it it",
    "start": "713240",
    "end": "720270"
  },
  {
    "text": "supports most commonly used programming languages like node Python Java and",
    "start": "720270",
    "end": "725490"
  },
  {
    "text": "c-sharp so you can write any of these programming languages with lambda and the way we trigger lambda I talked about",
    "start": "725490",
    "end": "733620"
  },
  {
    "text": "event sources so just to give a perspective like a new file comes it can trigger a lambda a new message comes it",
    "start": "733620",
    "end": "740880"
  },
  {
    "text": "can trigger a lambda so you can you can different you can architect in different ways these are all a list of even",
    "start": "740880",
    "end": "749130"
  },
  {
    "start": "747000",
    "end": "747000"
  },
  {
    "text": "sources that are natively integrated with AWS and the list continues to grow almost most of the services are some",
    "start": "749130",
    "end": "756630"
  },
  {
    "text": "level of integration with lambda one important things to highlight it is not",
    "start": "756630",
    "end": "762240"
  },
  {
    "text": "necessarily trigger lambda through even sources you can also schedule on des like a crown like expression so you can",
    "start": "762240",
    "end": "769110"
  },
  {
    "text": "have lambda to run a particular time of the day to sub use cases like taking a",
    "start": "769110",
    "end": "774450"
  },
  {
    "text": "extracts or sending some kind of notification on a particular time or even you can use lambda to do some more",
    "start": "774450",
    "end": "780180"
  },
  {
    "text": "IT policy checks those kind of use cases you can use schedule and are working",
    "start": "780180",
    "end": "787560"
  },
  {
    "start": "787000",
    "end": "787000"
  },
  {
    "text": "with lambda it's very simple all you need to do is when you write your code",
    "start": "787560",
    "end": "793260"
  },
  {
    "text": "and when you upload to the lambda what we call is we create a function so",
    "start": "793260",
    "end": "799950"
  },
  {
    "text": "when you create a function you have to specify the memory requirements for the function lambda supports memory rating",
    "start": "799950",
    "end": "807089"
  },
  {
    "text": "from 128 MB to 1.5 gb so based on that appropriate CPU on network resources",
    "start": "807089",
    "end": "813360"
  },
  {
    "text": "resources or allocated so it's very important to choose the right memory allocation for your application needs",
    "start": "813360",
    "end": "818699"
  },
  {
    "text": "how to do that the best way is to test different memory configurations based on your needs and choose the right value",
    "start": "818699",
    "end": "825170"
  },
  {
    "text": "there are other important considerations when you are building your application using lambda the first is lambda is a",
    "start": "825170",
    "end": "832470"
  },
  {
    "text": "straight low service so you cannot expect to store anything inside lambda so you need to use other data stores",
    "start": "832470",
    "end": "839010"
  },
  {
    "text": "such as s3 or dynamo DB to store the state and the maximum processing time or",
    "start": "839010",
    "end": "845820"
  },
  {
    "text": "the time owed you can have with the lambda is 300 seconds or 5 minutes so if",
    "start": "845820",
    "end": "851130"
  },
  {
    "text": "your application needs more than 5 minutes to process or it's a long-running applications then you may",
    "start": "851130",
    "end": "857130"
  },
  {
    "text": "want to consider ec2 or ECS naught lambda is not the right fit for your use case and it has features like it",
    "start": "857130",
    "end": "864899"
  },
  {
    "text": "supports versioning of your code and also like operational parameters so you",
    "start": "864899",
    "end": "870120"
  },
  {
    "text": "can define configuration parameters such as table name the bucket name that are used in your code outside of lambda I",
    "start": "870120",
    "end": "876930"
  },
  {
    "text": "can configure as a parameter so that you can refer it inside the code and manage different environments like dev tests",
    "start": "876930",
    "end": "883410"
  },
  {
    "text": "and so on for monitoring lambda it's it's natively integrated with our cloud watch service",
    "start": "883410",
    "end": "889500"
  },
  {
    "text": "so you could look at statistics like the errors number of invitations and a lot",
    "start": "889500",
    "end": "894839"
  },
  {
    "text": "of such metrics you can monitor in real time and it also integrated with the cloud watch logs so whatever logs you",
    "start": "894839",
    "end": "901110"
  },
  {
    "text": "are writing it gets recorded in cloud watch logs deploying lambda it's as",
    "start": "901110",
    "end": "910170"
  },
  {
    "start": "906000",
    "end": "906000"
  },
  {
    "text": "simple as that you write your code under uploaded to the console or through CLI",
    "start": "910170",
    "end": "915870"
  },
  {
    "text": "or you can implement a sophisticated CI CD like continuous integration continuous deployment kind of a pipeline",
    "start": "915870",
    "end": "922889"
  },
  {
    "text": "using other AWS services for example you would you could use code pipeline to for",
    "start": "922889",
    "end": "928800"
  },
  {
    "text": "our castration and code commit to store your app code and code build to build your lambda function and so on typically",
    "start": "928800",
    "end": "936390"
  },
  {
    "text": "serverless architecture is not just lambda right in this case we talked about dynamodb AP a gateway there are",
    "start": "936390",
    "end": "942750"
  },
  {
    "text": "other managed services how do you provision all the resources that are required for your server less",
    "start": "942750",
    "end": "947970"
  },
  {
    "text": "application you can use cloud formation for that so using cloud formation you can provide provision all the resources",
    "start": "947970",
    "end": "954660"
  },
  {
    "text": "and manage them and even you can create a parallel environments or you can create a equivalent environment you know",
    "start": "954660",
    "end": "961019"
  },
  {
    "text": "another AWS region for a for disaster recovery and and so on so cloud",
    "start": "961019",
    "end": "966149"
  },
  {
    "text": "formation is the one which you you could use for that we also have a another",
    "start": "966149",
    "end": "971790"
  },
  {
    "text": "interesting service x-ray using that you can understand the performance of your",
    "start": "971790",
    "end": "978540"
  },
  {
    "text": "applications especially when you are working with Cerberus and lambda you want to trace what is your request",
    "start": "978540",
    "end": "984470"
  },
  {
    "text": "latency how much time it's taking to call from lambda to dynamodb how do you",
    "start": "984470",
    "end": "990570"
  },
  {
    "text": "trace those kind of n2 and request the x-ray provides that capability so with",
    "start": "990570",
    "end": "995670"
  },
  {
    "text": "that you can troubleshoot and understand the performance aspects of your application so we we talked about lambda",
    "start": "995670",
    "end": "1003430"
  },
  {
    "text": "moving on to the front end layer we have Amazon API gateway it's it's a fully",
    "start": "1003430",
    "end": "1010520"
  },
  {
    "start": "1006000",
    "end": "1006000"
  },
  {
    "text": "managed service again it's a serverless for hosting over has two deepest endpoints on AWS it acts more like acts",
    "start": "1010520",
    "end": "1018470"
  },
  {
    "text": "like a front door because you have a lambda or some service running on ec2 ap gateway more actors it acts like a",
    "start": "1018470",
    "end": "1025069"
  },
  {
    "text": "friend or and routes your traffic to our backends to get your data or or to",
    "start": "1025069",
    "end": "1030168"
  },
  {
    "text": "process something on your back end and it has it allows you to it provides",
    "start": "1030169",
    "end": "1036230"
  },
  {
    "text": "capabilities such as hundreds and thousands of concurrent API requests",
    "start": "1036230",
    "end": "1041720"
  },
  {
    "text": "traffic management authorizations all of these features are managed out of the box so you don't have to handle this in",
    "start": "1041720",
    "end": "1048380"
  },
  {
    "text": "your code so API gateway provide these capabilities as a managed feature you",
    "start": "1048380",
    "end": "1055850"
  },
  {
    "start": "1055000",
    "end": "1055000"
  },
  {
    "text": "could create ap ice publish configure you can diplomat a lifecycle of ApS using this API gateway and also you can",
    "start": "1055850",
    "end": "1064220"
  },
  {
    "text": "have something called stages so you can have a different versions of your ApS to support your",
    "start": "1064220",
    "end": "1069800"
  },
  {
    "text": "application release life cycle for example different versions for different environments like dev tests and so on it",
    "start": "1069800",
    "end": "1076580"
  },
  {
    "text": "has an another interesting feature called throttling and usage plans it's probably useful for retail kind of",
    "start": "1076580",
    "end": "1083180"
  },
  {
    "text": "workloads so you want to restrict a single consumer or or a partner you can",
    "start": "1083180",
    "end": "1089030"
  },
  {
    "text": "have only X number of API requests per second so you can do that using what we call as a throttling and usage plan so",
    "start": "1089030",
    "end": "1095750"
  },
  {
    "text": "you can create a API key for that consumer and you can set thresholds like he can have let us say thousand requests",
    "start": "1095750",
    "end": "1101510"
  },
  {
    "text": "per second you can also set up quota like he can have only one hundred",
    "start": "1101510",
    "end": "1106760"
  },
  {
    "text": "thousand requests per week so this is something you can define as part of API gateway service and like lambda it is",
    "start": "1106760",
    "end": "1114680"
  },
  {
    "text": "integrated with the cloud watch for for real-time monitoring of all your API requests and so on let's look at a",
    "start": "1114680",
    "end": "1122420"
  },
  {
    "text": "sample APA call flow how would look like so before that when you define an API",
    "start": "1122420",
    "end": "1129820"
  },
  {
    "start": "1123000",
    "end": "1123000"
  },
  {
    "text": "endpoints there are two types of endpoints you can create there's a regional endpoint and there is edge",
    "start": "1129820",
    "end": "1135500"
  },
  {
    "text": "optimized endpoint the regional endpoint feature is actually quite new it just released this month so it is mainly for",
    "start": "1135500",
    "end": "1143600"
  },
  {
    "text": "scenarios where you have an ec2 instance hosted in a region and you have a PA",
    "start": "1143600",
    "end": "1150050"
  },
  {
    "text": "gateway also in the same region and they are talking to each other in those kind of scenarios you may want to go for a",
    "start": "1150050",
    "end": "1155390"
  },
  {
    "text": "regional end point if you have a consumers or developers for a global",
    "start": "1155390",
    "end": "1160910"
  },
  {
    "text": "based then you may go for a edge optimized endpoint so this is the",
    "start": "1160910",
    "end": "1166340"
  },
  {
    "text": "default and the edge optimized endpoint would use CloudFront distribution in",
    "start": "1166340",
    "end": "1171980"
  },
  {
    "text": "front to route your traffic so in this case a sample APA request gets from you",
    "start": "1171980",
    "end": "1178220"
  },
  {
    "text": "get the request from different sources it gets to the internet and from internet to the nearest cloud Front or",
    "start": "1178220",
    "end": "1183530"
  },
  {
    "text": "content delivery service upon edge location from there it gets routed to the API endpoint where it is actually",
    "start": "1183530",
    "end": "1192140"
  },
  {
    "text": "hosted and gets served from there you could also configure a caching on top of",
    "start": "1192140",
    "end": "1197420"
  },
  {
    "text": "your IP gateway optional it is an optional thing so you can caching at the API gateway so if there",
    "start": "1197420",
    "end": "1203490"
  },
  {
    "text": "is a cache it gets out from that if not it goes to the respective service and try to get you the data and so on so we",
    "start": "1203490",
    "end": "1213810"
  },
  {
    "text": "discussed about the front-end what about the data layer in serverless architectures so very commonly asked",
    "start": "1213810",
    "end": "1221730"
  },
  {
    "text": "question so we see there are a lot of retailers use no sequel data store for",
    "start": "1221730",
    "end": "1227040"
  },
  {
    "text": "range of use cases so shopping catalog probably you guys more familiar with so there's also like inventory data product",
    "start": "1227040",
    "end": "1234510"
  },
  {
    "text": "product catalog customer data order data there are a number of use cases you could use no sequel data store let me",
    "start": "1234510",
    "end": "1242040"
  },
  {
    "text": "talk about some of the advantages of using no sequel data store first of all scaling and performance write",
    "start": "1242040",
    "end": "1248940"
  },
  {
    "text": "performance at scale so I talked about cyber monday so we are talking about it's a lot of traffic so you should be",
    "start": "1248940",
    "end": "1256440"
  },
  {
    "text": "able to provide the consistent response to your customers whether it is cyber monday a normal day with the no sequel",
    "start": "1256440",
    "end": "1263130"
  },
  {
    "text": "data stores with the horizontal partitioning it's easy to scale because the sequel data stores is there is a",
    "start": "1263130",
    "end": "1269100"
  },
  {
    "text": "limit that you can scale vertically additionally there are some operational activities that you might need to do for",
    "start": "1269100",
    "end": "1276300"
  },
  {
    "text": "example like query query plan changes that could affect your performance or indexes that you need to keep rebuilding",
    "start": "1276300",
    "end": "1282540"
  },
  {
    "text": "to get the optimal performance so those things you don't need to do in no sequel data store additionally if you look at I",
    "start": "1282540",
    "end": "1290970"
  },
  {
    "text": "talked about digital customer experience right so if you need to build your applications to provide that level of",
    "start": "1290970",
    "end": "1296640"
  },
  {
    "text": "capabilities your data store should be able to receive and process data at much",
    "start": "1296640",
    "end": "1302580"
  },
  {
    "text": "faster rate from variety of data sources Here I am saying variety means the data could come from social media the web",
    "start": "1302580",
    "end": "1309300"
  },
  {
    "text": "mobile so there are many sources and different formats of data that could come so your data store should be",
    "start": "1309300",
    "end": "1314640"
  },
  {
    "text": "flexible enough to to receive those data under and show it to your customers a simple example is let's say let's say",
    "start": "1314640",
    "end": "1322260"
  },
  {
    "text": "you are running a promotion and based on the market feedback that you want to add some additional attributes to your data",
    "start": "1322260",
    "end": "1328200"
  },
  {
    "text": "model to capture some extra attributes how to do that with the flexible data store is easy for you to",
    "start": "1328200",
    "end": "1334970"
  },
  {
    "text": "in just a more data with a different format with minimal changes to your application to consume the data and",
    "start": "1334970",
    "end": "1341770"
  },
  {
    "text": "Amazon DynamoDB provides all of these capabilities out of the box so again it",
    "start": "1341770",
    "end": "1347780"
  },
  {
    "text": "is server less so you don't have to so building and running your own is no sequel data store is not a easy task so",
    "start": "1347780",
    "end": "1353300"
  },
  {
    "text": "Amazon DynamoDB provides this out-of-the-box that's why even amazon.com one of the retailers they",
    "start": "1353300",
    "end": "1360470"
  },
  {
    "text": "have used to dynamodb to serve millions of TPS in the last prime de 2017 in fact",
    "start": "1360470",
    "end": "1367250"
  },
  {
    "text": "there is a blog about that now there is another retailer in Tokyo Tokyo Hans",
    "start": "1367250",
    "end": "1372950"
  },
  {
    "text": "they have built a cost-effective shopping system on top of DynamoDB these are some examples how other retailers",
    "start": "1372950",
    "end": "1379400"
  },
  {
    "text": "are leveraging dynamodb so let's look at some of the features of dynamo DB",
    "start": "1379400",
    "end": "1385870"
  },
  {
    "start": "1383000",
    "end": "1383000"
  },
  {
    "text": "dynamodb is the no sequel data store it supports key value as well as document",
    "start": "1385870",
    "end": "1391580"
  },
  {
    "text": "data type and it also has features like indexing like global secondary indexes and local sign indexes that provides",
    "start": "1391580",
    "end": "1398540"
  },
  {
    "text": "additional search capabilities on your data and it is highly available durable",
    "start": "1398540",
    "end": "1404740"
  },
  {
    "text": "any data that you store in dynamodb it gets replicated across three facilities",
    "start": "1404740",
    "end": "1410360"
  },
  {
    "text": "within a region so that way is highly available and I talked about consistent",
    "start": "1410360",
    "end": "1416290"
  },
  {
    "text": "high performance even at a high scale like I talked about amazon.com prime Day like millions of TPS so the animal DB",
    "start": "1416290",
    "end": "1423470"
  },
  {
    "text": "provide a single-digit response for your for your gates and puts like any data",
    "start": "1423470",
    "end": "1428600"
  },
  {
    "text": "you read and write you get a single-digit millisecond response consistently from security wise it has a",
    "start": "1428600",
    "end": "1436130"
  },
  {
    "text": "natively integrated with your identity access management service so even you can implement a fine-grained access",
    "start": "1436130",
    "end": "1442160"
  },
  {
    "text": "control but you can have a restrict users to to restricts at the table level",
    "start": "1442160",
    "end": "1447260"
  },
  {
    "text": "or within the table you can even restricts add item and attribute level so you can create I am policy to do that",
    "start": "1447260",
    "end": "1452450"
  },
  {
    "text": "and we are talking about serverless architecture dynamodb is natively",
    "start": "1452450",
    "end": "1458630"
  },
  {
    "text": "integrated with the lambda using a concept called triggers so whenever there is some change happens",
    "start": "1458630",
    "end": "1464300"
  },
  {
    "text": "let's say you have a table and there are some data change happens you can capture this change and process",
    "start": "1464300",
    "end": "1470690"
  },
  {
    "text": "it by a lambda so there is a concept of trigger and DynamoDB streams using that you can achieve that functionality and",
    "start": "1470690",
    "end": "1477580"
  },
  {
    "text": "it's cost-effective the way you work with the DynamoDB you provision the",
    "start": "1477580",
    "end": "1483019"
  },
  {
    "text": "capacity right so you provision the readwrite capacity so when you provision",
    "start": "1483019",
    "end": "1488179"
  },
  {
    "text": "for example for peak events you want to provision high capacity to serve the needs but after the be given you don't",
    "start": "1488179",
    "end": "1494419"
  },
  {
    "text": "have to provision the same level of capacity so you can scale down to a normal traffic so that is that way it's completely flexible let me also talk",
    "start": "1494419",
    "end": "1505039"
  },
  {
    "text": "about highlight some of the other interesting features that we released on dynamo DB especially this year to start",
    "start": "1505039",
    "end": "1511460"
  },
  {
    "text": "with Dax it's called dynamo DB accelerator it's a kind of a memory caching service in",
    "start": "1511460",
    "end": "1518090"
  },
  {
    "text": "front of dynamo DB it's a fully managed service why would you want to use that",
    "start": "1518090",
    "end": "1523750"
  },
  {
    "text": "again for Reed from retail point of if you look at you can use to to cash or",
    "start": "1523750",
    "end": "1528889"
  },
  {
    "text": "popular items there are certain deals or certain items going to be more popular so you can serve from the cache Dax",
    "start": "1528889",
    "end": "1535519"
  },
  {
    "text": "in this way you can reduce the number of reads that you are using on dynamo DB",
    "start": "1535519",
    "end": "1540679"
  },
  {
    "text": "and and we can save some cost and Dax provides microseconds response just note",
    "start": "1540679",
    "end": "1548299"
  },
  {
    "text": "down while dynamo DB provides milliseconds Dax can provide a microseconds response forever for your",
    "start": "1548299",
    "end": "1553940"
  },
  {
    "text": "gates so that's another advantage you may want to consider and typically what you see",
    "start": "1553940",
    "end": "1560330"
  },
  {
    "text": "there is a lot of data that grows right in any industry it's not it's also valid for retail how do you manage the data",
    "start": "1560330",
    "end": "1567139"
  },
  {
    "text": "growth so for example you are running a promotion like after six months or one year you don't want to probably look at",
    "start": "1567139",
    "end": "1573830"
  },
  {
    "text": "the data quite frequently so we call this data like a coal data so there's the best practice it is not a good idea",
    "start": "1573830",
    "end": "1580879"
  },
  {
    "text": "to keep the coal data and dynamodb so you could move the data into other data store such as s3 for those kind of",
    "start": "1580879",
    "end": "1587720"
  },
  {
    "text": "scenarios how to achieve that so we have featured called time to live so what you",
    "start": "1587720",
    "end": "1593210"
  },
  {
    "text": "do is you will designate one of your attribute in the table as a time to live attribute then DynamoDB automatically",
    "start": "1593210",
    "end": "1600409"
  },
  {
    "text": "expires those items or purse those items which meets this criteria so that the TTL is the flag",
    "start": "1600409",
    "end": "1607790"
  },
  {
    "text": "that you said and it's you specify using a time stamp basically in a poke format and now DynamoDB automatically purge the",
    "start": "1607790",
    "end": "1614540"
  },
  {
    "text": "items you can capture those items and move into s3 using DynamoDB streams so",
    "start": "1614540",
    "end": "1619580"
  },
  {
    "text": "and there is another interesting feature called manage dot of scaling I talked",
    "start": "1619580",
    "end": "1625280"
  },
  {
    "text": "about scale up and scale down so it if you want to handle an infrequent spike in your room in your workload you could",
    "start": "1625280",
    "end": "1632210"
  },
  {
    "text": "use this feature so what you would do is you will set up some minimum and maximum threshold and DynamoDB will",
    "start": "1632210",
    "end": "1638930"
  },
  {
    "text": "automatically scale to within the Drage so that it helps you to meet infrequent",
    "start": "1638930",
    "end": "1644450"
  },
  {
    "text": "spikes as well as to save cost so these are some of the useful features I would",
    "start": "1644450",
    "end": "1650020"
  },
  {
    "text": "request you to consider while building your applications on top of DynamoDB so",
    "start": "1650020",
    "end": "1658370"
  },
  {
    "text": "we talked about serverless architecture we talked about the technical aspects of lambda API gateway and DynamoDB now I",
    "start": "1658370",
    "end": "1666710"
  },
  {
    "text": "would like to invite my colleague Fernando how they've used these architectures to improve their customer",
    "start": "1666710",
    "end": "1673400"
  },
  {
    "text": "experience or to you Fernando",
    "start": "1673400",
    "end": "1677470"
  },
  {
    "text": "good evening everyone my name is Fernanda Dingley and I'm a software engineer at Amazon fresh well first of",
    "start": "1679429",
    "end": "1689009"
  },
  {
    "start": "1688000",
    "end": "1688000"
  },
  {
    "text": "all I like to know how many of you here are among some fresh customers or have tried it in the past all right I see a",
    "start": "1689009",
    "end": "1696210"
  },
  {
    "text": "few hands you may relate yourself with this presentation so gallery already",
    "start": "1696210",
    "end": "1703440"
  },
  {
    "text": "provided an overview of what server like what components are part of a server",
    "start": "1703440",
    "end": "1709320"
  },
  {
    "text": "list architecture so I'll be showing one of the stories of how we leverage serverless architectures that Amazon",
    "start": "1709320",
    "end": "1715289"
  },
  {
    "text": "fresh if you don't know what fresh is for those that didn't raise their hand",
    "start": "1715289",
    "end": "1720779"
  },
  {
    "text": "it is a grocery delivery service for Prime members you can buy online from a",
    "start": "1720779",
    "end": "1725909"
  },
  {
    "text": "selection of produce and you can have your groceries delivered within the same",
    "start": "1725909",
    "end": "1731009"
  },
  {
    "text": "day or you can choose a future delivery date and if you haven't tried it you",
    "start": "1731009",
    "end": "1740659"
  },
  {
    "text": "when you get your groceries delivered they come in these green reusable bags that we call totes",
    "start": "1740659",
    "end": "1747470"
  },
  {
    "text": "and the idea of these bags being reusable is that once you've done",
    "start": "1747470",
    "end": "1752879"
  },
  {
    "text": "unpacking your groceries you can put them back on your doorstep and they will be picked up on your next delivery",
    "start": "1752879",
    "end": "1760908"
  },
  {
    "text": "however sometimes happens that the delivery trucks are full and so they can",
    "start": "1761119",
    "end": "1767909"
  },
  {
    "text": "take anymore totes they simply don't have any more room so what happens is they'll end up leaving the new totes",
    "start": "1767909",
    "end": "1775259"
  },
  {
    "text": "along with the previous ones from your previous orders and it was creating an",
    "start": "1775259",
    "end": "1781139"
  },
  {
    "text": "inconvenient situation for our customers because it wasn't happening that often but it was happening often enough to",
    "start": "1781139",
    "end": "1787799"
  },
  {
    "text": "have some customers unhappy and this tote can be bulky they're about this big",
    "start": "1787799",
    "end": "1794070"
  },
  {
    "text": "and if you live in an apartment or a small place it's kind of annoying having to hold them for a week or so until your",
    "start": "1794070",
    "end": "1801090"
  },
  {
    "text": "next delivery and that's exactly what was happening customers were not happy",
    "start": "1801090",
    "end": "1807059"
  },
  {
    "text": "like this person who posted a picture on Twitter it says a lot of us and fresh butt",
    "start": "1807059",
    "end": "1812220"
  },
  {
    "text": "doesn't look like they will ever pick up my totes even though I've asked them twice so he built a Christmas tree out",
    "start": "1812220",
    "end": "1817950"
  },
  {
    "text": "of them and he wasn't the only one there were other customers complaining as well",
    "start": "1817950",
    "end": "1823770"
  },
  {
    "text": "like this one or this other ones so it",
    "start": "1823770",
    "end": "1831090"
  },
  {
    "text": "was clearly becoming a problem and we wanted to fix it you may relate yourself",
    "start": "1831090",
    "end": "1838740"
  },
  {
    "text": "with this light in the sense that I'm sure that our your organization you also have one process that is very manual or",
    "start": "1838740",
    "end": "1845730"
  },
  {
    "text": "very tedious and this is how our process looked like before we changed it",
    "start": "1845730",
    "end": "1851390"
  },
  {
    "text": "essentially when a customer was faced with this issue of not having their totes picked up when will happen after",
    "start": "1851390",
    "end": "1858450"
  },
  {
    "text": "is a series of multiple steps multiple people involved customer service representatives pickup a specialist",
    "start": "1858450",
    "end": "1865650"
  },
  {
    "text": "transportation teams and eventually their totes will be picked up but it's a",
    "start": "1865650",
    "end": "1871500"
  },
  {
    "text": "lengthy process it was not transparent for the user and it will take within three to five days so really not ideal",
    "start": "1871500",
    "end": "1878280"
  },
  {
    "text": "so we wanted to improve it we wanted a better solution something where the",
    "start": "1878280",
    "end": "1884130"
  },
  {
    "start": "1881000",
    "end": "1881000"
  },
  {
    "text": "customer can have a direct way of requesting their totes to be picked up and what better than our UI with a",
    "start": "1884130",
    "end": "1892260"
  },
  {
    "text": "one-click button from the mobile app a UI where the customers can go where",
    "start": "1892260",
    "end": "1897929"
  },
  {
    "text": "their address is already pre filled and where they can click one button and forget the tote should be pick up within",
    "start": "1897929",
    "end": "1906059"
  },
  {
    "text": "the next day and that's the solution we've built and like all of you guys in",
    "start": "1906059",
    "end": "1913590"
  },
  {
    "start": "1910000",
    "end": "1910000"
  },
  {
    "text": "this room and same for us when we start a new software project we care about",
    "start": "1913590",
    "end": "1918750"
  },
  {
    "text": "non-functional requirements and we all care about this ones right everybody",
    "start": "1918750",
    "end": "1924299"
  },
  {
    "text": "cares about time-to-market everybody wants their infrastructure to be easily managed and everybody wants",
    "start": "1924299",
    "end": "1930600"
  },
  {
    "text": "their project to be cost-effective and like my colleague Gauri already mentioned this is one of the features",
    "start": "1930600",
    "end": "1937740"
  },
  {
    "text": "that a service architecture highlights the most more so than other architectures and that's why we decided",
    "start": "1937740",
    "end": "1944669"
  },
  {
    "text": "that a serverless architecture appropriate for this project oops this",
    "start": "1944669",
    "end": "1953549"
  },
  {
    "start": "1952000",
    "end": "1952000"
  },
  {
    "text": "is how the architecture of the solution we built looks like at a very high level so I'm gonna start diving into each of",
    "start": "1953549",
    "end": "1961740"
  },
  {
    "text": "the layers of this architecture gallery already gave the overview on the theory of how the services work I'll give",
    "start": "1961740",
    "end": "1968580"
  },
  {
    "text": "implementation details and share some of the best practices we followed on each of them but before that I'll just give",
    "start": "1968580",
    "end": "1976799"
  },
  {
    "text": "you a quick context on what the team had to build around this project which was",
    "start": "1976799",
    "end": "1982080"
  },
  {
    "text": "called the totes pickup service there were three requirements that the team needed to build and I'll start with the",
    "start": "1982080",
    "end": "1988649"
  },
  {
    "text": "first one verify eligibility what this means is we needed to know when the",
    "start": "1988649",
    "end": "1995429"
  },
  {
    "start": "1991000",
    "end": "1991000"
  },
  {
    "text": "customer lands on that UI whether it's the mobile app or the website we needed to know if the customer is legible to",
    "start": "1995429",
    "end": "2001429"
  },
  {
    "text": "request a tow to pick up and the process looks like this first we check if the",
    "start": "2001429",
    "end": "2007789"
  },
  {
    "text": "customer has already a request pending because if they do then they're not eligible right they can't duplicate a",
    "start": "2007789",
    "end": "2013490"
  },
  {
    "text": "request if they don't then we fetch their last fresh order and we check if",
    "start": "2013490",
    "end": "2018799"
  },
  {
    "text": "it has been delivered because if it hasn't been delivered then there's no need to request their totes to be picked",
    "start": "2018799",
    "end": "2024860"
  },
  {
    "text": "up because hopefully they'll be picked up when that order is delivered and if",
    "start": "2024860",
    "end": "2029990"
  },
  {
    "text": "it has been delivered then they're eligible that means the button will be enabled on the UI they can click it and",
    "start": "2029990",
    "end": "2039130"
  },
  {
    "text": "this is an interesting slide because it highlights that you can build a server",
    "start": "2039130",
    "end": "2045080"
  },
  {
    "text": "list solution that can coexist with your existing retail systems so the first",
    "start": "2045080",
    "end": "2050440"
  },
  {
    "text": "step of the flow runs on the server list solution the team built and the second",
    "start": "2050440",
    "end": "2055908"
  },
  {
    "text": "step runs an existing retail system for Amazon fresh the second use case is when",
    "start": "2055909",
    "end": "2064398"
  },
  {
    "text": "the user actually clicks the button when they schedule the pickup request and the",
    "start": "2064399",
    "end": "2069919"
  },
  {
    "start": "2068000",
    "end": "2068000"
  },
  {
    "text": "process is very simple there's a request that goes to the backend goes to the API layer there's a lambda function that",
    "start": "2069919",
    "end": "2078408"
  },
  {
    "text": "will serve the request they will save the data to dynamodb and then it will send a notification to the",
    "start": "2078409",
    "end": "2084898"
  },
  {
    "text": "internal transportation systems to actually schedule the pickup request in the customer address notice that the the",
    "start": "2084899",
    "end": "2093740"
  },
  {
    "text": "address of the customer is already prefilled in the UI to make it easier for them and the last use case was",
    "start": "2093740",
    "end": "2103440"
  },
  {
    "text": "around reporting essentially the business team wanted to know things like how many customers are requesting their",
    "start": "2103440",
    "end": "2110790"
  },
  {
    "start": "2107000",
    "end": "2107000"
  },
  {
    "text": "totes to be picked up in what regions what transportation systems are we using things like that and you probably",
    "start": "2110790",
    "end": "2119520"
  },
  {
    "text": "already know that you can build reporting capabilities on AWS in a number of ways for us we'll decided to",
    "start": "2119520",
    "end": "2127830"
  },
  {
    "text": "leverage flood watch events and lambda functions so essentially there's a",
    "start": "2127830",
    "end": "2133080"
  },
  {
    "text": "lambda function that runs on a nightly basis as a cron job and cloud which",
    "start": "2133080",
    "end": "2138480"
  },
  {
    "text": "event takes care of this so when this lambda function gets triggered it pulls data from dynamodb it will create an",
    "start": "2138480",
    "end": "2146160"
  },
  {
    "text": "Excel spreadsheet but will get saved to s3 for historical purposes and then it",
    "start": "2146160",
    "end": "2152610"
  },
  {
    "text": "will also be sent via email as an attachment to the business team this was",
    "start": "2152610",
    "end": "2158040"
  },
  {
    "text": "simple and often and it met our requirements but you could very well go",
    "start": "2158040",
    "end": "2163260"
  },
  {
    "text": "more sophisticated and put the data on s3 and use Athena for example to query it alright so I'll be going to each of",
    "start": "2163260",
    "end": "2174690"
  },
  {
    "start": "2171000",
    "end": "2171000"
  },
  {
    "text": "the layers and the services that we use and I'll share some of the best practices starting with the data layer",
    "start": "2174690",
    "end": "2183410"
  },
  {
    "text": "the team chose dynamodb and primarily obviously because it's a managed service",
    "start": "2183410",
    "end": "2188490"
  },
  {
    "text": "it is serverless but before we chose it we had to analyze our access pattern",
    "start": "2188490",
    "end": "2194520"
  },
  {
    "text": "requirements and we're then to fight three of them we needed to get the pickup requests by customer ID and",
    "start": "2194520",
    "end": "2201420"
  },
  {
    "text": "address ID but we also wanted to get the pickup requests for a given customer in",
    "start": "2201420",
    "end": "2207240"
  },
  {
    "text": "all of their addresses and we also wanted to get the pickup request for a given time range",
    "start": "2207240",
    "end": "2213190"
  },
  {
    "text": "reporting purposes we also care about having a flexible schema and being able",
    "start": "2213190",
    "end": "2219010"
  },
  {
    "text": "to deal with JSON documents very easily and for this case we only created one",
    "start": "2219010",
    "end": "2227559"
  },
  {
    "start": "2224000",
    "end": "2224000"
  },
  {
    "text": "table when Dino would you be and we call it the tow to pickup request table this",
    "start": "2227559",
    "end": "2233829"
  },
  {
    "text": "is where all pickup request gets saved and this is an example of an item in that table notice that the partition key",
    "start": "2233829",
    "end": "2242069"
  },
  {
    "text": "we've chosen is a composite key of two attributes it is the customer ID",
    "start": "2242069",
    "end": "2248109"
  },
  {
    "text": "concatenated with the address ID and this allows for a quick lookup of pickup",
    "start": "2248109",
    "end": "2253869"
  },
  {
    "text": "request for a given customer in a given address but it also turns out that it's",
    "start": "2253869",
    "end": "2258910"
  },
  {
    "text": "a great partition key because it provides since both of those attributes are uu IDs it provides a good level of",
    "start": "2258910",
    "end": "2266140"
  },
  {
    "text": "randomness that will provide an even data distribution across our DynamoDB partitions the sort key is the creation",
    "start": "2266140",
    "end": "2275289"
  },
  {
    "text": "day time and it allows basically to store multiple pickup requests for the same customer in the same address but at",
    "start": "2275289",
    "end": "2282220"
  },
  {
    "text": "different times now it's very likely",
    "start": "2282220",
    "end": "2288039"
  },
  {
    "text": "that just with the partition key and sort key you won't be able to satisfy all of your access pattern requirements",
    "start": "2288039",
    "end": "2294849"
  },
  {
    "text": "you may end up creating indexes and that's what we did we created two Global",
    "start": "2294849",
    "end": "2299950"
  },
  {
    "text": "secondary indexes on the table the first one allows us to get the pickup request",
    "start": "2299950",
    "end": "2305200"
  },
  {
    "text": "for a given time range and the second index on the slide allows us to get the pickup requests for a given customer in",
    "start": "2305200",
    "end": "2312760"
  },
  {
    "text": "all of their addresses",
    "start": "2312760",
    "end": "2315720"
  },
  {
    "start": "2319000",
    "end": "2319000"
  },
  {
    "text": "once you define your indexes your partition key in your table you have to",
    "start": "2319970",
    "end": "2325079"
  },
  {
    "text": "define the throughput capacity and if you're not familiar with DynamoDB it",
    "start": "2325079",
    "end": "2330119"
  },
  {
    "text": "gets it is defined in two ways read capacity and write capacity it essentially determines how many reads or",
    "start": "2330119",
    "end": "2336839"
  },
  {
    "text": "writes you can do per second and you can define this in two ways you can either",
    "start": "2336839",
    "end": "2342329"
  },
  {
    "text": "provision a heart order number or you can leverage DynamoDB l2 scaling and you",
    "start": "2342329",
    "end": "2349380"
  },
  {
    "text": "provide a range and it dynamodb well scale within that range and the way we",
    "start": "2349380",
    "end": "2356759"
  },
  {
    "text": "determine our capacity was very simple we considered these three factors we",
    "start": "2356759",
    "end": "2362430"
  },
  {
    "text": "identify our access patterns like I showed the reads and writes we measured",
    "start": "2362430",
    "end": "2367920"
  },
  {
    "text": "the item size essentially what's the average size in kilobytes of an item in the table and we work with our business",
    "start": "2367920",
    "end": "2377579"
  },
  {
    "text": "team to make an educated guess on how many pick up requests would think we",
    "start": "2377579",
    "end": "2385170"
  },
  {
    "text": "were gonna get when the service launched and this is this is going to be helpful to estimate the throughput capacity so",
    "start": "2385170",
    "end": "2393539"
  },
  {
    "start": "2393000",
    "end": "2393000"
  },
  {
    "text": "let's go through an example of how you can estimate write capacity so let's say",
    "start": "2393539",
    "end": "2398549"
  },
  {
    "text": "that we had to support 10 totes pickup requests per second 10 - PS and let's",
    "start": "2398549",
    "end": "2405720"
  },
  {
    "text": "say that one average one item on our table on average is three kilobytes we",
    "start": "2405720",
    "end": "2413249"
  },
  {
    "text": "know that one write unit it's equivalent to one kilobyte per second of write capacity so we can do the math very",
    "start": "2413249",
    "end": "2420210"
  },
  {
    "text": "easily it's 20 PS times 3 gives us a total of 30 units per second this means",
    "start": "2420210",
    "end": "2427259"
  },
  {
    "text": "that we need at a minimum 30 units of write capacity to support our demand but",
    "start": "2427259",
    "end": "2434009"
  },
  {
    "text": "if we leverage dynamodb l2 scaling we can set a minimum to 30 and we can set a maximum to 60 for example and that's how",
    "start": "2434009",
    "end": "2441779"
  },
  {
    "text": "you handle with sporadic traffic spikes",
    "start": "2441779",
    "end": "2445700"
  },
  {
    "start": "2447000",
    "end": "2447000"
  },
  {
    "text": "now something very important even on a server less architecture is to always",
    "start": "2447209",
    "end": "2452949"
  },
  {
    "text": "monitor the services you use on AWS and cloud watch is a great service for this",
    "start": "2452949",
    "end": "2460499"
  },
  {
    "text": "so for us we think that for dynamodb these are the three metrics that you",
    "start": "2460499",
    "end": "2466269"
  },
  {
    "text": "should care the most now I want to make particular emphasis on the first one the throttle requests this metric is telling",
    "start": "2466269",
    "end": "2474849"
  },
  {
    "text": "you how many requests are being throttled due to not having enough capacity throughput capacity so you",
    "start": "2474849",
    "end": "2481299"
  },
  {
    "text": "should set an alarm on this because if you ever get let's say for example more",
    "start": "2481299",
    "end": "2486369"
  },
  {
    "text": "than 10 throttle requesting a period of five minutes or whatever it makes sense for you use your use case you want to",
    "start": "2486369",
    "end": "2493089"
  },
  {
    "text": "get notified so you can adjust the capacity appropriately and it's",
    "start": "2493089",
    "end": "2499420"
  },
  {
    "text": "important to highlight that this metrics have to be configured on a per table",
    "start": "2499420",
    "end": "2504429"
  },
  {
    "text": "basis as well as on each global secondary index now as far as best",
    "start": "2504429",
    "end": "2512529"
  },
  {
    "start": "2510000",
    "end": "2510000"
  },
  {
    "text": "practices that we followed on dynamo DB I'll go over a few of them we choose a",
    "start": "2512529",
    "end": "2519939"
  },
  {
    "text": "partition key that provided an even data distribution like I showed you want to avoid attributes with low cardinality",
    "start": "2519939",
    "end": "2527979"
  },
  {
    "text": "you want to avoid sequential numbers for example you want to have attributes that",
    "start": "2527979",
    "end": "2533170"
  },
  {
    "text": "provide a good level of randomness we use global secondary indexes to satisfy",
    "start": "2533170",
    "end": "2540130"
  },
  {
    "text": "all of our access pattern requirements we also estimated the throughput",
    "start": "2540130",
    "end": "2546160"
  },
  {
    "text": "capacity by considering workload and item size and the way we handle sporadic",
    "start": "2546160",
    "end": "2554769"
  },
  {
    "text": "traffic spikes is by leveraging DynamoDB l2 scaling we also use the document",
    "start": "2554769",
    "end": "2562119"
  },
  {
    "text": "client which is part of the AWS SDK for nodejs and it handles JSON documents",
    "start": "2562119",
    "end": "2567819"
  },
  {
    "text": "really easily and it also has a nice feature of doing automatic retrace on throttle requests",
    "start": "2567819",
    "end": "2575819"
  },
  {
    "text": "and we leverage cloud watch for monitoring now moving on to the compute",
    "start": "2576300",
    "end": "2584340"
  },
  {
    "start": "2582000",
    "end": "2582000"
  },
  {
    "text": "layer of our architecture the lambda functions the team ended up writing a",
    "start": "2584340",
    "end": "2589500"
  },
  {
    "text": "total of six lambda functions and I want to highlight a few things on this slide the first time is the runtime",
    "start": "2589500",
    "end": "2595890"
  },
  {
    "text": "environment notice that we chose nodejs and the only reason for that is because",
    "start": "2595890",
    "end": "2601380"
  },
  {
    "text": "we have seen that it provides the best cold starts out of all the other environments notice that the first three",
    "start": "2601380",
    "end": "2610710"
  },
  {
    "text": "functions are triggered on a synchronous way whereas the last two are triggered",
    "start": "2610710",
    "end": "2616380"
  },
  {
    "text": "on an asynchronous fashion the first one are triggered by API gateway from our",
    "start": "2616380",
    "end": "2621810"
  },
  {
    "text": "user interface and the last two are take care of the reporting essentially and",
    "start": "2621810",
    "end": "2628340"
  },
  {
    "text": "that leads me to the next thing which is the timeout execution for those functions that are triggered",
    "start": "2628340",
    "end": "2634680"
  },
  {
    "text": "synchronously you probably want to set a low time on those because at least for",
    "start": "2634680",
    "end": "2641070"
  },
  {
    "text": "us it meant that there's a user waiting for a response on those functions so if you want to have a good user experience",
    "start": "2641070",
    "end": "2646340"
  },
  {
    "text": "you want to have those functions to be executed quickly that that's not the",
    "start": "2646340",
    "end": "2653970"
  },
  {
    "text": "case for the asynchronous execution you can set the maximum for those for example you can set it to 5 minutes because you don't really care whether",
    "start": "2653970",
    "end": "2660420"
  },
  {
    "text": "they take 10 seconds or they take 5 minutes because they run on an",
    "start": "2660420",
    "end": "2665490"
  },
  {
    "text": "asynchronous fashion there's no caller waiting for a response and the last",
    "start": "2665490",
    "end": "2671070"
  },
  {
    "text": "thing to highlight is the memory allocation you probably already know the",
    "start": "2671070",
    "end": "2677130"
  },
  {
    "text": "more memory you allocate it's how much it will determine how much you pay per millisecond alumni but one thing that a",
    "start": "2677130",
    "end": "2685560"
  },
  {
    "text": "lot of people don't know is that when you allocate more memory you get larger",
    "start": "2685560",
    "end": "2690810"
  },
  {
    "text": "CPU so your functions might run quickly quicker then if you allocate less memory",
    "start": "2690810",
    "end": "2697610"
  },
  {
    "text": "so the advice is less memory is not always cheaper you gotta play with with",
    "start": "2697610",
    "end": "2703710"
  },
  {
    "text": "the values and see what works best for your workload and try to balance cost versus execution time",
    "start": "2703710",
    "end": "2711260"
  },
  {
    "start": "2712000",
    "end": "2712000"
  },
  {
    "text": "expanding a little bit more on the two different execution models that we used I want to highlight the error handling",
    "start": "2713400",
    "end": "2720490"
  },
  {
    "text": "on each of them the synchronous one for us API gateway the UI is calling API",
    "start": "2720490",
    "end": "2728020"
  },
  {
    "text": "gateway and triggered Alumnus if lamda fails on that execution model the caller",
    "start": "2728020",
    "end": "2735040"
  },
  {
    "text": "is responsible for retrying the operation that's not the case for the asynchronous execution in that case if",
    "start": "2735040",
    "end": "2742420"
  },
  {
    "text": "your function fails AWS will retry the execution by default three times and if",
    "start": "2742420",
    "end": "2750910"
  },
  {
    "text": "it fails more than three times you can configure now a dead letter Q so your",
    "start": "2750910",
    "end": "2756460"
  },
  {
    "text": "execution can be sent to that dead letter Q for further analysis and the",
    "start": "2756460",
    "end": "2764380"
  },
  {
    "start": "2763000",
    "end": "2763000"
  },
  {
    "text": "same thing like with DynamoDB we also monitor our lambda functions and we",
    "start": "2764380",
    "end": "2770320"
  },
  {
    "text": "think that these are the three metrics that you should monitor on your functions the first one errors it",
    "start": "2770320",
    "end": "2778120"
  },
  {
    "text": "essentially tells you when there's an error in your function most likely it means that there's a bug in your code so",
    "start": "2778120",
    "end": "2785800"
  },
  {
    "text": "you also want to set an alarm on this one because if there's a bug in your code you want to fix it quickly right",
    "start": "2785800",
    "end": "2790810"
  },
  {
    "text": "you don't want to have your functions failing so an example an alarm could be",
    "start": "2790810",
    "end": "2795820"
  },
  {
    "text": "if you ever get more than five errors on ten on a period of ten minutes you want to get notified the second metric is the",
    "start": "2795820",
    "end": "2804640"
  },
  {
    "text": "invocation duration this one is particularly useful to monitor for those functions that you care how much time",
    "start": "2804640",
    "end": "2811930"
  },
  {
    "text": "they take to execute the synchronous wants for example it tells you essentially what's the duration in",
    "start": "2811930",
    "end": "2818520"
  },
  {
    "text": "milliseconds of your functions and you should care about the average on this one at least we recommend you care about",
    "start": "2818520",
    "end": "2825100"
  },
  {
    "text": "the average average statistic so an example alarm could be if the average",
    "start": "2825100",
    "end": "2831550"
  },
  {
    "text": "execution time exceeds 700 750 milliseconds you you'll get an alarm",
    "start": "2831550",
    "end": "2838870"
  },
  {
    "text": "and the last one is also very important that throttling vacations there's a",
    "start": "2838870",
    "end": "2844990"
  },
  {
    "text": "limit of how many concurrent lambdas you can run and it is set to 1,000 by",
    "start": "2844990",
    "end": "2851050"
  },
  {
    "text": "default so if you ever exceed this limit your functions your executions will be",
    "start": "2851050",
    "end": "2856510"
  },
  {
    "text": "throttled so you also should set an alarm on this as far as best practices",
    "start": "2856510",
    "end": "2864990"
  },
  {
    "start": "2863000",
    "end": "2863000"
  },
  {
    "text": "we followed on lambda we divided them into a design and operational I'll start",
    "start": "2864990",
    "end": "2870910"
  },
  {
    "text": "with the design first the team wrote one function per use case like I showed we",
    "start": "2870910",
    "end": "2877840"
  },
  {
    "text": "wrote a total of six functions as opposed to one single monolithic lambda to handle all of the use cases this is",
    "start": "2877840",
    "end": "2885520"
  },
  {
    "text": "the best practice we separated the lambda handler essentially the entry",
    "start": "2885520",
    "end": "2891790"
  },
  {
    "text": "point from the core logic this allows you for easier testability we use the",
    "start": "2891790",
    "end": "2899050"
  },
  {
    "text": "environment variables to pass operational parameters that's pretty obvious you want to pass things like DynamoDB",
    "start": "2899050",
    "end": "2904630"
  },
  {
    "text": "table names or s3 bucket names or whatever it's a it's specific to each",
    "start": "2904630",
    "end": "2909880"
  },
  {
    "text": "environment and a lot of people don't know that if you put a lambda on a V PC",
    "start": "2909880",
    "end": "2916420"
  },
  {
    "text": "it will impact the cold start time of your functions so you want to avoid",
    "start": "2916420",
    "end": "2921970"
  },
  {
    "text": "placing them on a V PC if you don't have to unless the function needs to access a resource like an RDS instance or",
    "start": "2921970",
    "end": "2928510"
  },
  {
    "text": "something that it's behind within a V PC then you should avoid placing them on a V PC as far as operational best",
    "start": "2928510",
    "end": "2938710"
  },
  {
    "text": "practices we set cloud watch alarms on throttle invocations and errors like I",
    "start": "2938710",
    "end": "2944740"
  },
  {
    "text": "showed you you want to hear that letter queues to handle those failures on",
    "start": "2944740",
    "end": "2952140"
  },
  {
    "text": "asynchronous executions you also want to",
    "start": "2952140",
    "end": "2957190"
  },
  {
    "text": "be aware of the concurrency limits like I mentioned there is a limit of how many concurrent lambdas you can run by",
    "start": "2957190",
    "end": "2963220"
  },
  {
    "text": "default sorry simultaneously and it is set by default to 1000 so if you think you can",
    "start": "2963220",
    "end": "2970210"
  },
  {
    "text": "exceed this limit you can reach out to cost support and adjusted accordingly we also",
    "start": "2970210",
    "end": "2978280"
  },
  {
    "text": "leverage cloud watch events to schedule and assess cron jobs now the third layer",
    "start": "2978280",
    "end": "2986109"
  },
  {
    "start": "2983000",
    "end": "2983000"
  },
  {
    "text": "of our architecture is the API layer and again the team chose API gateway",
    "start": "2986109",
    "end": "2992349"
  },
  {
    "text": "primarily because it's a server less service it is managed but it also",
    "start": "2992349",
    "end": "2997690"
  },
  {
    "text": "provides a really smooth integration with lambda functions you can create endpoints restful endpoints and you can",
    "start": "2997690",
    "end": "3005190"
  },
  {
    "text": "have your UI call these endpoints and executed functions whenever they are invoked these are the ones that the team",
    "start": "3005190",
    "end": "3013260"
  },
  {
    "text": "created for this particular project API gateway it's also very secure as every",
    "start": "3013260",
    "end": "3019230"
  },
  {
    "text": "endpoint is by default HTTP and it also has some really nice features like for",
    "start": "3019230",
    "end": "3024510"
  },
  {
    "text": "example we can track requests coming from the mobile app versus request coming from the website by giving them",
    "start": "3024510",
    "end": "3031440"
  },
  {
    "text": "different API keys so this is a really nice feature and finally the last",
    "start": "3031440",
    "end": "3039660"
  },
  {
    "start": "3038000",
    "end": "3038000"
  },
  {
    "text": "component of a serverless architecture it's the provisioning and management of",
    "start": "3039660",
    "end": "3044790"
  },
  {
    "text": "it and you can leverage cloud formation for this the team created one stack that",
    "start": "3044790",
    "end": "3053160"
  },
  {
    "text": "creates the entire infrastructure for this project from iam roles dynamodb tables s3 buckets api functions API",
    "start": "3053160",
    "end": "3062220"
  },
  {
    "text": "endpoints lambda functions the whole thing gets created with one cloud formation stack and you can define this",
    "start": "3062220",
    "end": "3070230"
  },
  {
    "text": "and it's a great way to have your infrastructure manage test code you can",
    "start": "3070230",
    "end": "3075780"
  },
  {
    "text": "also do deployments with this CloudFormation template",
    "start": "3075780",
    "end": "3080299"
  },
  {
    "text": "so that's the journey over of the different layers of our architecture and",
    "start": "3081900",
    "end": "3087540"
  },
  {
    "text": "how we solved the totes pickup problem with a server less architecture and here",
    "start": "3087540",
    "end": "3094740"
  },
  {
    "text": "are some of the results I can share about this project so far obviously the first one is we ended up with a better",
    "start": "3094740",
    "end": "3101100"
  },
  {
    "text": "user experience now we have a UI where the customers can go if they ever faced this issue of not having their tote be",
    "start": "3101100",
    "end": "3109050"
  },
  {
    "text": "picked up they can go to this UI their address will be already prefilled they",
    "start": "3109050",
    "end": "3114330"
  },
  {
    "text": "can click this button and their totes will be picked up most of the times within the next day but in a few areas",
    "start": "3114330",
    "end": "3121020"
  },
  {
    "text": "it can take up to three days with this we saved hundreds of hours on customer",
    "start": "3121020",
    "end": "3128310"
  },
  {
    "text": "service time and the team that built this project did it in a period of three",
    "start": "3128310",
    "end": "3133500"
  },
  {
    "text": "months from development to production and it was actually a smaller team than the average team size of Amazon and",
    "start": "3133500",
    "end": "3142490"
  },
  {
    "text": "according to internal surveys from Amazon a team that owns a serverless",
    "start": "3144080",
    "end": "3151170"
  },
  {
    "text": "architecture tend to spend three point seven hours less time in operational",
    "start": "3151170",
    "end": "3156690"
  },
  {
    "text": "work compared to a team with a non server less architecture so I hope that",
    "start": "3156690",
    "end": "3163440"
  },
  {
    "text": "this story shows that you can improve those manual processes in your organization and then you can adopt",
    "start": "3163440",
    "end": "3170700"
  },
  {
    "text": "serverless without having to rewrite your existing retail systems thank you very much",
    "start": "3170700",
    "end": "3177460"
  },
  {
    "text": "[Laughter]",
    "start": "3177460",
    "end": "3182570"
  },
  {
    "text": "Thank You Fernando so now you all know the trucks might do the pickup but it is",
    "start": "3182570",
    "end": "3188550"
  },
  {
    "text": "actually the lambda that does the magic for towards pickup so ya serverless is",
    "start": "3188550",
    "end": "3193800"
  },
  {
    "text": "kind of a new normal it's it's fast and cost-effective to",
    "start": "3193800",
    "end": "3199500"
  },
  {
    "text": "develop applications using several us it helps you to for be focused on your customers problem like in the case of",
    "start": "3199500",
    "end": "3205350"
  },
  {
    "text": "Amazon flush and stay out of all operational issues and challenges thanks for your time really appreciate your",
    "start": "3205350",
    "end": "3211740"
  },
  {
    "text": "time thanks for listening in we'll be around if you have any questions feel free to talk",
    "start": "3211740",
    "end": "3217860"
  },
  {
    "text": "[Laughter]",
    "start": "3217860",
    "end": "3222010"
  }
]