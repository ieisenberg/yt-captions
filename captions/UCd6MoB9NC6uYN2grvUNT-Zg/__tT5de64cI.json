[
  {
    "start": "0",
    "end": "244000"
  },
  {
    "text": "okay my name is robert barnes as werner mentioned the other day",
    "start": "1680",
    "end": "7279"
  },
  {
    "text": "we're passionate about measuring and so i suppose my title should be director of measurement or measurer in",
    "start": "7279",
    "end": "14880"
  },
  {
    "text": "chief or something like that for amazon web services the topic for today is best practices",
    "start": "14880",
    "end": "20880"
  },
  {
    "text": "for benchmarking and performance analysis in the cloud i realized as i put this talk together i",
    "start": "20880",
    "end": "26320"
  },
  {
    "text": "had a couple objectives but i also realized why what my problem",
    "start": "26320",
    "end": "31599"
  },
  {
    "text": "is i should probably have a lot of therapy for this but i seem to have an attraction",
    "start": "31599",
    "end": "36880"
  },
  {
    "text": "for measuring things and maybe from a profession professional perspective it harkens back",
    "start": "36880",
    "end": "41920"
  },
  {
    "text": "to my first paid computing job which was working in a metrology lab if you're not familiar with that is it",
    "start": "41920",
    "end": "49120"
  },
  {
    "text": "was at an aerospace company that had to measure things with very strict tolerances and all of the equipment they",
    "start": "49120",
    "end": "55120"
  },
  {
    "text": "used for measurement needed to be calibrated against nist standards so i was coding in with pdp8",
    "start": "55120",
    "end": "61840"
  },
  {
    "text": "and pdp-11s that did automated calibration of oscilloscopes and that sort of thing",
    "start": "61840",
    "end": "67600"
  },
  {
    "text": "i won't tell you how long ago it was there were some slide rules at the time",
    "start": "67600",
    "end": "73280"
  },
  {
    "text": "i'll leave it at that however i'm going to actually start with a pseudo benchmarking demo",
    "start": "73280",
    "end": "81600"
  },
  {
    "text": "now any of you have done benchmarking know that demos and benchmarks don't really mix i've had to do them",
    "start": "81600",
    "end": "87680"
  },
  {
    "text": "live and it really can be painful but i want to start with a question of the audience and i'll do a quick survey",
    "start": "87680",
    "end": "94159"
  },
  {
    "text": "on the answers here there are a number of devices that i happen to have on my desk i have most of those here right now",
    "start": "94159",
    "end": "100560"
  },
  {
    "text": "and they all can be used to measure how many different ways do you think these can be used to measure how many people think it's five or less",
    "start": "100560",
    "end": "107200"
  },
  {
    "text": "just raise your hand okay 10 or less",
    "start": "107200",
    "end": "113360"
  },
  {
    "text": "okay 15 or less 20 or less more than 20.",
    "start": "113520",
    "end": "122320"
  },
  {
    "text": "okay we're on the right track um so uh there are at least 20 ways to use",
    "start": "122320",
    "end": "129360"
  },
  {
    "text": "these devices and i'll illustrate quickly uh don't worry i'll make this relevant you don't have faith in me but so this",
    "start": "129360",
    "end": "136239"
  },
  {
    "text": "tape measure you could use the width of the tape measure you could use the height of the tape measure you could use the length of",
    "start": "136239",
    "end": "142959"
  },
  {
    "text": "the tape measure you could actually use it as intended you could use the width of the tape measure",
    "start": "142959",
    "end": "148239"
  },
  {
    "text": "or my favorite you could use the thickness of the tape measure to measure now prior to starting i asked some brave",
    "start": "148239",
    "end": "154800"
  },
  {
    "text": "volunteers to assist me in this demonstration i had four methods of measuring i had this",
    "start": "154800",
    "end": "161040"
  },
  {
    "text": "wonderful laser based accurate to 1 16 of an inch measuring tool",
    "start": "161040",
    "end": "166480"
  },
  {
    "text": "got to have one of these nothing i'm passionate about this at all a regular um tape and a ruler and",
    "start": "166480",
    "end": "173680"
  },
  {
    "text": "the fourth uh fourth approach was measurement by estimate and i asked these brave volunteers to",
    "start": "173680",
    "end": "179840"
  },
  {
    "text": "measure this stage the measurements that i got were 16 feet",
    "start": "179840",
    "end": "185920"
  },
  {
    "text": "for the estimate the digital tape measure came in at 24.17 feet",
    "start": "185920",
    "end": "193040"
  },
  {
    "text": "uh the tape measure came in at 24.125 or 24 and a quarter",
    "start": "193040",
    "end": "198560"
  },
  {
    "text": "the ruler came in at 23 feet 23.25 feet so what does that tell you",
    "start": "198560",
    "end": "206480"
  },
  {
    "text": "all of those measurements were measurements of the stage and if you didn't know there were other ways of measuring how would you know",
    "start": "206480",
    "end": "212159"
  },
  {
    "text": "which one of those was accurate in fact the first time i had bought this wonderful tool",
    "start": "212159",
    "end": "217760"
  },
  {
    "text": "and used it the first thing i did was calibrate it against the tape measure because i wasn't sure how to hold it",
    "start": "217760",
    "end": "224400"
  },
  {
    "text": "think about it this thing has an emitter here and it measures here but i didn't know the way they designed",
    "start": "224400",
    "end": "229440"
  },
  {
    "text": "it whether it started measuring from the bottom of it or from the top and so it took a little bit of a while before i could trust this",
    "start": "229440",
    "end": "235760"
  },
  {
    "text": "tool this is where i bring it in there are many many ways to measure performance",
    "start": "235760",
    "end": "243280"
  },
  {
    "text": "you have to understand what how the tool is measuring and how relevant that measurement is and",
    "start": "243280",
    "end": "248720"
  },
  {
    "start": "244000",
    "end": "244000"
  },
  {
    "text": "if you're using a tool for the first time i recommend using more than one tool to see if you can correlate the results",
    "start": "248720",
    "end": "255120"
  },
  {
    "text": "and make sure that they are meaningful meaningful to you before i get into",
    "start": "255120",
    "end": "260799"
  },
  {
    "text": "actually talking about measurement i want to give a little bit i promise a little bit",
    "start": "260799",
    "end": "265840"
  },
  {
    "text": "of background on cloud benchmarking first i have to start by saying the best",
    "start": "265840",
    "end": "271919"
  },
  {
    "text": "benchmark is your own application i know you hear that all the time but the reality is when you use some",
    "start": "271919",
    "end": "277759"
  },
  {
    "text": "other way of measuring things you still have to tie back what that thing tells you",
    "start": "277759",
    "end": "282880"
  },
  {
    "text": "to your actual application or put another way how many people admit to running a benchmark in production right now",
    "start": "282880",
    "end": "290960"
  },
  {
    "text": "you're running a benchmark in production that's your business is running the benchmark probably not i i realize that",
    "start": "290960",
    "end": "297280"
  },
  {
    "text": "was a somewhat sarcastic question but the point is there's usually some application that you're really running",
    "start": "297280",
    "end": "302639"
  },
  {
    "text": "and sometimes it makes sense to use something to help you tune it or or or baseline it or something you",
    "start": "302639",
    "end": "308880"
  },
  {
    "text": "still have to tie back what you measure to your actual application in all benchmarks you're typically",
    "start": "308880",
    "end": "315280"
  },
  {
    "text": "dipping dealing with two types of measurement absolute measurement in this particular case the measurement of the stage we're",
    "start": "315280",
    "end": "322080"
  },
  {
    "text": "looking for an absolute measure or relative measure i could tell you that for those four measurements we had",
    "start": "322080",
    "end": "329039"
  },
  {
    "text": "the mean the average of those measurements was 21.88 and the standard deviation was 16",
    "start": "329039",
    "end": "336240"
  },
  {
    "text": "given the wide variance those those those relative information",
    "start": "336240",
    "end": "342080"
  },
  {
    "text": "can sometimes tell help tell you how accurate your measurement device is and can also help you pinpoint whether",
    "start": "342080",
    "end": "348639"
  },
  {
    "text": "artifacts you're measuring are things you're trying to measure as opposed to the way you're measuring now that",
    "start": "348639",
    "end": "354960"
  },
  {
    "text": "wasn't what i wanted to do okay help me with button dyslexia here",
    "start": "354960",
    "end": "367840"
  },
  {
    "text": "is it going through stages sorry",
    "start": "368319",
    "end": "372880"
  },
  {
    "text": "oh is it back to one is that what it did okay i can get it i can get it yeah yeah yeah see if you don't know how",
    "start": "376479",
    "end": "382960"
  },
  {
    "text": "to use the tools then you're really in trouble we're good okay uh absolute versus",
    "start": "382960",
    "end": "388639"
  },
  {
    "start": "383000",
    "end": "383000"
  },
  {
    "text": "relative benchmarks are typically going to give you",
    "start": "388639",
    "end": "393759"
  },
  {
    "text": "either a fixed amount of work and you measure how long it takes or they're going to give you a fixed",
    "start": "393759",
    "end": "398960"
  },
  {
    "text": "amount of time and you count how much work happens within that that time it's important to understand which",
    "start": "398960",
    "end": "404400"
  },
  {
    "text": "kind of test it is because for instance when it's a fixed amount of time",
    "start": "404400",
    "end": "410000"
  },
  {
    "text": "and you're counting how much work gets done higher is better when it's a fixed amount of work and the",
    "start": "410000",
    "end": "416800"
  },
  {
    "text": "time is what you're measuring lower is better i've actually seen published results where people got that",
    "start": "416800",
    "end": "422160"
  },
  {
    "text": "wrong and they touted results that should have been considered in terms of lower is",
    "start": "422160",
    "end": "428319"
  },
  {
    "text": "better they got it backwards what's different about benchmarking in",
    "start": "428319",
    "end": "434400"
  },
  {
    "text": "the cloud um there are two broad categories of what's different that i really need to point out the first one is there are typically a",
    "start": "434400",
    "end": "441440"
  },
  {
    "text": "few more layers of abstraction than what you would be doing if you were doing it on premises what",
    "start": "441440",
    "end": "446960"
  },
  {
    "text": "what are those layers of abstraction mean well on the positive side it means you're not wrestling cables",
    "start": "446960",
    "end": "452560"
  },
  {
    "text": "you're not calling someone up to say hey can you configure this for me you know you're provisioning very quickly the flip side of that is because",
    "start": "452560",
    "end": "459520"
  },
  {
    "text": "there are more layers of abstraction there's more likelihood that you could have some sort of variability",
    "start": "459520",
    "end": "465199"
  },
  {
    "text": "so as a rule of thumb you typically need to run more iterations of your test in order to quantify variability and",
    "start": "465199",
    "end": "471759"
  },
  {
    "text": "make sure you understand where it's coming from last point before we get into actual",
    "start": "471759",
    "end": "477360"
  },
  {
    "text": "measurement uh i promise use a good army uh that may sound like a strange recommendation what do you mean",
    "start": "477360",
    "end": "484000"
  },
  {
    "text": "good army versus bad army well to illustrate this i i ran some experiments on the exact same instance",
    "start": "484000",
    "end": "491039"
  },
  {
    "text": "type using the exact same binaries using all ex for all all these zombies except",
    "start": "491039",
    "end": "498080"
  },
  {
    "text": "for one were centos 5 4 the same distribution and i got dramatically different results",
    "start": "498080",
    "end": "505120"
  },
  {
    "text": "it turns out that the differences were primarily because the kernel in the first three armies was an old",
    "start": "505120",
    "end": "512080"
  },
  {
    "text": "kernel it was a fedora kernel from 2007 and that particular kernel does not",
    "start": "512080",
    "end": "518159"
  },
  {
    "text": "handle multi-processors well how did it manifest itself well theoretically all these results should",
    "start": "518159",
    "end": "523599"
  },
  {
    "text": "have been pretty similar and i mentioned using two tests to calibrate what i did here",
    "start": "523599",
    "end": "529120"
  },
  {
    "text": "was also run ubuntu 12.4 which was the the latest uh release uh the the amazon",
    "start": "529120",
    "end": "535920"
  },
  {
    "text": "ubuntu release at the time i did this test and uh it came in pretty close to the aws uh centos 5.4 release so i knew",
    "start": "535920",
    "end": "544240"
  },
  {
    "text": "that those results were probably reasonable and these other ones were not when i looked at the coefficient of variance if you're not familiar with",
    "start": "544240",
    "end": "550240"
  },
  {
    "text": "that term that's dividing the standard deviation by the mean it gives you a relative percentage of variation which is a great",
    "start": "550240",
    "end": "556959"
  },
  {
    "text": "way to look at variation and you could see there was almost 50 percent variation in the three bad",
    "start": "556959",
    "end": "564480"
  },
  {
    "text": "armies what does all that mean if you in general if you're using an amazon ami it's been tested we've done a lot of",
    "start": "564480",
    "end": "570959"
  },
  {
    "text": "work to make sure it's okay if you're using another army that came from somewhere else even if it's your",
    "start": "570959",
    "end": "576160"
  },
  {
    "text": "own army that has been around a while and you keep using it it's worthwhile to go back and make sure it's still a good army because",
    "start": "576160",
    "end": "582399"
  },
  {
    "text": "they can get out of date over time and you need to keep them up to date",
    "start": "582399",
    "end": "587519"
  },
  {
    "start": "587000",
    "end": "587000"
  },
  {
    "text": "going into actual measurement the i'm going to cover cpu memory and disk i could probably",
    "start": "588160",
    "end": "595120"
  },
  {
    "text": "spend at least an hour on each of those topics but i wanted to try and cram in as much breadth here and maybe",
    "start": "595120",
    "end": "602160"
  },
  {
    "text": "leave time for a few questions if not i promise i'll figure out where we can do the questioning afterwards if",
    "start": "602160",
    "end": "607440"
  },
  {
    "text": "you still want to drill me on questions but this first one let's say hypothetically that you have an",
    "start": "607440",
    "end": "613839"
  },
  {
    "text": "application that you're running on premises and what you want to do is find the best instance to run that same application",
    "start": "613839",
    "end": "621760"
  },
  {
    "text": "uh the first question you have to ask yourself is what is best how do i know it's best",
    "start": "621760",
    "end": "627360"
  },
  {
    "text": "best sounds like a great term but there could be absolute performance there could be price performance there could be other",
    "start": "627360",
    "end": "634800"
  },
  {
    "text": "parameters you need to be able to answer the question best but a very methodical approach here in",
    "start": "634800",
    "end": "640079"
  },
  {
    "text": "trying to do this i get asked this a lot is let's say that you don't have a benchmark for your",
    "start": "640079",
    "end": "645760"
  },
  {
    "text": "application it's complex to set up you don't have test data you don't have security setup so you want to use some",
    "start": "645760",
    "end": "652320"
  },
  {
    "text": "proxy so you find a synthetic benchmark and for cpu i'll do four",
    "start": "652320",
    "end": "658320"
  },
  {
    "text": "you configure and run that on premises so you get what we'll call a baseline here you then use the exact same",
    "start": "658320",
    "end": "664480"
  },
  {
    "text": "configuration and scripts hopefully to run it on instances",
    "start": "664480",
    "end": "670560"
  },
  {
    "text": "you run those tests multiple times you look at things like variability and based on your definition of best",
    "start": "670560",
    "end": "676240"
  },
  {
    "text": "you're now ready to go the next stage which is deciding which one so for testing cpu",
    "start": "676240",
    "end": "682000"
  },
  {
    "text": "going through those steps one at a time we'll choose a benchmark for the purposes of today i picked four",
    "start": "682000",
    "end": "687120"
  },
  {
    "start": "684000",
    "end": "684000"
  },
  {
    "text": "that i tend to see used a lot geekbench unix bench sysbench the cpu",
    "start": "687120",
    "end": "693519"
  },
  {
    "text": "part of that and uh did i say unix bench",
    "start": "693519",
    "end": "698959"
  },
  {
    "text": "yes i didn't spec cpu sorry integer um by choosing these and not saying",
    "start": "698959",
    "end": "704720"
  },
  {
    "text": "these are the only ones you should consider i'm not i'm not endorsing these as the best ones there i'm just trying to illustrate",
    "start": "704720",
    "end": "711120"
  },
  {
    "text": "how you would go about doing this and some of the strengths and weaknesses of using them",
    "start": "711120",
    "end": "716160"
  },
  {
    "text": "the first question you have to ask yourself particularly with a benchmark you've never used before",
    "start": "716160",
    "end": "721760"
  },
  {
    "text": "is how do i know i have a good result for instance in my example here where i",
    "start": "721760",
    "end": "727279"
  },
  {
    "text": "asked four people to to measure the stage what i did prior to them measuring the stage is i",
    "start": "727279",
    "end": "733040"
  },
  {
    "text": "carefully measured the stage three or four times from different ways and i came up with an answer of 24 and 9",
    "start": "733040",
    "end": "740320"
  },
  {
    "text": "16 inches which is pretty close to where most of them came in and if you actually look at it um each",
    "start": "740320",
    "end": "746560"
  },
  {
    "text": "this there are six panels here and each of them are six feet wide and so i had multiple ways of saying",
    "start": "746560",
    "end": "751680"
  },
  {
    "text": "yeah that seems about right and then i use the measuring tape and so on um but when you're using one of these",
    "start": "751680",
    "end": "756720"
  },
  {
    "text": "benchmarks and if you've never used it before sometimes they're completely black box all you do",
    "start": "756720",
    "end": "762079"
  },
  {
    "text": "is say run and it gives you this beautiful answer most of the time the beautiful answer is in arbitrary units",
    "start": "762079",
    "end": "768560"
  },
  {
    "text": "that make no sense to you it's just a number how do you know that number is representative how do you know there",
    "start": "768560",
    "end": "774880"
  },
  {
    "text": "aren't things you could tweak on your instance in your os settings uh if the app",
    "start": "774880",
    "end": "780480"
  },
  {
    "text": "supports tweaking in the app to say this is a good result i should say for for people who are",
    "start": "780480",
    "end": "786240"
  },
  {
    "text": "practitioners of benchmarking the first question to teach young engineers to ask is how",
    "start": "786240",
    "end": "791839"
  },
  {
    "text": "do i know when i'm done right because faster means infinite make it faster means you've got",
    "start": "791839",
    "end": "798800"
  },
  {
    "text": "job security for life for these cpu tests i ran on nine",
    "start": "798800",
    "end": "804800"
  },
  {
    "text": "different instance types for each of the instances i launched 10 instances you get what i'm trying to do there i",
    "start": "804800",
    "end": "810720"
  },
  {
    "text": "talked about quantifying variability i wanted to look at variability in several ways",
    "start": "810720",
    "end": "816079"
  },
  {
    "text": "and so numbers help a lot i use the same base omni in this case ubuntu 13.04",
    "start": "816079",
    "end": "822720"
  },
  {
    "text": "for all of these tests so the first test i mentioned was geekbench and geekbench has workloads in",
    "start": "822720",
    "end": "830639"
  },
  {
    "text": "three categories there are 13 integer tests there are 10 floating point tests",
    "start": "830639",
    "end": "836959"
  },
  {
    "text": "and there are four memory tests i should say this is a black box it comes as an executable you can buy",
    "start": "836959",
    "end": "843920"
  },
  {
    "text": "the commercial product which is full featured or you can get a free download",
    "start": "843920",
    "end": "849120"
  },
  {
    "text": "which is 32 bit only and has limited functionality it sets up quickly",
    "start": "849120",
    "end": "856160"
  },
  {
    "text": "it doesn't really take much to set it up it gives you results in roughly two minutes so it sounds like a dream it gives you",
    "start": "856160",
    "end": "864000"
  },
  {
    "text": "both single cpu and multi-cpu results and i'm talking about version three of geekbench version 2",
    "start": "864000",
    "end": "871760"
  },
  {
    "text": "had lots of problems and i met with them and i pointed out from a methodology perspective what was wrong",
    "start": "871760",
    "end": "877920"
  },
  {
    "text": "they made a bunch of improvements and at least based on this testing it's much better than it was",
    "start": "877920",
    "end": "883279"
  },
  {
    "text": "so speaking of testing i'm going to show you scripts and don't worry there's going to be a lot of stuff here but i'll break down what's there",
    "start": "883279",
    "end": "889519"
  },
  {
    "start": "887000",
    "end": "887000"
  },
  {
    "text": "the idea is that you can take these scripts the the presentations will be available you can take these scripts and harvest",
    "start": "889519",
    "end": "895920"
  },
  {
    "text": "them all you want to help but when i set out to write a script for benchmarking the first thing i do is",
    "start": "895920",
    "end": "901440"
  },
  {
    "text": "figure out what are the results going to look like and how am i going to incorporate in them into analysis tools",
    "start": "901440",
    "end": "907839"
  },
  {
    "text": "because you can run tests all day and a lot of times tools like geekbench will give you human human readable reports",
    "start": "907839",
    "end": "914240"
  },
  {
    "text": "but if you're trying to run these tests at scale and automate them then you need to think about how do i parse the results how do i stuff them",
    "start": "914240",
    "end": "920800"
  },
  {
    "text": "into a database or spreadsheet so the first part of this script",
    "start": "920800",
    "end": "926320"
  },
  {
    "text": "is designed to name the file because when you're running mult tests multiple times you",
    "start": "926320",
    "end": "932240"
  },
  {
    "text": "have multiple results how do you know which one is which so naming the file helps me keep track of the metadata about the test",
    "start": "932240",
    "end": "939040"
  },
  {
    "text": "and in this particular case i use the apis to get both the instance id that's the first blue line",
    "start": "939040",
    "end": "944560"
  },
  {
    "text": "and the instance type and when i'm running these tests across 19 sorry nine different instance types",
    "start": "944560",
    "end": "950560"
  },
  {
    "text": "and i'm pulling them all together into one spreadsheet or database it helps to know what they were so i can do",
    "start": "950560",
    "end": "955680"
  },
  {
    "text": "analysis the next part is actually the running of geekbench it's highly",
    "start": "955680",
    "end": "960800"
  },
  {
    "text": "complicated and sophisticated you need hours to train no it's very simple the on linux the x86",
    "start": "960800",
    "end": "967360"
  },
  {
    "text": "version basically has two parameters the first one is upload or not upload by default they will take your results and",
    "start": "967360",
    "end": "973759"
  },
  {
    "text": "publish them publicly if you don't want that then you may want to say no upload",
    "start": "973759",
    "end": "979600"
  },
  {
    "text": "the second option is whether you're running benchmarks or whether you are doing a stress test it does not tell",
    "start": "979600",
    "end": "985600"
  },
  {
    "text": "you how long it takes it doesn't report that information so i wrapped the um the execution by a",
    "start": "985600",
    "end": "992320"
  },
  {
    "text": "start and end capture of the time computed the time",
    "start": "992320",
    "end": "997519"
  },
  {
    "text": "by doing a diff i know there are lots of ways to do this i'm just showing a simple and straightforward way to do it",
    "start": "997519",
    "end": "1004079"
  },
  {
    "text": "then i essentially make the output file the combination of the instance type the",
    "start": "1004079",
    "end": "1009600"
  },
  {
    "text": "instance id i passed in a sequence number because if i run the test four times i want to be able to distinguish between",
    "start": "1009600",
    "end": "1015120"
  },
  {
    "text": "each of the tests uh and finally uh in this particular case i'm actually putting the time",
    "start": "1015120",
    "end": "1023040"
  },
  {
    "text": "into the into the file name as well why when i import it into excel excel",
    "start": "1023040",
    "end": "1028880"
  },
  {
    "text": "has these wonderful text import wizards that help you put things into columns and it just makes it easy for me to do the",
    "start": "1028880",
    "end": "1034720"
  },
  {
    "text": "analysis when i actually go to do the analysis",
    "start": "1034720",
    "end": "1039839"
  },
  {
    "text": "finally pulling the data out so i use a combination of of grep said and awk to pull the results",
    "start": "1039919",
    "end": "1047839"
  },
  {
    "text": "out i won't bore you by going through line by line if you're not familiar with those tools they are must know tools at least on",
    "start": "1047839",
    "end": "1054799"
  },
  {
    "text": "linux in order to grab data and put it into a useful format i i tend to like to use comma separated",
    "start": "1054799",
    "end": "1061520"
  },
  {
    "text": "values just because there are so many different tools that accept that format and so i always figure out how to parse",
    "start": "1061520",
    "end": "1066880"
  },
  {
    "text": "things into comma separated format value so i mentioned we would look at results so these are actual results and let me",
    "start": "1066880",
    "end": "1073120"
  },
  {
    "text": "let me walk through what this table is and and how to interpret it so for",
    "start": "1073120",
    "end": "1078799"
  },
  {
    "text": "these tests for all of these tests i decided to use a single uh cpu on a cc2 8x large as the baseline",
    "start": "1078799",
    "end": "1087919"
  },
  {
    "text": "since i'm interested in this particular case in integer cpu performance and i'm",
    "start": "1087919",
    "end": "1094000"
  },
  {
    "text": "trying to find the best instance the absolute values for tool like geekbench mean nothing to me",
    "start": "1094000",
    "end": "1099440"
  },
  {
    "text": "what matters is the relative performance and so i'm setting the cc28x large as one",
    "start": "1099440",
    "end": "1105840"
  },
  {
    "text": "then i have the one cpu ratio which is for each of these instance",
    "start": "1105840",
    "end": "1112000"
  },
  {
    "text": "types the results that geekbench provided for a single cpu and all of these are ratios",
    "start": "1112000",
    "end": "1118240"
  },
  {
    "text": "to the baseline the the cc2 8x large you'll notice that they're fairly",
    "start": "1118240",
    "end": "1124080"
  },
  {
    "text": "consistent with the m2s being slightly lower than the",
    "start": "1124080",
    "end": "1129200"
  },
  {
    "text": "m3s and the m3s are slightly lower than the c3s the new c3s that's completely understandable the c3s",
    "start": "1129200",
    "end": "1136320"
  },
  {
    "text": "have 2.8 gigahertz processors the um the m3s are 2.6 i believe",
    "start": "1136320",
    "end": "1143760"
  },
  {
    "text": "the cc2 is definitely 2.6 i also measured the coefficient of variance one thing i want you to take away from this",
    "start": "1143760",
    "end": "1150240"
  },
  {
    "text": "just because the tool reported a coefficient of variance doesn't mean you can say aha that",
    "start": "1150240",
    "end": "1155679"
  },
  {
    "text": "variance is in that instance what you can say is you measured it and what you have to figure out is where it's coming from",
    "start": "1155679",
    "end": "1161760"
  },
  {
    "text": "remember our exercise where we had four different people measure this stage and we came up with a 15 percent",
    "start": "1161760",
    "end": "1167440"
  },
  {
    "text": "variance the stage wasn't changing in shape or size the difference happened to be",
    "start": "1167440",
    "end": "1173360"
  },
  {
    "text": "artifacts of the way the measurements were made uh in fact i should point out this this",
    "start": "1173360",
    "end": "1180880"
  },
  {
    "text": "as i mentioned this this digital tool is gray but if you don't understand that it's measuring from the base you could be off by i",
    "start": "1180880",
    "end": "1187200"
  },
  {
    "text": "don't know five inches by assuming that it didn't count that or something like that so you need to know",
    "start": "1187200",
    "end": "1193039"
  },
  {
    "text": "what it's telling you uh next the the the third and fourth columns are the multi-cpu i call it n because",
    "start": "1193039",
    "end": "1199919"
  },
  {
    "text": "multi was too long and the table got wide so the multi-cpu ratio that's running the geekbench",
    "start": "1199919",
    "end": "1205600"
  },
  {
    "text": "number that came out relative to the baseline again the single cpu baseline and then",
    "start": "1205600",
    "end": "1211280"
  },
  {
    "text": "the coefficient of variance you can notice here that the ratios are higher and you would expect that when",
    "start": "1211280",
    "end": "1216320"
  },
  {
    "text": "you have more cpus involved that you would get more results you'll notice the coefficient of",
    "start": "1216320",
    "end": "1222480"
  },
  {
    "text": "variance is higher now you could one assumption you could make is that the coefficient of variance",
    "start": "1222480",
    "end": "1228720"
  },
  {
    "text": "is higher because there's more variability when you're running more threads on the instance",
    "start": "1228720",
    "end": "1233760"
  },
  {
    "text": "you could also assume that the tool itself is less accurate with multiple cpus and the variance is coming from there",
    "start": "1233760",
    "end": "1240880"
  },
  {
    "text": "you could decide maybe it's a combination of both and i don't know so i'll have to try and figure that out what's really",
    "start": "1240880",
    "end": "1248400"
  },
  {
    "text": "important is as i mentioned the run time for this is fairly consistently right around two minutes",
    "start": "1248400",
    "end": "1254080"
  },
  {
    "text": "now most of all of the benchmark workloads that are in geekbench are",
    "start": "1254080",
    "end": "1259440"
  },
  {
    "text": "publicly available the geekbench doesn't provide the source they don't tell you how they tuned it they don't tell you what workload",
    "start": "1259440",
    "end": "1265280"
  },
  {
    "text": "parameters i can tell you from running each of those tests individually that they take a lot longer than",
    "start": "1265280",
    "end": "1271120"
  },
  {
    "text": "two minutes to run in a single cpu and a multi-cpu so they've drastically scaled down the workload",
    "start": "1271120",
    "end": "1276880"
  },
  {
    "text": "probably trying to tune this to look like something i'm not sure what they tuned it to look like but a runtime of two minutes is a great",
    "start": "1276880",
    "end": "1283280"
  },
  {
    "text": "way to get a quick and dirty check now i mentioned that i wanted to look at",
    "start": "1283280",
    "end": "1288559"
  },
  {
    "text": "variants from multiple ways i my previous chart had nine different instance types on this chart i'm taking just one of",
    "start": "1288559",
    "end": "1295280"
  },
  {
    "start": "1289000",
    "end": "1289000"
  },
  {
    "text": "those instance types to m3 x large and remember i mentioned 10 instances we're running",
    "start": "1295280",
    "end": "1301679"
  },
  {
    "text": "each of those 10 instances ran at least four times so i took the um the mean",
    "start": "1301679",
    "end": "1308240"
  },
  {
    "text": "and the coefficient of variance from those runs and and i'm showing you here what they",
    "start": "1308240",
    "end": "1313520"
  },
  {
    "text": "look like and you can see they're fairly consistent in both the ratio to my previous baseline",
    "start": "1313520",
    "end": "1319760"
  },
  {
    "text": "and in the coefficient of variance it's important to look at variants",
    "start": "1319760",
    "end": "1326240"
  },
  {
    "text": "across tests and within tests now i mentioned earlier that i'm really",
    "start": "1326240",
    "end": "1332720"
  },
  {
    "text": "interested for this particular hypothetical scenario in integer performance so uh i'm i pulled out the integer only",
    "start": "1332720",
    "end": "1340159"
  },
  {
    "text": "portion of geekbench to geekbench to compare it to the full benchmark remember it had 13 integer 10 floating",
    "start": "1340159",
    "end": "1348000"
  },
  {
    "text": "point and 4 memory tests i'm only looking at the integer portion now in this particular slide i can't tell",
    "start": "1348000",
    "end": "1355600"
  },
  {
    "text": "you how long the integer portion took because geekbench doesn't call that out separately but",
    "start": "1355600",
    "end": "1361200"
  },
  {
    "text": "it's certainly a fraction of the typical two minutes for these tests i just pulled a subset of the instances",
    "start": "1361200",
    "end": "1366400"
  },
  {
    "text": "to look at this in detail what you'll notice in just looking at the integer portion",
    "start": "1366400",
    "end": "1372080"
  },
  {
    "text": "is that the coefficient of variance is typically lower for for the same sets of results the",
    "start": "1372080",
    "end": "1378559"
  },
  {
    "text": "um for both the single and multi-cpu variants uh the ratios are also",
    "start": "1378559",
    "end": "1384159"
  },
  {
    "text": "different and slightly higher but we'll come back to that in a in another slide coming up",
    "start": "1384159",
    "end": "1389440"
  },
  {
    "text": "now unix bench is another popular uh test it's actually been around for a while it",
    "start": "1389440",
    "end": "1395120"
  },
  {
    "text": "was originally the the byte index is the default when you run unix bench",
    "start": "1395120",
    "end": "1400720"
  },
  {
    "text": "and it was originally developed for byte magazine as its unix system test to give people a",
    "start": "1400720",
    "end": "1406640"
  },
  {
    "text": "measure it has 12 workloads that run two times by default this is a fixed time workload so what",
    "start": "1406640",
    "end": "1413280"
  },
  {
    "text": "you're counting is how much work gets done in that fixed time and it takes about 30 minutes",
    "start": "1413280",
    "end": "1418400"
  },
  {
    "text": "it does have integer floating point system calls and file system calls",
    "start": "1418400",
    "end": "1424080"
  },
  {
    "text": "it does a statistical combination using a geomean to come up to come up with a relative measure to an",
    "start": "1424080",
    "end": "1430400"
  },
  {
    "text": "ancient spark 2061 i believe it's a machine you poss you couldn't possibly",
    "start": "1430400",
    "end": "1436080"
  },
  {
    "text": "you know buy today um but as long as as long when you have a benchmark like this as long as it's consistently using the",
    "start": "1436080",
    "end": "1442400"
  },
  {
    "text": "same baseline and and the results are always measured the same way those relative numbers should hold what",
    "start": "1442400",
    "end": "1449200"
  },
  {
    "text": "they mean to your application is another thing completely uh one one comment",
    "start": "1449200",
    "end": "1454320"
  },
  {
    "text": "about this it has the source code it's available as source code it hasn't been updated",
    "start": "1454320",
    "end": "1459360"
  },
  {
    "text": "since i think 2007 maybe it does not work by default on greater than 16 cpus",
    "start": "1459360",
    "end": "1465919"
  },
  {
    "text": "so you have to patch it if you go to the the get distribution you can find the patch for",
    "start": "1465919",
    "end": "1472000"
  },
  {
    "text": "doing that i've actually seen published results where people said they were test testing you know 32 cpu systems and i looked at",
    "start": "1472000",
    "end": "1479600"
  },
  {
    "text": "the results and found there were no results for the 32 so i really wondered where they made the numbers up because i knew they hadn't",
    "start": "1479600",
    "end": "1485200"
  },
  {
    "text": "patched the results so the script for unix bench again i'm",
    "start": "1485200",
    "end": "1490720"
  },
  {
    "text": "using the uh the id of the instance and the type to create the file name uh in in this",
    "start": "1490720",
    "end": "1497679"
  },
  {
    "text": "particular case i'm i'm in order to run the single cpu and multi-cpu",
    "start": "1497679",
    "end": "1502960"
  },
  {
    "text": "i'm using proc cpu info to get how many processors are exposed",
    "start": "1502960",
    "end": "1509440"
  },
  {
    "text": "then a very sophisticated runtime command it's capital r run dash c",
    "start": "1509440",
    "end": "1516640"
  },
  {
    "text": "says how many threads to use or how many copies it's a single threaded test that you run multiple copies to get a",
    "start": "1516640",
    "end": "1522640"
  },
  {
    "text": "full measure of the system so this command line says run one cpu and then run",
    "start": "1522640",
    "end": "1528640"
  },
  {
    "text": "n where n is the number of of uh cpus exposed then again",
    "start": "1528640",
    "end": "1535360"
  },
  {
    "text": "it's always important to figure out how you're going to take those results and put them into an analyzable fashion so i use a combination of grep",
    "start": "1535360",
    "end": "1544240"
  },
  {
    "text": "and awk to pull those results out and put them into a comma separated value",
    "start": "1544240",
    "end": "1550320"
  },
  {
    "text": "here are the results again looking at relative compute this is for the full unix bench test",
    "start": "1550480",
    "end": "1557679"
  },
  {
    "text": "you'll notice that these ratios look slightly different again i'm using the cc2 8x large as the",
    "start": "1557679",
    "end": "1563440"
  },
  {
    "text": "baseline you'll notice that for instance the m2s seem to be almost half the performance",
    "start": "1563440",
    "end": "1570799"
  },
  {
    "text": "of the baseline whereas in the previous set of tests with geekbench they were about",
    "start": "1570799",
    "end": "1576799"
  },
  {
    "text": "three quarters or 0.7 does that which one of these is right well they're running different tests they're giving",
    "start": "1576799",
    "end": "1582960"
  },
  {
    "text": "you different answers and you have to really decide for what those tests do which is more meaningful to your application",
    "start": "1582960",
    "end": "1589919"
  },
  {
    "text": "or if there are ways to tweak the test to make it more meaningful you'll notice in this particular case",
    "start": "1589919",
    "end": "1596159"
  },
  {
    "text": "that the the multi-cpu uh ratio it looks pretty screwy",
    "start": "1596159",
    "end": "1601520"
  },
  {
    "text": "uh it goes from um basically three quarters up to maybe six times",
    "start": "1601520",
    "end": "1607440"
  },
  {
    "text": "whereas in the previous test it went up uh i believe it was about 16 times",
    "start": "1607440",
    "end": "1613840"
  },
  {
    "text": "the coefficient of variance has some some wild results here even in the single cpu test but the run",
    "start": "1613840",
    "end": "1620559"
  },
  {
    "text": "time is always consistently around 30 minutes comparing just the integer portion which",
    "start": "1620559",
    "end": "1627760"
  },
  {
    "start": "1624000",
    "end": "1624000"
  },
  {
    "text": "is dry stone 2 of unix bench to the full benchmark you can see now that for these",
    "start": "1627760",
    "end": "1635600"
  },
  {
    "text": "the subset of tests the single cpu tests look fairly similar",
    "start": "1635600",
    "end": "1640720"
  },
  {
    "text": "the coefficient of variance tamed quite a bit",
    "start": "1640720",
    "end": "1645039"
  },
  {
    "text": "the multi-cpu looks very different in that instead of getting a ratio of",
    "start": "1645760",
    "end": "1652080"
  },
  {
    "text": "six we're getting a ratio of 15.5 and i can tell you from looking at the",
    "start": "1652080",
    "end": "1657600"
  },
  {
    "text": "source code here it's the file system and system calls that basically become",
    "start": "1657600",
    "end": "1663279"
  },
  {
    "text": "almost single threaded so if you're trying to get a multi-cpu measure and it's a blended result",
    "start": "1663279",
    "end": "1668399"
  },
  {
    "text": "they really damp down what the cpu result if you cared about cpu only basically you should ignore",
    "start": "1668399",
    "end": "1674880"
  },
  {
    "text": "the full unix bench result and look only at the integer portion",
    "start": "1674880",
    "end": "1679919"
  },
  {
    "text": "the runtime is fascinating here the integer only portion which you can pull out from unix bench takes 10 seconds",
    "start": "1679919",
    "end": "1687279"
  },
  {
    "text": "or 0.17 of a minute so talk about a quick and dirty answer",
    "start": "1687279",
    "end": "1692320"
  },
  {
    "text": "10 seconds and you're there again you have to say is this test meaningful to me and how do",
    "start": "1692320",
    "end": "1699440"
  },
  {
    "start": "1698000",
    "end": "1698000"
  },
  {
    "text": "i want to use these results now uh spec cpu 2006",
    "start": "1699440",
    "end": "1705120"
  },
  {
    "text": "is probably the most comprehensive of these four different test types that i that i've that i'm showing",
    "start": "1705120",
    "end": "1711039"
  },
  {
    "text": "it is a competitive test meaning it has been designed by public committee uh the open software",
    "start": "1711039",
    "end": "1717039"
  },
  {
    "text": "group to be a competitive benchmark where if you want to run it and publish results there are rules for both how you",
    "start": "1717039",
    "end": "1722480"
  },
  {
    "text": "run it and how you report it and a lot of those rules were designed to make it a fair",
    "start": "1722480",
    "end": "1727520"
  },
  {
    "text": "uh and even thing and there they actually talk about how do we prevent cheating and those kinds of things so it's",
    "start": "1727520",
    "end": "1732799"
  },
  {
    "text": "it's focused on being used for competitive purposes but it's very thorough test it requires",
    "start": "1732799",
    "end": "1739840"
  },
  {
    "text": "a commercial site license it's provided a source code it must be built and",
    "start": "1739840",
    "end": "1745360"
  },
  {
    "text": "on the positive side it's highly customizable on the lots of work side are so many",
    "start": "1745360",
    "end": "1751600"
  },
  {
    "text": "things you can do that that that tuning can take a long time however the good news is because this is",
    "start": "1751600",
    "end": "1757919"
  },
  {
    "text": "a publishable result the the published results are available and those published results have to",
    "start": "1757919",
    "end": "1763120"
  },
  {
    "text": "include the compiler settings and the configuration settings so the question of how do i know i have a good",
    "start": "1763120",
    "end": "1768880"
  },
  {
    "text": "result you can go and look up publish results and say oh what system type was this",
    "start": "1768880",
    "end": "1773919"
  },
  {
    "text": "what configurations did they use let me see if i can reproduce their results now i know i'm starting from a good base",
    "start": "1773919",
    "end": "1779679"
  },
  {
    "text": "it does take quite a long time to run it's a fixed work variable time kind of benchmark and so",
    "start": "1779679",
    "end": "1786159"
  },
  {
    "text": "if you run it in fully reportable mode depending on how fast the processor is it can take five plus hours five plus",
    "start": "1786159",
    "end": "1792960"
  },
  {
    "text": "hours for a fully reportable run is a good time i've seen results longer than 24 hours",
    "start": "1792960",
    "end": "1799039"
  },
  {
    "text": "because it runs a number of tests multiple times and it takes a while i'm only going to focus",
    "start": "1799039",
    "end": "1805279"
  },
  {
    "text": "on the integer portion there are 12 workloads all of these workloads are derived from actual uh workloads of some sort",
    "start": "1805279",
    "end": "1812799"
  },
  {
    "text": "but they've been highly tailored to be repeatable and be used as benchmarks so they're",
    "start": "1812799",
    "end": "1818159"
  },
  {
    "text": "scripted and don't require a lot of they don't do any disk i o and they don't require a lot of",
    "start": "1818159",
    "end": "1823840"
  },
  {
    "text": "system services available for the purposes of a following slide i want to point out",
    "start": "1823840",
    "end": "1829440"
  },
  {
    "text": "that each of these workloads has a code that designates the workload so you don't have to spell out the whole workload when you're",
    "start": "1829440",
    "end": "1835360"
  },
  {
    "text": "telling a spec cpu how to run i also want to point out that by default",
    "start": "1835360",
    "end": "1841919"
  },
  {
    "text": "the full integer workloads require two gigabytes of memory per cpu it's a single threaded application",
    "start": "1841919",
    "end": "1850320"
  },
  {
    "text": "that to get a full measure of the system you run multiple copies so if on the configuration you're",
    "start": "1850320",
    "end": "1855360"
  },
  {
    "text": "testing you don't have two gigabytes of memory for every cpu you need to do some tweaking to be able",
    "start": "1855360",
    "end": "1861360"
  },
  {
    "text": "to get meaningful results the tweaking i would suggest is removing uh 429",
    "start": "1861360",
    "end": "1866480"
  },
  {
    "text": "mcf because it's the one workload that requires almost two gigabytes so in the script",
    "start": "1866480",
    "end": "1874000"
  },
  {
    "text": "that i'm about to show you which for the most part looks similar to the other ones basically i'm coming up with a file",
    "start": "1874000",
    "end": "1879440"
  },
  {
    "text": "name in this particular case spec expects things to run in a well-known path",
    "start": "1879440",
    "end": "1885360"
  },
  {
    "text": "and again knowing the number of processors helps you decide how many copies to run here's",
    "start": "1885360",
    "end": "1892640"
  },
  {
    "text": "the invocation command for spec this looks fairly simplistic but i have to tell you",
    "start": "1892640",
    "end": "1897919"
  },
  {
    "text": "most of the complexity is in the config file i'm using a default conf file",
    "start": "1897919",
    "end": "1903120"
  },
  {
    "text": "in a well-known place called configs and it's named default.config so i",
    "start": "1903120",
    "end": "1908559"
  },
  {
    "text": "simply don't have to type it in but all of the complexity is in the config file in this particular case i'm",
    "start": "1908559",
    "end": "1913919"
  },
  {
    "text": "saying it's a not reportable run i've tweaked this to take the least amount of time one other thing i should",
    "start": "1913919",
    "end": "1919120"
  },
  {
    "text": "have mentioned if if um if you worry about the cost of benchmarking then the longer it takes to run a test",
    "start": "1919120",
    "end": "1926080"
  },
  {
    "text": "the more it costs you to run so anything you can do to shorten the length of time that the test takes to",
    "start": "1926080",
    "end": "1931279"
  },
  {
    "text": "run without sacrificing the accurate of the test makes it cheaper to run the tests in this particular case i'm using",
    "start": "1931279",
    "end": "1938080"
  },
  {
    "text": "iterations equals one the default is iterations equal three so right off the top i cut the time that it",
    "start": "1938080",
    "end": "1943600"
  },
  {
    "text": "took this test to run to a third of what it would normally take secondly i eliminated",
    "start": "1943600",
    "end": "1948640"
  },
  {
    "text": "the mcf workload you'll see in the numeric list if you memorized all 12 of those workloads that i did not include the mcf",
    "start": "1948640",
    "end": "1955840"
  },
  {
    "text": "workload that eliminates the 2 gigabyte requirement so i'm able to run this across the full",
    "start": "1955840",
    "end": "1962480"
  },
  {
    "text": "gamut of instances that i was testing uh in this particular case they have a",
    "start": "1962480",
    "end": "1967679"
  },
  {
    "text": "peculiar file naming convention i i happen to know what that was and so the the combination of gret",
    "start": "1967679",
    "end": "1974960"
  },
  {
    "text": "cut and awk help me pull out of the comma separated value",
    "start": "1974960",
    "end": "1980320"
  },
  {
    "text": "that they produce the final result that i use to to combine compile this analysis you can pull out",
    "start": "1980320",
    "end": "1987440"
  },
  {
    "text": "each of the individual workloads into a lot more in depth but we only have an hour here so i'm trying",
    "start": "1987440",
    "end": "1993200"
  },
  {
    "text": "to accelerate this so in this particular case again using the cc2 8x large as the",
    "start": "1993200",
    "end": "2000240"
  },
  {
    "text": "baseline you see that the the ratios here actually look fairly similar to what we",
    "start": "2000240",
    "end": "2005760"
  },
  {
    "text": "saw for instance in geekbench where the m2s look to be about point seven or three",
    "start": "2005760",
    "end": "2012000"
  },
  {
    "text": "quarters of the cc2 eight x large uh the uh the c threes look to be about",
    "start": "2012000",
    "end": "2017360"
  },
  {
    "text": "eight to ten percent better the coefficient of variance for both the",
    "start": "2017360",
    "end": "2022640"
  },
  {
    "text": "single and multi-cpu runs are actually pretty good this is i can tell you from experience this is one of the artifacts of how much",
    "start": "2022640",
    "end": "2028960"
  },
  {
    "text": "engineering went into building this benchmark to make sure that results were repeatable and that artifacts that you",
    "start": "2028960",
    "end": "2034640"
  },
  {
    "text": "measure are really a result of what you're measuring and not the tests themselves if if run properly now",
    "start": "2034640",
    "end": "2041840"
  },
  {
    "text": "i mentioned this does run longer and even in this tweaked state the run times were",
    "start": "2041840",
    "end": "2048398"
  },
  {
    "text": "from an hour to almost two hours it takes longer to run the multi-cpu test",
    "start": "2048399",
    "end": "2053440"
  },
  {
    "text": "because the way it times it is it waits for all of the copies to completely finish and sometimes on larger cpu systems it",
    "start": "2053440",
    "end": "2061200"
  },
  {
    "text": "takes longer the results are still computed using the same statistical method but the total time it takes to get all",
    "start": "2061200",
    "end": "2067118"
  },
  {
    "text": "the work done can be longer the last one and then i'll pull together",
    "start": "2067119",
    "end": "2072960"
  },
  {
    "text": "a summary of all four of these and compare and contrast sysbench is a design was designed for",
    "start": "2072960",
    "end": "2079358"
  },
  {
    "text": "dbas to do a quick and dirty test of a system for for its usefulness for",
    "start": "2079359",
    "end": "2084878"
  },
  {
    "start": "2080000",
    "end": "2080000"
  },
  {
    "text": "my sequel it has six different test categories ranging from file i o to",
    "start": "2084879",
    "end": "2090800"
  },
  {
    "text": "actually doing oltp database calls it's provided in source code format it",
    "start": "2090800",
    "end": "2096878"
  },
  {
    "text": "must be built my my best advice on this test is it has very very simplistic",
    "start": "2096879",
    "end": "2104880"
  },
  {
    "text": "defaults one might say outdated defaults based on when it was developed versus what kinds of",
    "start": "2104880",
    "end": "2111680"
  },
  {
    "text": "systems are available today and so i highly caution you at using any results with sysbench that",
    "start": "2111680",
    "end": "2118560"
  },
  {
    "text": "use default values you'll see why in a minute the script here is very similar i won't",
    "start": "2118560",
    "end": "2124160"
  },
  {
    "start": "2124000",
    "end": "2124000"
  },
  {
    "text": "spend time i'm figuring out the name of the file in this particular case the defaults for doing the cpu tests",
    "start": "2124160",
    "end": "2131440"
  },
  {
    "text": "allow you to specify the max number of requests by default it's ten thousand i modified it to thirty thousand when i",
    "start": "2131440",
    "end": "2138320"
  },
  {
    "text": "when i uh tuned it uh and the max primes it's basically doing a prime number",
    "start": "2138320",
    "end": "2143920"
  },
  {
    "text": "calculation by default the max prime is ten thousand and here i set it to one hundred thousand uh",
    "start": "2143920",
    "end": "2151920"
  },
  {
    "text": "and uh all it tell this is a fixed work variable time so all it tells you when",
    "start": "2151920",
    "end": "2158240"
  },
  {
    "text": "it runs is how long it took the challenge here is with the defaults if you look at the run times here",
    "start": "2158240",
    "end": "2166640"
  },
  {
    "text": "so first of all the results here the relative using the same baseline the results seem a much broader spread",
    "start": "2166880",
    "end": "2173760"
  },
  {
    "text": "from 3 up to 25 times actually 1.78 to 25 times the",
    "start": "2173760",
    "end": "2179920"
  },
  {
    "text": "coefficients of variance tend to be much higher than we've seen but most importantly if you look at the run time here these are",
    "start": "2179920",
    "end": "2186160"
  },
  {
    "text": "fractions of a minute so for instance for the cc2 8x large the run time for the default cpu test is",
    "start": "2186160",
    "end": "2192640"
  },
  {
    "text": "less than a second it's a half a second and if you think about the accuracy",
    "start": "2192640",
    "end": "2197920"
  },
  {
    "text": "this is kind of like taking my measuring tape and measuring the width of this stage by the thickness of the tape",
    "start": "2197920",
    "end": "2203839"
  },
  {
    "text": "it's just pretty hard to get an accurate result when the test runs so quickly and so that's what i meant about the",
    "start": "2203839",
    "end": "2211040"
  },
  {
    "text": "defaults now using my tuned results you can see that the ratio starts to look a lot more",
    "start": "2211040",
    "end": "2216400"
  },
  {
    "text": "like the ratios we saw before ranging from you know a little less than 1",
    "start": "2216400",
    "end": "2221599"
  },
  {
    "text": "to about 13.7 and the coefficient of variances are",
    "start": "2221599",
    "end": "2227520"
  },
  {
    "text": "better but still slightly wonky and from from what i can tell that wonkiness is an artifact of the",
    "start": "2227520",
    "end": "2234560"
  },
  {
    "text": "artifact of the test not of the instances because remember i used the same instances for all these tests",
    "start": "2234560",
    "end": "2240880"
  },
  {
    "text": "and finally the run time in this tweaked version is still fairly short the longest one is about seven minutes",
    "start": "2240880",
    "end": "2246640"
  },
  {
    "text": "so you could theoretically use something like sysbench and play with the parameters to this until you saw",
    "start": "2246640",
    "end": "2252240"
  },
  {
    "start": "2247000",
    "end": "2247000"
  },
  {
    "text": "behavior that looked more like your application my best advice though is be very careful with using defaults on this",
    "start": "2252240",
    "end": "2258880"
  },
  {
    "text": "so uh in the half an hour or more that we've been diving into cpu measurement i've given",
    "start": "2258880",
    "end": "2264880"
  },
  {
    "text": "you four different ways uh actually six if you count the variance here",
    "start": "2264880",
    "end": "2270000"
  },
  {
    "text": "but a bunch of different ways of measuring cpu the first question i'd ask you going back to the beginning is how do",
    "start": "2270000",
    "end": "2275920"
  },
  {
    "text": "you know when you've got the best instance in this particular case you'd have to",
    "start": "2275920",
    "end": "2281280"
  },
  {
    "text": "decide which one of the tests was most relevant to you which tests you trust the most or which combination of tests",
    "start": "2281280",
    "end": "2287440"
  },
  {
    "text": "but a few things i'd like to point out particularly with unix bench and with sysbench using the defaults may not give",
    "start": "2287440",
    "end": "2295839"
  },
  {
    "start": "2294000",
    "end": "2294000"
  },
  {
    "text": "you the most meaningful results and so you need to look carefully at what the tests are telling you to see",
    "start": "2295839",
    "end": "2302240"
  },
  {
    "text": "if that makes sense to you secondly if you look at the tuned results here they all come",
    "start": "2302240",
    "end": "2309359"
  },
  {
    "text": "in fairly similar so i mentioned earlier if you're using tests for the first time having more than one way of calibrating",
    "start": "2309359",
    "end": "2315599"
  },
  {
    "text": "tests against each other tell you whether you're getting something that makes sense so you may decide the best test for you to",
    "start": "2315599",
    "end": "2322720"
  },
  {
    "text": "run in this case is the one that costs you the least in terms of getting the test and how long it takes to run it",
    "start": "2322720",
    "end": "2329760"
  },
  {
    "text": "and it's good enough if for instance using the analogy of measuring the stage",
    "start": "2329760",
    "end": "2335040"
  },
  {
    "text": "i was trying to make a solid gold cover for this stage well i don't know i'm just using that as an example",
    "start": "2335040",
    "end": "2340400"
  },
  {
    "text": "where precision really meant the difference between spending lots of money or not you would probably want to use that",
    "start": "2340400",
    "end": "2346079"
  },
  {
    "text": "digital measure and make sure you knew how to use it really well to get a really accurate measurement if",
    "start": "2346079",
    "end": "2351119"
  },
  {
    "text": "you're if you're doing one of these well that's good enough kinds of tests and maybe one of these tests that runs in two minutes is good enough",
    "start": "2351119",
    "end": "2357200"
  },
  {
    "text": "i can't tell you which one is right but you really have to understand what the test does and what it's telling you transitioning",
    "start": "2357200",
    "end": "2364800"
  },
  {
    "text": "from looking at cpu to memory uh using a similar approach except in",
    "start": "2364800",
    "end": "2370960"
  },
  {
    "text": "this particular case the scenario i'm going to use is i need to find an instance that gives",
    "start": "2370960",
    "end": "2376800"
  },
  {
    "start": "2376000",
    "end": "2376000"
  },
  {
    "text": "me at least 20 000 megabytes per second i know that's a critical",
    "start": "2376800",
    "end": "2381920"
  },
  {
    "text": "throughput for my application and so i'm going to run these tests using of several different types of",
    "start": "2381920",
    "end": "2388960"
  },
  {
    "text": "measurement and i'm looking for an absolute value of at least 20 000 megabytes per second same",
    "start": "2388960",
    "end": "2395599"
  },
  {
    "text": "approach choose a benchmark run it on premises then run it carefully on the set of",
    "start": "2395599",
    "end": "2401359"
  },
  {
    "text": "instances you're considering and then do your analysis in this particular case i'm going to introduce one new test called stream",
    "start": "2401359",
    "end": "2408880"
  },
  {
    "text": "and that's partially true in that the the if you if you were really fast and you read my slide on what the tests were",
    "start": "2408880",
    "end": "2415680"
  },
  {
    "text": "in geekbench the four memory tests were actually variants on stream in fact there are four workload types in",
    "start": "2415680",
    "end": "2422400"
  },
  {
    "text": "stream i'm going to talk about in the next slide then i'm going to use the memory test portions of geekbench",
    "start": "2422400",
    "end": "2428079"
  },
  {
    "text": "and sysbench to compare and contrast these tools as a way of measuring",
    "start": "2428079",
    "end": "2433280"
  },
  {
    "text": "memory throughput again using nine instance types 10 instances of each one",
    "start": "2433280",
    "end": "2439280"
  },
  {
    "text": "to get a sense of variability using the exact same instances i used before with the exact",
    "start": "2439280",
    "end": "2444480"
  },
  {
    "text": "same ami so stream was developed by",
    "start": "2444480",
    "end": "2449520"
  },
  {
    "start": "2446000",
    "end": "2446000"
  },
  {
    "text": "dr john mcalfin university of virginia if you go to his website his nickname is",
    "start": "2449520",
    "end": "2456560"
  },
  {
    "text": "dr bandwidth so that tells you something about him there have been many many academic",
    "start": "2456560",
    "end": "2461920"
  },
  {
    "text": "reports based on using this tool for particularly for hardware engineers looking at quantifying and improving",
    "start": "2461920",
    "end": "2468400"
  },
  {
    "text": "memory bandwidth there are four relatively simplistic tests that are done in this uh the first",
    "start": "2468400",
    "end": "2474800"
  },
  {
    "text": "one is simply a copy from one location to another the second one is a scale which copy",
    "start": "2474800",
    "end": "2480000"
  },
  {
    "text": "with a multiplier the third is a sum where you're adding essentially two blocks of memory",
    "start": "2480000",
    "end": "2485440"
  },
  {
    "text": "together and putting that result into a third and the final one is a combination of those",
    "start": "2485440",
    "end": "2491359"
  },
  {
    "text": "called triad for the purposes of time and the sake of simplicity i'm not going to go through",
    "start": "2491359",
    "end": "2496480"
  },
  {
    "text": "the gory details of each of these four many people who are looking for one measure tend to use triad",
    "start": "2496480",
    "end": "2502000"
  },
  {
    "text": "so for the sake of simplicity i'm just going to use triad",
    "start": "2502000",
    "end": "2507119"
  },
  {
    "text": "going back to how do i know i have a good result with this test results are published on the um the",
    "start": "2507119",
    "end": "2513520"
  },
  {
    "text": "university of virginia website i have to say they're sporadically published they're not necessarily always",
    "start": "2513520",
    "end": "2519280"
  },
  {
    "text": "up to date but at least it's one of those ways of saying hey i just measured the stage how reasonable is this measurement",
    "start": "2519280",
    "end": "2526720"
  },
  {
    "text": "they tend to be sort of the best ever numbers reported as opposed to everyday numbers by default",
    "start": "2526720",
    "end": "2533280"
  },
  {
    "text": "it must be built and by default it runs one thread for every cpu that that it can see",
    "start": "2533280",
    "end": "2539760"
  },
  {
    "text": "there is an available tool out there called public publicly available called stream",
    "start": "2539760",
    "end": "2545280"
  },
  {
    "text": "scaling it's a script that actually examines the cpu type the cache",
    "start": "2545280",
    "end": "2550960"
  },
  {
    "text": "size and comes up with optimal settings for running stream which is a really good thing",
    "start": "2550960",
    "end": "2557280"
  },
  {
    "text": "and i'm going to show you first how you run it in this particular case i'm calculating",
    "start": "2557280",
    "end": "2563200"
  },
  {
    "text": "the number of threads you tell the test how many threads to use by setting an environment variable",
    "start": "2563200",
    "end": "2570560"
  },
  {
    "text": "again i'm setting up the file name using the same mechanism before then in this particular case stream",
    "start": "2570560",
    "end": "2576319"
  },
  {
    "text": "doesn't really take any parameters so you just invoke it stream and i use egrep to basically pull out that single",
    "start": "2576319",
    "end": "2583119"
  },
  {
    "text": "number and then just to compare this with what you've already seen",
    "start": "2583119",
    "end": "2589760"
  },
  {
    "text": "to run the sysbench memory test you tell it the number of threads you set you say the test equals memory",
    "start": "2589760",
    "end": "2595680"
  },
  {
    "text": "and then run",
    "start": "2595680",
    "end": "2598720"
  },
  {
    "text": "so here let's compare and contrast these three measurements using the methodology i've described",
    "start": "2601599",
    "end": "2608720"
  },
  {
    "text": "so the first thing i want to point out is if our if our primary requirement was to pick any system",
    "start": "2608720",
    "end": "2614560"
  },
  {
    "text": "that provided 20 000 megabytes per second you can see of this list the m2",
    "start": "2614560",
    "end": "2621920"
  },
  {
    "text": "one of the m2s is is there uh the others were not and most of the",
    "start": "2621920",
    "end": "2627680"
  },
  {
    "text": "other ones at least met that with the the cc2 8x large providing",
    "start": "2627680",
    "end": "2632880"
  },
  {
    "text": "55 000 megabytes per second now how would you decide which instance to choose",
    "start": "2632880",
    "end": "2638240"
  },
  {
    "text": "there are lots of ways you could do that you could say which is going to cost me the least i have other things going on where having more cores is better i need more",
    "start": "2638240",
    "end": "2645359"
  },
  {
    "text": "memory that sort of thing but in this scenario where i was looking for something that provided at least 20 000",
    "start": "2645359",
    "end": "2650800"
  },
  {
    "text": "megabytes per second stream is telling me this now this is the this is the tuned stream triad where i",
    "start": "2650800",
    "end": "2656880"
  },
  {
    "text": "use stream scaling to pull the result and what that does is it tries threads 1 through n where n is the number of cpus",
    "start": "2656880",
    "end": "2664000"
  },
  {
    "text": "and essentially tells you what memory bandwidth you get with each which means from an application perspective you can use that to say",
    "start": "2664000",
    "end": "2670560"
  },
  {
    "text": "oh well if i use this many threads i'm going to get the max throughput now as as mentioned before",
    "start": "2670560",
    "end": "2677200"
  },
  {
    "text": "geekbench is a black box so you really have no control over how it runs the test",
    "start": "2677200",
    "end": "2682400"
  },
  {
    "text": "it is running the exact same triad test what you can see comparing these numbers",
    "start": "2682400",
    "end": "2687440"
  },
  {
    "text": "is that the numbers aren't the same what does that mean it means it's not tuned it means you're getting the default values",
    "start": "2687440",
    "end": "2693440"
  },
  {
    "text": "so if you're looking for an absolute value in this particular case the only instance types you would choose",
    "start": "2693440",
    "end": "2698720"
  },
  {
    "text": "are the c3 2x large and the cc2 8x large whereas in the the first column where i",
    "start": "2698720",
    "end": "2705359"
  },
  {
    "text": "used the stream scaling script to find throughputs uh i found there were a majority of these instance",
    "start": "2705359",
    "end": "2712160"
  },
  {
    "text": "types would actually have met the goal the last one i have to tell you is that this the defaults for",
    "start": "2712160",
    "end": "2718000"
  },
  {
    "start": "2718000",
    "end": "2718000"
  },
  {
    "text": "sysbench are let's say um different uh and according to sysbench",
    "start": "2718000",
    "end": "2724800"
  },
  {
    "text": "none of these uh instance types would have provided the bandwidth however caveat sysbinch is",
    "start": "2724800",
    "end": "2731839"
  },
  {
    "text": "actually doing an even simpler set of tests where by default it's doing sequential rights to memory",
    "start": "2731839",
    "end": "2737599"
  },
  {
    "text": "so if what you cared about was sequential writes then triad may not be what you need and maybe",
    "start": "2737599",
    "end": "2744079"
  },
  {
    "text": "you need to use sysbench and play with the defaults and by play with the defaults i mean heavily play with the defaults",
    "start": "2744079",
    "end": "2749760"
  },
  {
    "text": "because what i've found is the defaults for suspense in general tend to be slightly meaningless because",
    "start": "2749760",
    "end": "2755200"
  },
  {
    "text": "they were originally developed when cpus weren't quite as powerful as they are today or fast",
    "start": "2755200",
    "end": "2762560"
  },
  {
    "text": "the last topic i have to apologize in advance i could easily spend two hours on how to",
    "start": "2762560",
    "end": "2769359"
  },
  {
    "text": "benchmark disk io but i wanted to cover some of the main highlights particularly in the the choices you face",
    "start": "2769359",
    "end": "2776480"
  },
  {
    "text": "on on ebs uh uh sorry on on ec2 with all of the",
    "start": "2776480",
    "end": "2781599"
  },
  {
    "text": "variants in fact i'm thinking ahead of myself here the first choice if you wanted to test disk io",
    "start": "2781599",
    "end": "2787280"
  },
  {
    "text": "on ec2 is what type of i o do i want to test now obviously there are differences",
    "start": "2787280",
    "end": "2792800"
  },
  {
    "text": "between using ephemeral storage in evs where you talk about availability and so on",
    "start": "2792800",
    "end": "2798800"
  },
  {
    "text": "you can use provision diops if if you're worried about consistency of the performance",
    "start": "2798800",
    "end": "2805760"
  },
  {
    "text": "and on the new instance types like the c3s where we have solid-state disks or on the hi1 where there are",
    "start": "2805760",
    "end": "2812560"
  },
  {
    "text": "solid-state disks if you want blazing fast local storage you may choose to use that",
    "start": "2812560",
    "end": "2818720"
  },
  {
    "text": "understanding what it's what it what the characteristics are of that storage beyond just its performance secondly",
    "start": "2818720",
    "end": "2826560"
  },
  {
    "text": "when looking at disk performance the question you have to ask is what kind of measurement do i want to do",
    "start": "2826560",
    "end": "2831920"
  },
  {
    "text": "do i want to do a single volume do i want to do a jbod do i want to do",
    "start": "2831920",
    "end": "2837839"
  },
  {
    "text": "software raid there are many different ways some tools are going to help you with this some tools",
    "start": "2837839",
    "end": "2843040"
  },
  {
    "text": "won't help you at all finally when it comes down to what you're actually going to measure",
    "start": "2843040",
    "end": "2848800"
  },
  {
    "text": "there are fortunately or unfortunately depending on how much time you have to do this lots of things to think about first of",
    "start": "2848800",
    "end": "2855520"
  },
  {
    "text": "all it's what type of access are you doing is it read or write or some combination if it's",
    "start": "2855520",
    "end": "2861920"
  },
  {
    "text": "some combination what percentage rate what percentage right secondly what access pattern",
    "start": "2861920",
    "end": "2867359"
  },
  {
    "text": "is it sequential is it random finally um very important and many",
    "start": "2867359",
    "end": "2873200"
  },
  {
    "text": "people miss this step you want to think about queue depth what does q depth translate into",
    "start": "2873200",
    "end": "2879040"
  },
  {
    "text": "q depth translates into how busy you're submitting the ray many people say all i care about",
    "start": "2879040",
    "end": "2884880"
  },
  {
    "text": "is iops and i just need x iops but if you ask them do you want x i ups at 400 microseconds",
    "start": "2884880",
    "end": "2893280"
  },
  {
    "text": "or do you want x iops at 1.5 milliseconds they would say well of course 400 microseconds then then i would say",
    "start": "2893280",
    "end": "2900240"
  },
  {
    "text": "well then you don't just care about iops you care about iops and latency it's the same with bandwidth",
    "start": "2900240",
    "end": "2907519"
  },
  {
    "text": "so the the broad categories are iops latency and throughput so",
    "start": "2908880",
    "end": "2915920"
  },
  {
    "text": "you can find there's some there's some good documentation actually on the ec2 website if you do a search for ebs",
    "start": "2915920",
    "end": "2923119"
  },
  {
    "text": "performance under documentation you'll come up with a long list of recommendations including",
    "start": "2923119",
    "end": "2928640"
  },
  {
    "text": "how to run tests and so on but i wanted to give you a simple guideline to measuring provisioned iops",
    "start": "2928640",
    "end": "2934640"
  },
  {
    "text": "why am i choosing measuring provisioned iops because i've seen many customers who've struggled with",
    "start": "2934640",
    "end": "2940079"
  },
  {
    "text": "either getting the iops they want and it was simply a matter of how they were doing the testing remember",
    "start": "2940079",
    "end": "2945359"
  },
  {
    "text": "we measured this stage multiple different ways some gave us different results the the simple approach is to launch an",
    "start": "2945359",
    "end": "2951599"
  },
  {
    "text": "ebs optimized instance if you're going to measure pi ops you really want to use ebs optimized instances then you",
    "start": "2951599",
    "end": "2957760"
  },
  {
    "text": "provision the volumes now you can with the wizard or with the api",
    "start": "2957760",
    "end": "2963040"
  },
  {
    "text": "do those both simultaneously but i'm just making this a simple approach then you attach them um the guidelines",
    "start": "2963040",
    "end": "2970400"
  },
  {
    "text": "in that documentation i mentioned talk about pre-warming the volumes why would you pre-warm unless what",
    "start": "2970400",
    "end": "2976400"
  },
  {
    "text": "you're trying to measure is the performance in production of using a volume when",
    "start": "2976400",
    "end": "2981440"
  },
  {
    "start": "2981000",
    "end": "2981000"
  },
  {
    "text": "it's just been provisioned you're going to get a more reliable read when you've pre-warmed it what is pre-warming",
    "start": "2981440",
    "end": "2987040"
  },
  {
    "text": "it means touching the blocks and i'll show you a way to do that with",
    "start": "2987040",
    "end": "2993200"
  },
  {
    "text": "with fio which is one of the tools i'm going to talk about but my previous point about latency",
    "start": "2993200",
    "end": "2998800"
  },
  {
    "text": "um this is a graph that i produced with uh don't worry about the complexity of the graph just the two arrows",
    "start": "2998800",
    "end": "3004800"
  },
  {
    "text": "the leftmost bar is the blue bar is showing the q depth for sequential read",
    "start": "3004800",
    "end": "3012240"
  },
  {
    "text": "at 2000 iops and q depth of one is the blue bar q",
    "start": "3012240",
    "end": "3018319"
  },
  {
    "text": "depth of two is the orange bar so if i said all i care about is getting two thousand iops you can see",
    "start": "3018319",
    "end": "3026079"
  },
  {
    "text": "that if you set the q depth to 2 in this particular test then you're going to be getting uh more",
    "start": "3026079",
    "end": "3031680"
  },
  {
    "text": "than two times the latency than you have to get and still get the iops level so q depth",
    "start": "3031680",
    "end": "3037040"
  },
  {
    "text": "is really important so um just to illustrate a number of",
    "start": "3037040",
    "end": "3043920"
  },
  {
    "text": "different ways that you could measure and that i've seen people measure performance one of my favorites which definitely",
    "start": "3043920",
    "end": "3050319"
  },
  {
    "start": "3045000",
    "end": "3045000"
  },
  {
    "text": "fits into the quick and dirty test is someone takes an existing file or a little more sophisticated they use dd to",
    "start": "3050319",
    "end": "3056559"
  },
  {
    "text": "create a file and then they do a file copy and they say i'm going to measure the throughput",
    "start": "3056559",
    "end": "3062240"
  },
  {
    "text": "of this disk by doing a file copy you can calculate how long it takes to do it",
    "start": "3062240",
    "end": "3068240"
  },
  {
    "text": "and say i copied so many bytes in so many seconds um i i have to caution you that um it's",
    "start": "3068240",
    "end": "3074559"
  },
  {
    "text": "it's not very precise uh and it it can be prone to all sorts of uh complexity",
    "start": "3074559",
    "end": "3081520"
  },
  {
    "text": "second a slightly more sophisticated way people use the tool dd i think one of the reasons they use it",
    "start": "3081520",
    "end": "3087119"
  },
  {
    "text": "is it has to do with disks and when it's done it tells you what the throughput was so it's all there the the challenge is",
    "start": "3087119",
    "end": "3094400"
  },
  {
    "start": "3093000",
    "end": "3093000"
  },
  {
    "text": "it's not accurate from a variety of different perspectives for instance i'll show you some examples of where i randy",
    "start": "3094400",
    "end": "3100000"
  },
  {
    "text": "d uh i ran dd of a one gig file so i just used",
    "start": "3100000",
    "end": "3105760"
  },
  {
    "text": "zero bytes uh created a one gig file and resp i think it took 0.7 seconds to do",
    "start": "3105760",
    "end": "3111760"
  },
  {
    "text": "that and it told me that it was 1.5 gigabytes per second bandwidth",
    "start": "3111760",
    "end": "3117680"
  },
  {
    "text": "a i happen to know the particular device was a pi ops volume not capable of 1.5 gigabytes per second",
    "start": "3117680",
    "end": "3123599"
  },
  {
    "text": "b i did the math and calculated how long it took versus how much data it copied",
    "start": "3123599",
    "end": "3129359"
  },
  {
    "text": "and the answer wasn't 1.5 it was 1.4 or something so it generously rounded up to 1.5",
    "start": "3129359",
    "end": "3135920"
  },
  {
    "text": "but it is easy to use and can be quick so so of the three variants i'm telling you",
    "start": "3135920",
    "end": "3141839"
  },
  {
    "text": "the most sophisticated um which is both good and bad is fio flexible io tester it's publicly",
    "start": "3141839",
    "end": "3149040"
  },
  {
    "text": "available the good part about this is you can test almost any kind of i o pattern you want",
    "start": "3149040",
    "end": "3154960"
  },
  {
    "text": "including multiple volumes it can do things and the particular config file which is",
    "start": "3154960",
    "end": "3161280"
  },
  {
    "text": "where the complexity is driven here does pre-warming and it does it in",
    "start": "3161280",
    "end": "3166559"
  },
  {
    "text": "a careful way to make sure you're really touching all the blocks and i'm doing a very simplistic test which is",
    "start": "3166559",
    "end": "3172079"
  },
  {
    "text": "a sequential uh what am i doing here i'm doing a a sequential write",
    "start": "3172079",
    "end": "3179119"
  },
  {
    "text": "and i'm using uh an i o depth of one means a q depth of one i'm doing four thousand eighty ios per",
    "start": "3179119",
    "end": "3186319"
  },
  {
    "text": "second now these this was a these tests were all run on a four thousand iops provision volume and",
    "start": "3186319",
    "end": "3193520"
  },
  {
    "text": "you may say it's four thousand why are you doing 40 80 well from my experience when you",
    "start": "3193520",
    "end": "3199520"
  },
  {
    "text": "drive slightly more than the provision level you sort of get the maximum amount out of it it's kind of like",
    "start": "3199520",
    "end": "3204960"
  },
  {
    "text": "you go the gas tank you fill up your gas and the machine cuts off but there's still a little more space in",
    "start": "3204960",
    "end": "3210000"
  },
  {
    "text": "there you're not supposed to do it but i like to feel it anyway that's sharing way too much about my quirks sorry",
    "start": "3210000",
    "end": "3216559"
  },
  {
    "text": "uh therapy again therapy so bringing this all in so i wanted to point out some of the",
    "start": "3216559",
    "end": "3223760"
  },
  {
    "text": "problems with using copy for instance uh the first test i did was copy a one gig file from file one to file two",
    "start": "3223760",
    "end": "3230640"
  },
  {
    "text": "and on this one gig provisioned uh sorry this four thousand iops",
    "start": "3230640",
    "end": "3236640"
  },
  {
    "text": "provision volume was actually 400 gigabytes in size um i had pre-warmed it so there were no",
    "start": "3236640",
    "end": "3241760"
  },
  {
    "text": "artifacts of the measurement and i can tell you that a um that the the bandwidth of this",
    "start": "3241760",
    "end": "3248000"
  },
  {
    "text": "volume is 64 megabytes per second so anything that measures above that is",
    "start": "3248000",
    "end": "3253839"
  },
  {
    "text": "probably not accurate and so the copy just simply copying file one to file two",
    "start": "3253839",
    "end": "3260000"
  },
  {
    "text": "uh it took 17 seconds and that told me that the bandwidth was around 59 megabytes per second if i deleted file 2",
    "start": "3260000",
    "end": "3268640"
  },
  {
    "text": "and then did a copy of file 1 to file 2 again it took 0.853 seconds",
    "start": "3268640",
    "end": "3275040"
  },
  {
    "text": "and it said that the bandwidth was 1200 megabytes per second why do you think that was can anyone say",
    "start": "3275040",
    "end": "3280880"
  },
  {
    "text": "cache yes so there are artifacts of how you run these tests that can greatly perturb the results you have to be very careful",
    "start": "3280880",
    "end": "3287680"
  },
  {
    "text": "in both what the test does and how you run it then i copied file one to file three and",
    "start": "3287680",
    "end": "3293359"
  },
  {
    "text": "file one is still cache so again it's really blazingly fast then i use dd and the first test was",
    "start": "3293359",
    "end": "3299760"
  },
  {
    "text": "using as i mentioned the zero byte fill and with zero byte fill",
    "start": "3299760",
    "end": "3305200"
  },
  {
    "text": "the one gig file ended up as i mentioned taking 0.72 seconds and it told me that i did 1.5 gigabytes",
    "start": "3305200",
    "end": "3313760"
  },
  {
    "text": "per second but if you do the math it's actually 1.419.01 okay stop then i did a you random",
    "start": "3313760",
    "end": "3322319"
  },
  {
    "text": "obviously writing random bits versus writing zero fill are very different workloads",
    "start": "3322319",
    "end": "3327520"
  },
  {
    "text": "in this particular case it took almost 80 seconds and the measured throughput was 12.84",
    "start": "3327520",
    "end": "3334880"
  },
  {
    "text": "megabytes per second why do you think the bandwidth was only 12.84 megabytes per second",
    "start": "3334880",
    "end": "3340400"
  },
  {
    "text": "it wasn't the disk you were measuring it was the ability to measure to create random",
    "start": "3340400",
    "end": "3345760"
  },
  {
    "text": "so if you're trying to measure disk performance you random ain't the way to do it",
    "start": "3345760",
    "end": "3350880"
  },
  {
    "text": "finally looking at the fio test now i didn't go into detail about the config",
    "start": "3350880",
    "end": "3356079"
  },
  {
    "text": "file but this test literally ran for 30 seconds so it was not a very thorough test it takes a while to get things up to speed",
    "start": "3356079",
    "end": "3362640"
  },
  {
    "text": "but it measured roughly 61.5 megabytes per second and i can show you in the next slide i",
    "start": "3362640",
    "end": "3368480"
  },
  {
    "text": "was asked to help out for a blog that jeff did recently sort of demonstrating testing at scale",
    "start": "3368480",
    "end": "3374240"
  },
  {
    "text": "so this is a 12 volume test with 12 4 000 iops provision volumes and i ran a",
    "start": "3374240",
    "end": "3381359"
  },
  {
    "text": "sequence of read write and read write tests and um the the flat bar line is 64 megabytes",
    "start": "3381359",
    "end": "3388319"
  },
  {
    "text": "per second so basically i was able to drive 12 volume volumes simultaneously at max bandwidth",
    "start": "3388319",
    "end": "3395040"
  },
  {
    "text": "and that's i bring this up mainly to show that with with fio in particular you can",
    "start": "3395040",
    "end": "3400079"
  },
  {
    "text": "do some very sophisticated tests if that's what you need it's going to be much more accurate than the others",
    "start": "3400079",
    "end": "3405200"
  },
  {
    "text": "so um i i i have a brief summary here and we have a brief amount of time for",
    "start": "3405200",
    "end": "3411200"
  },
  {
    "text": "probably a couple questions but all of the stuff i threw at you in the hour you were gracious enough to",
    "start": "3411200",
    "end": "3417040"
  },
  {
    "text": "spend with me this morning you want to choose the best benchmark",
    "start": "3417040",
    "end": "3422240"
  },
  {
    "text": "that represents your application if you can't use your application you really need to understand what best",
    "start": "3422240",
    "end": "3428960"
  },
  {
    "text": "means when it comes to looking at the results and telling you is this a good test is this a good result",
    "start": "3428960",
    "end": "3436000"
  },
  {
    "text": "it's really important to run enough samples to quantify variability particularly important in the cloud when",
    "start": "3436079",
    "end": "3442319"
  },
  {
    "text": "there are lots of layers of abstraction particularly important when you're running tools you're not used to to make",
    "start": "3442319",
    "end": "3447440"
  },
  {
    "text": "sure that the artifacts you're measuring are not part of the tool as opposed to the thing you're trying to measure",
    "start": "3447440",
    "end": "3454720"
  },
  {
    "text": "you really need to understand what a good result looks like having a baseline having a result someone else has run",
    "start": "3454960",
    "end": "3461119"
  },
  {
    "text": "that you know is on a similar type configuration running multiple tests to say does this really make sense",
    "start": "3461119",
    "end": "3468160"
  },
  {
    "text": "finally keep all of your results i can't tell you how many times i've gone back and needed my results",
    "start": "3468160",
    "end": "3475440"
  },
  {
    "text": "from previous tests that had nothing to do with what i was trying to test it saved me so much time to keep information about",
    "start": "3475440",
    "end": "3482079"
  },
  {
    "text": "the not only how i ran the test but what the test was and most importantly the results i have a database that keeps years of",
    "start": "3482079",
    "end": "3488000"
  },
  {
    "text": "results in it and i i can do lots of wonderful sql queries to pull it out so",
    "start": "3488000",
    "end": "3493119"
  },
  {
    "text": "in the time that we have left first i want to thank you secondly i i would appreciate it if you",
    "start": "3493119",
    "end": "3499040"
  },
  {
    "text": "would fill out a survey one of the reasons i'm here this year is i asked people to do that last year",
    "start": "3499040",
    "end": "3504400"
  },
  {
    "text": "and enough people were either caffeinated enough or that they appreciated what i talked",
    "start": "3504400",
    "end": "3509440"
  },
  {
    "text": "about um or or maybe it was the bribes whatever it was they liked it and so they asked me to do",
    "start": "3509440",
    "end": "3515280"
  },
  {
    "text": "another talk and so in the time we have left which is about three minutes so probably",
    "start": "3515280",
    "end": "3520480"
  },
  {
    "text": "one or two questions i'll answer questions and then i have to vacate i'll be outside and we can go",
    "start": "3520480",
    "end": "3526559"
  },
  {
    "text": "somewhere else if you have more questions so any questions",
    "start": "3526559",
    "end": "3531119"
  }
]