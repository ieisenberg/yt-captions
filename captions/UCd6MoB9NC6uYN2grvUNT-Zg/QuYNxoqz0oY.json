[
  {
    "text": "um quick introduction to myself um I'm Brandon Chavis I'm a Solutions architect and I work with the Amazon partner",
    "start": "440",
    "end": "6120"
  },
  {
    "text": "network uh so I work with technology partners and help them build um solutions that uh work well with the AWS",
    "start": "6120",
    "end": "12559"
  },
  {
    "text": "platform and so um specifically I work with the Amazon ECS um and like Docker community so building a a community an",
    "start": "12559",
    "end": "19520"
  },
  {
    "text": "ecosystem around ECS um and you know really helping to build products that augment and enhance the AWS offering so",
    "start": "19520",
    "end": "27599"
  },
  {
    "text": "um today's a deep dive um and we're going to talk about microservices and how they apply to Containers how you can",
    "start": "27599",
    "end": "32840"
  },
  {
    "text": "build um microservices with containers um but this isn't we're not going to",
    "start": "32840",
    "end": "38040"
  },
  {
    "text": "jump right into the really heavy stuff there will be a little bit of an introduction for those of you who are unfamiliar with either the architectural",
    "start": "38040",
    "end": "43160"
  },
  {
    "text": "style or with containers or ECS so um maybe about the first 15 20 minutes we'll talk about that stuff make sure",
    "start": "43160",
    "end": "49199"
  },
  {
    "text": "everyone's on the same page introduce some Concepts um and we'll go from there and then for Q&A at the end I'm actually",
    "start": "49199",
    "end": "54840"
  },
  {
    "text": "really excited to mention that we have some uh some uh members of uh some partner Solutions so we have data dog",
    "start": "54840",
    "end": "60640"
  },
  {
    "text": "and we have shippable here and we'll all be hanging out up front uh for like you know 15 20 minutes afterwards and we'll answer questions and and talk about um",
    "start": "60640",
    "end": "67600"
  },
  {
    "text": "how all that works together so let's go ahead and get started um so the first thing we're",
    "start": "67600",
    "end": "73799"
  },
  {
    "text": "going to do is we're going to introduce the concept of microservices so um what they are what are the benefits of this",
    "start": "73799",
    "end": "79040"
  },
  {
    "text": "approach and how they really differ from other architectures um I also think it's it's relevant to note that even if you",
    "start": "79040",
    "end": "84280"
  },
  {
    "text": "aren't building microservices with containers a lot of the design principles we'll talk about um are kind",
    "start": "84280",
    "end": "89320"
  },
  {
    "text": "of broadly applicable to Cloud architecture in general uh because things like scalable and decoupled architectures are really um kind of",
    "start": "89320",
    "end": "96040"
  },
  {
    "text": "critical to any successful Cloud architecture so like I said we'll we'll start very broadly we'll Define this",
    "start": "96040",
    "end": "101520"
  },
  {
    "text": "pattern um and we'll you know rapidly get into implementation specifics and then um culminate with a demo of some of",
    "start": "101520",
    "end": "107159"
  },
  {
    "text": "this stuff working live so number one what are microservices um and here we have a",
    "start": "107159",
    "end": "113200"
  },
  {
    "text": "quote from Wikipedia which is a little bit silly initially but it's actually interesting to me to find out that this is like relatively static um which means",
    "start": "113200",
    "end": "120320"
  },
  {
    "text": "that we have some sort of agreement from the community on what this um architectural pattern or the approach actually looks like so at a high level",
    "start": "120320",
    "end": "127200"
  },
  {
    "text": "what do we have we have your application composed of a number of small Services um and each service is backed by its own",
    "start": "127200",
    "end": "134000"
  },
  {
    "text": "processes that are usually abstracted away behind like a well-defined interface and so today we usually see",
    "start": "134000",
    "end": "139040"
  },
  {
    "text": "that as like an HTTP endpoint like an HTTP restful API um and generally each",
    "start": "139040",
    "end": "144080"
  },
  {
    "text": "microservice is built around a single business function or performs a very specific task um very well",
    "start": "144080",
    "end": "151280"
  },
  {
    "text": "so how does that compare uh to other major architectural patterns um monolithic is probably the most clearcut",
    "start": "151280",
    "end": "158239"
  },
  {
    "text": "probably everyone in this room has had experience with that sort of application um everything in that application is",
    "start": "158239",
    "end": "163319"
  },
  {
    "text": "really tightly coupled so if you change functionality in one part of the application um you probably need to test",
    "start": "163319",
    "end": "169560"
  },
  {
    "text": "functionality of the entire application after that right so all the components are likely to depend on the same back end for example they might share the",
    "start": "169560",
    "end": "175800"
  },
  {
    "text": "same memory um tight coupling is really what we think about when we talk about monolithic",
    "start": "175800",
    "end": "180920"
  },
  {
    "text": "applications um and then the next step towards microservices is really a service oriented architecture approach",
    "start": "180920",
    "end": "187159"
  },
  {
    "text": "and so this is breaking out your monolithic application into a couple of different domains um but that business",
    "start": "187159",
    "end": "192519"
  },
  {
    "text": "logic might still span several of those domains um and for me it's really common to associate service oriented",
    "start": "192519",
    "end": "198599"
  },
  {
    "text": "architecture with some form of middleware like an Enterprise service bus um that does tight coupling of a",
    "start": "198599",
    "end": "204720"
  },
  {
    "text": "couple of those different components so still a change in one part of your application probably triggers you know",
    "start": "204720",
    "end": "210439"
  },
  {
    "text": "testing across multiple parts of the application can be a very uh timec consuming process and then finally when",
    "start": "210439",
    "end": "216400"
  },
  {
    "text": "we get to microservices this is composed of as the name implies very many small Services very many small components um",
    "start": "216400",
    "end": "223080"
  },
  {
    "text": "and each component exposes an API that really abstracts whatever language uh or data store is behind that endpoint so",
    "start": "223080",
    "end": "230120"
  },
  {
    "text": "the business logic tends to live inside one domain um and if you make a change to a service as long as you don't break",
    "start": "230120",
    "end": "236560"
  },
  {
    "text": "functionality on your API uh the tests just need a really uh verify the functionality of that one service right",
    "start": "236560",
    "end": "242720"
  },
  {
    "text": "so you can make changes with a little less uh concern for breaking the entire application less unforeseen uh",
    "start": "242720",
    "end": "248519"
  },
  {
    "text": "consequences ideally so why would we want to move away from monolithic architectures in",
    "start": "248519",
    "end": "253799"
  },
  {
    "text": "the first place what are some challenges you might have with this approach um so I think the main challenge is giving any",
    "start": "253799",
    "end": "259840"
  },
  {
    "text": "of the subcomponents a degree of autonomy here and that could include um maybe limiting developing teams or",
    "start": "259840",
    "end": "265160"
  },
  {
    "text": "development teams for moving at their own pace right developing new new features as they as they see fit they might have have to wait for other teams",
    "start": "265160",
    "end": "271000"
  },
  {
    "text": "um it might be impossible to change one component without changing another component um and then also scaling so",
    "start": "271000",
    "end": "276600"
  },
  {
    "text": "you cannot scale individual components um it becomes very difficult to do so so one part of the application might have",
    "start": "276600",
    "end": "283520"
  },
  {
    "text": "very intense CPU requirements one might be Memory intensive um but you cannot break those out into appropriate fleets",
    "start": "283520",
    "end": "290199"
  },
  {
    "text": "underneath so to scale uh basically you have to replicate the entire thing across many instances generally the same",
    "start": "290199",
    "end": "295639"
  },
  {
    "text": "instance type um and this really limits your flexibility um and it makes it really challenging to have efficient",
    "start": "295639",
    "end": "301280"
  },
  {
    "text": "resource utilization so you can approach these problems a little bit differently with microservices um these Loosely coupled",
    "start": "301280",
    "end": "308080"
  },
  {
    "text": "components uh they can be placed on their own set of underlying instances so um when you scale out each component you",
    "start": "308080",
    "end": "314680"
  },
  {
    "text": "can do so individually and this pattern uh is really natural for the cloud I'm sure you can start thinking about how this would work right you can have",
    "start": "314680",
    "end": "320560"
  },
  {
    "text": "different Auto scaling groups different instance types different launch configurations for each service you can scale them individually based on metrics",
    "start": "320560",
    "end": "326000"
  },
  {
    "text": "that make sense for each of those um services and here in this example um you know the user service for example",
    "start": "326000",
    "end": "332319"
  },
  {
    "text": "might be the most heavily trafficked service in your application and you really only have to scale that whereas the shipping service for example um",
    "start": "332319",
    "end": "338880"
  },
  {
    "text": "might be relatively low traffic and you don't really have to scale it too much it can be a single instance two instances something like that so it",
    "start": "338880",
    "end": "345120"
  },
  {
    "text": "really helps you track your resource utilization in a way that makes more sense instead of just replicating the entire application across your",
    "start": "345120",
    "end": "353199"
  },
  {
    "text": "Fleet so if I have to summarize these characteristics characteristics of microservices um a core tenant is really",
    "start": "355560",
    "end": "362199"
  },
  {
    "text": "the fact that you know no matter the language or the data store or the backend workflow that your microservice",
    "start": "362199",
    "end": "367240"
  },
  {
    "text": "uses to do a thing um it's really just exposing a consistent API for other",
    "start": "367240",
    "end": "372599"
  },
  {
    "text": "services or maybe your users to consume and so this API that you're exposing is really uh it's a contract right and so",
    "start": "372599",
    "end": "379440"
  },
  {
    "text": "you're prioritizing that you're maintaining that functionality of that API at all costs um as long as you're doing that",
    "start": "379440",
    "end": "386360"
  },
  {
    "text": "this really frees you up and it turns your service into a black box so um",
    "start": "386360",
    "end": "391479"
  },
  {
    "text": "maybe as a as a as a developer of this service I can write it I can write it in Python I can write it in go I can write",
    "start": "391479",
    "end": "396960"
  },
  {
    "text": "it in node um no one really cares because at the end of the day it speaks HTTP and that's great and that's great",
    "start": "396960",
    "end": "402440"
  },
  {
    "text": "for the consumers of that service too so if I'm a user or a consumer service um I don't really have to worry so much about",
    "start": "402440",
    "end": "408759"
  },
  {
    "text": "how it works behind the scenes I have to really understand how that API works and how I'm going to interface with it but as long as I can rely on that API",
    "start": "408759",
    "end": "415639"
  },
  {
    "text": "remaining fairly consistent um then I can build my service against that API uh and consume functionality from that",
    "start": "415639",
    "end": "421840"
  },
  {
    "text": "service without having to know too much about how it works so highle summary it sounds great",
    "start": "421840",
    "end": "428639"
  },
  {
    "text": "um but of course there's challenges with any different approach that you might take and some of these are not really",
    "start": "428639",
    "end": "434319"
  },
  {
    "text": "microservices exclusive problems so um you know with Cloud AR architecture in",
    "start": "434319",
    "end": "439400"
  },
  {
    "text": "general there can be increased deployment and operational complexity when your scale gets huge um you can",
    "start": "439400",
    "end": "445919"
  },
  {
    "text": "have many distributed Services uh each one can provide different functionalities so you have to keep track of all of that um and so I think",
    "start": "445919",
    "end": "453080"
  },
  {
    "text": "it's it's important to kind of work through some of these challenges these are things that customers generally come to us with with challenges and they want",
    "start": "453080",
    "end": "458520"
  },
  {
    "text": "to understand how to resolve them before they actually go to production with a microservice solution especially on ECS",
    "start": "458520",
    "end": "463639"
  },
  {
    "text": "so let's try to address all of them one by one number one is resource and State Management and I think um this is",
    "start": "463639",
    "end": "469840"
  },
  {
    "text": "probably more broadly known as orchestration it's a very common term to describe this problem right now or a or a approach to this um so basically what",
    "start": "469840",
    "end": "477520"
  },
  {
    "text": "it means to me is how do I know what resource I have available and what state are they in um and how do I make sure",
    "start": "477520",
    "end": "484039"
  },
  {
    "text": "that's all kind of configured how I want it right there's a lot of distributed things a lot of stuff that I have to control um how do I do so easily and so",
    "start": "484039",
    "end": "491319"
  },
  {
    "text": "we built ec2 container service for running containers at scale across clusters of ec2",
    "start": "491319",
    "end": "497479"
  },
  {
    "text": "instances um but so why is ECS the right thing to talk about um when addressing resource and State Management concerns",
    "start": "497479",
    "end": "504120"
  },
  {
    "text": "in microservices architectures let's talk about that and so I think the reason that",
    "start": "504120",
    "end": "509960"
  },
  {
    "text": "containers and Docker are so natural for the microservices pattern or there's a few reasons right um number one is it",
    "start": "509960",
    "end": "515000"
  },
  {
    "text": "makes Services really simple to model and that's because the application and all of its dependencies are all wrapped",
    "start": "515000",
    "end": "520039"
  },
  {
    "text": "together uh into a redeployable and immutable image right so that's your Docker",
    "start": "520039",
    "end": "525040"
  },
  {
    "text": "container inside that container can be any app any language that's that blackbox component and the image itself",
    "start": "525040",
    "end": "531080"
  },
  {
    "text": "is a versioned artifact so it can be stored in your repository or a repository like your source code is um",
    "start": "531080",
    "end": "536240"
  },
  {
    "text": "it makes it easy to kind of understand you know which revision might track to which revision of my codee um and that simplifies deployment",
    "start": "536240",
    "end": "544360"
  },
  {
    "text": "and I think another reason it simplifies deployment is because containers um kind of enforce a stateless service model um",
    "start": "544360",
    "end": "551000"
  },
  {
    "text": "so when you encourage a stateless service um it kind of decreases the risk of change because each deployment can just be a new set of containers uh for",
    "start": "551000",
    "end": "558000"
  },
  {
    "text": "the same reason you can kind of roll back very simply um with little challenges so I think it just makes it more straightforward to decompose your",
    "start": "558000",
    "end": "563959"
  },
  {
    "text": "applications into microservices by using containers um it's just because that microservice is selfcontained in a",
    "start": "563959",
    "end": "569839"
  },
  {
    "text": "container um and it allows you to reduce dependency conflicts um and ultimately you know decouple deployments",
    "start": "569839",
    "end": "576399"
  },
  {
    "text": "so uh a couple of years ago when Docker was still very new um we talked to a lot of customers and realized that while",
    "start": "576399",
    "end": "582480"
  },
  {
    "text": "it's pretty easy to manage you know a handful of containers on one or two hosts um with just a Docker utilities um",
    "start": "582480",
    "end": "589079"
  },
  {
    "text": "when you take these applications and run them at scale across a large number of hosts um it does become more of a",
    "start": "589079",
    "end": "594160"
  },
  {
    "text": "challenge and to kind of support that notion to kind of quantify that it's difficult um I guess we should Ponder a",
    "start": "594160",
    "end": "599959"
  },
  {
    "text": "few questions so if I have you know hundreds of containers uh dozens of hosts they're spread across availability",
    "start": "599959",
    "end": "605279"
  },
  {
    "text": "zones um how do I keep track of which hosts here are actually available right",
    "start": "605279",
    "end": "611040"
  },
  {
    "text": "um how do I hook um my application up to elastic load balancers how do I know how much CPU and memory is available on that",
    "start": "611040",
    "end": "617279"
  },
  {
    "text": "host way up in the corner right how do I know if one of the containers dies and one of the hosts down here in the bottom",
    "start": "617279",
    "end": "623120"
  },
  {
    "text": "right corner right there's a lot of things to keep track of and so um what if I want to you know do deployments",
    "start": "623120",
    "end": "628240"
  },
  {
    "text": "across a fleet of this size and so these are questions we had from customers and this is the reason we built ECS and we think it's a a good",
    "start": "628240",
    "end": "635040"
  },
  {
    "text": "solution to a lot of these problems so real quick now we're going to touch on a few components of ECS kind of how it",
    "start": "635040",
    "end": "641040"
  },
  {
    "text": "works um before we start diving into some more of the specifics of actual implementation details so ec2 is or ECS",
    "start": "641040",
    "end": "648720"
  },
  {
    "text": "was really built to let you make um containers a foundational building block uh of your applications and we want to",
    "start": "648720",
    "end": "654120"
  },
  {
    "text": "make them first class citizens um in AWS so you know the idea is to give them full functionality equivalent to ec2",
    "start": "654120",
    "end": "660240"
  },
  {
    "text": "instances eventually um but right now ECS really eliminates the need for you to run and manage a cluster manager or a",
    "start": "660240",
    "end": "667760"
  },
  {
    "text": "state management system um for your cluster so we have a state management system that we've built it's based on",
    "start": "667760",
    "end": "673079"
  },
  {
    "text": "top of some uh Primitives we've developed internally for managing very large clusters um and all of that is uh",
    "start": "673079",
    "end": "678800"
  },
  {
    "text": "exposed through an API and that API is really intended to give you full visibility and control over all the",
    "start": "678800",
    "end": "683839"
  },
  {
    "text": "resources that are in a cluster and so this API is really",
    "start": "683839",
    "end": "689320"
  },
  {
    "text": "scalable and it can support clusters of nearly any size and this is a load test that we ran um over 72 hours where we",
    "start": "689320",
    "end": "695920"
  },
  {
    "text": "ran list and describe apis basically continuously um and we adjusted the size of the cluster up to over a thousand",
    "start": "695920",
    "end": "702279"
  },
  {
    "text": "instances and really what this is showing is that um we can provide really detailed State tracking um even if your",
    "start": "702279",
    "end": "707600"
  },
  {
    "text": "cluster is very large or dynamically changing and so um the red and green lines show P99 and p50 latencies um and",
    "start": "707600",
    "end": "713920"
  },
  {
    "text": "the purple line is is instances so um I think what's really important here is to note that it's it's relatively stable",
    "start": "713920",
    "end": "719079"
  },
  {
    "text": "it's predictable um and no matter what size your cluster is running um you should be able to expect ECS to respond",
    "start": "719079",
    "end": "725440"
  },
  {
    "text": "in basically the same way which is very important um we've also built schedulers",
    "start": "725440",
    "end": "731480"
  },
  {
    "text": "so there's auler actually a couple ofers that are um operating on the information",
    "start": "731480",
    "end": "736680"
  },
  {
    "text": "that that backend State Management engine provides you so that means we can find a place to run a container um based",
    "start": "736680",
    "end": "742120"
  },
  {
    "text": "on the requirements you've specified right so the schedulers operate in the information from that backend State engine they know what's available around",
    "start": "742120",
    "end": "748399"
  },
  {
    "text": "the cluster they can look at the job you've submitted they can say this is how much memory or CPU I need and we can throw it at the cluster and run it in an",
    "start": "748399",
    "end": "754880"
  },
  {
    "text": "optimal place a cool thing to note is that these",
    "start": "754880",
    "end": "760000"
  },
  {
    "text": "schedulers operate on the same apis that we expose to you the same information that's exposed through the backend API",
    "start": "760000",
    "end": "766199"
  },
  {
    "text": "so in theory uh or actually in practice when we've seen this um customers can write custom schedulers based on the",
    "start": "766199",
    "end": "772760"
  },
  {
    "text": "list and describe apis um and they can take information about what's going on in the cluster make educated decisions",
    "start": "772760",
    "end": "778000"
  },
  {
    "text": "about where should I actually place my my containers based on um some certain application or business",
    "start": "778000",
    "end": "784920"
  },
  {
    "text": "logic um also ECS is really built to work with the AWS services that you already use so you can throw your",
    "start": "785360",
    "end": "791880"
  },
  {
    "text": "cluster into a VPC for example um you can use security groups to control access uh to the ec2 instances in the",
    "start": "791880",
    "end": "798440"
  },
  {
    "text": "cluster uh you can store persistent information on EBS um you can Route",
    "start": "798440",
    "end": "804600"
  },
  {
    "text": "traffic to your containers using an elb um chances are if you're using something in AWS already uh ECS has you covered",
    "start": "804600",
    "end": "810720"
  },
  {
    "text": "and you can use um that functionality um with",
    "start": "810720",
    "end": "815800"
  },
  {
    "text": "ECS um and then real quickly let's touch on some of the constructs within ECS so some of the components uh number one is",
    "start": "816399",
    "end": "822920"
  },
  {
    "text": "a cluster right so this is a collection of resources it can span availability zones um it's cons it's a constrained to",
    "start": "822920",
    "end": "828680"
  },
  {
    "text": "a single region but it's a dynamically sizable name space um consisting of E2 instances that are um basically",
    "start": "828680",
    "end": "835360"
  },
  {
    "text": "aggregated into a big like a single resource pool so all of the memory and CPU is aggregated and presented to you",
    "start": "835360",
    "end": "841279"
  },
  {
    "text": "as available through the apis um we often see customers using different clusters um for different components of",
    "start": "841279",
    "end": "847120"
  },
  {
    "text": "the same application if those different components have different scaling requirements uh different security requirements um or if it's just easier",
    "start": "847120",
    "end": "853560"
  },
  {
    "text": "for you to process this uh particular component lives on this cluster this particular component lives over here um",
    "start": "853560",
    "end": "859880"
  },
  {
    "text": "and it's also common to use them for different environments too so if you have a development environment you might use a cluster for that you know you'll",
    "start": "859880",
    "end": "865199"
  },
  {
    "text": "have a test cluster production cluster so on um it's really nice for a logical",
    "start": "865199",
    "end": "870360"
  },
  {
    "text": "placement boundary of your containers and it's a very easy concept to understand when you're actually using it in",
    "start": "870360",
    "end": "876320"
  },
  {
    "text": "practice uh next are tasks and tasks are the primary unit of work in ECS and so a",
    "start": "876320",
    "end": "881639"
  },
  {
    "text": "task definition is a Json document that defines um which containers should be deployed together uh onto the same host",
    "start": "881639",
    "end": "888560"
  },
  {
    "text": "and how they should be configured so um you can have multiple instantiations of",
    "start": "888560",
    "end": "894160"
  },
  {
    "text": "the same task runting across the cluster um you can have a number of different tasks with their own unique container",
    "start": "894160",
    "end": "899680"
  },
  {
    "text": "definitions Running On Any Given cluster um so a task is just a way of deploying",
    "start": "899680",
    "end": "905120"
  },
  {
    "text": "the containers that you want to run together if your if your application requires a couple of containers to always be on the same host and have that",
    "start": "905120",
    "end": "912440"
  },
  {
    "text": "um communication um then a task definition uh is very intuitive you can also have a task definition with a",
    "start": "912440",
    "end": "918240"
  },
  {
    "text": "single container and that's a very common approach and that's what we'll be showing later on services are a higher level construct",
    "start": "918240",
    "end": "925360"
  },
  {
    "text": "than a task and so a service allows you to to Define um how many of a specific",
    "start": "925360",
    "end": "930519"
  },
  {
    "text": "tasks should be running on any given instance or I'm sorry across the cluster actually so we have an API for creating",
    "start": "930519",
    "end": "937440"
  },
  {
    "text": "and interacting with Services you can tell it I need five tasks running continuously and the service schedule will find a place on the cluster to keep",
    "start": "937440",
    "end": "944680"
  },
  {
    "text": "all of those running um so Services there's an API for interacting with them",
    "start": "944680",
    "end": "950079"
  },
  {
    "text": "we've also we also have a service scheduler which handles the logic and is what's actually doing the work when you make the API call to the service API um",
    "start": "950079",
    "end": "958279"
  },
  {
    "text": "but we'll talk about more I guess some other cool stuff about Services uh like I said it will find um a place to put",
    "start": "958279",
    "end": "963519"
  },
  {
    "text": "all the tasks that you want to keep running on your cluster it will replace failed tasks um it finds places to run",
    "start": "963519",
    "end": "969000"
  },
  {
    "text": "new tasks um it can help you hook into an elastic load balancer um very useful construct in",
    "start": "969000",
    "end": "976040"
  },
  {
    "text": "ECS so the next challenge is monitoring and I think that everyone really loves monitoring it's always hugely important",
    "start": "976560",
    "end": "982160"
  },
  {
    "text": "especially if you're infrastructure is very Dynamic um and that is no different with microservices so what are the approaches you can possibly take um to",
    "start": "982160",
    "end": "988360"
  },
  {
    "text": "handle this number one um is ECS provides some default cloudwatch metrics that provide",
    "start": "988360",
    "end": "995000"
  },
  {
    "text": "metrics for um both your clusters and your services so we provide both cluster level aggregate metrics um and that",
    "start": "995000",
    "end": "1001639"
  },
  {
    "text": "means across the underlying instances in the cluster and then service level aggregate metrics which means across the",
    "start": "1001639",
    "end": "1007040"
  },
  {
    "text": "tasks running at a service um and then we also provide both uh reservation so",
    "start": "1007040",
    "end": "1012279"
  },
  {
    "text": "that's um how much memory is reserved for a container to use and then utilization which is how much it's",
    "start": "1012279",
    "end": "1017399"
  },
  {
    "text": "currently consuming and so um these are visible through the console through the standard uh",
    "start": "1017399",
    "end": "1022959"
  },
  {
    "text": "cloudwatch graphs um but I I think one thing to clarify on is utilization versus reservation because I usually get",
    "start": "1022959",
    "end": "1028438"
  },
  {
    "text": "a lot of questions about that so um when you run a container you specify how much memory is reserved for it uh so if you",
    "start": "1028439",
    "end": "1034600"
  },
  {
    "text": "have three containers and you've said that each one of them need 100 megabytes you would have 300 megabytes of reservation across your cluster however",
    "start": "1034600",
    "end": "1040880"
  },
  {
    "text": "each one might only be using 20% of the memory at any given time so that's uh current utilization and these are both",
    "start": "1040880",
    "end": "1046959"
  },
  {
    "text": "useful um for kind of understanding like how much is placed across your cluster and what is your current utilization",
    "start": "1046959",
    "end": "1052080"
  },
  {
    "text": "they give you different ways of um basically alerting on what kind of utilization you have across your",
    "start": "1052080",
    "end": "1057919"
  },
  {
    "text": "cluster um and this is not unique to ECS or containers but I think it's awesome with cloudwatch you can monitor",
    "start": "1057919",
    "end": "1063440"
  },
  {
    "text": "additional metrics such as something like dis space which we don't tell you by default um using the cloudwatch monitoring scripts and so you could run",
    "start": "1063440",
    "end": "1069919"
  },
  {
    "text": "this on each container instance in your cluster for example um cloudwatch is pretty cool um but I'd also like to",
    "start": "1069919",
    "end": "1077320"
  },
  {
    "text": "start introducing some cool stuff in the partner ecosystem and data dog is one of our favorite Monitoring Solutions out there because it's really purpose-built",
    "start": "1077320",
    "end": "1083360"
  },
  {
    "text": "to monitor um highly Dynamic infrastructure uh and that includes containers so the granularity of",
    "start": "1083360",
    "end": "1090679"
  },
  {
    "text": "monitoring provided by data dog I think is really impressive um some of the stuff that I like uh first of all is they have official ECS integration so",
    "start": "1090679",
    "end": "1097320"
  },
  {
    "text": "what that means is they have uh documentation and guidance on how you actually use data dog with ECS uh which is very helpful",
    "start": "1097320",
    "end": "1104080"
  },
  {
    "text": "um but they also provide like a lot of custom ECS metrics like how many tasks are running how are pending um they",
    "start": "1104080",
    "end": "1109840"
  },
  {
    "text": "track task and container life cycles um it's also cool that when ECS brings new containers online um data dog",
    "start": "1109840",
    "end": "1116280"
  },
  {
    "text": "automatically can begin tracking those metrics um and it can take note of what's running inside of those",
    "start": "1116280",
    "end": "1121440"
  },
  {
    "text": "containers as well so Docker metrics metrics can be viewed individually uh in Dynamic groups um or they can be",
    "start": "1121440",
    "end": "1128880"
  },
  {
    "text": "correlated with metrics from like the rest of your infrastructure so a bunch of different views on what's actually going on um and as I mentioned before",
    "start": "1128880",
    "end": "1134880"
  },
  {
    "text": "data dog is here with us and we can talk to them uh after in this in the Q&A session",
    "start": "1134880",
    "end": "1140720"
  },
  {
    "text": "another good monitoring option that we really enjoy is CISD cloud and they're able to extract metadata from Docker and",
    "start": "1141000",
    "end": "1146600"
  },
  {
    "text": "ECS and they can from that metadata then like infer The Logical structure of what your microservices application looks",
    "start": "1146600",
    "end": "1152640"
  },
  {
    "text": "like so um this information is then combined with what they call container vision technology um and that really",
    "start": "1152640",
    "end": "1159559"
  },
  {
    "text": "makes them able to inspect applications running inside containers without any additional um agents or anything running",
    "start": "1159559",
    "end": "1165039"
  },
  {
    "text": "inside the container so it can also give you the ability to um view like a",
    "start": "1165039",
    "end": "1170280"
  },
  {
    "text": "historical replay of your containers life cycles which is very handy for troubleshooting um and I think just in",
    "start": "1170280",
    "end": "1176720"
  },
  {
    "text": "general um you really get like a nice degree of visibility from both an infrastructure and an application",
    "start": "1176720",
    "end": "1182159"
  },
  {
    "text": "standpoint so you can visualize that logical topology of your application um",
    "start": "1182159",
    "end": "1187280"
  },
  {
    "text": "or you can show the physical hierarchy the grouping of containers um grouping of containers into tasks and services so",
    "start": "1187280",
    "end": "1193360"
  },
  {
    "text": "on um so Cy another favorite of ours for monitoring and troubleshooting",
    "start": "1193360",
    "end": "1200280"
  },
  {
    "text": "um let's talk about service Discovery this is where it gets um quite interesting I think this is a key component of most",
    "start": "1201000",
    "end": "1207480"
  },
  {
    "text": "distributed systems um and service oriented architectures so back before cloud computing you probably had it was",
    "start": "1207480",
    "end": "1213039"
  },
  {
    "text": "you know much more acceptable to have statically addressed resources so you probably knew where your database server was you know maybe physically um it had",
    "start": "1213039",
    "end": "1220000"
  },
  {
    "text": "an IP address that was static uh it had a reservation in your DNS system uh if any of that changed you probably had a",
    "start": "1220000",
    "end": "1225559"
  },
  {
    "text": "problem you might be picking up the phone to call somebody and and yell at them a little bit um however now we kind of accept that as",
    "start": "1225559",
    "end": "1230720"
  },
  {
    "text": "a as a change or as a constant right so change is a constant uh Cloud architecture is highly Dynamic and this is especially applicable to Containers",
    "start": "1230720",
    "end": "1237159"
  },
  {
    "text": "because uh they frequently spin up they live on a certain host with a certain IP and a and a port um and they live for a",
    "start": "1237159",
    "end": "1243480"
  },
  {
    "text": "short amount of time um and then they might get spun down and then launched another another host with a different IP",
    "start": "1243480",
    "end": "1248760"
  },
  {
    "text": "and a different port um and you have to somehow cope with that your application has to somehow be okay with this Dynamic rate of",
    "start": "1248760",
    "end": "1254440"
  },
  {
    "text": "change um so how can we make our applications okay with this um and one option is you can abstract these Dynamic",
    "start": "1254440",
    "end": "1260880"
  },
  {
    "text": "changes behind you know a relatively static endpoint by using an elastic load balancer and a c name um in this case",
    "start": "1260880",
    "end": "1266760"
  },
  {
    "text": "you'd probably use a single elastic load balancer per service um but you can of course use Els",
    "start": "1266760",
    "end": "1273400"
  },
  {
    "text": "in a private subnet right so if you want them to front you know backend only services but in this case we'd recommend",
    "start": "1273400",
    "end": "1281320"
  },
  {
    "text": "using a Route 53 private hostage zone so those C names that are mapped to your elbs are only resolvable from within your VPC",
    "start": "1281320",
    "end": "1288760"
  },
  {
    "text": "um the thing about the E approach though is it's not necessarily the most dynamic because if you're using this approach",
    "start": "1288760",
    "end": "1294400"
  },
  {
    "text": "you're probably still hardcoding some cames into your application somewhere um and if you get to a point where you've exceeded you know a couple of VBS enough",
    "start": "1294400",
    "end": "1301480"
  },
  {
    "text": "to fit on a Post-It note you might start considering something more purpose-built uh for container service",
    "start": "1301480",
    "end": "1306760"
  },
  {
    "text": "Discovery and so one option that we like a lot is weave um it's super intuitive and it provides a DNS interface for",
    "start": "1306760",
    "end": "1313559"
  },
  {
    "text": "cross host cross host container communication um and I think a quick summary of how this works is it allows",
    "start": "1313559",
    "end": "1319679"
  },
  {
    "text": "you to reference containers by their name uh like you would locally with Docker links across the entire cluster",
    "start": "1319679",
    "end": "1325600"
  },
  {
    "text": "and that's basically it so a very easy concept to understand it's very transparent in practice um a little bit",
    "start": "1325600",
    "end": "1331760"
  },
  {
    "text": "difficult to demo because of that but it's uh it's a great solution and we have a lot of customers that are enjoying using this so how it actually",
    "start": "1331760",
    "end": "1338640"
  },
  {
    "text": "works um it's made up of a few different components that all run as containers across your cluster one is the weave",
    "start": "1338640",
    "end": "1344400"
  },
  {
    "text": "proxy which sits between the ECS agent and the docker Damon and that inter steps communication between the two um",
    "start": "1344400",
    "end": "1350840"
  },
  {
    "text": "so the proxy automatically attaches containers to The Weave Network um and it assigns them an IP and a net mask and all that cool information when they're",
    "start": "1350840",
    "end": "1356880"
  },
  {
    "text": "started up and then another component is weave net which implements an overlay Network between Docker hosts across the",
    "start": "1356880",
    "end": "1363640"
  },
  {
    "text": "cluster and then it uses a gossip protocol to share topology information across the cluster um so a really cool",
    "start": "1363640",
    "end": "1370799"
  },
  {
    "text": "thing about weave even though it's a an overlay network is that it's actually very very fast very low latency um",
    "start": "1370799",
    "end": "1376080"
  },
  {
    "text": "because it allows the packets from your application to go directly to the kernel instead of through another container in",
    "start": "1376080",
    "end": "1381960"
  },
  {
    "text": "usace um the weet router basically shares information with the Linux",
    "start": "1381960",
    "end": "1387279"
  },
  {
    "text": "Kernel's open V switch module and tells it how to process packets so the um so the application that you're uh running",
    "start": "1387279",
    "end": "1392919"
  },
  {
    "text": "in a container can just make uh calls directly to the kernel and it doesn't have to Route requests through another container adding more latency so that's",
    "start": "1392919",
    "end": "1398440"
  },
  {
    "text": "really awesome um and we'll demo weave at the end as well so another option is sometimes you",
    "start": "1398440",
    "end": "1405120"
  },
  {
    "text": "know you might want a key Value Store sometimes that's the right option if you have more um configuration data you want to provide to your services and this is",
    "start": "1405120",
    "end": "1411400"
  },
  {
    "text": "really the principle that um console by Hashi Corp is built upon um and we actually implemented this on our",
    "start": "1411400",
    "end": "1416880"
  },
  {
    "text": "reinvent boot camp last year um very very popular it works well um there's kind of a lot of things going on a lot",
    "start": "1416880",
    "end": "1422760"
  },
  {
    "text": "of different components that make it truly Dynamics so we'll look at the architecture in just a second um but a",
    "start": "1422760",
    "end": "1427840"
  },
  {
    "text": "quick summary of how it works is it basically maintains a cluster of um servers and clients that communicate",
    "start": "1427840",
    "end": "1433320"
  },
  {
    "text": "over surf um which is Hashi corp's own custom raft implementation so um I'd",
    "start": "1433320",
    "end": "1438600"
  },
  {
    "text": "love to talk about raft that you know and surf ex extensively here but um you guys should go take a look at that on Hashi Corps documentation page because",
    "start": "1438600",
    "end": "1445200"
  },
  {
    "text": "they have like a pretty sweet zombie apocalypse analogy which um I found endlessly amusing so um take a look at",
    "start": "1445200",
    "end": "1450720"
  },
  {
    "text": "that if you want to know more but essentially it allows you to correlate information like host names IPS ports and whatever other um configuration",
    "start": "1450720",
    "end": "1456840"
  },
  {
    "text": "information you might need to pass to your services running um in containers so looking at the",
    "start": "1456840",
    "end": "1462720"
  },
  {
    "text": "architecture um there's a few moving parts that are required to make this really Dynamic so on each host you need",
    "start": "1462720",
    "end": "1468559"
  },
  {
    "text": "the console server um or the client so the host partakes in the cluster you can run a a collection of three five or",
    "start": "1468559",
    "end": "1475520"
  },
  {
    "text": "seven hosts or I'm sorry servers um and then you also need something called the",
    "start": "1475520",
    "end": "1480600"
  },
  {
    "text": "registrator container and that listens for Docker events and then communicates them to the rest of the cluster it updates that information in the key",
    "start": "1480600",
    "end": "1486039"
  },
  {
    "text": "Value Store um and then inside your uh your processes optionally you can have",
    "start": "1486039",
    "end": "1491559"
  },
  {
    "text": "something called EnV console which is a wrapper process um it's a like a supervisor inside your container and",
    "start": "1491559",
    "end": "1497919"
  },
  {
    "text": "this is that if you're monitoring a particular key value pair for your application you know something important like where is my database um EnV console",
    "start": "1497919",
    "end": "1505000"
  },
  {
    "text": "can reload the environment variables and then restart the process inside the container instead of having to have the whole container restart to get new con",
    "start": "1505000",
    "end": "1511559"
  },
  {
    "text": "um configuration",
    "start": "1511559",
    "end": "1514520"
  },
  {
    "text": "information um and then finally let's talk about deployment I think deployment um really covers a lot of different",
    "start": "1522080",
    "end": "1527840"
  },
  {
    "text": "topics so this can be things like scheduling Um this can be things like um",
    "start": "1527840",
    "end": "1532919"
  },
  {
    "text": "continuous integration and continuous deployment Um this can be managing build pipelines um there's a lot of different",
    "start": "1532919",
    "end": "1538919"
  },
  {
    "text": "things that go into deployment and so um we have a couple of like I mentioned two",
    "start": "1538919",
    "end": "1544320"
  },
  {
    "text": "schedulers that we've built that are integrated with ECS um like I said you can write more if you want to if these",
    "start": "1544320",
    "end": "1550559"
  },
  {
    "text": "do not meet your business requirements but the first one is a batch job scheduler um which is really built to",
    "start": "1550559",
    "end": "1556279"
  },
  {
    "text": "run short tasks so something you will just throw at the cluster have that job complete free up the resources for the",
    "start": "1556279",
    "end": "1562000"
  },
  {
    "text": "next batch job um a really natural fit for containers as well um I don't think",
    "start": "1562000",
    "end": "1567240"
  },
  {
    "text": "I explained this well enough though so containers I'm sorry schedulers work by querying the state manager and so they identify a place um where containers",
    "start": "1567240",
    "end": "1574279"
  },
  {
    "text": "should be placed um by basically comparing the application resource requirements and then the availability",
    "start": "1574279",
    "end": "1579880"
  },
  {
    "text": "um across the rest of the cluster and so um our service scheduler which is for long running apps um will also take",
    "start": "1579880",
    "end": "1586080"
  },
  {
    "text": "things into consideration like uh availab requirements like should this be placed across multiple",
    "start": "1586080",
    "end": "1591120"
  },
  {
    "text": "azs um it should understand like how containers should be grouped together should they be distributed um Etc and",
    "start": "1591120",
    "end": "1597679"
  },
  {
    "text": "we're continuing to add uh features and uh new support to the service scheduler to um support new deployment uh models",
    "start": "1597679",
    "end": "1604399"
  },
  {
    "text": "and we'll talk about a couple of those here so some other cool stuff about the service scheduler it gives you the",
    "start": "1604399",
    "end": "1610440"
  },
  {
    "text": "ability to associate an elb to your service which I think is very very helpful so when you correlate that elb",
    "start": "1610440",
    "end": "1615679"
  },
  {
    "text": "to your service and you scale up your service service it will automatically check in uh new tasks to the elb and you",
    "start": "1615679",
    "end": "1622000"
  },
  {
    "text": "don't have to worry about that yourself so very helpful um it will also try to gracefully drain connections when it's bringing down other tasks in this",
    "start": "1622000",
    "end": "1628799"
  },
  {
    "text": "service um so you can also use all the standard elb features so things like",
    "start": "1628799",
    "end": "1633880"
  },
  {
    "text": "health checks and Grace periods and configure application just like you would if it was running on an ec2 instance behind the elb except for in",
    "start": "1633880",
    "end": "1640000"
  },
  {
    "text": "the console it does look a little bit weird because it doesn't show the instances is being registered with the elb that's all handled through the",
    "start": "1640000",
    "end": "1645440"
  },
  {
    "text": "service schedule and you'll see that in the ECS console in just a little bit",
    "start": "1645440",
    "end": "1650158"
  },
  {
    "text": "um and so this is a relatively new feature is the ability to manage deployments with the service scheduler um and so the parameters we",
    "start": "1650840",
    "end": "1658600"
  },
  {
    "text": "introduced um to control deployments are minimum healthy percent which represents the minimum number of running tasks",
    "start": "1658600",
    "end": "1665120"
  },
  {
    "text": "during a deployment or an update of that service and then the maximum percent which represents an upper bound on the",
    "start": "1665120",
    "end": "1670880"
  },
  {
    "text": "total number of running tasks during a deployment so it really enables you to Define like the deployment batch size so",
    "start": "1670880",
    "end": "1677279"
  },
  {
    "text": "let's visualize that a a little bit it's a kind of a difficult Concept in practice or uh in theory in practice not",
    "start": "1677279",
    "end": "1683200"
  },
  {
    "text": "so much but so here's a more concrete example right so it's essentially a rolling deployment that's the way you should picture it so basically make sure",
    "start": "1683200",
    "end": "1690080"
  },
  {
    "text": "my service doesn't grow past its current size during a deployment and kill it most half of the tasks that are running",
    "start": "1690080",
    "end": "1695559"
  },
  {
    "text": "at any given time in order to um roll out a new version of my service um so this for example we can kill at most 50%",
    "start": "1695559",
    "end": "1702159"
  },
  {
    "text": "we'll only drop two of them out until two new ones come online um and we'll keep two of the old running um before",
    "start": "1702159",
    "end": "1708120"
  },
  {
    "text": "before we bring up two of the new ones so rolling deployments are one option another option you can have is basically",
    "start": "1708120",
    "end": "1714320"
  },
  {
    "text": "like a blue green style deployment I think is the best way to think about this um and this option here where the",
    "start": "1714320",
    "end": "1719720"
  },
  {
    "text": "minimum healthy percent is 100% And the maximum percent is 200% says add a whole",
    "start": "1719720",
    "end": "1725039"
  },
  {
    "text": "new batch of containers alongside my existing set um and then kill the old set when the new one is actually ready",
    "start": "1725039",
    "end": "1731279"
  },
  {
    "text": "to go and responding to health checks right um so you might use this option if you can't reduce service capacity during",
    "start": "1731279",
    "end": "1737159"
  },
  {
    "text": "the deployment or like space on your cluster is not really a concern where you just want the new ones up and",
    "start": "1737159",
    "end": "1742480"
  },
  {
    "text": "running in the quickest way possible um and then the last way of of really um doing deployments I think is kind of",
    "start": "1742480",
    "end": "1748960"
  },
  {
    "text": "like a classic blue green deployment um and this is very similar if you use elastic beant stock or a regular load or",
    "start": "1748960",
    "end": "1755600"
  },
  {
    "text": "just you know ec2 behind elbs basically creating a whole new service with a new task running behind it with its own elb",
    "start": "1755600",
    "end": "1762440"
  },
  {
    "text": "um and you have to be using a c name for this of course um but basically um you could use rout 53 weighted routing",
    "start": "1762440",
    "end": "1769519"
  },
  {
    "text": "policies and gradually start waiting traffic to the new service um you'd watch for errors or anything like a performance regression um and eventually",
    "start": "1769519",
    "end": "1776320"
  },
  {
    "text": "fully failed traffic over to the new",
    "start": "1776320",
    "end": "1779919"
  },
  {
    "text": "service and so the other side of deployments besides worrying about schedulers and how you're actually going to roll things out is probably managing",
    "start": "1783000",
    "end": "1789240"
  },
  {
    "text": "multiple deployment pipelines each micr service will have its own um build pipeline it will have",
    "start": "1789240",
    "end": "1795080"
  },
  {
    "text": "its own test stage its own production stage um and you have to manage all this and it become it becomes very very",
    "start": "1795080",
    "end": "1800440"
  },
  {
    "text": "tedious to do it your own if you're in there updating containers yourself and you're editing task definitions to refer",
    "start": "1800440",
    "end": "1806480"
  },
  {
    "text": "to those new containers manually um editing a whole bunch of Json you're doing that multiple times a day it's going to eat up a lot of Cycles um it",
    "start": "1806480",
    "end": "1813320"
  },
  {
    "text": "will really limit your ability to do things um in a dynamic manner um so we really support um using one of our cicd",
    "start": "1813320",
    "end": "1820200"
  },
  {
    "text": "partners for deployments um we have a number of good options here all of these cicd partner Partners can do deployments",
    "start": "1820200",
    "end": "1826559"
  },
  {
    "text": "directly to ECS which is really awesome they can automatically rebuild task definitions based on you know new",
    "start": "1826559",
    "end": "1832440"
  },
  {
    "text": "versions of your containers um so Circle CI Cloud bees code ship shippable Solano",
    "start": "1832440",
    "end": "1838360"
  },
  {
    "text": "Labs worker all of these um support ECS directly which is great um so for this demo we're going to focus on um one of",
    "start": "1838360",
    "end": "1844440"
  },
  {
    "text": "these which is shippable and um let's summarize shippable real quick let's take a look at this",
    "start": "1844440",
    "end": "1851679"
  },
  {
    "text": "architecture so shippable I would summarize as a you know hosted Cloud platform um for doing continuous",
    "start": "1852159",
    "end": "1858559"
  },
  {
    "text": "integration and continuous deployment um so that includes things like testing your code that lives in",
    "start": "1858559",
    "end": "1863799"
  },
  {
    "text": "GitHub or bitbucket um and then creating and running Amazon ECS services and",
    "start": "1863799",
    "end": "1869399"
  },
  {
    "text": "tasks on your ECS clusters from within the shippable console um so shippable can keep your",
    "start": "1869399",
    "end": "1875440"
  },
  {
    "text": "Docker images in either Docker Hub or Amazon ECR which is our own Docker",
    "start": "1875440",
    "end": "1880639"
  },
  {
    "text": "registry um and then it can take those and deploy them into ECS so this is really great because as I mentioned it",
    "start": "1880639",
    "end": "1886200"
  },
  {
    "text": "it prevents you from having to do any manual updates of things like task definitions it will automatically configure your services for you um and",
    "start": "1886200",
    "end": "1893600"
  },
  {
    "text": "it will take that latest image information based on a successful CI build and then either automatically",
    "start": "1893600",
    "end": "1899159"
  },
  {
    "text": "deploy it or uh notify you and give you a single single click deploy option which is great um you can deploy to",
    "start": "1899159",
    "end": "1905279"
  },
  {
    "text": "multiple stages in your build pipeline so you can have a test cluster and a production cluster um and it's really simple through the UI so let's get into",
    "start": "1905279",
    "end": "1912840"
  },
  {
    "text": "the demo the real interesting stuff",
    "start": "1912840",
    "end": "1917080"
  },
  {
    "text": "so the first part about this demo um is that we have a running ECS cluster it's going to have two Services running um",
    "start": "1919320",
    "end": "1926320"
  },
  {
    "text": "one of them is a front-end application that's written in flask so a little python application um it's basically a",
    "start": "1926320",
    "end": "1932039"
  },
  {
    "text": "hit counter uh and the backend application is a uh is a reddis container it's a redus service and so",
    "start": "1932039",
    "end": "1937480"
  },
  {
    "text": "we're just using that to illustrate the communication between the two uh also of note on this cluster we have weave",
    "start": "1937480",
    "end": "1944080"
  },
  {
    "text": "service Discovery running and that's how the containers are actually communicating they're resolving each other's name um through",
    "start": "1944080",
    "end": "1949399"
  },
  {
    "text": "weave and so what I'll do is I'll kick off a build by committing some code to a GitHub repository uh that shippable is",
    "start": "1949399",
    "end": "1955559"
  },
  {
    "text": "actually watching and so shippable will be notified that there's new code in the master branch of my GitHub",
    "start": "1955559",
    "end": "1961120"
  },
  {
    "text": "repository um that code will be brought into the shippable build service they",
    "start": "1961120",
    "end": "1966480"
  },
  {
    "text": "will begin running tests and doing builds um based on some information I've put into the",
    "start": "1966480",
    "end": "1971639"
  },
  {
    "text": "repository shippable this adorable little II will then drop that container off into ECR where I have version",
    "start": "1971639",
    "end": "1977880"
  },
  {
    "text": "artifacts of all the previous builds that I've done and it will refer to the latest version um and create a new task",
    "start": "1977880",
    "end": "1984279"
  },
  {
    "text": "definition and create a a service and attach it to an elastic load balancer from this new",
    "start": "1984279",
    "end": "1989720"
  },
  {
    "text": "container so let's take a look and hope this works on my",
    "start": "1989720",
    "end": "1995519"
  },
  {
    "text": "Wii should I upgrade to elcy tan right now probably not I I'll avoid",
    "start": "1995519",
    "end": "2003200"
  },
  {
    "text": "that oh I can't this isn't good I can't see this um",
    "start": "2003200",
    "end": "2009759"
  },
  {
    "text": "okay let's see if I can make this work from over",
    "start": "2010880",
    "end": "2015559"
  },
  {
    "text": "here cool so we have Chrome here um first thing",
    "start": "2019840",
    "end": "2026679"
  },
  {
    "text": "we're going to do is we are going to man okay let's look at ec2 container",
    "start": "2026679",
    "end": "2034679"
  },
  {
    "text": "service I have a cluster running here that I spun up with Cloud information earlier hence the uh crazy name here um",
    "start": "2034679",
    "end": "2039960"
  },
  {
    "text": "it has three container instances running in it and it has four tasks running um those four tasks are dist distributed",
    "start": "2039960",
    "end": "2045919"
  },
  {
    "text": "across two different services so that's important to note right now um what I would actually like to do first is go",
    "start": "2045919",
    "end": "2052520"
  },
  {
    "text": "over to my terminal um let's go ahead and clear this let's go over here go and clear",
    "start": "2052520",
    "end": "2060599"
  },
  {
    "text": "this so I'm in my repository right now um let's go ahead and make a change to",
    "start": "2060599",
    "end": "2066200"
  },
  {
    "text": "the application man this is really testing my vision um and so I'll do this like I did",
    "start": "2066200",
    "end": "2073358"
  },
  {
    "text": "earlier we'll change this comment for demo commit right we'll just delete this",
    "start": "2073359",
    "end": "2080158"
  },
  {
    "text": "great cool so we can get d a we can get commit m test",
    "start": "2080159",
    "end": "2089560"
  },
  {
    "text": "commit all right and then we will get push and it is relevant to note",
    "start": "2089560",
    "end": "2098520"
  },
  {
    "text": "that I using my master Branch here because my master branch is what's configured to be watched um in shippable",
    "start": "2098520",
    "end": "2105079"
  },
  {
    "text": "and so what's going to happen is a build is going to be kicked off here and I just want to make sure that we have the possibility of having that finished",
    "start": "2105079",
    "end": "2110920"
  },
  {
    "text": "before um everything else is done being uh set up",
    "start": "2110920",
    "end": "2116200"
  },
  {
    "text": "here so I have my two Services um I have my front end hit counter application",
    "start": "2116200",
    "end": "2122560"
  },
  {
    "text": "let's take a look at this so we can see that it has three different tasks running it's relevant note here that the",
    "start": "2122560",
    "end": "2129320"
  },
  {
    "text": "application is named hit counter and then back on the cluster again let's look at the other service that I have um",
    "start": "2129320",
    "end": "2136520"
  },
  {
    "text": "we have this Rish service and it's interesting to note",
    "start": "2136520",
    "end": "2142400"
  },
  {
    "text": "that its name is reddis so the hit counter application I should have showed you",
    "start": "2142400",
    "end": "2148640"
  },
  {
    "text": "this first um the hit counter application here",
    "start": "2148640",
    "end": "2154079"
  },
  {
    "text": "very simple python application with a little bit of CSS around it the important thing to look at is this line here so we are building the redus",
    "start": "2159599",
    "end": "2166000"
  },
  {
    "text": "connection string and we are defining the host as just redus which as you saw earlier is the name of the container",
    "start": "2166000",
    "end": "2171200"
  },
  {
    "text": "running in the service running in the redus service so let's real quick look at the",
    "start": "2171200",
    "end": "2176280"
  },
  {
    "text": "front end application see how it works",
    "start": "2176280",
    "end": "2182838"
  },
  {
    "text": "pull up my load balancer in the ec2 console",
    "start": "2189480",
    "end": "2194560"
  },
  {
    "text": "here we'll grab this a",
    "start": "2194599",
    "end": "2198680"
  },
  {
    "text": "record so we've got this little application as I mentioned just a little hit counter um so how is it resolving",
    "start": "2201280",
    "end": "2208680"
  },
  {
    "text": "reddis let's take a look at um on an instance here how that works so we can",
    "start": "2208680",
    "end": "2215920"
  },
  {
    "text": "go to demo nice little for my ECS instance quick Docker PS so we can see",
    "start": "2215920",
    "end": "2221160"
  },
  {
    "text": "what's running on this can everyone see that is that okay on the terminal cool all right that looks good um we have a",
    "start": "2221160",
    "end": "2226280"
  },
  {
    "text": "few different weave containers running so we have um we have the weave proxy we have the weave net container running we",
    "start": "2226280",
    "end": "2231400"
  },
  {
    "text": "also have weave scope which we'll talk about in just a little bit um but we can see that we have",
    "start": "2231400",
    "end": "2238599"
  },
  {
    "text": "um both the backend data container and the front end application running on this particular instance one thing we",
    "start": "2238960",
    "end": "2245040"
  },
  {
    "text": "should do is Let's Tell Docker to use weave in this session here and then what we can do is we can",
    "start": "2245040",
    "end": "2251680"
  },
  {
    "text": "run a dig command so if this is confusing we're running a dig command inside of a container so it's going to",
    "start": "2251680",
    "end": "2257079"
  },
  {
    "text": "be using weave for service Discovery underneath uh we're looking up the hit counter application this is just completely unqualified domain lookup um",
    "start": "2257079",
    "end": "2264480"
  },
  {
    "text": "and it's going to return the results to the console here so I hit enter and we can see that we are given the three IP",
    "start": "2264480",
    "end": "2271160"
  },
  {
    "text": "addresses of the nodes where the hit counter application lives right and so we can run it again and we can see that",
    "start": "2271160",
    "end": "2276640"
  },
  {
    "text": "we get the same subset of IP addresses just in a slightly different order actually it's in the same order this",
    "start": "2276640",
    "end": "2282119"
  },
  {
    "text": "time because it's uh round RIT um let's get to do a different set here cool so",
    "start": "2282119",
    "end": "2288839"
  },
  {
    "text": "it's in a different order this time so that's interesting right um so what else we can do is take a look at shippable",
    "start": "2288839",
    "end": "2295400"
  },
  {
    "text": "here um and let's look at the application we're going to we're building with shippable so another",
    "start": "2295400",
    "end": "2300839"
  },
  {
    "text": "python flask application we're doing much the same here we're building the uh reddis",
    "start": "2300839",
    "end": "2306440"
  },
  {
    "text": "connection string which is on line 26 here we're pointing out the redis host is just reddis and we don't really care",
    "start": "2306440",
    "end": "2312800"
  },
  {
    "text": "where this service drops into our cluster because we know it's going to be able to reach redus by just its name because of weave service Discovery",
    "start": "2312800",
    "end": "2320040"
  },
  {
    "text": "underneath so let's see if uh shippable has kicked off a build",
    "start": "2320040",
    "end": "2325400"
  },
  {
    "text": "yet um I think I have a build in progress here and we can see a bunch of",
    "start": "2325400",
    "end": "2331160"
  },
  {
    "text": "information maybe if you're in the back I'm not so sure uh so what's happening right so shippable uh spinning up some",
    "start": "2331160",
    "end": "2337440"
  },
  {
    "text": "nodes on the back end to actually do this build for me um it's pulling um an image some some base images um it's",
    "start": "2337440",
    "end": "2344599"
  },
  {
    "text": "booting a container it's syncing my git repository locally and building uh the",
    "start": "2344599",
    "end": "2349800"
  },
  {
    "text": "container and we can see that um let's see where is this so the post C option",
    "start": "2349800",
    "end": "2355960"
  },
  {
    "text": "here where it's going to take that build and push it off to elastic container registry or ec2 container registry",
    "start": "2355960",
    "end": "2361000"
  },
  {
    "text": "rather um you could use dockerhub as well here um so where is it getting this configuration information if we look",
    "start": "2361000",
    "end": "2367560"
  },
  {
    "text": "back in the GitHub repository um for this application we're building with shippable there's a couple",
    "start": "2367560",
    "end": "2373640"
  },
  {
    "text": "of things right so it needs a Docker file obviously it needs to understand how to build that container first of all",
    "start": "2373640",
    "end": "2379119"
  },
  {
    "text": "so we're saying we're starting with this default python uh base image um and we're running a command inside of it",
    "start": "2379119",
    "end": "2385319"
  },
  {
    "text": "which is basically just gunicorn just a standard wisy web server for uh for flask we're telling it what port to",
    "start": "2385319",
    "end": "2390680"
  },
  {
    "text": "listen on um so that's important but also important is um requirements. text",
    "start": "2390680",
    "end": "2397400"
  },
  {
    "text": "so this is something that ship will also pull in this is used for when you're building a python application you have",
    "start": "2397400",
    "end": "2402480"
  },
  {
    "text": "some pit packages you want to pull in in the build it will grab all of these things and then finally the most",
    "start": "2402480",
    "end": "2409040"
  },
  {
    "text": "important part is the shippable yml which is hope you guys can see",
    "start": "2409040",
    "end": "2415200"
  },
  {
    "text": "this um here I am specifying to um build",
    "start": "2415200",
    "end": "2420280"
  },
  {
    "text": "containers tag them a certain way right so tag them according to my ECR repository and then push them up to my",
    "start": "2420280",
    "end": "2425680"
  },
  {
    "text": "ECR repository use using this branch. build number um naming scheme right so",
    "start": "2425680",
    "end": "2430720"
  },
  {
    "text": "we should see the latest build having the same Branch name so that should be master and the uh build number should be",
    "start": "2430720",
    "end": "2436480"
  },
  {
    "text": "the latest build according to how many builds I've done right so I think it was like 15 when we looked at shippable",
    "start": "2436480",
    "end": "2442119"
  },
  {
    "text": "last so it has a push great um other",
    "start": "2442119",
    "end": "2447839"
  },
  {
    "text": "interesting things here in shippable you also configure a pipeline and this kind of tells you what's going on here so our",
    "start": "2447839",
    "end": "2454160"
  },
  {
    "text": "pipeline we can configure the destination environment so that is AWS uh ECS here that's just what I've named",
    "start": "2454160",
    "end": "2460640"
  },
  {
    "text": "it we're pointing it towards the cluster that I had spun up earlier um let's see what else is",
    "start": "2460640",
    "end": "2467119"
  },
  {
    "text": "important um if we look at this deployment configuration we're also able to specify things like what port uh",
    "start": "2467119",
    "end": "2474359"
  },
  {
    "text": "should it be listening on should it be using an elastic load balancer um so I've specified to hook it up to this",
    "start": "2474359",
    "end": "2479960"
  },
  {
    "text": "elastic load balancer here that I spun up with my cloud formation template earlier and so if we go back to the EC",
    "start": "2479960",
    "end": "2487560"
  },
  {
    "text": "cluster we should see a new service running so let's look at the cluster we have a third service running",
    "start": "2487560",
    "end": "2494920"
  },
  {
    "text": "and so let's take a look at this guy we've got a load balancer over here for him",
    "start": "2494920",
    "end": "2502040"
  },
  {
    "text": "um spinning a record to",
    "start": "2502359",
    "end": "2507880"
  },
  {
    "text": "grab and I might be jumping the gun a little bit bit on my my elb health check here um so for the sake of this let's",
    "start": "2514960",
    "end": "2521280"
  },
  {
    "text": "take a look at um that service on the actual",
    "start": "2521280",
    "end": "2526599"
  },
  {
    "text": "instance that is running it oh it stopped that's not",
    "start": "2526599",
    "end": "2532160"
  },
  {
    "text": "good that's the first time that has happened for",
    "start": "2533440",
    "end": "2537960"
  },
  {
    "text": "me cool all right so I can show this in my backup video um we don't have to watch me fumble around with why did this",
    "start": "2538720",
    "end": "2546160"
  },
  {
    "text": "stop but why did it stop what's our event here I'm very",
    "start": "2546160",
    "end": "2551280"
  },
  {
    "text": "curious unhealthy in elb interesting maybe it came up too",
    "start": "2558760",
    "end": "2565160"
  },
  {
    "text": "slowly okay not a problem to troubleshoot here we'll look at the uh the backup video something else wanted to point out is weave scope which is one",
    "start": "2565160",
    "end": "2571319"
  },
  {
    "text": "of my favorite things that weave produces super cool so what's happening here um is they are giving you a",
    "start": "2571319",
    "end": "2576559"
  },
  {
    "text": "representation of all the containers that are running on your cluster and also drawing drawing relationships",
    "start": "2576559",
    "end": "2582200"
  },
  {
    "text": "between these particular containers that are running um so for example when this",
    "start": "2582200",
    "end": "2587319"
  },
  {
    "text": "application stack first stands up there are no lines drawn between any of these containers and as they start interacting",
    "start": "2587319",
    "end": "2592960"
  },
  {
    "text": "together you get lines drawn which is great so it shows you what's happening that was my other service down here that just disappeared because it didn't run",
    "start": "2592960",
    "end": "2599000"
  },
  {
    "text": "successfully but another great thing to do is click on one of these containers and you can see all sorts of interesting information about them so you can see",
    "start": "2599000",
    "end": "2605040"
  },
  {
    "text": "what actual container is running um we we can see um uh how much memory usage it has and",
    "start": "2605040",
    "end": "2611400"
  },
  {
    "text": "we can all do also do cool things like get a shell on it right here so we can drop in and check out the environment",
    "start": "2611400",
    "end": "2616520"
  },
  {
    "text": "details of that particular container so super helpful information with weave scope um you know what let's go because",
    "start": "2616520",
    "end": "2623440"
  },
  {
    "text": "I feel like I have to show this working let's grab my Summit demo video here wonder if I can pull this up on the",
    "start": "2623440",
    "end": "2629559"
  },
  {
    "text": "other page the very end we drop",
    "start": "2629559",
    "end": "2635760"
  },
  {
    "text": "um so my deployment works as of an hour before this",
    "start": "2635760",
    "end": "2643880"
  },
  {
    "text": "presentation um so we click on it we go directly",
    "start": "2643880",
    "end": "2649960"
  },
  {
    "text": "to the service we can click on the link and bring up the new application which",
    "start": "2649960",
    "end": "2656640"
  },
  {
    "text": "is less pretty than the first one anyway so no big deal no Major law here but we enter some sample values and this",
    "start": "2656640",
    "end": "2662520"
  },
  {
    "text": "application communicates with the redest back end so I'm saying enter these values",
    "start": "2662520",
    "end": "2668160"
  },
  {
    "text": "into redus right so great and how can I prove that that actually worked we can go back to weave scope here um and we",
    "start": "2668160",
    "end": "2674040"
  },
  {
    "text": "can take a look at this container and watch it draw relationships between we hit that from the internet and we can",
    "start": "2674040",
    "end": "2680400"
  },
  {
    "text": "see the redus application is drawn a line to the um the signup application so",
    "start": "2680400",
    "end": "2686079"
  },
  {
    "text": "that's a quick summary um a little bit disappointed that it didn't work live but that is why this video exists um and",
    "start": "2686079",
    "end": "2691520"
  },
  {
    "text": "hopefully it communicates the idea of how that should work um I think I did a pretty good job of timing and I think we",
    "start": "2691520",
    "end": "2697599"
  },
  {
    "text": "have probably 15 minutes for uh Q&A and for a little bit of chatting so as I mentioned before myself um devish from",
    "start": "2697599",
    "end": "2704839"
  },
  {
    "text": "shipable and we have Matt from data dog will be up here hanging out um and we'll love to talk to you guys and answer your",
    "start": "2704839",
    "end": "2710760"
  },
  {
    "text": "questions",
    "start": "2710760",
    "end": "2713760"
  }
]