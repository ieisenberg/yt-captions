[
  {
    "start": "0",
    "end": "97000"
  },
  {
    "text": "good morning my name is Tom tenor and this is Rachel Muller and we're from aspect software and we were kind of",
    "start": "260",
    "end": "6210"
  },
  {
    "text": "joking yesterday about what we should say about us and we have 50 years of contact center experience and I don't",
    "start": "6210",
    "end": "13410"
  },
  {
    "text": "know who wants to claim more I mean Thomas 49 so aspects often today we'll",
    "start": "13410",
    "end": "24810"
  },
  {
    "text": "spend a little time talking about aspects software's journey into the cloud and how we used API gateway in",
    "start": "24810",
    "end": "30810"
  },
  {
    "text": "lambda and our experience with those some of the things we've learned some of",
    "start": "30810",
    "end": "35850"
  },
  {
    "text": "the best practices we found some of the help we got I also introduced our Technical Account Manager Hassan's name",
    "start": "35850",
    "end": "43200"
  },
  {
    "text": "is up there but Hassan's been very helpful as well so the one that his name is on the presentation aspect software",
    "start": "43200",
    "end": "50940"
  },
  {
    "text": "is a customer engagement center solutions company and for the over 40 years we've helped companies contact and",
    "start": "50940",
    "end": "60260"
  },
  {
    "text": "contact their customers and in 1973 we",
    "start": "60260",
    "end": "65338"
  },
  {
    "text": "introduced the first automatic call distributor or a CD which really changed the call centers of the time in the 80s",
    "start": "65339",
    "end": "72659"
  },
  {
    "text": "we added dye outbound dialers workforce management software and computer",
    "start": "72659",
    "end": "78150"
  },
  {
    "text": "telephony integration now chances are good that if you made your flight",
    "start": "78150",
    "end": "85080"
  },
  {
    "text": "arrangements to Vegas or you confirmed them that you probably did had some",
    "start": "85080",
    "end": "90299"
  },
  {
    "text": "contact with aspect products behind the scenes",
    "start": "90299",
    "end": "94700"
  },
  {
    "text": "now one of the things with the automatic call distributor those were huge",
    "start": "96960",
    "end": "102910"
  },
  {
    "start": "97000",
    "end": "97000"
  },
  {
    "text": "hardware beasts and they took up lots of space in customer data centers and when",
    "start": "102910",
    "end": "108250"
  },
  {
    "text": "we added workforce management software and the dialers they became very large but just last year we introduced aspect",
    "start": "108250",
    "end": "116800"
  },
  {
    "text": "via which is designed built for the cloud and deployed with Amazon Web",
    "start": "116800",
    "end": "122020"
  },
  {
    "text": "Services some of the features that we have for aspect via our inbound and",
    "start": "122020",
    "end": "128410"
  },
  {
    "text": "outbound multi-channel customer engagement that's for voice chat email",
    "start": "128410",
    "end": "135250"
  },
  {
    "text": "and the channels like that we have skills based routing to get those contacts to the agents who can handle",
    "start": "135250",
    "end": "140830"
  },
  {
    "text": "them there's self-service channels for text and chat and other things and we",
    "start": "140830",
    "end": "147130"
  },
  {
    "text": "have analytics reporting and works with forced management those are some of the features that we have and now that we're",
    "start": "147130",
    "end": "154840"
  },
  {
    "text": "built for the cloud we don't have that same footprint we did with huge stacks",
    "start": "154840",
    "end": "160330"
  },
  {
    "text": "of hardware in the data centers now this is a marketing slide I stole and it's",
    "start": "160330",
    "end": "168220"
  },
  {
    "text": "one of the slides they use to show that we use a number of Amazon Web Services deploy aspect via s3 ec2 elastic load",
    "start": "168220",
    "end": "178390"
  },
  {
    "text": "balancers Kinesis SQS RDS we also we use",
    "start": "178390",
    "end": "185350"
  },
  {
    "text": "a lot of those things for the desktops in the contact centers to connect to our",
    "start": "185350",
    "end": "190930"
  },
  {
    "text": "communications channels we also have the services we provide our NOC but the",
    "start": "190930",
    "end": "196630"
  },
  {
    "text": "point we'll talk about today is the public API s that we provide our customers so they can control monitor",
    "start": "196630",
    "end": "202810"
  },
  {
    "text": "and configure aspect via and how it allows them to engage with their",
    "start": "202810",
    "end": "208299"
  },
  {
    "text": "customers and we did that using API gateway and in lambda",
    "start": "208299",
    "end": "215100"
  },
  {
    "text": "before we get into the meat of the presentation I'm just gonna do a brief history of aspects evolution into the",
    "start": "219489",
    "end": "227269"
  },
  {
    "text": "cloud like many of you aspect",
    "start": "227269",
    "end": "232370"
  },
  {
    "text": "traditionally installed applications in the customer data center and this kind of involved telling the customer hey we",
    "start": "232370",
    "end": "239060"
  },
  {
    "text": "need this much compute this much memory this much storage to make our applications run efficiently and then",
    "start": "239060",
    "end": "245569"
  },
  {
    "text": "the customer would go and procure the necessary hardware from their preferred vendor you know HP IBM etc and as you",
    "start": "245569",
    "end": "254480"
  },
  {
    "text": "can imagine this this meant that there was a quite a varied deployment environment for us and we leveraged",
    "start": "254480",
    "end": "261229"
  },
  {
    "text": "server virtualization from VMware Microsoft as as much as we could to kind of mitigate the variation but we still",
    "start": "261229",
    "end": "267770"
  },
  {
    "text": "had to contend with different OS versions the customers running antivirus software of their choice backup agents",
    "start": "267770",
    "end": "276199"
  },
  {
    "text": "network monitoring software on the same operating systems instances as our applications and then to complicate",
    "start": "276199",
    "end": "282950"
  },
  {
    "text": "matters aspect manufactured its own media servers and those had to be",
    "start": "282950",
    "end": "288289"
  },
  {
    "text": "shipped to the customer site that had to be racked stacked connected configured and this made for a very complex",
    "start": "288289",
    "end": "294410"
  },
  {
    "text": "deployment situation we spent a lot of time writing install scripts and procedures and sending armies of people",
    "start": "294410",
    "end": "301760"
  },
  {
    "text": "on site to make sure that this all went as smoothly as possible and typically the average deployment",
    "start": "301760",
    "end": "308150"
  },
  {
    "text": "took weeks and then sometimes months to occur fast forward to via and one of the",
    "start": "308150",
    "end": "316520"
  },
  {
    "text": "primary requirements was that we deploy in the Amazon Cloud and this opened up",
    "start": "316520",
    "end": "321950"
  },
  {
    "text": "all sorts of possibilities for deployment efficiencies so in the",
    "start": "321950",
    "end": "327710"
  },
  {
    "text": "beginning we mostly took what used to run in virtual machines and move them to ec2 instances but as time has gone on",
    "start": "327710",
    "end": "334880"
  },
  {
    "text": "and opportunities have arisen we've tried to leverage serverless technologies in particular lambda",
    "start": "334880",
    "end": "341060"
  },
  {
    "text": "functions and for those that aren't familiar with lambda it's the service in Amazon where you can take your code",
    "start": "341060",
    "end": "347229"
  },
  {
    "text": "upload it into M and then Amazon takes care of the deploying and the scaling of that",
    "start": "347229",
    "end": "353340"
  },
  {
    "text": "application now this is a snapshot of what our deployments look like today most of the services are running in the",
    "start": "353340",
    "end": "360540"
  },
  {
    "text": "Amazon Cloud but we still have our media servers running outside the cloud but in our own data centers so nothing runs in",
    "start": "360540",
    "end": "368280"
  },
  {
    "text": "the customer premise anymore and now our deployments take hours but we're not",
    "start": "368280",
    "end": "376830"
  },
  {
    "text": "done yet we want to get to continuous delivery in the end and the first thing",
    "start": "376830",
    "end": "381930"
  },
  {
    "text": "we want to do to get down that road is to move our media servers into the Amazon Cloud and then secondly we want",
    "start": "381930",
    "end": "388740"
  },
  {
    "text": "to get out of the business of installing during deployment time so as installs need to become a build artifact and then",
    "start": "388740",
    "end": "395880"
  },
  {
    "text": "it's containers that we will deploy when lambda isn't a good choice and will",
    "start": "395880",
    "end": "402060"
  },
  {
    "text": "leverage ec2 containers and elastic Beanstalk for that purpose so now we can",
    "start": "402060",
    "end": "410730"
  },
  {
    "text": "get sorted into the main theme of the presentation which is about our journey to deploy our first set of rest",
    "start": "410730",
    "end": "417750"
  },
  {
    "text": "endpoints for a spec via as Tom mentioned we have a major requirement in",
    "start": "417750",
    "end": "425700"
  },
  {
    "start": "422000",
    "end": "422000"
  },
  {
    "text": "a spec via to allow our customers to control and monitor via programmatically",
    "start": "425700",
    "end": "431520"
  },
  {
    "text": "and this enables via to better integrate an interface with the customers business",
    "start": "431520",
    "end": "437640"
  },
  {
    "text": "processes but now we had a couple of challenges one was how do you get those",
    "start": "437640",
    "end": "443460"
  },
  {
    "text": "requests into the cloud securely and secondly how do you ensure that those",
    "start": "443460",
    "end": "450090"
  },
  {
    "text": "requests are processed efficiently and that one clients request don't overwhelm those of another we did some",
    "start": "450090",
    "end": "457320"
  },
  {
    "text": "investigation of a number of API gateways and in the end we said along",
    "start": "457320",
    "end": "463290"
  },
  {
    "text": "the Amazon API gateway the Gateway has the ability to perform all sorts of",
    "start": "463290",
    "end": "469110"
  },
  {
    "text": "validation on the request prior to being processed by our end services it can",
    "start": "469110",
    "end": "475080"
  },
  {
    "text": "validate the path the query parameters the post properties",
    "start": "475080",
    "end": "481520"
  },
  {
    "text": "and there's also the ability to do early authentication we have the API gateway",
    "start": "481520",
    "end": "487720"
  },
  {
    "text": "integrated with our own identity management platform and that way any requests that come in that don't have a",
    "start": "487720",
    "end": "494000"
  },
  {
    "text": "valid token or a missing an OAuth token will get rejected right away also the",
    "start": "494000",
    "end": "500479"
  },
  {
    "text": "API gateway has a throttling configuration setting a number of them so that on a per client basis you can",
    "start": "500479",
    "end": "507740"
  },
  {
    "text": "limit how many requests come in at a certain time or over a period of time",
    "start": "507740",
    "end": "514000"
  },
  {
    "text": "one or two as part of our REST API design take advantage of serverless",
    "start": "514450",
    "end": "520149"
  },
  {
    "text": "technologies as much as possible because we want to be spending less time writing",
    "start": "520149",
    "end": "525290"
  },
  {
    "text": "deployment scripts and more time adding features so lambda was an ingredient",
    "start": "525290",
    "end": "530630"
  },
  {
    "text": "there and lastly we needed an effective way to communicate our api's with our",
    "start": "530630",
    "end": "537680"
  },
  {
    "text": "consumers whether those were internal via components or our professional services department or our customers and",
    "start": "537680",
    "end": "545529"
  },
  {
    "text": "after some investigation we settled on the open API specification anybody",
    "start": "545529",
    "end": "550880"
  },
  {
    "text": "familiar with open API or swagger yeah great got a couple terrific for those",
    "start": "550880",
    "end": "559880"
  },
  {
    "text": "that are familiar I'm just going to do a little aside here because open API ended up being such an important and integral",
    "start": "559880",
    "end": "566060"
  },
  {
    "text": "part of our REST API design the open API specification is language for defining",
    "start": "566060",
    "end": "571700"
  },
  {
    "text": "rest endpoints it's sponsored by the Linux Foundation and there are a number of major contributors including Google",
    "start": "571700",
    "end": "579079"
  },
  {
    "text": "IBM and Microsoft and sometimes open API is confused with swagger",
    "start": "579079",
    "end": "585500"
  },
  {
    "text": "because swagger was the original name of the specification but today swagger represents the open source tool set",
    "start": "585500",
    "end": "592940"
  },
  {
    "text": "which can facilitate the design and implementation of api's that are written",
    "start": "592940",
    "end": "599300"
  },
  {
    "text": "using the API specification so bottom line is open API is the spec and swagger",
    "start": "599300",
    "end": "605329"
  },
  {
    "text": "is a tool set next I'm going to show you some of the benefits of using the open API spec and",
    "start": "605329",
    "end": "613260"
  },
  {
    "text": "the swagger toolset here's an example of one of our endpoints in as as depicted",
    "start": "613260",
    "end": "619950"
  },
  {
    "text": "in the open API spec and you can see at the top there there is there's our URL",
    "start": "619950",
    "end": "625830"
  },
  {
    "text": "and you can also specify whichever ones the endpoints going to support you can",
    "start": "625830",
    "end": "631560"
  },
  {
    "text": "also specify this as a get request so there's a number of responses that could come back and here the endpoint is",
    "start": "631560",
    "end": "639540"
  },
  {
    "text": "defined as something called the swagger editor that's one of the swagger tools you don't have to use a swagger editor",
    "start": "639540",
    "end": "645240"
  },
  {
    "text": "there's a number of plugins for Visual Studio Eclipse and the number of",
    "start": "645240",
    "end": "650400"
  },
  {
    "text": "developer portals that will facilitate the creation of this open API",
    "start": "650400",
    "end": "656130"
  },
  {
    "text": "specification language and typically what we do is you know we define a group",
    "start": "656130",
    "end": "662850"
  },
  {
    "text": "of group of endpoints that are functionally similar we put them in the same file and we call it a swagger file",
    "start": "662850",
    "end": "670170"
  },
  {
    "text": "and I'm going to refer to it as that from now on so now we have our swagger file and this becomes our source of",
    "start": "670170",
    "end": "677490"
  },
  {
    "text": "truth for for deploying our endpoints we",
    "start": "677490",
    "end": "682920"
  },
  {
    "text": "use this we give this swagger file to our customers they create clients from the swagger file we give it to our doc",
    "start": "682920",
    "end": "690270"
  },
  {
    "text": "folks they create documentation from it our QA department takes this same file creates clients which are used to test",
    "start": "690270",
    "end": "699360"
  },
  {
    "text": "the endpoints we also use it to facilitate our deployment of the",
    "start": "699360",
    "end": "704730"
  },
  {
    "text": "endpoints in the API gateway so here's an example of client generation here's a",
    "start": "704730",
    "end": "712050"
  },
  {
    "text": "tool the generate client tab here represents the swagger tool code gen and",
    "start": "712050",
    "end": "718700"
  },
  {
    "text": "you can see here there's a number of languages in which you can generate clients and for our customers that means",
    "start": "718700",
    "end": "725310"
  },
  {
    "text": "we can just give them the swagger file and then they can go generate clients and whatever language they prefer and then aspect gets out of the business of",
    "start": "725310",
    "end": "732020"
  },
  {
    "text": "building and maintaining SDKs so here's an example of what the Java",
    "start": "732020",
    "end": "740030"
  },
  {
    "text": "representation is of our end points it's a little hard to see but we didn't we didn't create any of",
    "start": "740030",
    "end": "745360"
  },
  {
    "text": "that code that all came from from Cochin you can also create documentation and",
    "start": "745360",
    "end": "753339"
  },
  {
    "text": "here's the HTML representation of the endpoint you saw earlier in the swagger",
    "start": "753339",
    "end": "758980"
  },
  {
    "text": "file it's a little hard to see but at the top here is this is the endpoint",
    "start": "758980",
    "end": "765700"
  },
  {
    "text": "itself and what's kind of nice is that you get little tabs here that show you",
    "start": "765700",
    "end": "770740"
  },
  {
    "text": "various ways to invoke the endpoint and in different languages which can be very",
    "start": "770740",
    "end": "775899"
  },
  {
    "text": "helpful to get an idea of how to interact with the API and then you can provide a lot of descriptions of",
    "start": "775899",
    "end": "781990"
  },
  {
    "text": "properties whether those are paths parameters or here's the response properties so if you do a good job of",
    "start": "781990",
    "end": "789010"
  },
  {
    "text": "writing descriptions in your swagger file you can come up with some pretty comprehensive help files and lastly here",
    "start": "789010",
    "end": "797770"
  },
  {
    "text": "I mentioned that we leverage the swagger file for deploying api's in the API",
    "start": "797770",
    "end": "802810"
  },
  {
    "text": "gateway and here you can see in the Amazon API gateway console there is the ability to import swagger files we do it",
    "start": "802810",
    "end": "809500"
  },
  {
    "text": "programmatically through our deployment scripts but I just wanted to show you that it is possible here and I'll go",
    "start": "809500",
    "end": "815500"
  },
  {
    "text": "into a little bit more detail about that later well talk about a few of the use",
    "start": "815500",
    "end": "821440"
  },
  {
    "text": "cases that that utilize API gateway in lambda and the first one is voice mail",
    "start": "821440",
    "end": "828370"
  },
  {
    "text": "everybody knows voice mail and we provide that to the agents and our contact centers for when they're on the",
    "start": "828370",
    "end": "835120"
  },
  {
    "text": "phone or away from their desk busy with other work and we looked at the usage",
    "start": "835120",
    "end": "840850"
  },
  {
    "text": "pattern for voice mail and it's one of those things it's really pretty sporadic you may know that all the agents will",
    "start": "840850",
    "end": "847930"
  },
  {
    "text": "check it when they get in in the mornings but then there's breaks when they finish with calls you really can't",
    "start": "847930",
    "end": "853890"
  },
  {
    "text": "anticipate too much of the of the traffic that you're going to get and",
    "start": "853890",
    "end": "858910"
  },
  {
    "text": "then then when they come off a break a hundred to 200 agents come off a break you may get a burst of requests that are",
    "start": "858910",
    "end": "865180"
  },
  {
    "text": "well beyond what you might have expected so in the legacy world we calculated our",
    "start": "865180",
    "end": "870880"
  },
  {
    "text": "peak request rate and then we provisioned the systems and we deployed the leg see voicemail web service across",
    "start": "870880",
    "end": "876640"
  },
  {
    "text": "multiple different virtual machines and it's sat there 24/7 waiting to handle",
    "start": "876640",
    "end": "882520"
  },
  {
    "text": "requests and that just wasn't the model we could do we could actually do in it in the cloud we didn't want to follow",
    "start": "882520",
    "end": "889300"
  },
  {
    "text": "that model and we changed that it was definitely a compelling use case for",
    "start": "889300",
    "end": "894550"
  },
  {
    "text": "lambda which will scale up and meet the demands that you need and you only pay",
    "start": "894550",
    "end": "900550"
  },
  {
    "text": "for what's for what you use so that was the compelling case for lambda so this",
    "start": "900550",
    "end": "910630"
  },
  {
    "start": "910000",
    "end": "910000"
  },
  {
    "text": "is also a migration story for this particular service where we deployed the original voice mail web service in on",
    "start": "910630",
    "end": "917380"
  },
  {
    "text": "ec2 instances we had internal clients talking to that then we added in the new",
    "start": "917380",
    "end": "923470"
  },
  {
    "text": "voicemail endpoint with API gateway so now we had a scaleable restful interface",
    "start": "923470",
    "end": "929440"
  },
  {
    "text": "with security and the interface we wanted exposed to up to our internal and",
    "start": "929440",
    "end": "935170"
  },
  {
    "text": "external clients and we temporarily created a redirect lamda which would",
    "start": "935170",
    "end": "940210"
  },
  {
    "text": "take those requests transform them and then redirect them through the load balancer to our voice mail web service",
    "start": "940210",
    "end": "947350"
  },
  {
    "text": "this allowed external clients into internal and external clients and our",
    "start": "947350",
    "end": "952830"
  },
  {
    "text": "developers to work in parallel so the",
    "start": "952830",
    "end": "958110"
  },
  {
    "text": "another development developer team was working on the new voicemail lambda function they were able to do that in",
    "start": "958110",
    "end": "964930"
  },
  {
    "text": "parallel they that was added in layered in we were able to remove the redirect",
    "start": "964930",
    "end": "972690"
  },
  {
    "text": "lambda and then have internal clients use API gateway which finally allowed us",
    "start": "972690",
    "end": "978580"
  },
  {
    "text": "to remove and retire the original voicemail service now this gave us the final architecture that we wanted for",
    "start": "978580",
    "end": "985720"
  },
  {
    "text": "voicemail so some of the key points for this migration was API gateway allowed",
    "start": "985720",
    "end": "993040"
  },
  {
    "start": "989000",
    "end": "989000"
  },
  {
    "text": "us to deploy the new type of restful interface we wanted it allowed us to do",
    "start": "993040",
    "end": "1000600"
  },
  {
    "text": "the migration it hid the internal implementation of the services from the original non restful non-scalable sir",
    "start": "1000600",
    "end": "1008770"
  },
  {
    "text": "so when we were able to migrate to the lambda and it allowed for that migration",
    "start": "1008770",
    "end": "1014960"
  },
  {
    "text": "and lambda was great for the server less scalable just what we needed for this",
    "start": "1014960",
    "end": "1020990"
  },
  {
    "text": "service something I didn't talk about yet was cold start and cold starts the delay that it takes for Amazon to start",
    "start": "1020990",
    "end": "1028579"
  },
  {
    "text": "your container load any language resources load your your lambda function",
    "start": "1028580",
    "end": "1033620"
  },
  {
    "text": "package and then call it so it can initialize itself before it even takes",
    "start": "1033620",
    "end": "1039709"
  },
  {
    "text": "its first request and any time you take in your lambda function initializing",
    "start": "1039710",
    "end": "1045170"
  },
  {
    "text": "that's going to add to the cold start delay so though with the voicemail",
    "start": "1045170",
    "end": "1050450"
  },
  {
    "text": "service we were able to minimize the delay with some best practices but we",
    "start": "1050450",
    "end": "1056300"
  },
  {
    "text": "also with voicemail were able to sustain a little bit of a delay which is not",
    "start": "1056300",
    "end": "1061880"
  },
  {
    "text": "something we could with our next use case which we'll talk about now the next",
    "start": "1061880",
    "end": "1067070"
  },
  {
    "text": "use case was for a low latency Micra service and it also deals with voice",
    "start": "1067070",
    "end": "1072560"
  },
  {
    "text": "recordings but in this case it's recordings that aspect via does of",
    "start": "1072560",
    "end": "1077720"
  },
  {
    "start": "1073000",
    "end": "1073000"
  },
  {
    "text": "customer interactions a lot of companies want to keep track of interactions when",
    "start": "1077720",
    "end": "1083180"
  },
  {
    "text": "you call your 401k company and say I want to sell everything they want to keep a recording of that so in six",
    "start": "1083180",
    "end": "1090230"
  },
  {
    "text": "months or a year when you call back they can say well no you asked for this but",
    "start": "1090230",
    "end": "1095720"
  },
  {
    "text": "one of the things they don't want to do is they don't want to record any sensitive data your account number codes",
    "start": "1095720",
    "end": "1103450"
  },
  {
    "text": "if it's if it's healthcare related you know there's other information they don't want to record because of either",
    "start": "1103450",
    "end": "1110810"
  },
  {
    "text": "regulation or industry standards so the voice recording web service that we have",
    "start": "1110810",
    "end": "1116920"
  },
  {
    "text": "provides the ability to pause and work not only start and stop recordings but pause them temporarily so when we have",
    "start": "1116920",
    "end": "1124910"
  },
  {
    "text": "an interaction and this is an example of one with Nicole our customer service rep",
    "start": "1124910",
    "end": "1130520"
  },
  {
    "text": "is talking to Elaine and asked her for account number this particular customer doesn't want to record that so Elaine",
    "start": "1130520",
    "end": "1137780"
  },
  {
    "text": "pushes a button it pauses the recording she speaks the recording we resume and",
    "start": "1137780",
    "end": "1144970"
  },
  {
    "text": "the key thing here is that these events that come from the agent's desktop that",
    "start": "1144970",
    "end": "1151010"
  },
  {
    "text": "go through the internet to the cloud and to our recording web service have to occur very quickly with the smallest",
    "start": "1151010",
    "end": "1157520"
  },
  {
    "text": "delay possible any additional latency is going to risk either making the conversation awkward or it's going to",
    "start": "1157520",
    "end": "1165260"
  },
  {
    "text": "record her account number so both of those things we want to minimize",
    "start": "1165260",
    "end": "1171279"
  },
  {
    "start": "1173000",
    "end": "1173000"
  },
  {
    "text": "so as Tom explained we had some severe time constraints on control of",
    "start": "1176320",
    "end": "1182570"
  },
  {
    "text": "recordings in particular we needed to process a recording control request",
    "start": "1182570",
    "end": "1188210"
  },
  {
    "text": "within 200 milliseconds so when we were asked to build a REST API for recording",
    "start": "1188210",
    "end": "1194090"
  },
  {
    "text": "control we had to take this this limit into consideration and that allowed us",
    "start": "1194090",
    "end": "1199640"
  },
  {
    "text": "to come up with a couple of major criteria one was that we wanted the minimum number of components in the path",
    "start": "1199640",
    "end": "1206750"
  },
  {
    "text": "of the processing of the request obviously because if you have fewer the hops the the less time it's going to",
    "start": "1206750",
    "end": "1213350"
  },
  {
    "text": "take to process and the second is that we wanted the path to be secure and",
    "start": "1213350",
    "end": "1218420"
  },
  {
    "text": "constrained meaning that the request had to come to the API gateway it had to go",
    "start": "1218420",
    "end": "1224090"
  },
  {
    "text": "to an application load balancer in the private subnet and then on to the recording web control web services which",
    "start": "1224090",
    "end": "1231230"
  },
  {
    "text": "were behind that load balancer however what we found was that this particular design is not something we can do right",
    "start": "1231230",
    "end": "1237380"
  },
  {
    "text": "now because you can't send requests from the API gateway to a component that's in",
    "start": "1237380",
    "end": "1244370"
  },
  {
    "text": "a private subnet today and we've talked with our Technical Account Managers about this and they brought it to the API gateway team and we have learned",
    "start": "1244370",
    "end": "1250940"
  },
  {
    "text": "that this is on the roadmap but it is not available today so we couldn't consider this design next we decided to",
    "start": "1250940",
    "end": "1259520"
  },
  {
    "text": "promote the application load balancer into a public subnet because you can",
    "start": "1259520",
    "end": "1264830"
  },
  {
    "text": "send a request from the API gateway to a component in a public subnet however we",
    "start": "1264830",
    "end": "1272660"
  },
  {
    "text": "soon discovered that if you if you put something in a public sub meant it can be hit directly from the internet and",
    "start": "1272660",
    "end": "1278270"
  },
  {
    "text": "there really wasn't an easy way for us to control that so while we did this design does meet the fewest components",
    "start": "1278270",
    "end": "1284900"
  },
  {
    "text": "in the path requirement it didn't meet the constrained secure path so we rejected this design we then considered",
    "start": "1284900",
    "end": "1293450"
  },
  {
    "start": "1291000",
    "end": "1291000"
  },
  {
    "text": "adding a lambda to the design and this did indeed meet the requirements of a",
    "start": "1293450",
    "end": "1299300"
  },
  {
    "text": "secure constrained path because you can't trigger lambdas",
    "start": "1299300",
    "end": "1304360"
  },
  {
    "text": "from the internet they have to go through the API gateway and we were able to code the lambda function so that it",
    "start": "1304360",
    "end": "1310720"
  },
  {
    "text": "only communicated with application load balancer and the private subnet however",
    "start": "1310720",
    "end": "1315840"
  },
  {
    "text": "we've now added a component to the path and indeed a component that had some",
    "start": "1315840",
    "end": "1321070"
  },
  {
    "text": "variable startup time associated with it as Tom mentions lambda functions can",
    "start": "1321070",
    "end": "1327040"
  },
  {
    "text": "incur cold starts and while there's a number of mechanisms that you can use to ensure that lambdas remain in a warm",
    "start": "1327040",
    "end": "1334299"
  },
  {
    "text": "State and that they don't incur a cold start if you send enough concurrent requests to it at some point you're",
    "start": "1334299",
    "end": "1339490"
  },
  {
    "text": "going to incur a cold start and indeed our research and some load testing we",
    "start": "1339490",
    "end": "1345370"
  },
  {
    "text": "did prove that out and so we couldn't take that risk and we did not choose this design either in the end what we",
    "start": "1345370",
    "end": "1353830"
  },
  {
    "start": "1353000",
    "end": "1353000"
  },
  {
    "text": "ended up doing was taking our own reverse proxy and then configuring that to send the request on to the",
    "start": "1353830",
    "end": "1361390"
  },
  {
    "text": "application load balancer in the private subnet and while this meant both our requirements of minimum components in",
    "start": "1361390",
    "end": "1367809"
  },
  {
    "text": "the path and the secure constrained path we got none of the benefits of the API gateway the reverse proxy has minimal",
    "start": "1367809",
    "end": "1375929"
  },
  {
    "text": "provisions for validating requests and tokens and has you know minimal capacity",
    "start": "1375929",
    "end": "1383950"
  },
  {
    "text": "to throttle requests so in the end we really couldn't make a public API set",
    "start": "1383950",
    "end": "1389500"
  },
  {
    "text": "for recording control we only allowed these api's to be used by internal",
    "start": "1389500",
    "end": "1395669"
  },
  {
    "text": "components via the browser components and until such time that we can get the",
    "start": "1395669",
    "end": "1401169"
  },
  {
    "text": "capabilities of the API gateway that we need",
    "start": "1401169",
    "end": "1405120"
  },
  {
    "text": "the last two sections of the presentation go into a little bit more detail about our journey of deploying",
    "start": "1407160",
    "end": "1414930"
  },
  {
    "text": "our first rest endpoints for via and some of the things we learned that we wanted to share with you related",
    "start": "1414930",
    "end": "1420330"
  },
  {
    "text": "specifically to the api gateway and lambda whenever we consider third-party",
    "start": "1420330",
    "end": "1427920"
  },
  {
    "start": "1425000",
    "end": "1425000"
  },
  {
    "text": "services to be integrated with via whether that's from Amazon or anybody else we always consider costs as part of",
    "start": "1427920",
    "end": "1435510"
  },
  {
    "text": "that criteria with the API gateway there's added complexity because each of",
    "start": "1435510",
    "end": "1441900"
  },
  {
    "text": "your endpoints is going to have potentially a different usage pattern and that will impact how much cost the",
    "start": "1441900",
    "end": "1449280"
  },
  {
    "text": "API gateway service is going to be for you so for each endpoint that you are",
    "start": "1449280",
    "end": "1455100"
  },
  {
    "text": "planning on designing before you implement it you need to consider how often is that endpoint going to be",
    "start": "1455100",
    "end": "1460410"
  },
  {
    "text": "called is it on a per user basis is it periodic and then you need to consider that for",
    "start": "1460410",
    "end": "1466200"
  },
  {
    "text": "all your endpoints in aggregate and calculate the monthly cost of the API gateway for that and then add that to",
    "start": "1466200",
    "end": "1473670"
  },
  {
    "text": "your cost of goods or how much it's going to cost you to deploy your solution and then you need to compare",
    "start": "1473670",
    "end": "1480330"
  },
  {
    "text": "that against how much revenue or margin you expect to make off of your solution and if the API gateway costs impinge on",
    "start": "1480330",
    "end": "1488000"
  },
  {
    "text": "those those profits you want to consider a couple of options one is that you can",
    "start": "1488000",
    "end": "1495720"
  },
  {
    "text": "throttle the requests indeed the here you can see the API gateway has what's",
    "start": "1495720",
    "end": "1502050"
  },
  {
    "text": "called the usage plan and this allows you to control the number of requests the rate at which requests come in as",
    "start": "1502050",
    "end": "1508560"
  },
  {
    "text": "well as quotas how many can come in for a certain time period and those will be measured against each client separately",
    "start": "1508560",
    "end": "1516230"
  },
  {
    "text": "another alternative you have is to build your consumers so let them use whatever",
    "start": "1516230",
    "end": "1522120"
  },
  {
    "text": "they want but then track it and build them for it",
    "start": "1522120",
    "end": "1527270"
  },
  {
    "start": "1528000",
    "end": "1528000"
  },
  {
    "text": "I talked up the open API spec and swagger tool said a little while ago and",
    "start": "1528470",
    "end": "1536539"
  },
  {
    "text": "we were able to take advantage of the swagger tool the swagger editor in",
    "start": "1536539",
    "end": "1543980"
  },
  {
    "text": "particular as part of the review cycle and collaborating with the various teams",
    "start": "1543980",
    "end": "1549440"
  },
  {
    "text": "that were building the rest api's and this gave us a consistent way to present the api's as we were reviewing them and",
    "start": "1549440",
    "end": "1556789"
  },
  {
    "text": "we talked a lot about you know how the endpoints would be used and the property naming conventions and what resources we",
    "start": "1556789",
    "end": "1564530"
  },
  {
    "text": "would expose what we didn't do was we didn't bring the consumers of the API",
    "start": "1564530",
    "end": "1569630"
  },
  {
    "text": "into this discussion early on they didn't get their first crack at into interacting with these api's until the",
    "start": "1569630",
    "end": "1576169"
  },
  {
    "text": "services were implemented and this caused a lot of problems for us we got",
    "start": "1576169",
    "end": "1581990"
  },
  {
    "text": "lots of late feedback you know missing endpoints missing properties I don't know how to use this endpoint and it",
    "start": "1581990",
    "end": "1589730"
  },
  {
    "text": "caused a lot of churn in our first iteration of the biltman cycle a lot of late changes and actually reduced",
    "start": "1589730",
    "end": "1595460"
  },
  {
    "text": "considerably our capacity to deploy all the endpoints we wanted to in the first the first iteration so the bottom line",
    "start": "1595460",
    "end": "1603710"
  },
  {
    "text": "here is you want to make sure that before you implement your back-end services that everybody is in agreement",
    "start": "1603710",
    "end": "1609919"
  },
  {
    "text": "about the API is in particular that consumers because they know how they're",
    "start": "1609919",
    "end": "1614990"
  },
  {
    "text": "going to use them similarly it's important that the consumers get early",
    "start": "1614990",
    "end": "1622210"
  },
  {
    "text": "interaction with your API endpoints oftentimes even a review won't uncover",
    "start": "1622210",
    "end": "1629059"
  },
  {
    "text": "some nuances that actually interacting with the API might reveal and again we",
    "start": "1629059",
    "end": "1637100"
  },
  {
    "text": "suffered a bit from the fact that we waited so long to let the consumers have access to the endpoints so now we we use",
    "start": "1637100",
    "end": "1644419"
  },
  {
    "text": "a couple of strategies one is the mock interface and the API gateway as you can see here there's the ability especially",
    "start": "1644419",
    "end": "1650360"
  },
  {
    "text": "with gets to put in canned data so at least your your consumers are able to start to play around with the API you",
    "start": "1650360",
    "end": "1657169"
  },
  {
    "text": "can get early feedback and make changes it's cheap to do so in the early stages rather than late when when it's really",
    "start": "1657169",
    "end": "1663840"
  },
  {
    "text": "expensive also I talked about before how",
    "start": "1663840",
    "end": "1670530"
  },
  {
    "start": "1667000",
    "end": "1667000"
  },
  {
    "text": "we use swagger to facilitate the deployment of the api's into the API",
    "start": "1670530",
    "end": "1676110"
  },
  {
    "text": "gateway and on on the left here you can see an example of one of our swagger",
    "start": "1676110",
    "end": "1681570"
  },
  {
    "text": "files we call it a customer swag Rafael because it's ready for our customers to generate clients from or documentation",
    "start": "1681570",
    "end": "1688350"
  },
  {
    "text": "however it doesn't have all the information that the API gateway needs in order to process those endpoints in",
    "start": "1688350",
    "end": "1695550"
  },
  {
    "text": "particular it doesn't have any information about the lambda function or the HTTP endpoint that might be",
    "start": "1695550",
    "end": "1701130"
  },
  {
    "text": "processing the request secondly while the API gateway can import swagger files",
    "start": "1701130",
    "end": "1708030"
  },
  {
    "text": "it's not a hundred percent compliant with the open API to do spec in",
    "start": "1708030",
    "end": "1713910"
  },
  {
    "text": "particular it will reject any to agra files that contain the property examples you can see in here we have an example",
    "start": "1713910",
    "end": "1720870"
  },
  {
    "text": "which is is something you want to share with your customers but it was being rejected by the API gateway so we've",
    "start": "1720870",
    "end": "1730470"
  },
  {
    "text": "spoken to our Technical Account Manager and the API gateway team about our concerns about the incompatibility but",
    "start": "1730470",
    "end": "1737700"
  },
  {
    "text": "we've recommended that they move on to supporting the open API 3.0 specification which came out in July",
    "start": "1737700",
    "end": "1744180"
  },
  {
    "text": "rather than fixing the 2.0 version so here I'm going to show you what it takes",
    "start": "1744180",
    "end": "1750000"
  },
  {
    "text": "to take a customer swagger and transform it into what is necessary for the API",
    "start": "1750000",
    "end": "1757020"
  },
  {
    "text": "gateway right now these two files on the left and the right here look the same but you see here the first thing that",
    "start": "1757020",
    "end": "1762540"
  },
  {
    "text": "has to happen is you have to take up examples and then secondly you have to",
    "start": "1762540",
    "end": "1767580"
  },
  {
    "text": "add in the part that says who's going to process the request the open API spec",
    "start": "1767580",
    "end": "1772860"
  },
  {
    "text": "supports custom what's called custom extensions and here are the ones that Amazon has for the API gateway and you",
    "start": "1772860",
    "end": "1778890"
  },
  {
    "text": "can see that one of them there is is specifically used to indicate which lambda function is going to process that",
    "start": "1778890",
    "end": "1785580"
  },
  {
    "text": "endpoint so once we discovered that we couldn't",
    "start": "1785580",
    "end": "1792670"
  },
  {
    "text": "just import our swagger files without some changes into the API gateway we",
    "start": "1792670",
    "end": "1798309"
  },
  {
    "text": "also realized we didn't have time in our first iteration to do any automation around that and we thought we could sort",
    "start": "1798309",
    "end": "1803350"
  },
  {
    "text": "of soldier through it you know make some manual edits and kind of be done with it and this is the process we had every",
    "start": "1803350",
    "end": "1811120"
  },
  {
    "text": "team was given a group of endpoints that they were responsible for a functional grouping if you will of endpoints and",
    "start": "1811120",
    "end": "1818100"
  },
  {
    "text": "they would have to manually update those files you know take out the examples add in the API gateway extensions and then",
    "start": "1818100",
    "end": "1825070"
  },
  {
    "text": "check the file into source code control then we had another group which took",
    "start": "1825070",
    "end": "1830860"
  },
  {
    "text": "everybody's swagger files and merged them together because we wanted the",
    "start": "1830860",
    "end": "1836610"
  },
  {
    "text": "endpoints to be imported as a whole into a single stage into the API gateway and",
    "start": "1836610",
    "end": "1841900"
  },
  {
    "text": "then they did some more editing a file to get it ready for our build scripts",
    "start": "1841900",
    "end": "1847710"
  },
  {
    "text": "then lastly we deploy the monolithic swagger file into the API gateway and",
    "start": "1847710",
    "end": "1855610"
  },
  {
    "text": "you can see here how many places where manual update occurs it's a little hard to see in the middle but there's two",
    "start": "1855610",
    "end": "1861940"
  },
  {
    "text": "arrows there for manual update and this caused us a lot of challenges we had a",
    "start": "1861940",
    "end": "1868150"
  },
  {
    "text": "lot of problems where there was missing API gateway extensions so there was no",
    "start": "1868150",
    "end": "1873700"
  },
  {
    "text": "lambda that was specified to process an end point we had fixes made to endpoints",
    "start": "1873700",
    "end": "1878920"
  },
  {
    "text": "at the API gateway that didn't make it back to the swagger file we spent a lot of time fixing the same problems over",
    "start": "1878920",
    "end": "1885220"
  },
  {
    "text": "and over and over again and again this reduced our capacity and our ability to",
    "start": "1885220",
    "end": "1890890"
  },
  {
    "text": "deploy a lot of public endpoints in our first iteration so needless to say in",
    "start": "1890890",
    "end": "1898300"
  },
  {
    "text": "our next iteration we wasted no time in automating this process this is what we",
    "start": "1898300",
    "end": "1903730"
  },
  {
    "text": "do today so the teams are still responsible for their particular group",
    "start": "1903730",
    "end": "1909100"
  },
  {
    "text": "of endpoints and they check those into source control but they don't do anything to the files they're ready to go for the customers",
    "start": "1909100",
    "end": "1915760"
  },
  {
    "text": "nothing's removed nothing's added then we have a nightly build script which takes all the swagger files",
    "start": "1915760",
    "end": "1922210"
  },
  {
    "text": "and does all the necessary transformations merges the files together into the monolithic swagger",
    "start": "1922210",
    "end": "1927850"
  },
  {
    "text": "file and then lastly we have that same",
    "start": "1927850",
    "end": "1933909"
  },
  {
    "text": "build script import this monolithic swagger file into the API gateway and if",
    "start": "1933909",
    "end": "1939789"
  },
  {
    "text": "anything goes wrong through any of these stages the developers are notified in",
    "start": "1939789",
    "end": "1945429"
  },
  {
    "text": "the morning and they can fix the problem so all these things combine to early",
    "start": "1945429",
    "end": "1951460"
  },
  {
    "text": "reviewing of swagger files early interaction of consumers with those",
    "start": "1951460",
    "end": "1957610"
  },
  {
    "text": "endpoints automating the transformation of the swagger files to import into the",
    "start": "1957610",
    "end": "1963460"
  },
  {
    "text": "API gateway has enabled us just in 2017 to go from deploying just eight",
    "start": "1963460",
    "end": "1969009"
  },
  {
    "text": "endpoints in our first iteration to now over 85 there's also a number of lambda",
    "start": "1969009",
    "end": "1979360"
  },
  {
    "text": "lessons learned just as Rachel talked about the usage patterns for API gateway",
    "start": "1979360",
    "end": "1984940"
  },
  {
    "start": "1980000",
    "end": "1980000"
  },
  {
    "text": "it's also something for lambda you'll want to understand the usage pattern so",
    "start": "1984940",
    "end": "1990369"
  },
  {
    "text": "you can calculate not only cost of goods and services and that's something up I almost became a mantra for me to the",
    "start": "1990369",
    "end": "1998019"
  },
  {
    "text": "teams what's your cogs what's your cogs they got tired of hearing that but you want to calculate the cost of",
    "start": "1998019",
    "end": "2004409"
  },
  {
    "text": "goods and services but also the cost in time and what you're actually going to be doing so you make sure you choose the",
    "start": "2004409",
    "end": "2010919"
  },
  {
    "text": "right model for your weather Lam does the right choice might be possible for",
    "start": "2010919",
    "end": "2016200"
  },
  {
    "text": "some of the long-running services where you want to choose a deployment in elastic Beanstalk and I know we've done",
    "start": "2016200",
    "end": "2023190"
  },
  {
    "text": "that in a few cases for things that just have to run and have to be there and we have contained the elastic being skal",
    "start": "2023190",
    "end": "2030570"
  },
  {
    "text": "stock will scale up and meet those requests so understand your usage",
    "start": "2030570",
    "end": "2035700"
  },
  {
    "text": "pattern understand the costs and time and money that'll the next thing is",
    "start": "2035700",
    "end": "2041970"
  },
  {
    "start": "2038000",
    "end": "2038000"
  },
  {
    "text": "speed or is is light though lambda language choice and one of the one of",
    "start": "2041970",
    "end": "2048059"
  },
  {
    "text": "the factors in choosing the land is what developer skills you have and we found that we don't have for all the languages",
    "start": "2048059",
    "end": "2055710"
  },
  {
    "text": "that are are available for lambda we have a more limited set of choices for which",
    "start": "2055710",
    "end": "2060850"
  },
  {
    "text": "languages we actually want to choose so we've deployed services with JavaScript",
    "start": "2060850",
    "end": "2066520"
  },
  {
    "text": "Java and with dotnet core and Java is",
    "start": "2066520",
    "end": "2072669"
  },
  {
    "text": "the slowest for the cold start for the things that happen when Amazon loads the",
    "start": "2072670",
    "end": "2078610"
  },
  {
    "text": "container loans loads of a language resources it's the slowest one but once running it's the fastest and I know the",
    "start": "2078610",
    "end": "2086530"
  },
  {
    "text": "Amazon team has told us they continue to work on the cold start but there's also the impact do you have in your code on",
    "start": "2086530",
    "end": "2094179"
  },
  {
    "text": "the cold start as well the another point to keep in mind with the speed is be",
    "start": "2094179",
    "end": "2102040"
  },
  {
    "text": "aware of what libraries you use and in Java one many good examples of spring",
    "start": "2102040",
    "end": "2107470"
  },
  {
    "text": "boot few spring boot it's going to do introspection all over the place that's gonna cost you so might not be a factor",
    "start": "2107470",
    "end": "2115210"
  },
  {
    "text": "and you may be able to handle that and we'll be fine one of our processes does",
    "start": "2115210",
    "end": "2120220"
  },
  {
    "text": "do that but be aware because that can be a big place to spend time that you can't",
    "start": "2120220",
    "end": "2125860"
  },
  {
    "text": "afford another good recommendation is to use the lambda proxy mode integration",
    "start": "2125860",
    "end": "2132880"
  },
  {
    "start": "2128000",
    "end": "2128000"
  },
  {
    "text": "over using the custom integration the lambda proxy mode takes a lot of some of",
    "start": "2132880",
    "end": "2142000"
  },
  {
    "text": "the work and passes it on to the developer to do when they get the call from API gateway they can do more of the",
    "start": "2142000",
    "end": "2149950"
  },
  {
    "text": "parsing of the requests and then format the responses and it simplifies the",
    "start": "2149950",
    "end": "2155620"
  },
  {
    "text": "swagger that you have to provide and it's definitely a better way to go for",
    "start": "2155620",
    "end": "2162520"
  },
  {
    "text": "the integration here's an example Rachel kind of alluded to it before but",
    "start": "2162520",
    "end": "2168010"
  },
  {
    "text": "the swagger that's on the screen now is what you need for the custom integration there's lots of things that you have to",
    "start": "2168010",
    "end": "2174490"
  },
  {
    "text": "define the swagger for the proxy integration is somewhat less complicated",
    "start": "2174490",
    "end": "2180730"
  },
  {
    "text": "and there are only two api gateway extensions that need to be added the most important one being which lambda",
    "start": "2180730",
    "end": "2187570"
  },
  {
    "text": "function to you the AWS developers the lambda developer",
    "start": "2187570",
    "end": "2196540"
  },
  {
    "start": "2191000",
    "end": "2191000"
  },
  {
    "text": "guide is a great resource over the course of time that we've been doing using lambda Amazon has increased the",
    "start": "2196540",
    "end": "2203710"
  },
  {
    "text": "number of recommendations in their best practices section has grown a lot it's a lot of new things to consider and",
    "start": "2203710",
    "end": "2210790"
  },
  {
    "text": "they've been very helpful so I'd recommend going finding the best practices looking through those and see",
    "start": "2210790",
    "end": "2217480"
  },
  {
    "text": "which ones can affect you here's one example that we had to do in a number of",
    "start": "2217480",
    "end": "2224560"
  },
  {
    "start": "2220000",
    "end": "2220000"
  },
  {
    "text": "our lambdas is make sure to do one-time initialization in global scope and this",
    "start": "2224560",
    "end": "2229630"
  },
  {
    "text": "thus applies to all the languages in this example here in Java were creating an s3 client and do that once now",
    "start": "2229630",
    "end": "2238780"
  },
  {
    "text": "there's a cold start penalty for doing it but where you're gonna get the benefit is when you get additional",
    "start": "2238780",
    "end": "2245380"
  },
  {
    "text": "requests that come in it's not going to affect your your subsequent invocations you only created the s3 client once",
    "start": "2245380",
    "end": "2253300"
  },
  {
    "text": "you're not creating it every time a request comes in which would affect each request so take advantage of doing the",
    "start": "2253300",
    "end": "2261400"
  },
  {
    "text": "initialization in global scope be aware",
    "start": "2261400",
    "end": "2266770"
  },
  {
    "start": "2266000",
    "end": "2266000"
  },
  {
    "text": "of memory and its resources you want to make sure that your packages that you're uploading are as small as possible that",
    "start": "2266770",
    "end": "2273340"
  },
  {
    "text": "has an effect on how quickly the container can load and how quickly it",
    "start": "2273340",
    "end": "2280030"
  },
  {
    "text": "will initialize so get rid of resources that you don't need get rid of libraries",
    "start": "2280030",
    "end": "2286870"
  },
  {
    "text": "you don't need and too small to deploy the smaller packages next point do clean",
    "start": "2286870",
    "end": "2293080"
  },
  {
    "text": "up close and dispose it close and dispose of objects it's something we",
    "start": "2293080",
    "end": "2298270"
  },
  {
    "text": "should be doing anyway but make sure you get rid of them so those things don't stay around and affect subsequent",
    "start": "2298270",
    "end": "2304540"
  },
  {
    "text": "invitations especially if there's outstanding asynchronous calls or threads make sure to do clean up get rid",
    "start": "2304540",
    "end": "2311530"
  },
  {
    "text": "of it and then lastly keep in mind the memory now most of us would think we",
    "start": "2311530",
    "end": "2317740"
  },
  {
    "text": "want to have the smallest amount of memory for a lambda function because there's a cost the more memory",
    "start": "2317740",
    "end": "2323090"
  },
  {
    "text": "that you have the higher the cost but a associated with memory as you increase",
    "start": "2323090",
    "end": "2328280"
  },
  {
    "text": "memory there's also an increase in the CPU that goes along with it in the containers that they're running and",
    "start": "2328280",
    "end": "2335410"
  },
  {
    "text": "sometimes if you have more memory and CPU that requests that you're handling may finish more quickly with more memory",
    "start": "2335410",
    "end": "2343160"
  },
  {
    "text": "and they really cost you less money than it would if you had a smaller amount of memory so there is a tool out there you",
    "start": "2343160",
    "end": "2350570"
  },
  {
    "text": "can go and test this yourself but there is a tool I believe it's called the",
    "start": "2350570",
    "end": "2356330"
  },
  {
    "text": "lambda power tuning if you search for that in your search engine it's not an",
    "start": "2356330",
    "end": "2361430"
  },
  {
    "text": "Amazon thing but it's it's built with step functions it helps you test your lambda function to find the best profile",
    "start": "2361430",
    "end": "2369410"
  },
  {
    "text": "for memory so I recommend going to check that out and running it against some of your lambda functions and checking what",
    "start": "2369410",
    "end": "2376970"
  },
  {
    "text": "what memory setting is best lambda",
    "start": "2376970",
    "end": "2384470"
  },
  {
    "start": "2382000",
    "end": "2382000"
  },
  {
    "text": "stateless shouldn't be saving stuff in lambda if you do need to save things",
    "start": "2384470",
    "end": "2390380"
  },
  {
    "text": "ElastiCache or DynamoDB or great choices if you have requests from custom a",
    "start": "2390380",
    "end": "2397610"
  },
  {
    "text": "client's api coming in and you need to save things use elastic cache or dynamodb or both whichever ones makes",
    "start": "2397610",
    "end": "2404660"
  },
  {
    "text": "sense we've we've had some good luck our good luck with those but you can also",
    "start": "2404660",
    "end": "2411920"
  },
  {
    "text": "take careful advantage of the fact that the container is going to be around and when you have subsequent invitations you",
    "start": "2411920",
    "end": "2419090"
  },
  {
    "text": "can for static data you can you can store it in memory if it's not too large you could also there's a temp directory",
    "start": "2419090",
    "end": "2426170"
  },
  {
    "text": "you can take advantage of putting some things there but if Amazon scales down and the container goes away this stuff",
    "start": "2426170",
    "end": "2433220"
  },
  {
    "text": "goes away so if it's really important put in an elastic ash you can take",
    "start": "2433220",
    "end": "2439010"
  },
  {
    "text": "advantage of memory and the temp directory if it fits we've done in a",
    "start": "2439010",
    "end": "2444620"
  },
  {
    "text": "couple cases for speed and then the last thing is function",
    "start": "2444620",
    "end": "2450010"
  },
  {
    "text": "warming Rachel mentioned it it's one of these things where you can make requests to keep the lambda function the",
    "start": "2450010",
    "end": "2455980"
  },
  {
    "text": "containers alive that way you you don't have to fight with cold start you have",
    "start": "2455980",
    "end": "2461440"
  },
  {
    "text": "to make enough requests so you can handle your peak requested rates that we talked about for the legacy you may have",
    "start": "2461440",
    "end": "2468790"
  },
  {
    "text": "to make a lot of requests to keep multiple containers alive if that if that's how many you need you need to do",
    "start": "2468790",
    "end": "2474970"
  },
  {
    "text": "testing for that one way of doing the function warming though is you can use cloud watch scheduled events that's one",
    "start": "2474970",
    "end": "2482170"
  },
  {
    "text": "of the recommendations and Amazon has pages that kind of describe how to do that cloud watch metrics cloud watch",
    "start": "2482170",
    "end": "2492700"
  },
  {
    "start": "2489000",
    "end": "2489000"
  },
  {
    "text": "metrics and I will try not to forget to say cloud watch logs you probably know about those but we definitely have seen",
    "start": "2492700",
    "end": "2499060"
  },
  {
    "text": "the benefit of using the cloud watch metrics and the metrics are across many of the Amazon products but for API",
    "start": "2499060",
    "end": "2505450"
  },
  {
    "text": "gateway and lambda it's been invaluable for us to see how is it are we getting",
    "start": "2505450",
    "end": "2512290"
  },
  {
    "text": "the number of requests we're expecting are we getting having errors how is it performing how's the time Rachel",
    "start": "2512290",
    "end": "2518859"
  },
  {
    "text": "actually was looking at metrics and found one of our clients that was making far more requests than we expected",
    "start": "2518859",
    "end": "2524250"
  },
  {
    "text": "costing us more money mm-hm and we were able to find that just by looking at the",
    "start": "2524250",
    "end": "2529840"
  },
  {
    "text": "metrics themselves you can go ahead and create custom metrics as well on the",
    "start": "2529840",
    "end": "2534880"
  },
  {
    "text": "screen here you see x-ray Amazon's x-ray product which allows you to trace a",
    "start": "2534880",
    "end": "2540520"
  },
  {
    "text": "request across I don't have a slide showing it but it allows you to trace",
    "start": "2540520",
    "end": "2545650"
  },
  {
    "text": "requests across Amazon services from API gateway to lamda and onto other services",
    "start": "2545650",
    "end": "2551609"
  },
  {
    "text": "something to take advantage of and here's an example of one of the things",
    "start": "2551609",
    "end": "2556780"
  },
  {
    "text": "this was actually from production where we had lots of implications and lots of",
    "start": "2556780",
    "end": "2563080"
  },
  {
    "text": "errors so it can be helpful to narrow down to find problems",
    "start": "2563080",
    "end": "2568980"
  },
  {
    "text": "and another thing is Amazon support aspect as long as lucky enough to have",
    "start": "2568980",
    "end": "2575430"
  },
  {
    "start": "2569000",
    "end": "2569000"
  },
  {
    "text": "the enterprise support we have technical Technical Account Managers like Hassan",
    "start": "2575430",
    "end": "2581130"
  },
  {
    "text": "that have been with us from the beginning they walked us through a",
    "start": "2581130",
    "end": "2586680"
  },
  {
    "text": "document that they have as that's the well architected framework and it takes",
    "start": "2586680",
    "end": "2593579"
  },
  {
    "text": "you through five pillars Amazon has identified to have a well architected",
    "start": "2593579",
    "end": "2599520"
  },
  {
    "text": "cloud application built on Amazon's products so that was very helpful for us to go through some of those things we we",
    "start": "2599520",
    "end": "2606690"
  },
  {
    "text": "did really good on some of the things we saw areas for improvement but that's one",
    "start": "2606690",
    "end": "2611730"
  },
  {
    "text": "of the ways they can get they can help with best practices and guidance they",
    "start": "2611730",
    "end": "2617339"
  },
  {
    "text": "also have proactive support knowledge sharing sometimes we'll get calls and",
    "start": "2617339",
    "end": "2622680"
  },
  {
    "text": "Hassan or Greg will tell us that we're approaching certain limits in the",
    "start": "2622680",
    "end": "2628470"
  },
  {
    "text": "account and we may want to make a support request to increase those limits so that helps and we've also had some",
    "start": "2628470",
    "end": "2636319"
  },
  {
    "text": "access to a number of different Amazon experts last year at reinvent we were",
    "start": "2636319",
    "end": "2641700"
  },
  {
    "text": "able to meet with the API gateway and lamda folks we might have that opportunity this year we've along the",
    "start": "2641700",
    "end": "2647910"
  },
  {
    "text": "time they've set up calls with us so the enterprise support has been very helpful and we appreciate their help along the",
    "start": "2647910",
    "end": "2654780"
  },
  {
    "text": "way for getting us to the cloud",
    "start": "2654780",
    "end": "2658220"
  },
  {
    "start": "2658000",
    "end": "2658000"
  },
  {
    "text": "so we shared a lot of things with you today and if we just had a few things we wanted to leave you with one is that if",
    "start": "2663320",
    "end": "2670130"
  },
  {
    "text": "you're like us and you're taking some monolithic applications and building rebuilding them re-- architecting them",
    "start": "2670130",
    "end": "2676760"
  },
  {
    "text": "as software as a service in the cloud you know build build api's and use it as",
    "start": "2676760",
    "end": "2683450"
  },
  {
    "text": "a tool to protect your consumers against all the changes in the plumbing and",
    "start": "2683450",
    "end": "2688760"
  },
  {
    "text": "components and whatnots that's going on underneath the covers but as you build api's you need to consider the cost of",
    "start": "2688760",
    "end": "2695900"
  },
  {
    "text": "those with the api gateway so know your usage patterns before you implement we",
    "start": "2695900",
    "end": "2701360"
  },
  {
    "text": "recommend the open API specification for communicating your api's with your",
    "start": "2701360",
    "end": "2706790"
  },
  {
    "text": "consumers and creating your source of truth and lastly even though it's not the default option the lambda proxy",
    "start": "2706790",
    "end": "2714590"
  },
  {
    "text": "integration is far simpler unless you have complex needs for from mapping templates and such so that's all we have",
    "start": "2714590",
    "end": "2723170"
  },
  {
    "text": "to share with you today and we'd love if anybody is using api gateway and Swaggart open api we'd love to talk to",
    "start": "2723170",
    "end": "2729320"
  },
  {
    "text": "you and share experiences we're really hoping we can do that while we're here at reinvent thank you any questions",
    "start": "2729320",
    "end": "2737710"
  },
  {
    "text": "[Laughter]",
    "start": "2737710",
    "end": "2743210"
  }
]