[
  {
    "start": "0",
    "end": "43000"
  },
  {
    "text": "this video provides an overview of",
    "start": "0",
    "end": "2370"
  },
  {
    "text": "Amazon ec2 container service otherwise",
    "start": "2370",
    "end": "5250"
  },
  {
    "text": "known as Amazon ECS Amazon ECS is a",
    "start": "5250",
    "end": "9330"
  },
  {
    "text": "highly scalable high-performance",
    "start": "9330",
    "end": "11280"
  },
  {
    "text": "container management service that",
    "start": "11280",
    "end": "13049"
  },
  {
    "text": "supports docker containers and allows",
    "start": "13049",
    "end": "15120"
  },
  {
    "text": "you to easily run applications on a",
    "start": "15120",
    "end": "17039"
  },
  {
    "text": "managed cluster of Amazon ec2 instances",
    "start": "17039",
    "end": "20119"
  },
  {
    "text": "you can use Amazon ECS to launch and",
    "start": "20119",
    "end": "22980"
  },
  {
    "text": "stop container enabled applications",
    "start": "22980",
    "end": "25039"
  },
  {
    "text": "query to complete state of your cluster",
    "start": "25039",
    "end": "27180"
  },
  {
    "text": "and access many familiar features like",
    "start": "27180",
    "end": "29640"
  },
  {
    "text": "security groups elastic load balancing",
    "start": "29640",
    "end": "32369"
  },
  {
    "text": "EBS volumes and iam roles we'll go over",
    "start": "32369",
    "end": "36510"
  },
  {
    "text": "some of the important concepts and then",
    "start": "36510",
    "end": "38610"
  },
  {
    "text": "go through a sample application",
    "start": "38610",
    "end": "39660"
  },
  {
    "text": "deployment using the Amazon",
    "start": "39660",
    "end": "41579"
  },
  {
    "text": "ECS console let's first go through the",
    "start": "41579",
    "end": "44850"
  },
  {
    "start": "43000",
    "end": "138000"
  },
  {
    "text": "core components of Amazon ECS",
    "start": "44850",
    "end": "48570"
  },
  {
    "text": "container instances are Amazon ec2",
    "start": "48570",
    "end": "50960"
  },
  {
    "text": "instances that been checked into a",
    "start": "50960",
    "end": "53190"
  },
  {
    "text": "cluster you own the instances and can",
    "start": "53190",
    "end": "56400"
  },
  {
    "text": "SSH into them if you want we use the",
    "start": "56400",
    "end": "59070"
  },
  {
    "text": "same doctor you're used to third a",
    "start": "59070",
    "end": "60810"
  },
  {
    "text": "remote API on the local socket our agent",
    "start": "60810",
    "end": "63780"
  },
  {
    "text": "processes ECS commands then turns them",
    "start": "63780",
    "end": "66360"
  },
  {
    "text": "into docker commands the agent is all",
    "start": "66360",
    "end": "68880"
  },
  {
    "text": "open source on github and we'd love to",
    "start": "68880",
    "end": "70979"
  },
  {
    "text": "see you involved a cluster is a",
    "start": "70979",
    "end": "73890"
  },
  {
    "text": "collection of resources primarily ECS",
    "start": "73890",
    "end": "76860"
  },
  {
    "text": "instances and containers running on",
    "start": "76860",
    "end": "79260"
  },
  {
    "text": "those instances a cluster spans multiple",
    "start": "79260",
    "end": "82650"
  },
  {
    "text": "availability zones and is really just",
    "start": "82650",
    "end": "85140"
  },
  {
    "text": "the collection of resources for example",
    "start": "85140",
    "end": "87900"
  },
  {
    "text": "CPU and memory it is dynamically",
    "start": "87900",
    "end": "90570"
  },
  {
    "text": "scalable you can start with one instance",
    "start": "90570",
    "end": "93119"
  },
  {
    "text": "in your cluster and scale up to hundreds",
    "start": "93119",
    "end": "95100"
  },
  {
    "text": "or thousands of instances",
    "start": "95100",
    "end": "97850"
  },
  {
    "text": "you can model the containers that",
    "start": "97850",
    "end": "99530"
  },
  {
    "text": "comprise your application using task",
    "start": "99530",
    "end": "101600"
  },
  {
    "text": "definitions that define two containers",
    "start": "101600",
    "end": "103610"
  },
  {
    "text": "you want to run together a task",
    "start": "103610",
    "end": "105830"
  },
  {
    "text": "definition also lets you specify the",
    "start": "105830",
    "end": "107540"
  },
  {
    "text": "container CPU and memory as well as dr.",
    "start": "107540",
    "end": "110030"
  },
  {
    "text": "concepts like links to establish network",
    "start": "110030",
    "end": "112939"
  },
  {
    "text": "channels between the containers and",
    "start": "112939",
    "end": "114610"
  },
  {
    "text": "volumes to persist their shared data",
    "start": "114610",
    "end": "117140"
  },
  {
    "text": "between containers tasks definitions are",
    "start": "117140",
    "end": "119869"
  },
  {
    "text": "tracked by name and revision just like",
    "start": "119869",
    "end": "121940"
  },
  {
    "text": "source code our demo will use two",
    "start": "121940",
    "end": "125060"
  },
  {
    "text": "containers an Apache server and a busy",
    "start": "125060",
    "end": "127820"
  },
  {
    "text": "box the busybox Bright's an HTML file",
    "start": "127820",
    "end": "130850"
  },
  {
    "text": "every second displayed a time of day to",
    "start": "130850",
    "end": "133580"
  },
  {
    "text": "a shared volume the Apache server will",
    "start": "133580",
    "end": "136010"
  },
  {
    "text": "read and serve the file",
    "start": "136010",
    "end": "138260"
  },
  {
    "start": "138000",
    "end": "200000"
  },
  {
    "text": "this is a task definition file",
    "start": "138260",
    "end": "142710"
  },
  {
    "text": "specify resources like CPU memory ports",
    "start": "142710",
    "end": "146430"
  },
  {
    "text": "and volumes for each container the",
    "start": "146430",
    "end": "149310"
  },
  {
    "text": "essential flag specifies whether the TAS",
    "start": "149310",
    "end": "151530"
  },
  {
    "text": "should fail if the container stops",
    "start": "151530",
    "end": "153840"
  },
  {
    "text": "running",
    "start": "153840",
    "end": "155760"
  },
  {
    "text": "you can specify the docker image to use",
    "start": "155760",
    "end": "157830"
  },
  {
    "text": "for the container and any volumes to",
    "start": "157830",
    "end": "160409"
  },
  {
    "text": "mount from other containers you can also",
    "start": "160409",
    "end": "162599"
  },
  {
    "text": "specify what commands to run when the",
    "start": "162599",
    "end": "164879"
  },
  {
    "text": "container starts",
    "start": "164879",
    "end": "166850"
  },
  {
    "text": "a task is an instantiation of a task",
    "start": "166850",
    "end": "169880"
  },
  {
    "text": "definition you can have a task with just",
    "start": "169880",
    "end": "172790"
  },
  {
    "text": "one container or up to ten that work",
    "start": "172790",
    "end": "175190"
  },
  {
    "text": "together on a single machine for",
    "start": "175190",
    "end": "177410"
  },
  {
    "text": "instance engine acts in front of nodejs",
    "start": "177410",
    "end": "180020"
  },
  {
    "text": "or red us behind rails you can run as",
    "start": "180020",
    "end": "183710"
  },
  {
    "text": "many tasks on a container instance as",
    "start": "183710",
    "end": "185840"
  },
  {
    "text": "will fit ECS has an API for scheduling",
    "start": "185840",
    "end": "189920"
  },
  {
    "text": "long running applications you just",
    "start": "189920",
    "end": "192200"
  },
  {
    "text": "reference a task definition and the",
    "start": "192200",
    "end": "194240"
  },
  {
    "text": "number of tasks you want to run",
    "start": "194240",
    "end": "195950"
  },
  {
    "text": "ECS handles the deployment and",
    "start": "195950",
    "end": "198190"
  },
  {
    "text": "integration with the OB",
    "start": "198190",
    "end": "200940"
  },
  {
    "start": "200000",
    "end": "330000"
  },
  {
    "text": "let's use these concepts to start our",
    "start": "200940",
    "end": "202980"
  },
  {
    "text": "application we're going to use the",
    "start": "202980",
    "end": "204990"
  },
  {
    "text": "wizard to guide us through this",
    "start": "204990",
    "end": "206430"
  },
  {
    "text": "application deployment",
    "start": "206430",
    "end": "207740"
  },
  {
    "text": "let's select Amazon ECS sample",
    "start": "207740",
    "end": "212120"
  },
  {
    "text": "we are first going to create a task",
    "start": "212120",
    "end": "214190"
  },
  {
    "text": "definition the sample application we",
    "start": "214190",
    "end": "216920"
  },
  {
    "text": "discussed earlier has two containers an",
    "start": "216920",
    "end": "219110"
  },
  {
    "text": "Apache server and a busy box you can use",
    "start": "219110",
    "end": "222830"
  },
  {
    "text": "the builder to edit the configuration of",
    "start": "222830",
    "end": "224720"
  },
  {
    "text": "each container for example you can",
    "start": "224720",
    "end": "227330"
  },
  {
    "text": "change the image our memory or CPU you",
    "start": "227330",
    "end": "230870"
  },
  {
    "text": "can also edit the task definition",
    "start": "230870",
    "end": "232269"
  },
  {
    "text": "directly from the JSON file once",
    "start": "232269",
    "end": "235370"
  },
  {
    "text": "everything is set to your desired",
    "start": "235370",
    "end": "237170"
  },
  {
    "text": "configuration click next step",
    "start": "237170",
    "end": "241540"
  },
  {
    "text": "next we're gonna use the service",
    "start": "242130",
    "end": "243750"
  },
  {
    "text": "scheduler to run our sample application",
    "start": "243750",
    "end": "245970"
  },
  {
    "text": "let's run one task and also associate it",
    "start": "245970",
    "end": "249600"
  },
  {
    "text": "with an EOB",
    "start": "249600",
    "end": "252410"
  },
  {
    "text": "before we can run our application we",
    "start": "252630",
    "end": "254940"
  },
  {
    "text": "must launch container instances into our",
    "start": "254940",
    "end": "257190"
  },
  {
    "text": "ECS cluster we're going to launch ten",
    "start": "257190",
    "end": "259799"
  },
  {
    "text": "instances select tea to medium and a key",
    "start": "259800",
    "end": "263220"
  },
  {
    "text": "pair click manage iam roles to grant",
    "start": "263220",
    "end": "266700"
  },
  {
    "text": "your ec2 instances permissions to access",
    "start": "266700",
    "end": "269250"
  },
  {
    "text": "the AWS resources it needs and for the",
    "start": "269250",
    "end": "273120"
  },
  {
    "text": "service scheduler to work with ELB to",
    "start": "273120",
    "end": "275400"
  },
  {
    "text": "route traffic to your instances clicking",
    "start": "275400",
    "end": "278640"
  },
  {
    "text": "on the button will open a new tab in - I",
    "start": "278640",
    "end": "280830"
  },
  {
    "text": "am role creation one-click wizard click",
    "start": "280830",
    "end": "284460"
  },
  {
    "text": "allow",
    "start": "284460",
    "end": "285030"
  },
  {
    "text": "next click review and launch",
    "start": "285030",
    "end": "288449"
  },
  {
    "text": "this screen allows us to review two",
    "start": "288449",
    "end": "290550"
  },
  {
    "text": "configurations we selected in the",
    "start": "290550",
    "end": "292439"
  },
  {
    "text": "previous steps let's click Launch",
    "start": "292439",
    "end": "294840"
  },
  {
    "text": "instance and run service what ECS is",
    "start": "294840",
    "end": "298080"
  },
  {
    "text": "doing now is using a to be as",
    "start": "298080",
    "end": "299849"
  },
  {
    "text": "CloudFormation to launch the requested",
    "start": "299849",
    "end": "301889"
  },
  {
    "text": "resources once the resource provisioning",
    "start": "301889",
    "end": "304589"
  },
  {
    "text": "completes we can click view service",
    "start": "304589",
    "end": "308600"
  },
  {
    "text": "here you'll see that we have one count",
    "start": "308600",
    "end": "310850"
  },
  {
    "text": "over tasks running we can click the",
    "start": "310850",
    "end": "313280"
  },
  {
    "text": "events tab to see what the service",
    "start": "313280",
    "end": "315020"
  },
  {
    "text": "scheduler is doing like starting tasks",
    "start": "315020",
    "end": "317600"
  },
  {
    "text": "our registering load balancers let's",
    "start": "317600",
    "end": "320690"
  },
  {
    "text": "click on the load balancer associated",
    "start": "320690",
    "end": "322670"
  },
  {
    "text": "with this application we're gonna grab",
    "start": "322670",
    "end": "325220"
  },
  {
    "text": "the EOB dns name and visit it in our",
    "start": "325220",
    "end": "328430"
  },
  {
    "text": "browser",
    "start": "328430",
    "end": "330200"
  },
  {
    "start": "330000",
    "end": "441000"
  },
  {
    "text": "you can see that the application is up",
    "start": "330200",
    "end": "332960"
  },
  {
    "text": "and running",
    "start": "332960",
    "end": "335190"
  },
  {
    "text": "let's make some modifications to our",
    "start": "335190",
    "end": "337140"
  },
  {
    "text": "application select a task definition",
    "start": "337140",
    "end": "339540"
  },
  {
    "text": "view from the navigation menu on the",
    "start": "339540",
    "end": "341940"
  },
  {
    "text": "left",
    "start": "341940",
    "end": "343490"
  },
  {
    "text": "select our current task definition",
    "start": "343490",
    "end": "344750"
  },
  {
    "text": "revision and create a new revision we're",
    "start": "344750",
    "end": "348530"
  },
  {
    "text": "going to edit the JSON file and change",
    "start": "348530",
    "end": "351050"
  },
  {
    "text": "the background color of our HTML file",
    "start": "351050",
    "end": "353300"
  },
  {
    "text": "and add a few exclamation marks finished",
    "start": "353300",
    "end": "357319"
  },
  {
    "text": "by clicking create the new revision of",
    "start": "357319",
    "end": "359960"
  },
  {
    "text": "our task definition is now ready let's",
    "start": "359960",
    "end": "363110"
  },
  {
    "text": "go back to our application in the",
    "start": "363110",
    "end": "364669"
  },
  {
    "text": "service view",
    "start": "364669",
    "end": "367210"
  },
  {
    "text": "click the Update button",
    "start": "369720",
    "end": "372280"
  },
  {
    "text": "select a new task definition file we",
    "start": "372280",
    "end": "374050"
  },
  {
    "text": "just created and click update service",
    "start": "374050",
    "end": "378559"
  },
  {
    "text": "the update is now happening first ECS",
    "start": "378559",
    "end": "381649"
  },
  {
    "text": "weights on the stop task until the",
    "start": "381649",
    "end": "383659"
  },
  {
    "text": "connections are trained from ELB then it",
    "start": "383659",
    "end": "386599"
  },
  {
    "text": "starts a new task",
    "start": "386599",
    "end": "388750"
  },
  {
    "text": "once the new task passes the EOB health",
    "start": "388750",
    "end": "391600"
  },
  {
    "text": "tracks",
    "start": "391600",
    "end": "392990"
  },
  {
    "text": "you can see your updated application by",
    "start": "392990",
    "end": "395810"
  },
  {
    "text": "visiting the EOB endpoint",
    "start": "395810",
    "end": "399460"
  },
  {
    "text": "lastly let's scale our application click",
    "start": "399870",
    "end": "403410"
  },
  {
    "text": "on the Update button again",
    "start": "403410",
    "end": "406270"
  },
  {
    "text": "the number of tasks to 10 and click",
    "start": "406270",
    "end": "408790"
  },
  {
    "text": "update service",
    "start": "408790",
    "end": "411780"
  },
  {
    "text": "the service scheduler will now scale",
    "start": "411810",
    "end": "413880"
  },
  {
    "text": "your application to ten tasks hit",
    "start": "413880",
    "end": "416730"
  },
  {
    "text": "refresh and you can see that we now have",
    "start": "416730",
    "end": "418920"
  },
  {
    "text": "ten tasks running",
    "start": "418920",
    "end": "422330"
  },
  {
    "text": "thank you for watching this video",
    "start": "422450",
    "end": "425190"
  },
  {
    "text": "today Amazon ec2 container service",
    "start": "425190",
    "end": "427500"
  },
  {
    "text": "console at consoled a dubious amazon.com",
    "start": "427500",
    "end": "431100"
  },
  {
    "text": "/ ECS for more information on Amazon ECS",
    "start": "431100",
    "end": "435510"
  },
  {
    "text": "visit a dubious amazon.com / ECS",
    "start": "435510",
    "end": "441740"
  }
]