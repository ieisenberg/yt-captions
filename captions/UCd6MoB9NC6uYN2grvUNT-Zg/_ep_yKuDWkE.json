[
  {
    "text": "[Applause]",
    "start": "0",
    "end": "750"
  },
  {
    "text": "[Music]",
    "start": "750",
    "end": "990"
  },
  {
    "text": "[Applause]",
    "start": "990",
    "end": "990"
  },
  {
    "text": "[Music]",
    "start": "990",
    "end": "3879"
  },
  {
    "text": "hey everyone my name is Nathan Peck and",
    "start": "5990",
    "end": "8730"
  },
  {
    "text": "I'm a developer advocate for Amazon",
    "start": "8730",
    "end": "10469"
  },
  {
    "text": "Elastic container service in this video",
    "start": "10469",
    "end": "12450"
  },
  {
    "text": "I'll show you how to use elastic",
    "start": "12450",
    "end": "13500"
  },
  {
    "text": "container service to break a monolithic",
    "start": "13500",
    "end": "15299"
  },
  {
    "text": "application into microservices we will",
    "start": "15299",
    "end": "17609"
  },
  {
    "text": "start out by running a monolith and ECS",
    "start": "17609",
    "end": "19920"
  },
  {
    "text": "and then we'll deploy new microservices",
    "start": "19920",
    "end": "22080"
  },
  {
    "text": "side by side with the monolith and",
    "start": "22080",
    "end": "23789"
  },
  {
    "text": "finally we'll divert traffic over to our",
    "start": "23789",
    "end": "26130"
  },
  {
    "text": "new microservices with zero downtime to",
    "start": "26130",
    "end": "28380"
  },
  {
    "text": "start you might be wondering what does a",
    "start": "28380",
    "end": "30060"
  },
  {
    "text": "model of vs. microservices and why might",
    "start": "30060",
    "end": "32730"
  },
  {
    "text": "we want to migrate from one to the other",
    "start": "32730",
    "end": "34320"
  },
  {
    "text": "a model lyft is an application that is a",
    "start": "34320",
    "end": "36989"
  },
  {
    "text": "single unit of deployment that handles",
    "start": "36989",
    "end": "39059"
  },
  {
    "text": "multiple types of business capability",
    "start": "39059",
    "end": "40649"
  },
  {
    "text": "usually all tightly coupled on the other",
    "start": "40649",
    "end": "43590"
  },
  {
    "text": "hand micro services take each core",
    "start": "43590",
    "end": "45480"
  },
  {
    "text": "business capability and deploy as its",
    "start": "45480",
    "end": "47730"
  },
  {
    "text": "own separate unit which performs only a",
    "start": "47730",
    "end": "49980"
  },
  {
    "text": "single function choosing monolithic or",
    "start": "49980",
    "end": "52829"
  },
  {
    "text": "micro service design fair application",
    "start": "52829",
    "end": "54030"
  },
  {
    "text": "has benefits and drawbacks at different",
    "start": "54030",
    "end": "56340"
  },
  {
    "text": "stages of a software products lifecycle",
    "start": "56340",
    "end": "58590"
  },
  {
    "text": "but in general it's often easier to",
    "start": "58590",
    "end": "60539"
  },
  {
    "text": "develop a model for a new project that",
    "start": "60539",
    "end": "62430"
  },
  {
    "text": "isn't fully fleshed out then as the",
    "start": "62430",
    "end": "64408"
  },
  {
    "text": "software becomes more fully featured",
    "start": "64409",
    "end": "65580"
  },
  {
    "text": "micro services allow teams to organize",
    "start": "65580",
    "end": "68010"
  },
  {
    "text": "their code along the lodging of the",
    "start": "68010",
    "end": "69630"
  },
  {
    "text": "business in a way that allows different",
    "start": "69630",
    "end": "71580"
  },
  {
    "text": "components of the system to be developed",
    "start": "71580",
    "end": "73080"
  },
  {
    "text": "and scaled independently many companies",
    "start": "73080",
    "end": "75119"
  },
  {
    "text": "go through this process of recognizing",
    "start": "75119",
    "end": "76770"
  },
  {
    "text": "that their core code base is growing",
    "start": "76770",
    "end": "78270"
  },
  {
    "text": "complex as it begin to have issues",
    "start": "78270",
    "end": "80640"
  },
  {
    "text": "adding new features or extending",
    "start": "80640",
    "end": "82140"
  },
  {
    "text": "existing functionality they realized",
    "start": "82140",
    "end": "84210"
  },
  {
    "text": "that they need to split some of the",
    "start": "84210",
    "end": "85350"
  },
  {
    "text": "functionality out into its own service",
    "start": "85350",
    "end": "87090"
  },
  {
    "text": "but this shift must be handled carefully",
    "start": "87090",
    "end": "89189"
  },
  {
    "text": "especially if you have customers using",
    "start": "89189",
    "end": "91049"
  },
  {
    "text": "your application",
    "start": "91049",
    "end": "91829"
  },
  {
    "text": "and want to upgrade your architecture",
    "start": "91829",
    "end": "93780"
  },
  {
    "text": "without causing interruptions so to",
    "start": "93780",
    "end": "96030"
  },
  {
    "text": "demonstrate how to do this type of",
    "start": "96030",
    "end": "97200"
  },
  {
    "text": "migration let's look at an example model",
    "start": "97200",
    "end": "99000"
  },
  {
    "text": "attic application this application is",
    "start": "99000",
    "end": "101369"
  },
  {
    "text": "going to be a small REST API for a forum",
    "start": "101369",
    "end": "103770"
  },
  {
    "text": "so as you can see this application it's",
    "start": "103770",
    "end": "106860"
  },
  {
    "text": "a typical monolithic application it's",
    "start": "106860",
    "end": "108689"
  },
  {
    "text": "serving a bunch of different restful api",
    "start": "108689",
    "end": "111540"
  },
  {
    "text": "routes and you can see if there's three",
    "start": "111540",
    "end": "113130"
  },
  {
    "text": "different top-level classes of restful",
    "start": "113130",
    "end": "115979"
  },
  {
    "text": "object that are being handled",
    "start": "115979",
    "end": "117240"
  },
  {
    "text": "there's users threads and posts so this",
    "start": "117240",
    "end": "122520"
  },
  {
    "text": "is a very typical setup for a model if",
    "start": "122520",
    "end": "124229"
  },
  {
    "text": "one codebase handling all three types of",
    "start": "124229",
    "end": "127140"
  },
  {
    "text": "requests for all three features so first",
    "start": "127140",
    "end": "130110"
  },
  {
    "text": "let's verify this application will",
    "start": "130110",
    "end": "132360"
  },
  {
    "text": "if I run it on my local machine so we",
    "start": "132360",
    "end": "138240"
  },
  {
    "text": "see a message that says that the server",
    "start": "138240",
    "end": "139650"
  },
  {
    "text": "is ready now let's make a few requests",
    "start": "139650",
    "end": "141990"
  },
  {
    "text": "to make sure that the server responds so",
    "start": "141990",
    "end": "150180"
  },
  {
    "text": "it looks like this app server is",
    "start": "150180",
    "end": "151530"
  },
  {
    "text": "functional but right now it just runs",
    "start": "151530",
    "end": "153450"
  },
  {
    "text": "locally we need to actually package it",
    "start": "153450",
    "end": "155280"
  },
  {
    "text": "up for deployment and that's where",
    "start": "155280",
    "end": "156660"
  },
  {
    "text": "docker comes in docker packages software",
    "start": "156660",
    "end": "159570"
  },
  {
    "text": "into standardized units called",
    "start": "159570",
    "end": "161040"
  },
  {
    "text": "containers that have everything the",
    "start": "161040",
    "end": "162840"
  },
  {
    "text": "software needs to run including",
    "start": "162840",
    "end": "164070"
  },
  {
    "text": "libraries system tools code and runtime",
    "start": "164070",
    "end": "167340"
  },
  {
    "text": "using docker you can quickly deploy and",
    "start": "167340",
    "end": "169890"
  },
  {
    "text": "scale applications into any environment",
    "start": "169890",
    "end": "171450"
  },
  {
    "text": "and know your code will run there so",
    "start": "171450",
    "end": "173970"
  },
  {
    "text": "here's a docker file I've previously",
    "start": "173970",
    "end": "175590"
  },
  {
    "text": "prepared for this application you can",
    "start": "175590",
    "end": "177480"
  },
  {
    "text": "see that it's fairly simple it starts",
    "start": "177480",
    "end": "179160"
  },
  {
    "text": "from a base image that contains my",
    "start": "179160",
    "end": "181230"
  },
  {
    "text": "specified version of nodejs then it has",
    "start": "181230",
    "end": "183750"
  },
  {
    "text": "a few commands to copy my application",
    "start": "183750",
    "end": "186180"
  },
  {
    "text": "code into the container and install",
    "start": "186180",
    "end": "188070"
  },
  {
    "text": "external dependencies using NPM I can",
    "start": "188070",
    "end": "190290"
  },
  {
    "text": "use this docker file to construct a",
    "start": "190290",
    "end": "191880"
  },
  {
    "text": "docker container image by using docker",
    "start": "191880",
    "end": "193770"
  },
  {
    "text": "build command",
    "start": "193770",
    "end": "196730"
  },
  {
    "text": "so this command that I just typed this",
    "start": "204190",
    "end": "206870"
  },
  {
    "text": "telling docker that I want to run the",
    "start": "206870",
    "end": "208970"
  },
  {
    "text": "container image in detached mode and I",
    "start": "208970",
    "end": "211550"
  },
  {
    "text": "want to receive any traffic that I send",
    "start": "211550",
    "end": "213530"
  },
  {
    "text": "to port 3000 on my localhost after I",
    "start": "213530",
    "end": "216200"
  },
  {
    "text": "launch the container my application is",
    "start": "216200",
    "end": "217819"
  },
  {
    "text": "once again running on my local machine",
    "start": "217819",
    "end": "219170"
  },
  {
    "text": "but this time it's actually running in a",
    "start": "219170",
    "end": "221360"
  },
  {
    "text": "docker container I can still access the",
    "start": "221360",
    "end": "223819"
  },
  {
    "text": "application just like I did when I was",
    "start": "223819",
    "end": "225440"
  },
  {
    "text": "running to wrap it on my host machine",
    "start": "225440",
    "end": "226790"
  },
  {
    "text": "though and you can see that there's a",
    "start": "226790",
    "end": "235849"
  },
  {
    "text": "response just like there was when I was",
    "start": "235849",
    "end": "237620"
  },
  {
    "text": "running the application directly on my",
    "start": "237620",
    "end": "238970"
  },
  {
    "text": "host so the next step is to take this",
    "start": "238970",
    "end": "241430"
  },
  {
    "text": "application container that's running on",
    "start": "241430",
    "end": "242900"
  },
  {
    "text": "my local machine and get it running in",
    "start": "242900",
    "end": "244790"
  },
  {
    "text": "the cloud first I'm going to create an",
    "start": "244790",
    "end": "246920"
  },
  {
    "text": "Amazon ECR repository in the nativist",
    "start": "246920",
    "end": "249110"
  },
  {
    "text": "console this repository will serve as a",
    "start": "249110",
    "end": "251420"
  },
  {
    "text": "centralized place for all my container",
    "start": "251420",
    "end": "252860"
  },
  {
    "text": "images each time I modify the",
    "start": "252860",
    "end": "254840"
  },
  {
    "text": "application I can build a container",
    "start": "254840",
    "end": "256489"
  },
  {
    "text": "image to capture a snapshot of the",
    "start": "256489",
    "end": "258109"
  },
  {
    "text": "entire application environment and",
    "start": "258109",
    "end": "259609"
  },
  {
    "text": "upload it to the repository",
    "start": "259609",
    "end": "262840"
  },
  {
    "text": "so I see a success message that says",
    "start": "271289",
    "end": "273610"
  },
  {
    "text": "I've successfully created a repository",
    "start": "273610",
    "end": "275049"
  },
  {
    "text": "and there's a list of commands that I",
    "start": "275049",
    "end": "276999"
  },
  {
    "text": "can use now to upload my image to that",
    "start": "276999",
    "end": "279669"
  },
  {
    "text": "repository now that my repository is",
    "start": "279669",
    "end": "282099"
  },
  {
    "text": "created I need to give my local machine",
    "start": "282099",
    "end": "283839"
  },
  {
    "text": "a login so it can upload to that",
    "start": "283839",
    "end": "285549"
  },
  {
    "text": "repository",
    "start": "285549",
    "end": "287759"
  },
  {
    "text": "[Music]",
    "start": "288550",
    "end": "291970"
  },
  {
    "text": "okay so login succeeded now I can tag",
    "start": "293900",
    "end": "296840"
  },
  {
    "text": "The Container image that I had built and",
    "start": "296840",
    "end": "298370"
  },
  {
    "text": "upload it to the repository that I",
    "start": "298370",
    "end": "300110"
  },
  {
    "text": "created",
    "start": "300110",
    "end": "302469"
  },
  {
    "text": "and with the docker container tagged I",
    "start": "306980",
    "end": "310370"
  },
  {
    "text": "can now push the docker container to the",
    "start": "310370",
    "end": "313310"
  },
  {
    "text": "registry on the latest tag",
    "start": "313310",
    "end": "316660"
  },
  {
    "text": "now that my image is stored in the",
    "start": "320460",
    "end": "322630"
  },
  {
    "text": "repository it can be pulled back down",
    "start": "322630",
    "end": "324220"
  },
  {
    "text": "and run wherever I need to run it",
    "start": "324220",
    "end": "325720"
  },
  {
    "text": "including an Amazon Elastic container",
    "start": "325720",
    "end": "327910"
  },
  {
    "text": "service in order to run the container",
    "start": "327910",
    "end": "329710"
  },
  {
    "text": "and elastic container service I have to",
    "start": "329710",
    "end": "331240"
  },
  {
    "text": "do a little bit of setup though I've",
    "start": "331240",
    "end": "333040"
  },
  {
    "text": "prepared a CloudFormation template to",
    "start": "333040",
    "end": "334750"
  },
  {
    "text": "set up a fresh BPC a cluster of docker",
    "start": "334750",
    "end": "337210"
  },
  {
    "text": "hosts and a load balancer I'm going to",
    "start": "337210",
    "end": "339700"
  },
  {
    "text": "launch that stack now by using a",
    "start": "339700",
    "end": "341200"
  },
  {
    "text": "constable command",
    "start": "341200",
    "end": "343950"
  },
  {
    "text": "so while I wait for my cloud formation",
    "start": "372669",
    "end": "374650"
  },
  {
    "text": "stack to launch I can go ahead and",
    "start": "374650",
    "end": "376180"
  },
  {
    "text": "create a task definition from my",
    "start": "376180",
    "end": "377620"
  },
  {
    "text": "application a task definition is simply",
    "start": "377620",
    "end": "380199"
  },
  {
    "text": "a list of configuration settings for how",
    "start": "380199",
    "end": "382240"
  },
  {
    "text": "to run my docker container this is where",
    "start": "382240",
    "end": "384639"
  },
  {
    "text": "I tell ECS what container image to run",
    "start": "384639",
    "end": "386770"
  },
  {
    "text": "how much CPU and memory the container",
    "start": "386770",
    "end": "389050"
  },
  {
    "text": "needs what ports it listens for web",
    "start": "389050",
    "end": "391180"
  },
  {
    "text": "traffic on among other things I'm going",
    "start": "391180",
    "end": "393490"
  },
  {
    "text": "to use the console to create a task",
    "start": "393490",
    "end": "395139"
  },
  {
    "text": "definition for the container image that",
    "start": "395139",
    "end": "396729"
  },
  {
    "text": "I just uploaded so I click create new",
    "start": "396729",
    "end": "399580"
  },
  {
    "text": "task definition I enter a name for the",
    "start": "399580",
    "end": "402819"
  },
  {
    "text": "task definition I click Add container I",
    "start": "402819",
    "end": "406379"
  },
  {
    "text": "name the container I specify the image",
    "start": "406379",
    "end": "410710"
  },
  {
    "text": "URL and tag how much memory the image",
    "start": "410710",
    "end": "415240"
  },
  {
    "text": "needs to run and then the port that the",
    "start": "415240",
    "end": "418270"
  },
  {
    "text": "container will receive traffic on I",
    "start": "418270",
    "end": "420000"
  },
  {
    "text": "click Add to add that container to the",
    "start": "420000",
    "end": "422349"
  },
  {
    "text": "task definition and create to create",
    "start": "422349",
    "end": "424960"
  },
  {
    "text": "this new task definition now that the",
    "start": "424960",
    "end": "427389"
  },
  {
    "text": "task definition is created I can launch",
    "start": "427389",
    "end": "429339"
  },
  {
    "text": "this task definition as a service this",
    "start": "429339",
    "end": "431740"
  },
  {
    "text": "is basically a way to tell ECS run one",
    "start": "431740",
    "end": "433930"
  },
  {
    "text": "or more copies of this container at all",
    "start": "433930",
    "end": "435460"
  },
  {
    "text": "times and connect the running containers",
    "start": "435460",
    "end": "437349"
  },
  {
    "text": "to a load balancer so to do this I",
    "start": "437349",
    "end": "440020"
  },
  {
    "text": "select the task definition I click the",
    "start": "440020",
    "end": "442180"
  },
  {
    "text": "Action menu and click create service I",
    "start": "442180",
    "end": "445919"
  },
  {
    "text": "name my service and specify how many",
    "start": "445919",
    "end": "448389"
  },
  {
    "text": "copies of my container I want to run",
    "start": "448389",
    "end": "452339"
  },
  {
    "text": "click the next step and now I need to",
    "start": "452550",
    "end": "455500"
  },
  {
    "text": "select a load balancer to put in front",
    "start": "455500",
    "end": "457240"
  },
  {
    "text": "of my application I'm going to select",
    "start": "457240",
    "end": "459250"
  },
  {
    "text": "the application load balancer type",
    "start": "459250",
    "end": "460779"
  },
  {
    "text": "because this type of load balancer is",
    "start": "460779",
    "end": "462399"
  },
  {
    "text": "especially well-suited for an HTTP REST",
    "start": "462399",
    "end": "464830"
  },
  {
    "text": "API you can see that it has already",
    "start": "464830",
    "end": "468129"
  },
  {
    "text": "selected a load balancer that I created",
    "start": "468129",
    "end": "470020"
  },
  {
    "text": "for this demo I just need to add my",
    "start": "470020",
    "end": "472270"
  },
  {
    "text": "container to that load balancer and I do",
    "start": "472270",
    "end": "474399"
  },
  {
    "text": "that by clicking the Add to ELB button",
    "start": "474399",
    "end": "476789"
  },
  {
    "text": "I'm going to create a new listener on",
    "start": "476789",
    "end": "479050"
  },
  {
    "text": "this load balancer which receives the",
    "start": "479050",
    "end": "480699"
  },
  {
    "text": "client traffic on port 80 and forwards",
    "start": "480699",
    "end": "482409"
  },
  {
    "text": "it to my container I'm going to name a",
    "start": "482409",
    "end": "485229"
  },
  {
    "text": "target group which is going to be a list",
    "start": "485229",
    "end": "487180"
  },
  {
    "text": "of the containers that are running",
    "start": "487180",
    "end": "488289"
  },
  {
    "text": "across my cluster and I click next step",
    "start": "488289",
    "end": "491289"
  },
  {
    "text": "I'm not going to configure auto scaling",
    "start": "491289",
    "end": "493120"
  },
  {
    "text": "in this demo I just want to review the",
    "start": "493120",
    "end": "495370"
  },
  {
    "text": "settings that I specified and click",
    "start": "495370",
    "end": "497259"
  },
  {
    "text": "create service",
    "start": "497259",
    "end": "499039"
  },
  {
    "text": "so after a few minutes everything turns",
    "start": "499039",
    "end": "501259"
  },
  {
    "text": "green I can click view service to view",
    "start": "501259",
    "end": "503509"
  },
  {
    "text": "my newly created service I can see that",
    "start": "503509",
    "end": "505520"
  },
  {
    "text": "there are two running tasks which",
    "start": "505520",
    "end": "506869"
  },
  {
    "text": "represent two running copies of our",
    "start": "506869",
    "end": "508580"
  },
  {
    "text": "model of container and now as you can",
    "start": "508580",
    "end": "512360"
  },
  {
    "text": "see that they've turned green to show it",
    "start": "512360",
    "end": "514159"
  },
  {
    "text": "running status which means that they're",
    "start": "514159",
    "end": "515510"
  },
  {
    "text": "up and running these containers have",
    "start": "515510",
    "end": "517310"
  },
  {
    "text": "been connected to an application load",
    "start": "517310",
    "end": "518930"
  },
  {
    "text": "balancer if I go to the cloud formation",
    "start": "518930",
    "end": "521149"
  },
  {
    "text": "stack that I launched earlier I can",
    "start": "521149",
    "end": "522860"
  },
  {
    "text": "locate the URL of the load balancer and",
    "start": "522860",
    "end": "524870"
  },
  {
    "text": "make a request to the address of a load",
    "start": "524870",
    "end": "526670"
  },
  {
    "text": "balancer to verify the services up and",
    "start": "526670",
    "end": "528500"
  },
  {
    "text": "running so at this point I have my",
    "start": "528500",
    "end": "533000"
  },
  {
    "text": "classic-style monolithic application up",
    "start": "533000",
    "end": "535069"
  },
  {
    "text": "and running in Amazon Elastic container",
    "start": "535069",
    "end": "537019"
  },
  {
    "text": "service but I'm not done yet",
    "start": "537019",
    "end": "539060"
  },
  {
    "text": "my goal is to take this monolith and",
    "start": "539060",
    "end": "541040"
  },
  {
    "text": "split it up into micro services if we",
    "start": "541040",
    "end": "543980"
  },
  {
    "text": "look back at the base code for the",
    "start": "543980",
    "end": "545630"
  },
  {
    "text": "monolith you can see that the HTTP",
    "start": "545630",
    "end": "547100"
  },
  {
    "text": "routes relating to users threads and",
    "start": "547100",
    "end": "549589"
  },
  {
    "text": "posts a sensible way to split this",
    "start": "549589",
    "end": "552050"
  },
  {
    "text": "application up into micro services would",
    "start": "552050",
    "end": "554300"
  },
  {
    "text": "be to create three micro services one",
    "start": "554300",
    "end": "556550"
  },
  {
    "text": "for users one for threads and one for",
    "start": "556550",
    "end": "558920"
  },
  {
    "text": "posts and here's what that could might",
    "start": "558920",
    "end": "560810"
  },
  {
    "text": "look like as you can see it's very",
    "start": "560810",
    "end": "564350"
  },
  {
    "text": "similar to the monolithic code but",
    "start": "564350",
    "end": "566209"
  },
  {
    "text": "instead of serving all three different",
    "start": "566209",
    "end": "567800"
  },
  {
    "text": "types of restful services it only serves",
    "start": "567800",
    "end": "569690"
  },
  {
    "text": "HTTP routes that relate to one type of",
    "start": "569690",
    "end": "572420"
  },
  {
    "text": "resources the posts so what I'm going to",
    "start": "572420",
    "end": "575000"
  },
  {
    "text": "do is I'm going to repeat the steps that",
    "start": "575000",
    "end": "576440"
  },
  {
    "text": "I did to deploy the monolithic",
    "start": "576440",
    "end": "577670"
  },
  {
    "text": "application but instead I'll build and",
    "start": "577670",
    "end": "580100"
  },
  {
    "text": "deploy three different micro services",
    "start": "580100",
    "end": "581990"
  },
  {
    "text": "that will run in parallel with the",
    "start": "581990",
    "end": "583130"
  },
  {
    "text": "monolith first up I create three new",
    "start": "583130",
    "end": "585800"
  },
  {
    "text": "repositories for the three services",
    "start": "585800",
    "end": "589660"
  },
  {
    "text": "[Music]",
    "start": "591010",
    "end": "593440"
  },
  {
    "text": "so now I'll build and push each",
    "start": "593440",
    "end": "595940"
  },
  {
    "text": "container image to these new",
    "start": "595940",
    "end": "597200"
  },
  {
    "text": "repositories",
    "start": "597200",
    "end": "599860"
  },
  {
    "text": "[Music]",
    "start": "634220",
    "end": "637628"
  },
  {
    "text": "[Music]",
    "start": "640720",
    "end": "643829"
  },
  {
    "text": "[Music]",
    "start": "677430",
    "end": "680839"
  },
  {
    "text": "[Music]",
    "start": "683950",
    "end": "687039"
  },
  {
    "text": "next I create a task definition for each",
    "start": "706600",
    "end": "709279"
  },
  {
    "text": "of these repositories and turn each of",
    "start": "709279",
    "end": "711379"
  },
  {
    "text": "those task definitions into a running",
    "start": "711379",
    "end": "712999"
  },
  {
    "text": "service",
    "start": "712999",
    "end": "715389"
  },
  {
    "text": "[Music]",
    "start": "720640",
    "end": "724049"
  },
  {
    "text": "[Music]",
    "start": "727160",
    "end": "730250"
  },
  {
    "text": "so as you can see I can figure the load",
    "start": "739140",
    "end": "741420"
  },
  {
    "text": "balancer for each service to bind to a",
    "start": "741420",
    "end": "743850"
  },
  {
    "text": "sub path of the restful route that is",
    "start": "743850",
    "end": "745950"
  },
  {
    "text": "specific to that service and once again",
    "start": "745950",
    "end": "748800"
  },
  {
    "text": "I see each service launch with a couple",
    "start": "748800",
    "end": "750810"
  },
  {
    "text": "tasks if I make some web requests the",
    "start": "750810",
    "end": "753300"
  },
  {
    "text": "load balancer I can still get the exact",
    "start": "753300",
    "end": "754980"
  },
  {
    "text": "same response that I did before but",
    "start": "754980",
    "end": "757140"
  },
  {
    "text": "what's been happening behind the scenes",
    "start": "757140",
    "end": "758459"
  },
  {
    "text": "is much different if I view the listener",
    "start": "758459",
    "end": "760890"
  },
  {
    "text": "rules for this load balancer I can see",
    "start": "760890",
    "end": "762420"
  },
  {
    "text": "for roles there's a default rule which",
    "start": "762420",
    "end": "765450"
  },
  {
    "text": "sends traffic to my monolith but above",
    "start": "765450",
    "end": "767579"
  },
  {
    "text": "that there are three other rules which",
    "start": "767579",
    "end": "769230"
  },
  {
    "text": "divert specific paths to my",
    "start": "769230",
    "end": "771000"
  },
  {
    "text": "micro-services so based on the priority",
    "start": "771000",
    "end": "773220"
  },
  {
    "text": "of these micro-service rules all the",
    "start": "773220",
    "end": "774839"
  },
  {
    "text": "traffic that matches these paths is",
    "start": "774839",
    "end": "776310"
  },
  {
    "text": "being sent to the micro-services instead",
    "start": "776310",
    "end": "778260"
  },
  {
    "text": "of the monolith I can actually shut down",
    "start": "778260",
    "end": "780240"
  },
  {
    "text": "the monolith without impacting service",
    "start": "780240",
    "end": "782160"
  },
  {
    "text": "availability so that's what I'm going to",
    "start": "782160",
    "end": "784440"
  },
  {
    "text": "do right now I update the number of",
    "start": "784440",
    "end": "789240"
  },
  {
    "text": "tasks to zero to tell ECS to update the",
    "start": "789240",
    "end": "792000"
  },
  {
    "text": "number of tasks and remove all of them",
    "start": "792000",
    "end": "796370"
  },
  {
    "text": "then I click view service and I'll see",
    "start": "797420",
    "end": "800310"
  },
  {
    "text": "that my services tasks will disappear",
    "start": "800310",
    "end": "804980"
  },
  {
    "text": "as you can see I can still send traffic",
    "start": "807660",
    "end": "809880"
  },
  {
    "text": "to my load balancer and all the same",
    "start": "809880",
    "end": "811650"
  },
  {
    "text": "paths that used to work actually still",
    "start": "811650",
    "end": "813270"
  },
  {
    "text": "work just like they did before I have",
    "start": "813270",
    "end": "815760"
  },
  {
    "text": "successfully migrated all my traffic",
    "start": "815760",
    "end": "817500"
  },
  {
    "text": "over from a model F to micro-services",
    "start": "817500",
    "end": "819540"
  },
  {
    "text": "without downtime or a single drop",
    "start": "819540",
    "end": "821640"
  },
  {
    "text": "request the same approach can be applied",
    "start": "821640",
    "end": "824010"
  },
  {
    "text": "to any application behind a nail B but",
    "start": "824010",
    "end": "826470"
  },
  {
    "text": "it works especially well in conjunction",
    "start": "826470",
    "end": "827730"
  },
  {
    "text": "with Amazon elastic container service",
    "start": "827730",
    "end": "829440"
  },
  {
    "text": "because of the automated configuration",
    "start": "829440",
    "end": "831600"
  },
  {
    "text": "of your target groups as you deploy the",
    "start": "831600",
    "end": "833160"
  },
  {
    "text": "new services if you want to try this out",
    "start": "833160",
    "end": "834960"
  },
  {
    "text": "for yourself you can follow the steps on",
    "start": "834960",
    "end": "836760"
  },
  {
    "text": "the AWS website getting started slash",
    "start": "836760",
    "end": "838920"
  },
  {
    "text": "container micro services tutorial thanks",
    "start": "838920",
    "end": "841380"
  },
  {
    "text": "a lot for watching this demo and I wish",
    "start": "841380",
    "end": "842970"
  },
  {
    "text": "you the best of luck in your own micro",
    "start": "842970",
    "end": "844500"
  },
  {
    "text": "services adventures on AWS",
    "start": "844500",
    "end": "848210"
  },
  {
    "text": "[Music]",
    "start": "849390",
    "end": "855609"
  }
]