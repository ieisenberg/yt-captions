[
  {
    "start": "0",
    "end": "20000"
  },
  {
    "text": "welcome to securing container based applications my name is Henrik Johansen I'm a",
    "start": "60",
    "end": "6210"
  },
  {
    "text": "security specialist solution architect here in America's if I'm coughing I apologize starting to hit the dry air",
    "start": "6210",
    "end": "12330"
  },
  {
    "text": "Thursday with me I have Michael Kipp Koro who is going to present the second half it will make him have the intro a",
    "start": "12330",
    "end": "19699"
  },
  {
    "text": "little bit what to expect from this session we're going to talk about always in container security as per the title",
    "start": "19699",
    "end": "25910"
  },
  {
    "start": "20000",
    "end": "20000"
  },
  {
    "text": "we're going to cover a little bit on the intro to container security and a number of best practices what you can do to",
    "start": "25910",
    "end": "32610"
  },
  {
    "text": "both reduce the attack surface and also secure the actually container instances",
    "start": "32610",
    "end": "38360"
  },
  {
    "text": "discuss a little bit on contain a lifecycle security that includes vulnerability analysis on the actual",
    "start": "38360",
    "end": "44670"
  },
  {
    "text": "containers how you can secure using for examples certain partner tools and how",
    "start": "44670",
    "end": "51989"
  },
  {
    "text": "you can build that into a sea sed pipeline and then les we're going to talk about managing secrets how do you",
    "start": "51989",
    "end": "58440"
  },
  {
    "text": "manage secrets on the container system what's the main do's and don'ts then",
    "start": "58440",
    "end": "64860"
  },
  {
    "text": "we'll move on to infrastructure security and Michael gonna take over and talk a little bit about enforcing governance",
    "start": "64860",
    "end": "70380"
  },
  {
    "text": "with Amazon SES and how to perform governance before you roll out you in",
    "start": "70380",
    "end": "75930"
  },
  {
    "text": "images we're also gonna covering using containers to automate security deployments so how can you build a",
    "start": "75930",
    "end": "82530"
  },
  {
    "text": "secure application flow using containers",
    "start": "82530",
    "end": "86210"
  },
  {
    "text": "so a quick intro to container security how many people use acs today or another",
    "start": "88009",
    "end": "93720"
  },
  {
    "text": "container solution awesome so i'm gonna go through this very",
    "start": "93720",
    "end": "100530"
  },
  {
    "start": "98000",
    "end": "98000"
  },
  {
    "text": "quickly then a lot of people consider when they're talking about container vs vm oscillation a lot of people say that",
    "start": "100530",
    "end": "107970"
  },
  {
    "text": "containers are essentially asked small virtual machines that's not really accurate there's a couple of main",
    "start": "107970",
    "end": "115500"
  },
  {
    "text": "differences here that when it comes to isolation so for example a container is",
    "start": "115500",
    "end": "121920"
  },
  {
    "text": "implemented using Linux verse namespaces that means that it has a slightly weaker",
    "start": "121920",
    "end": "127069"
  },
  {
    "text": "isolation then a virtual machine has because they do run almost",
    "start": "127069",
    "end": "133260"
  },
  {
    "text": "colonel so all the containers running on the same enzymes run on the same same colonel they also share certain files",
    "start": "133260",
    "end": "141269"
  },
  {
    "text": "soccer's memory areas devices etc so they have a different security posture from the get-go versus a virtual machine",
    "start": "141269",
    "end": "149720"
  },
  {
    "text": "however there are a number of and I hope everyone can see that there are a number of items that actually make the",
    "start": "149720",
    "end": "156230"
  },
  {
    "start": "150000",
    "end": "150000"
  },
  {
    "text": "container solution more secure by default just by the way containers are implemented so we have for example the",
    "start": "156230",
    "end": "162930"
  },
  {
    "text": "namespaces that happens the isolation for it we also have the ability to add",
    "start": "162930",
    "end": "168930"
  },
  {
    "text": "tools like SELinux app armor seccomp I'm gonna talk a little bit later what they",
    "start": "168930",
    "end": "174329"
  },
  {
    "text": "are but we also have a lot of out-of-the-box default settings that will really increase security on the",
    "start": "174329",
    "end": "179760"
  },
  {
    "text": "containers they come with the for example docker ECS or whatever container solution you're using you also have a lot more",
    "start": "179760",
    "end": "187470"
  },
  {
    "text": "granular control controls to control what they actually can do in the instance even by either removing those",
    "start": "187470",
    "end": "194720"
  },
  {
    "text": "those binaries for example that you don't need to have you can also control in a very easy way combination of",
    "start": "194720",
    "end": "201379"
  },
  {
    "text": "security groups and with the docker configuration and dcs configuration you",
    "start": "201379",
    "end": "207329"
  },
  {
    "text": "can also configure port on a more granular level they also have no default",
    "start": "207329",
    "end": "212430"
  },
  {
    "text": "ssh to containers so there's no one that actually needs to access the actual",
    "start": "212430",
    "end": "217530"
  },
  {
    "text": "files on there same thing with system users you don't need to have the system users there by default in the same way",
    "start": "217530",
    "end": "222540"
  },
  {
    "text": "you have with a virtual machine and you have fairly easy to establish an",
    "start": "222540",
    "end": "227879"
  },
  {
    "text": "immutable infrastructure by providing for example read-only file systems and locking down so there is no access to",
    "start": "227879",
    "end": "235079"
  },
  {
    "text": "them and you can easily do a brief in written or replace in case there is some some concern with any containers and the",
    "start": "235079",
    "end": "242280"
  },
  {
    "text": "whole concept of containers is that you can just put them up and turn them down as you wish so one way to handle this",
    "start": "242280",
    "end": "252329"
  },
  {
    "start": "249000",
    "end": "249000"
  },
  {
    "text": "kind of security is defense through segmentation so as I mentioned they have a weak or isolation just before because",
    "start": "252329",
    "end": "260639"
  },
  {
    "text": "they use namespaces versus VM isolation but you can still combine the benefit of",
    "start": "260639",
    "end": "265800"
  },
  {
    "text": "running on a virtual machine with running on containers couple of items make sure you",
    "start": "265800",
    "end": "272070"
  },
  {
    "text": "keep containers up-to-date but also they contain incense a lot of people tend to forget that they're running on an",
    "start": "272070",
    "end": "277620"
  },
  {
    "text": "operating system and also they tend to get that they have to change the files in the actual containers you can either",
    "start": "277620",
    "end": "284220"
  },
  {
    "text": "do it yourself or you can use one of the third-party apps out there to to scan your container instances UCM roles for",
    "start": "284220",
    "end": "292320"
  },
  {
    "text": "tasks we're gonna talk about that later Michael's gonna cover that we fairly recently launched IEM roles for tasks",
    "start": "292320",
    "end": "298500"
  },
  {
    "text": "which means that you don't have to put the I M role on the ec2 instance only you can put it on a task definition and",
    "start": "298500",
    "end": "305910"
  },
  {
    "text": "then segregate the containers you can switch them out by for example role or customer and have all the customers",
    "start": "305910",
    "end": "311670"
  },
  {
    "text": "running on the same set of instance cluster or you can separate them on a",
    "start": "311670",
    "end": "316980"
  },
  {
    "text": "risk trust and exposure level I would highly encourage that even if you separate about by customer role still",
    "start": "316980",
    "end": "324480"
  },
  {
    "text": "break it down in a trust perspective go through what kind of exposure does this contain how to your external access what",
    "start": "324480",
    "end": "331860"
  },
  {
    "text": "kind of exposure does they have to other internal containers which containers does it need to talk to and try to",
    "start": "331860",
    "end": "337380"
  },
  {
    "text": "isolate according to that sort of trust model another way to handle this",
    "start": "337380",
    "end": "344970"
  },
  {
    "start": "343000",
    "end": "343000"
  },
  {
    "text": "segmentation is that you do reduce the attack surface area for your containers by default they have a much smaller",
    "start": "344970",
    "end": "351690"
  },
  {
    "text": "attack surface just because it's a service it's not a full system you can",
    "start": "351690",
    "end": "356730"
  },
  {
    "text": "however reduce this even further by for example only contain the static binders",
    "start": "356730",
    "end": "362220"
  },
  {
    "text": "that you actually need rip out anything that doesn't have to be there one",
    "start": "362220",
    "end": "367380"
  },
  {
    "text": "example so under emulate drivers is is the case where virtual machines have a",
    "start": "367380",
    "end": "372540"
  },
  {
    "text": "higher attack service just because they also have much more resources running on",
    "start": "372540",
    "end": "377700"
  },
  {
    "text": "them so for example there was something called the venom attack a while ago which emulated a floppy drive to get",
    "start": "377700",
    "end": "385380"
  },
  {
    "text": "access to the system information this was not affected since it's a doubly as it was did not affect the rest resources",
    "start": "385380",
    "end": "391200"
  },
  {
    "text": "because we have restricted or can of access but it's a typical attack where by the fact of having much more",
    "start": "391200",
    "end": "398220"
  },
  {
    "text": "resources and much more binaries access to those binaries you can actually increase the attack surface",
    "start": "398220",
    "end": "404690"
  },
  {
    "text": "area by just running by default mode also harden the the class for instance",
    "start": "404690",
    "end": "410240"
  },
  {
    "text": "follow for example nist sands whatever security best practice and benchmark you choose to follow but make sure you do",
    "start": "410240",
    "end": "416960"
  },
  {
    "text": "the proper hardening on the actual caster instance as well don't just harden the container and then use many",
    "start": "416960",
    "end": "424820"
  },
  {
    "text": "but smaller instances to limit the blast radius this is also from an availability perspective that if one contain",
    "start": "424820",
    "end": "431570"
  },
  {
    "text": "ministers goes down and that's happened to be an eight Excel ten Excel server where you have hundreds and hundreds of",
    "start": "431570",
    "end": "437120"
  },
  {
    "text": "containers that has much higher impact and if you have a smaller number of containers spread out across multiple",
    "start": "437120",
    "end": "443210"
  },
  {
    "text": "instances but also from a security perspective the more containers the more",
    "start": "443210",
    "end": "448610"
  },
  {
    "text": "rolls you put on that server the more your attack surface grows a couple of",
    "start": "448610",
    "end": "457250"
  },
  {
    "start": "454000",
    "end": "454000"
  },
  {
    "text": "other best practices we're going to go through each of these individually limit resources by way to reduce the attack",
    "start": "457250",
    "end": "463820"
  },
  {
    "text": "service by saying that the less resources you have on there the less risk it is of sprawling processes of",
    "start": "463820",
    "end": "469550"
  },
  {
    "text": "someone trying to exploit other pieces of the system absolutely set it to read-only unless you have to have the",
    "start": "469550",
    "end": "476030"
  },
  {
    "text": "right to that volume set the filesystem to read only limit container networking",
    "start": "476030",
    "end": "481160"
  },
  {
    "text": "there's multiple ways of doing that you can do it using container settings and docker and ECS setting and you can also",
    "start": "481160",
    "end": "487849"
  },
  {
    "text": "use third-party solutions to do this remove set key set width and set period",
    "start": "487849",
    "end": "494240"
  },
  {
    "text": "as I said if you don't need to change these system parameters remove them from the container instance same thing here",
    "start": "494240",
    "end": "502520"
  },
  {
    "text": "set contains run as normal reducers unless they absolutely have and this also includes running in privileged mode",
    "start": "502520",
    "end": "508160"
  },
  {
    "text": "unless you have a need to run something in privileged mode don't do it that gives the container much more",
    "start": "508160",
    "end": "514310"
  },
  {
    "text": "access to for example system resources to the actual blocker configuration and to the docking networking stack in those",
    "start": "514310",
    "end": "520070"
  },
  {
    "text": "items so unless you have to do it don't run it in privilege mode there are some products that use privilege mode and",
    "start": "520070",
    "end": "526670"
  },
  {
    "text": "it's third-party products for example to use privilege mode to increase this good posture but for your regular containers",
    "start": "526670",
    "end": "532820"
  },
  {
    "text": "you most likely don't need to and then use the Linux kernel security features like set calm as Linux will",
    "start": "532820",
    "end": "540079"
  },
  {
    "text": "cover those as well like I said setting",
    "start": "540079",
    "end": "545809"
  },
  {
    "start": "542000",
    "end": "542000"
  },
  {
    "text": "resource limits in the test definition you can easily set the CPU limit basically how much CPU units you will",
    "start": "545809",
    "end": "552439"
  },
  {
    "text": "have for that container same thing with Ram you Ram limits and you can also that you limit so for",
    "start": "552439",
    "end": "557899"
  },
  {
    "text": "example limiting like file second locks fastest logs and mem locks all of this is just to reduce the amount of",
    "start": "557899",
    "end": "563929"
  },
  {
    "text": "resources available for someone to take advantage of if something happens read",
    "start": "563929",
    "end": "571369"
  },
  {
    "start": "570000",
    "end": "570000"
  },
  {
    "text": "only you can complete this in the easiest task definition it's a simple command saying just read only file",
    "start": "571369",
    "end": "577610"
  },
  {
    "text": "system true when you do this it's gonna map to the docker setting which is read only route FS and also the docker flag",
    "start": "577610",
    "end": "584300"
  },
  {
    "text": "of read only but if you set it in this year's test definition that will carry on through and septic right talk replies",
    "start": "584300",
    "end": "591470"
  },
  {
    "text": "for you and again if you don't need to write to the containers set that as",
    "start": "591470",
    "end": "596809"
  },
  {
    "text": "default if you're unsure set it to read only test it",
    "start": "596809",
    "end": "603019"
  },
  {
    "text": "same thing with volumes you need to mount on the mount point there is a flag called read only true same thing there",
    "start": "603019",
    "end": "608990"
  },
  {
    "text": "make sure you use that when you add mount points to your containers from a",
    "start": "608990",
    "end": "615499"
  },
  {
    "start": "614000",
    "end": "614000"
  },
  {
    "text": "networking perspective we can also do a lot of things there of course you security groups on the continuances",
    "start": "615499",
    "end": "621290"
  },
  {
    "text": "itself but also in a container level we're going to talk a little bit on in micro session there how you can restrict",
    "start": "621290",
    "end": "628429"
  },
  {
    "text": "this using proper governance in a pre deploy scenario so how you can ensure that the container has definition",
    "start": "628429",
    "end": "635379"
  },
  {
    "text": "doesn't have unwanted network port open so this is absolutely a pre deployment",
    "start": "635379",
    "end": "641799"
  },
  {
    "text": "assessment that you can do before it goes out and the thing you read restrict",
    "start": "641799",
    "end": "646999"
  },
  {
    "text": "after it goes out will have a much higher impact on the security posture no they expect the",
    "start": "646999",
    "end": "652549"
  },
  {
    "text": "traffic patterns just know your applications my usual recommendation is that your",
    "start": "652549",
    "end": "657649"
  },
  {
    "text": "security groups should always match the expected application flow so if your application expect to talk to a database",
    "start": "657649",
    "end": "665120"
  },
  {
    "text": "server that's the only thing that it should be able to talk to and this should be restricted using both security groups but also using IP tables",
    "start": "665120",
    "end": "674559"
  },
  {
    "text": "other fields there's third-party tools whatever it is that you can use but make sure that you restrict that access",
    "start": "674559",
    "end": "681769"
  },
  {
    "text": "same thing with north-south and also east-west patterns one web service should never be able to talk to the",
    "start": "681769",
    "end": "687649"
  },
  {
    "text": "other web service just because they happen to have the same role one really",
    "start": "687649",
    "end": "692720"
  },
  {
    "text": "effective way to do this and keep in mind that so this is a feature called ICC so inter container communication",
    "start": "692720",
    "end": "698360"
  },
  {
    "text": "this is enabled by default this allows you to talk to other containers and have",
    "start": "698360",
    "end": "703610"
  },
  {
    "text": "traffic between the containers unless you absolutely need to have open access for all the containers to talk to each",
    "start": "703610",
    "end": "709850"
  },
  {
    "text": "other don't set this is ICC that's true set it as false and that's going to enable IP tables instead to handle the",
    "start": "709850",
    "end": "717259"
  },
  {
    "text": "communication on a per container level and then you just use link to tell say",
    "start": "717259",
    "end": "722329"
  },
  {
    "text": "which container can talk to the other containers and Michael's gonna demo that as well a little bit but apps use the",
    "start": "722329",
    "end": "730699"
  },
  {
    "text": "link flag to restrict which container can talk to to which one you can also",
    "start": "730699",
    "end": "736519"
  },
  {
    "text": "use third-party to do that just pretty much live for a company called Maui vector which is a third-party tool that",
    "start": "736519",
    "end": "743720"
  },
  {
    "text": "run as a container itself on the container instance to take different types of threat from both external and",
    "start": "743720",
    "end": "749809"
  },
  {
    "text": "internal networks and protect against like DDoS cross-site scripting and",
    "start": "749809",
    "end": "754850"
  },
  {
    "text": "things like that they will act as a layer three to seven firewall and will",
    "start": "754850",
    "end": "759949"
  },
  {
    "text": "detect they have built-in security policy over 30 applications and protocols and it's kind of cool they",
    "start": "759949",
    "end": "765019"
  },
  {
    "text": "also build map so we're talking about knowing your application traffic they will actually map the traffic and detect",
    "start": "765019",
    "end": "772309"
  },
  {
    "text": "the traffic going on the container and draw it out on a visual map so you can see exactly which container is talking",
    "start": "772309",
    "end": "778550"
  },
  {
    "text": "to which one and they can identify if it's for example an angelic server on my sequel database and by identifying that",
    "start": "778550",
    "end": "785779"
  },
  {
    "text": "traffic they can also say that this is the normal traffic that should go between a web server if I start seeing",
    "start": "785779",
    "end": "790939"
  },
  {
    "text": "other things disabled that will give you the option to disable that traffic and",
    "start": "790939",
    "end": "797089"
  },
  {
    "text": "it can also see that if you start having traffic going northbound is that and so for example if suddenly you're my",
    "start": "797089",
    "end": "804390"
  },
  {
    "text": "sequel database is sort of to call back to the web server that can also be identified and then you can just",
    "start": "804390",
    "end": "809970"
  },
  {
    "text": "integrate that with for example a sim or a log aggregator as I mentioned remove",
    "start": "809970",
    "end": "818970"
  },
  {
    "text": "binaries that you don't need most apps actually don't need access to any of this",
    "start": "818970",
    "end": "824210"
  },
  {
    "text": "what is that kids that you read or any of change owner changed permission",
    "start": "824210",
    "end": "829590"
  },
  {
    "text": "whatever you said to me unless you need it go through the the image that you're using to verify if there you can also",
    "start": "829590",
    "end": "837300"
  },
  {
    "text": "use this is a defanged taqwa file configuration that just goes through and",
    "start": "837300",
    "end": "843240"
  },
  {
    "text": "removes access to those to those binaries this is a really common use",
    "start": "843240",
    "end": "850530"
  },
  {
    "text": "case where people trying to do privilege escalation on container instances is by using those camera binaries",
    "start": "850530",
    "end": "858230"
  },
  {
    "start": "858000",
    "end": "858000"
  },
  {
    "text": "instead of non-root user you can do this in multiple ways you can create the user using the docker file or just change to",
    "start": "858930",
    "end": "866220"
  },
  {
    "text": "used to be the user command or set it in the easiest tasks definition just don't run as root by default it's the same as",
    "start": "866220",
    "end": "873540"
  },
  {
    "text": "with the end of list account don't use root seccomp it's a Linux kernel feature it gets",
    "start": "873540",
    "end": "880770"
  },
  {
    "text": "support from doctor in 1.10 it has a default profile that limits a lot of the",
    "start": "880770",
    "end": "886800"
  },
  {
    "text": "different system calls things like a large library basically you can also",
    "start": "886800",
    "end": "893280"
  },
  {
    "text": "customize this to have additional blocks on various system calls running on top",
    "start": "893280",
    "end": "898500"
  },
  {
    "text": "of the Chester instance you can also make a custom profile and set it in the",
    "start": "898500",
    "end": "905910"
  },
  {
    "text": "docker security option to point to that specific profile we'll show you later how to enable that as well as the Linux",
    "start": "905910",
    "end": "914240"
  },
  {
    "text": "which implements the the maximum editor access control they have a default",
    "start": "914240",
    "end": "919740"
  },
  {
    "text": "policy for doctor which is designed to protect the hosts you can use for example tags to restrict the usage from",
    "start": "919740",
    "end": "926220"
  },
  {
    "text": "be containers it enforces read-only",
    "start": "926220",
    "end": "932310"
  },
  {
    "text": "access sort of read execute containers to the user directory as an example there's a lot of different",
    "start": "932310",
    "end": "937800"
  },
  {
    "text": "items that we will just protect the operating system from the containers themself and this is to prevent",
    "start": "937800",
    "end": "942839"
  },
  {
    "text": "containers from breaking out into the operating system which is essentially the biggest threat on a container system",
    "start": "942839",
    "end": "948569"
  },
  {
    "text": "it's someone breaking out of the container space in order to use a lot of",
    "start": "948569",
    "end": "954899"
  },
  {
    "start": "953000",
    "end": "953000"
  },
  {
    "text": "secret security options you can simply enable that in the ECS configuration so there is actually a flag that says ECS",
    "start": "954899",
    "end": "962939"
  },
  {
    "text": "SELinux capable equals true if you set that you do enable the integration with the so we can enable the integration",
    "start": "962939",
    "end": "969029"
  },
  {
    "text": "with selinux and there's a lot of other docker security options as well that you can use and anything that has supporting",
    "start": "969029",
    "end": "976620"
  },
  {
    "text": "the dock risk your options enable that and then just add into the docker configuration it's look a little bit on",
    "start": "976620",
    "end": "986279"
  },
  {
    "text": "the container lifecycle so what we mean with contain lifecycle is knowing the",
    "start": "986279",
    "end": "991680"
  },
  {
    "text": "applications or the the container flow from creation of container implementation of container follow up on",
    "start": "991680",
    "end": "998819"
  },
  {
    "text": "them but also where do you get your containers from how do you validate that there are what they say they are and how",
    "start": "998819",
    "end": "1004819"
  },
  {
    "text": "they validate the content on them also started recently or estimated over 30%",
    "start": "1004819",
    "end": "1011120"
  },
  {
    "text": "of the official images in docker hub contains high priority security vulnerabilities this Maps a lot of where",
    "start": "1011120",
    "end": "1019040"
  },
  {
    "text": "do you get your containers do you simply use publicly available ones or do you",
    "start": "1019040",
    "end": "1024409"
  },
  {
    "text": "build your own containers there is always a risk of using public ones because you did not create them you also",
    "start": "1024409",
    "end": "1031788"
  },
  {
    "text": "don't want to save if you have an incident that be we're just running something someone else created it but he",
    "start": "1031789",
    "end": "1037250"
  },
  {
    "text": "said it was trustworthy a couple of the lifecycle risks here a from a build",
    "start": "1037250",
    "end": "1043548"
  },
  {
    "start": "1039000",
    "end": "1039000"
  },
  {
    "text": "perspective not just from a malicious perspective but also from a just",
    "start": "1043549",
    "end": "1050470"
  },
  {
    "text": "unknowing perspective so for example all the developers introduce new vulnerabilities in the binaries because",
    "start": "1050470",
    "end": "1058039"
  },
  {
    "text": "it is same as if you run an application in the regular hosts you still need to do testing of the application you need",
    "start": "1058039",
    "end": "1063620"
  },
  {
    "text": "to do pen testing static code analysis whatever is it you want to do to make sure that they're not adding",
    "start": "1063620",
    "end": "1070010"
  },
  {
    "text": "vulnerabilities on the shipping for example or in a other containers",
    "start": "1070010",
    "end": "1076100"
  },
  {
    "text": "vulnerable where did you get the containers from this is something that you copied over or do you create them",
    "start": "1076100",
    "end": "1081350"
  },
  {
    "text": "yourself if you have for example in the run State or have run time defense in containers in case they are compromised",
    "start": "1081350",
    "end": "1088010"
  },
  {
    "text": "how do you rip them out how do you detect we mentioned earlier the non effective product for example how do can",
    "start": "1088010",
    "end": "1095330"
  },
  {
    "text": "you say if a container is actively running is vulnerable a couple of",
    "start": "1095330",
    "end": "1103700"
  },
  {
    "start": "1101000",
    "end": "1101000"
  },
  {
    "text": "mitigation process on the build do image vulnerability analysis in the CI say CD",
    "start": "1103700",
    "end": "1109100"
  },
  {
    "text": "pipeline if you have a CR CD if not run it manually but do a vulnerability analysis on your containers and of",
    "start": "1109100",
    "end": "1115850"
  },
  {
    "text": "course build your companion stir yourself said own your repo that's absolutely true don't introduce things",
    "start": "1115850",
    "end": "1122450"
  },
  {
    "text": "that you don't know what it is don't add images that you haven't tested that you haven't done scans on validated security",
    "start": "1122450",
    "end": "1129679"
  },
  {
    "text": "of only allowed developers to use approved images so create base images",
    "start": "1129679",
    "end": "1135020"
  },
  {
    "text": "for them to use don't let them build their own that they can build wrong but then follow the same process as you have",
    "start": "1135020",
    "end": "1141559"
  },
  {
    "text": "have a build process for them use configuration governance so for example",
    "start": "1141559",
    "end": "1146570"
  },
  {
    "text": "if you use easiest a finishes the container definitions run them through a governance process where you can",
    "start": "1146570",
    "end": "1153080"
  },
  {
    "text": "validate what's in them so for example see if they're trying to use port 80 see if they're trying to use libraries or",
    "start": "1153080",
    "end": "1159020"
  },
  {
    "text": "not approved and things like that and then regularly analyze the images in your private repo as well even though",
    "start": "1159020",
    "end": "1164630"
  },
  {
    "text": "you build them yourself make sure that you have regular scanning on them the reason is that there are also a lot of different libraries not just that",
    "start": "1164630",
    "end": "1170570"
  },
  {
    "text": "someone built and insecure information there's a lot of libraries that someone discovers next billion if you don't know",
    "start": "1170570",
    "end": "1177679"
  },
  {
    "text": "exactly which libraries are running in all your containers there's no way you can figure that out before they go out into the production lifecycle so make",
    "start": "1177679",
    "end": "1184700"
  },
  {
    "text": "sure that you scan that on regular basis only log compliant images run in production of course it sounds easy but",
    "start": "1184700",
    "end": "1191840"
  },
  {
    "text": "there's a lot of people that buy oh I just needed to link to a separate container because I needed that feature that database whatever it's something",
    "start": "1191840",
    "end": "1198679"
  },
  {
    "text": "you have a sprawl of different containers that you don't know where they came from have run thumb defense in place of",
    "start": "1198679",
    "end": "1205010"
  },
  {
    "text": "course under build-it-yourself use a third party and then just do regular",
    "start": "1205010",
    "end": "1210770"
  },
  {
    "text": "checks against the industry benchmarks one way to do that is dr. bench it's",
    "start": "1210770",
    "end": "1217160"
  },
  {
    "text": "recommended by CAS or cent of the internet security for benchmarking docker images and dr. Engine you can",
    "start": "1217160",
    "end": "1225740"
  },
  {
    "text": "make Li use that to validate your your hosts against the best recommendations on Bakker bench you can build that",
    "start": "1225740",
    "end": "1231890"
  },
  {
    "start": "1231000",
    "end": "1231000"
  },
  {
    "text": "actually into a pipeline using for example lambda so just invoke lambda on a schedule set it up to run once a day",
    "start": "1231890",
    "end": "1239450"
  },
  {
    "text": "once or hour whatever you said depending on how often you add new new container builds run that dr. bench command via",
    "start": "1239450",
    "end": "1246980"
  },
  {
    "text": "easy to run command and then just take the output put it into cloud watch logs and then you can create how much load so",
    "start": "1246980",
    "end": "1252920"
  },
  {
    "text": "anytime you discover a alert from dr. bench just set up an alert in showers",
    "start": "1252920",
    "end": "1258260"
  },
  {
    "text": "logs to send an email or you can even treat your other actions like for example tied into how much events and",
    "start": "1258260",
    "end": "1265270"
  },
  {
    "text": "trigger off actual actions on them to either take them down go through and see",
    "start": "1265270",
    "end": "1270680"
  },
  {
    "text": "where have they been deployed stop those instances so you can build a very long and effective automation chain using",
    "start": "1270680",
    "end": "1277970"
  },
  {
    "text": "just for example and and automation services another tool so on a partner we",
    "start": "1277970",
    "end": "1284750"
  },
  {
    "text": "have is twist lock twist lock there's a lot of vulnerability management of the containers themself",
    "start": "1284750",
    "end": "1290690"
  },
  {
    "text": "there's to do compliance checks on the actual images you can set up access control and runtime defense using their",
    "start": "1290690",
    "end": "1297740"
  },
  {
    "text": "partner tools it's really effective way of knowing what you have doing pre",
    "start": "1297740",
    "end": "1304310"
  },
  {
    "text": "deploy scanning is really effective there you can also scan the full repo for vulnerable images and have it set up",
    "start": "1304310",
    "end": "1311750"
  },
  {
    "text": "to scan your private repo again you can use no vector it has two ability to scan",
    "start": "1311750",
    "end": "1318800"
  },
  {
    "text": "against like public CV vulnerabilities you can also scan containers when",
    "start": "1318800",
    "end": "1324740"
  },
  {
    "text": "they're running live so it's basically scanning all the containers running on that instance to see whether or not they",
    "start": "1324740",
    "end": "1330260"
  },
  {
    "text": "have insecurity is not and also scans the hosts file system not just the containers the big strengths of",
    "start": "1330260",
    "end": "1336800"
  },
  {
    "text": "nor vectors also the visualization that actually shows you how the containers the talking to each other and not just",
    "start": "1336800",
    "end": "1342050"
  },
  {
    "text": "on a single host but also across multiple hosts so if you have for example your as you mentioned earlier",
    "start": "1342050",
    "end": "1347420"
  },
  {
    "text": "reduce the attack surface so if you have your web services on one container host and we have for example a database",
    "start": "1347420",
    "end": "1354350"
  },
  {
    "text": "running on another one it can still map out the relationship between those and you can see the whole data flow so I",
    "start": "1354350",
    "end": "1364250"
  },
  {
    "text": "mention earlier building a continuous integration for it not going to go through detail but for",
    "start": "1364250",
    "end": "1370460"
  },
  {
    "text": "example if you have a developer pushes code into repo that it gets added to the",
    "start": "1370460",
    "end": "1375830"
  },
  {
    "text": "CIC the pipeline you can use for example a Jenkins service to grab that information and build the actual",
    "start": "1375830",
    "end": "1383420"
  },
  {
    "text": "container and then call - for example to the twistlock API to scan that",
    "start": "1383420",
    "end": "1388490"
  },
  {
    "text": "application automatically before it does the build or after it sorry before it",
    "start": "1388490",
    "end": "1393740"
  },
  {
    "text": "takes that build and pushes out to the container repo and then once you've done the analysis verify that there are no",
    "start": "1393740",
    "end": "1400070"
  },
  {
    "text": "vulnerabilities inside the Jenkins app then push it out into the the build cycle if you look at more from a full",
    "start": "1400070",
    "end": "1406910"
  },
  {
    "text": "time perspective this is just an example same thing with the partners these are example portraits they're of course more",
    "start": "1406910",
    "end": "1412190"
  },
  {
    "text": "partners but they're good products use code humid for your container source",
    "start": "1412190",
    "end": "1419260"
  },
  {
    "text": "then use for example Jenkins flow where you do pre deployment assessment using",
    "start": "1419260",
    "end": "1424490"
  },
  {
    "text": "the twist lock using a lambda function check the image for vulnerabilities and then push it into ECR or whatever repo",
    "start": "1424490",
    "end": "1431390"
  },
  {
    "text": "you're using and then let's make sure we update these es service via confirmation it's a really good way to make sure that",
    "start": "1431390",
    "end": "1437960"
  },
  {
    "text": "it follows your standards you can also scan the CloudFormation template using the same governance practice then push",
    "start": "1437960",
    "end": "1444560"
  },
  {
    "text": "it out into a run environment use for example target like a product like no vector or whatever you want to use of",
    "start": "1444560",
    "end": "1451100"
  },
  {
    "text": "course and then do live scanning to see what actually doing once they're out in production quick note of managing",
    "start": "1451100",
    "end": "1459950"
  },
  {
    "start": "1459000",
    "end": "1459000"
  },
  {
    "text": "secrets there's a couple of different ways of managing secrets for example baked into the image no",
    "start": "1459950",
    "end": "1467810"
  },
  {
    "text": "did not put your secrets into the image just know you can also set it in",
    "start": "1467810",
    "end": "1477140"
  },
  {
    "start": "1474000",
    "end": "1474000"
  },
  {
    "text": "environmental environmental variables keep in mind though this is suggested by number of parts to keep in mind though",
    "start": "1477140",
    "end": "1483500"
  },
  {
    "text": "that if you put it in a variable it can be seen in a lot a lot of places it also",
    "start": "1483500",
    "end": "1490490"
  },
  {
    "text": "gets not captured even though you set it up so no one can access that server well",
    "start": "1490490",
    "end": "1495560"
  },
  {
    "text": "they take a snapshot deploy it somewhere else and they have access to it as well so try to avoid that as well and also",
    "start": "1495560",
    "end": "1502460"
  },
  {
    "text": "you can't lead them from the running on its way to visible it's also visible through API commands so avoid putting it",
    "start": "1502460",
    "end": "1509870"
  },
  {
    "text": "in environmental variables you can have a reset it as an environmental variable but reference something else",
    "start": "1509870",
    "end": "1516170"
  },
  {
    "text": "so for example if we set it as an environmental variable but you point to a s3 bucket and an s3 bucket file you",
    "start": "1516170",
    "end": "1525110"
  },
  {
    "text": "can simply have your application fetch it on the fly by using either DCT rolls",
    "start": "1525110",
    "end": "1531170"
  },
  {
    "text": "or using I am rolls for for easiest tasks that way the secrets are never",
    "start": "1531170",
    "end": "1538940"
  },
  {
    "text": "stored on the actual instance as stored files or store variables that will not",
    "start": "1538940",
    "end": "1544610"
  },
  {
    "text": "be captured you can't access them through API it will fetch them on a runtime perspective and you can also use",
    "start": "1544610",
    "end": "1551420"
  },
  {
    "text": "VPC endpoint for s3 to lock down that access even further and that's going to be all logged because you use in the I",
    "start": "1551420",
    "end": "1557810"
  },
  {
    "text": "am axis to axis the bucket everything will be logged as well there's a block",
    "start": "1557810",
    "end": "1562910"
  },
  {
    "text": "down there we should not can't see it but you can see it on the recording after if not or the slides on SlideShare",
    "start": "1562910",
    "end": "1570580"
  },
  {
    "start": "1570000",
    "end": "1570000"
  },
  {
    "text": "there's also a number of third-party insists that you can use so you can for",
    "start": "1570580",
    "end": "1575810"
  },
  {
    "text": "example use ball from Hoshi Corp keyways there's a number of different partners",
    "start": "1575810",
    "end": "1581210"
  },
  {
    "text": "out there if you don't want to build your own you can of course also build your own system it's absolutely",
    "start": "1581210",
    "end": "1586550"
  },
  {
    "text": "available but keep in mind that if you don't know what you're doing it's probably better to to look in a partner",
    "start": "1586550",
    "end": "1592610"
  },
  {
    "text": "if you're comfortable with it build your own like that building it using s3 access is not that hard",
    "start": "1592610",
    "end": "1600429"
  },
  {
    "start": "1601000",
    "end": "1601000"
  },
  {
    "text": "click note on how you build build is it's it's not hard you have your my",
    "start": "1602330",
    "end": "1609030"
  },
  {
    "text": "sequel instance you have a vault server and you have your application just make sure that you route everything so when the application needs it ask the bolt in",
    "start": "1609030",
    "end": "1615990"
  },
  {
    "text": "this case it's full server but if you build this yourself this could be replace with for example a lambda",
    "start": "1615990",
    "end": "1622530"
  },
  {
    "text": "function that you invoke it could be the lambda function that fetches the data from s3 just be creative use external",
    "start": "1622530",
    "end": "1630450"
  },
  {
    "text": "systems if you were to use a lambda function you can have your application make an API call and then to the lambda",
    "start": "1630450",
    "end": "1637500"
  },
  {
    "text": "function the lambda function will actually fetch the secrets using for example kms using DynamoDB or s3 and",
    "start": "1637500",
    "end": "1644850"
  },
  {
    "text": "encrypt all the information and then return information to you using the API commands as a return value to the",
    "start": "1644850",
    "end": "1650820"
  },
  {
    "text": "application while the lambda function is responsible for handling all the secret management so you can build a toilet",
    "start": "1650820",
    "end": "1657750"
  },
  {
    "text": "neuron if you want to or use a third party I'm gonna hand it over to Michael",
    "start": "1657750",
    "end": "1664110"
  },
  {
    "text": "who's gonna talk a little bit more on enforcing governance with DCs can",
    "start": "1664110",
    "end": "1675030"
  },
  {
    "text": "everyone hear me okay yeah awesome so my name is Michael Caputo I'm a Solutions",
    "start": "1675030",
    "end": "1680610"
  },
  {
    "text": "Architect at AWS and so far henrik spoke to you about how you can actually secure",
    "start": "1680610",
    "end": "1686940"
  },
  {
    "text": "your docker images and you're running docker containers the piece that i'm going to talk to you is a little bit",
    "start": "1686940",
    "end": "1693090"
  },
  {
    "text": "lower down and that's how can you enforce governance in AWS using docker",
    "start": "1693090",
    "end": "1698370"
  },
  {
    "text": "and using ECS and then we're gonna cover how you can actually automate your security deployments in AWS by taking",
    "start": "1698370",
    "end": "1705360"
  },
  {
    "text": "advantage of some of the advantages docker offers so i'm sure there's a",
    "start": "1705360",
    "end": "1711360"
  },
  {
    "start": "1709000",
    "end": "1709000"
  },
  {
    "text": "bunch of you in the room who have used dcs before and you're comfortable with it but i want to do just a quick recap",
    "start": "1711360",
    "end": "1716640"
  },
  {
    "text": "so everything I say kind of makes sense to everyone in ECS we have the concept",
    "start": "1716640",
    "end": "1722130"
  },
  {
    "text": "of a cluster this is just a group of ec2 instances that you run all of your docker containers on and you do this by",
    "start": "1722130",
    "end": "1728850"
  },
  {
    "text": "creating what's called a task definition a task definition is almost like a cloud",
    "start": "1728850",
    "end": "1734160"
  },
  {
    "text": "formation temple it's a file that allows you to specify what docker images you're going to use",
    "start": "1734160",
    "end": "1739480"
  },
  {
    "text": "where you're going to deploy them what kind of CPU and memory limits they have and also very importantly what kind",
    "start": "1739480",
    "end": "1746980"
  },
  {
    "text": "of communication can happen between those darker containers and what port mappings they have to the underlying",
    "start": "1746980",
    "end": "1752830"
  },
  {
    "text": "instance and these two pieces are what I'm really going to focus on so once you created that task definition you can",
    "start": "1752830",
    "end": "1759400"
  },
  {
    "text": "point it to containers you might store those in the EECS container registry and one task definition can reference",
    "start": "1759400",
    "end": "1766270"
  },
  {
    "text": "multiple containers it doesn't have to be just a single running container in a task and you can then deploy a task on",
    "start": "1766270",
    "end": "1773380"
  },
  {
    "text": "to that ECS cluster and on the same ECS cluster you can deploy more than one",
    "start": "1773380",
    "end": "1778690"
  },
  {
    "text": "task right you can have as many as you want depending on the size of the cluster and the memory and CPU limits you set so I hope that was a okay primer",
    "start": "1778690",
    "end": "1787300"
  },
  {
    "text": "now let's talk about governance so if you want to actually enforce governance",
    "start": "1787300",
    "end": "1793120"
  },
  {
    "start": "1788000",
    "end": "1788000"
  },
  {
    "text": "in AWS and ensure that everyone deploying their applications and their security software is following your best",
    "start": "1793120",
    "end": "1799900"
  },
  {
    "text": "practices you can actually take advantage of that task definition any",
    "start": "1799900",
    "end": "1806400"
  },
  {
    "text": "modification that someone makes to the ECS task definition is an AWS api call",
    "start": "1806400",
    "end": "1812320"
  },
  {
    "text": "and that can be controlled via iam so you can do things like in force which docker images are going to be used you",
    "start": "1812320",
    "end": "1818680"
  },
  {
    "text": "can allow people to execute that task definition but not to modify the",
    "start": "1818680",
    "end": "1823870"
  },
  {
    "text": "reference in it - what docker containers it's pointing to and this allows you to ensure that those docker images that the",
    "start": "1823870",
    "end": "1831130"
  },
  {
    "text": "tasks definition is pointing to are always tested from a security perspective you can also as Henrik",
    "start": "1831130",
    "end": "1837070"
  },
  {
    "text": "mentioned control the CPU and memory limits that the containers can use you",
    "start": "1837070",
    "end": "1842530"
  },
  {
    "text": "can control those container links to each other so which containers can communicate with one another and also port mappings this",
    "start": "1842530",
    "end": "1850210"
  },
  {
    "text": "is really important because by default if you leave the port mappings in the task definition blank that means all",
    "start": "1850210",
    "end": "1856570"
  },
  {
    "text": "those images you're deploying those running containers have no access to the underlying instance ports which means",
    "start": "1856570",
    "end": "1862120"
  },
  {
    "text": "they can't communicate with the outside world and there's also the ability now",
    "start": "1862120",
    "end": "1867850"
  },
  {
    "text": "to specify within a toss definition which I am rolled that task is going to use and",
    "start": "1867850",
    "end": "1873279"
  },
  {
    "text": "this is super useful so I want to show you guys why one of the first benefits",
    "start": "1873279",
    "end": "1879070"
  },
  {
    "text": "is that you simplify the usage of the AWS SDKs so you know you have",
    "start": "1879070",
    "end": "1885159"
  },
  {
    "text": "application teams that are writing apps that reference the AWS SDKs before we",
    "start": "1885159",
    "end": "1892510"
  },
  {
    "text": "release this feature you would have to either hard code credentials into your container which is obviously a bad",
    "start": "1892510",
    "end": "1897669"
  },
  {
    "text": "practice or you would have to attach an iam role to the underlying ec2 instance",
    "start": "1897669",
    "end": "1904799"
  },
  {
    "text": "with this feature you no longer have to do that you can attach the role to the",
    "start": "1904799",
    "end": "1910330"
  },
  {
    "text": "task itself you also have credential",
    "start": "1910330",
    "end": "1917350"
  },
  {
    "text": "isolation between tasks so previously all tasks running on a single instance",
    "start": "1917350",
    "end": "1922510"
  },
  {
    "text": "would be using the same underlying role and that would show up in cloud trail as you know this role executed this API",
    "start": "1922510",
    "end": "1928510"
  },
  {
    "text": "call you would have no idea which of those running containers actually executed that API call",
    "start": "1928510",
    "end": "1934000"
  },
  {
    "text": "so from an audit perspective it made things very difficult and also from an authorization perspective traditionally",
    "start": "1934000",
    "end": "1940390"
  },
  {
    "text": "you would have to allow every running container on the instance full access to the entire role so you couldn't specify",
    "start": "1940390",
    "end": "1947980"
  },
  {
    "text": "that this container can only make these API calls but this other container can make it specific API calls they would",
    "start": "1947980",
    "end": "1954010"
  },
  {
    "text": "actually cross reference each other and I mentioned the audit ability already so",
    "start": "1954010",
    "end": "1960100"
  },
  {
    "text": "the old way looks like this you have a running cluster instance and you would deploy you know a task with maybe a web",
    "start": "1960100",
    "end": "1966370"
  },
  {
    "text": "UI or some sort of app on it and then maybe you had another container running in a separate task on that same instance",
    "start": "1966370",
    "end": "1973559"
  },
  {
    "text": "maybe the web UI container had some static content stored in s3 that it would have to use as three API calls to",
    "start": "1973559",
    "end": "1980320"
  },
  {
    "text": "reach out to and grab and maybe that data insights container would be making calls back to a DynamoDB database to",
    "start": "1980320",
    "end": "1987309"
  },
  {
    "text": "fetch information that web UI container in the old model would be able to access",
    "start": "1987309",
    "end": "1993789"
  },
  {
    "text": "DynamoDB because they would be using the same underlying IAM role attached to that cluster instance and vice-versa the",
    "start": "1993789",
    "end": "2000690"
  },
  {
    "text": "data insights container would be looking at us three this is of course undesired you don't need this kind of",
    "start": "2000690",
    "end": "2006470"
  },
  {
    "text": "cross reference and the reason that that was there is because that I am role is actually attached to the instance and",
    "start": "2006470",
    "end": "2012170"
  },
  {
    "text": "not the task so this is the new way right we've released this feature that allows you to specify in each task and I",
    "start": "2012170",
    "end": "2019880"
  },
  {
    "text": "am role and that allows you to ensure that the task only has the API privileges that it actually needs and",
    "start": "2019880",
    "end": "2026810"
  },
  {
    "text": "you can run as many tasks as you want on the same ec2 instance but they don't have conflicting permissions and since",
    "start": "2026810",
    "end": "2035660"
  },
  {
    "text": "this is a 400 level session we want to explain how this actually works right the first thing that happens is on your",
    "start": "2035660",
    "end": "2041930"
  },
  {
    "text": "ec2 instance that you're using within ECS there is an agent that will talk to",
    "start": "2041930",
    "end": "2048590"
  },
  {
    "text": "the ECS control plane so it's going to periodically query the ECS control plane and ask for those credential files and",
    "start": "2048590",
    "end": "2055570"
  },
  {
    "text": "the control plane is going to generate a unique ID token for every container running on that particular instance",
    "start": "2055570",
    "end": "2063280"
  },
  {
    "text": "that's going to get passed back to the ECS agent on the instance itself and",
    "start": "2063280",
    "end": "2068510"
  },
  {
    "text": "that credential is automatically rotated for you so of course better than hard-coded credentials that are",
    "start": "2068510",
    "end": "2073669"
  },
  {
    "text": "long-lived the es agent is going to do two things first with that ID token it's",
    "start": "2073670",
    "end": "2080030"
  },
  {
    "text": "going to construct a unique unique HTTP URL and it's gonna set that URL in a",
    "start": "2080030",
    "end": "2088460"
  },
  {
    "text": "local environment variable so that each container running on that instance has a path to pull it's specific role that's",
    "start": "2088460",
    "end": "2096139"
  },
  {
    "text": "getting auto rotated in the backend and of course the SDKs that you use within",
    "start": "2096140",
    "end": "2102530"
  },
  {
    "text": "those containers are smart enough to just automatically pull that role so when your developers are building",
    "start": "2102530",
    "end": "2107930"
  },
  {
    "text": "applications they don't need to set any sort of local variables that point anywhere to fetch credentials the AWS",
    "start": "2107930",
    "end": "2115160"
  },
  {
    "text": "SDKs are built in such a way that they'll automatically pick up on that and fetch those credentials for you so",
    "start": "2115160",
    "end": "2122810"
  },
  {
    "text": "I'm actually gonna do a quick demo for you",
    "start": "2122810",
    "end": "2126940"
  },
  {
    "text": "so I've actually already got a running cluster here and what I'm gonna do is",
    "start": "2134870",
    "end": "2140820"
  },
  {
    "text": "just demonstrate how these I am rolls for tasks actually work so I've got two",
    "start": "2140820",
    "end": "2147600"
  },
  {
    "text": "different task definitions here and the first one is called demo a and I just",
    "start": "2147600",
    "end": "2152700"
  },
  {
    "text": "want to show you quickly this is just deploying a basic nginx docker image",
    "start": "2152700",
    "end": "2158340"
  },
  {
    "text": "I haven't made any modifications to it and it's exposing port 80 so that we can actually see it from an HTTP URL and",
    "start": "2158340",
    "end": "2165450"
  },
  {
    "text": "it's taking advantage of cloud watch logs so the demo I'm going to be showing you is an engine X container that's",
    "start": "2165450",
    "end": "2171870"
  },
  {
    "text": "pushing the nginx logs into cloud watch logs in real time and you can set this right down here by just specifying a",
    "start": "2171870",
    "end": "2178710"
  },
  {
    "text": "cloud watch logs group and the region that you're operating in now the important thing is that you can see here",
    "start": "2178710",
    "end": "2187350"
  },
  {
    "text": "I've specified a task role for this task definition of demo to a and if we dive",
    "start": "2187350",
    "end": "2193560"
  },
  {
    "text": "into that",
    "start": "2193560",
    "end": "2195980"
  },
  {
    "text": "okay",
    "start": "2204240",
    "end": "2207050"
  },
  {
    "text": "great so we can see that this role that I've attached has a full access policy",
    "start": "2212300",
    "end": "2218900"
  },
  {
    "text": "to cloud watch so this role is going to allow the task that's running with it to",
    "start": "2218900",
    "end": "2225380"
  },
  {
    "text": "write those logs into cloud watch so I'm gonna flip back to the ECS console and",
    "start": "2225380",
    "end": "2231590"
  },
  {
    "text": "I'm just gonna run this task definition on my default cluster and it's probably",
    "start": "2231590",
    "end": "2241130"
  },
  {
    "text": "gonna take about 15 or 20 seconds to move from pending to running and",
    "start": "2241130",
    "end": "2247690"
  },
  {
    "text": "essentially what's gonna happen is when it's running we're just gonna get the base on your next page and I'm gonna refresh a bunch of times and then we're",
    "start": "2247690",
    "end": "2253460"
  },
  {
    "text": "gonna see those logs getting pushed into cloud watch so that's running now",
    "start": "2253460",
    "end": "2260230"
  },
  {
    "text": "I'm just gonna grab the DNS endpoint for",
    "start": "2266220",
    "end": "2274920"
  },
  {
    "text": "that ec2 instance and there's the base nginx page right now the important thing is if we go back to the AWS console and",
    "start": "2274920",
    "end": "2281640"
  },
  {
    "text": "we go into cloud watch logs and this is",
    "start": "2281640",
    "end": "2288450"
  },
  {
    "text": "that ECS logs group that I referenced in the task definition before we can see",
    "start": "2288450",
    "end": "2293849"
  },
  {
    "text": "that a new log stream has just been created at 108 and there's a few records",
    "start": "2293849",
    "end": "2301560"
  },
  {
    "text": "in there right now so what I'm gonna do is I'm just gonna refresh this nginx page like 10 times and if we go back",
    "start": "2301560",
    "end": "2307710"
  },
  {
    "text": "here we should see those pop up so this is basically demonstrating that that running docker container is using the",
    "start": "2307710",
    "end": "2315720"
  },
  {
    "text": "permissions in that iam role to write these cloud watch log files now what I'm",
    "start": "2315720",
    "end": "2322830"
  },
  {
    "text": "gonna do is I'm actually going to stop that task and I'm gonna run the exact same task but with a roll that doesn't",
    "start": "2322830",
    "end": "2329400"
  },
  {
    "text": "have access and that's demo to be and if",
    "start": "2329400",
    "end": "2336510"
  },
  {
    "text": "I show you that role for demo to be I",
    "start": "2336510",
    "end": "2340790"
  },
  {
    "text": "just put a policy in here that has s3 full access so this you know container",
    "start": "2341869",
    "end": "2347760"
  },
  {
    "text": "is using an IM role that gives it access to s3 but not to cloud watch and i'll",
    "start": "2347760",
    "end": "2356550"
  },
  {
    "text": "run this task this should go a lot quicker because it's already loaded the",
    "start": "2356550",
    "end": "2361650"
  },
  {
    "text": "image and now you can see we've got this nginx page let me just refresh that a",
    "start": "2361650",
    "end": "2369530"
  },
  {
    "text": "few times and back in that cloud watch logs group",
    "start": "2369530",
    "end": "2376030"
  },
  {
    "text": "we can basically see that there's no new logs getting added right all of the logs that are there were there and the actual",
    "start": "2376030",
    "end": "2383650"
  },
  {
    "text": "task that's running in the container that's running does has no permissions now to write to clog watch logs it's",
    "start": "2383650",
    "end": "2388690"
  },
  {
    "text": "running on the exact same underlying ec2 instance and that ec2 instance actually has full permission to write to cloud",
    "start": "2388690",
    "end": "2394720"
  },
  {
    "text": "watch so it's getting blocked at the task level so there's one more piece I",
    "start": "2394720",
    "end": "2405130"
  },
  {
    "text": "want to talk to you guys about today and that's automating your security deployments and this is gonna get your security teams really excited internally",
    "start": "2405130",
    "end": "2410950"
  },
  {
    "text": "because it's gonna let them deploy the functionality that they have built into their InfoSec policies without talking",
    "start": "2410950",
    "end": "2417190"
  },
  {
    "text": "to any of your application teams and trying to integrate with them so henrik spoke a little bit about the continuous",
    "start": "2417190",
    "end": "2423520"
  },
  {
    "start": "2420000",
    "end": "2420000"
  },
  {
    "text": "integration piece right having developers and other teams push their updates into something like a code",
    "start": "2423520",
    "end": "2430450"
  },
  {
    "text": "commit repository or another git repository and then having jenkins pick up on those changes automatically build",
    "start": "2430450",
    "end": "2437200"
  },
  {
    "text": "those docker images do any sort of security checks and push them into a container registry you can also have",
    "start": "2437200",
    "end": "2444510"
  },
  {
    "text": "jenkins do things like validate that the task definition only contains secure ports right and it doesn't have port 80",
    "start": "2444510",
    "end": "2451930"
  },
  {
    "text": "open for example and then check that pass definition back into source code control so that you have a living",
    "start": "2451930",
    "end": "2458020"
  },
  {
    "text": "breathing version of it somewhere and this could all be done by your",
    "start": "2458020",
    "end": "2463150"
  },
  {
    "text": "application team but imagine for a second that your security team now follows this exact same procedure so",
    "start": "2463150",
    "end": "2469840"
  },
  {
    "text": "maybe they want to deploy a host-based intrusion detection system and traditionally they would have to work",
    "start": "2469840",
    "end": "2476110"
  },
  {
    "text": "with the application teams to bake that into the images that the OP team is using with docker and with ECS you can",
    "start": "2476110",
    "end": "2482800"
  },
  {
    "text": "avoid that right you can have that security team or InfoSec team build a docker image and a task definition that",
    "start": "2482800",
    "end": "2490090"
  },
  {
    "text": "contains their software at the same time the app team whatever they're building",
    "start": "2490090",
    "end": "2495250"
  },
  {
    "text": "they can build a docker image and a task definition as well and you can use an automation framework like Jenkins to",
    "start": "2495250",
    "end": "2502060"
  },
  {
    "text": "pull down both of these docker images merge the two tasks definite so that they're using and referencing",
    "start": "2502060",
    "end": "2508990"
  },
  {
    "text": "both of these containers or images and automatically deploy those out to ECS so",
    "start": "2508990",
    "end": "2515470"
  },
  {
    "text": "this allows these teams to operate and iterate independently of one another and there's quite a few benefits to this",
    "start": "2515470",
    "end": "2521110"
  },
  {
    "text": "that I'm going to talk about but first I'm going to show you an example imagine you wanted to set up a container you",
    "start": "2521110",
    "end": "2527650"
  },
  {
    "text": "want to run a web application but in front of it you want to have some sort of throttling so that you mitigate",
    "start": "2527650",
    "end": "2532840"
  },
  {
    "text": "denial of service type attacks you would run a cluster instance and you could run a single task on that instance with a",
    "start": "2532840",
    "end": "2539680"
  },
  {
    "text": "web app container right in our case when I demo it for you it's going to be a simple PHP application and what we're",
    "start": "2539680",
    "end": "2546460"
  },
  {
    "text": "gonna do is we're gonna build a reverse proxy container that has throttling enabled and we're gonna force all",
    "start": "2546460",
    "end": "2552670"
  },
  {
    "text": "traffic coming from the outbound network to go through that reverse proxy container before it talks to the PHP app",
    "start": "2552670",
    "end": "2559330"
  },
  {
    "text": "on the left and we can do this simply by controlling port mappings and container links within the ECS task definition so",
    "start": "2559330",
    "end": "2567880"
  },
  {
    "text": "let me show you that now",
    "start": "2567880",
    "end": "2571019"
  },
  {
    "text": "so the first thing actually that I want to do is go back to test definitions I have a two revisions of the same task",
    "start": "2588269",
    "end": "2594929"
  },
  {
    "text": "definition and the first one just contains a single container with a simple PHP application so I'm going to",
    "start": "2594929",
    "end": "2601559"
  },
  {
    "text": "deploy this first so that you can see what it looks like without any sort of throttling that's probably gonna take a",
    "start": "2601559",
    "end": "2611819"
  },
  {
    "text": "few minutes but I'll explain the demo what I'm gonna walk through is you know this PHP app is gonna come up and I'm",
    "start": "2611819",
    "end": "2617849"
  },
  {
    "text": "gonna hit refresh like a million times and it's just gonna keep serving me the page and you can imagine a denial of service attack operating in a similar",
    "start": "2617849",
    "end": "2624239"
  },
  {
    "text": "fashion rate a whole bunch of requests coming from an IP address and you would like to throttle that type of thing so",
    "start": "2624239",
    "end": "2631619"
  },
  {
    "text": "this should switch over to PHP and I can hit refresh at will it's never gonna throttle me so this is",
    "start": "2631619",
    "end": "2638459"
  },
  {
    "text": "just direct access via port 82 this PHP application and I have another revision",
    "start": "2638459",
    "end": "2649139"
  },
  {
    "text": "of the tasks definition that actually contains two containers so it contains",
    "start": "2649139",
    "end": "2654959"
  },
  {
    "text": "the same application container but in this case it has no port mapping so that PHP container is now not exposed to any",
    "start": "2654959",
    "end": "2661139"
  },
  {
    "text": "underlying port on the instance and thus it is unreachable in and of itself but",
    "start": "2661139",
    "end": "2667319"
  },
  {
    "text": "there's a second container here and this container just contains nginx set up as",
    "start": "2667319",
    "end": "2672869"
  },
  {
    "text": "a reverse proxy with throttling enabled three requests per minute are what's permitted and anything above odd is",
    "start": "2672869",
    "end": "2679199"
  },
  {
    "text": "going to be disallowed so there's a few important things the first is this link this link allows the nginx container to",
    "start": "2679199",
    "end": "2687089"
  },
  {
    "text": "communicate with that PHP application container and this is where the port mapping is exposed so that we can",
    "start": "2687089",
    "end": "2693299"
  },
  {
    "text": "actually see it",
    "start": "2693299",
    "end": "2696019"
  },
  {
    "text": "and what we can actually see now is that there's two containers and my screens far too big but let's see if we can just",
    "start": "2705140",
    "end": "2716000"
  },
  {
    "text": "get them both running all right so I",
    "start": "2716000",
    "end": "2721160"
  },
  {
    "text": "think they're good now so what I'm going to do is refresh this page a few times",
    "start": "2721160",
    "end": "2726820"
  },
  {
    "text": "and you see after the third request I get this 503 error right so now that",
    "start": "2726820",
    "end": "2732410"
  },
  {
    "text": "nginx container that's functioning as a reverse proxy all outbound traffic is going through that and you can imagine",
    "start": "2732410",
    "end": "2739220"
  },
  {
    "text": "this being not just a simple throttling container like I set up but your security team is building in their",
    "start": "2739220",
    "end": "2744980"
  },
  {
    "text": "intrusion detection systems their web application firewalls they're logging and monitoring solutions whatever they",
    "start": "2744980",
    "end": "2750800"
  },
  {
    "text": "want really completely independently of your application teams and I can actually quickly show you guys what the",
    "start": "2750800",
    "end": "2759130"
  },
  {
    "text": "can the nginx configuration file actually looks like so this is the line",
    "start": "2759130",
    "end": "2770090"
  },
  {
    "text": "that matters right it's doing that request that three requests per minute and any more than that it's getting",
    "start": "2770090",
    "end": "2776210"
  },
  {
    "text": "blocked and it's proxying everything through to the application container which is the name we gave it in the ECS",
    "start": "2776210",
    "end": "2782210"
  },
  {
    "text": "task definition all right my demo",
    "start": "2782210",
    "end": "2790820"
  },
  {
    "text": "suppose both worked I'm really happy so you might be saying at this point well",
    "start": "2790820",
    "end": "2796760"
  },
  {
    "start": "2793000",
    "end": "2793000"
  },
  {
    "text": "why should I care about this kind of stuff I hope I made that clear so far but if I didn't let me recap first of all you're gonna remove any accidental",
    "start": "2796760",
    "end": "2803330"
  },
  {
    "text": "conflicts traditionally you would have your security software in your application running on the same",
    "start": "2803330",
    "end": "2809060"
  },
  {
    "text": "operating system maybe there's port conflicts maybe they're using different versions of the OS maybe they're using different",
    "start": "2809060",
    "end": "2815810"
  },
  {
    "text": "back-end libraries this just creates a nightmare for the security team and the application teams and they can now",
    "start": "2815810",
    "end": "2821540"
  },
  {
    "text": "operate independently of one another and produce containers and docker images and iterate independently as quickly as",
    "start": "2821540",
    "end": "2827510"
  },
  {
    "text": "they'd like and that makes the security processes continuous and automatic every",
    "start": "2827510",
    "end": "2833930"
  },
  {
    "text": "time there's an update to my web application firewall my intrusion detection them the InfoSec team can just go and",
    "start": "2833930",
    "end": "2841040"
  },
  {
    "text": "build and push that docker image out and it doesn't affect any of the application teams it also allows you to encapsulate",
    "start": "2841040",
    "end": "2848630"
  },
  {
    "text": "these software artifacts write your application and your software your security software and you implement the",
    "start": "2848630",
    "end": "2854150"
  },
  {
    "text": "controls one level up within the actual task definition and this allows you to control the entire framework via iam so",
    "start": "2854150",
    "end": "2862940"
  },
  {
    "text": "you can give developers the ability to edit their docker containers but not the",
    "start": "2862940",
    "end": "2868130"
  },
  {
    "text": "ability to modify the task definition and since they can't modify the task definition it ensures that they're",
    "start": "2868130",
    "end": "2873619"
  },
  {
    "text": "always going to be also integrating the security containers that you've built and not using any insecure ports you can",
    "start": "2873619",
    "end": "2879800"
  },
  {
    "text": "do that by using jenkins to check before a deployment and this process works not",
    "start": "2879800",
    "end": "2885829"
  },
  {
    "start": "2884000",
    "end": "2884000"
  },
  {
    "text": "just for containers I know this is a container session so I don't want to spend too much time on this but imagine",
    "start": "2885829",
    "end": "2891200"
  },
  {
    "text": "you're not building docker images today and you're using Amazon machine images you can implement the same type of",
    "start": "2891200",
    "end": "2897470"
  },
  {
    "text": "control in cloud formation right of course we spoke about docker images using ECS or maybe you're just building",
    "start": "2897470",
    "end": "2904520"
  },
  {
    "text": "applications saving your OS packages in s3 or source code control somewhere and",
    "start": "2904520",
    "end": "2910579"
  },
  {
    "text": "you're using code deploy to push them out the point is you have a software artifact at some point that you're",
    "start": "2910579",
    "end": "2915650"
  },
  {
    "text": "deploying and you have a service in AWS that you use to deploy it and when you",
    "start": "2915650",
    "end": "2920960"
  },
  {
    "text": "use well that's terrible animation when you use CloudFormation right you would",
    "start": "2920960",
    "end": "2926359"
  },
  {
    "text": "regulate the CloudFormation template ensure that only approved Amazon machine images are being used and that they have",
    "start": "2926359",
    "end": "2932780"
  },
  {
    "text": "appropriate security groups connected to them with ECS we talked about controlling the task definition",
    "start": "2932780",
    "end": "2938450"
  },
  {
    "text": "controlling those port mappings and any references and CPU and memory limits",
    "start": "2938450",
    "end": "2944060"
  },
  {
    "text": "that kind of stuff and if you're using code deploy there's also a very similar model the app spec ml file or",
    "start": "2944060",
    "end": "2951500"
  },
  {
    "text": "application specification file this is what code deploy uses to point to different repositories of code that",
    "start": "2951500",
    "end": "2958490"
  },
  {
    "text": "you're going to deploy different scripts that you're gonna run as a checking process so you can control all of these",
    "start": "2958490",
    "end": "2965560"
  },
  {
    "text": "definitions or templates and ensure that your security policy is being enforced via them so thankful",
    "start": "2965560",
    "end": "2972590"
  },
  {
    "text": "for listening guys and please remember to complete your evaluations thank you [Applause]",
    "start": "2972590",
    "end": "2982080"
  }
]