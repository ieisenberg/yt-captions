[
  {
    "text": "- [David] Hello.",
    "start": "720",
    "end": "1553"
  },
  {
    "text": "My name is David Kilzer,",
    "start": "1553",
    "end": "2386"
  },
  {
    "text": "and I'm a Microsoft\nSpecialist Solutions Architect",
    "start": "2386",
    "end": "4410"
  },
  {
    "text": "here at Amazon Web Services.",
    "start": "4410",
    "end": "6450"
  },
  {
    "text": "In this video, I will cover OpenTelemetry",
    "start": "6450",
    "end": "8460"
  },
  {
    "text": "and code first instrumentation",
    "start": "8460",
    "end": "9900"
  },
  {
    "text": "of a .NET 8 web application\nto send traces to AWS X-Ray.",
    "start": "9900",
    "end": "13773"
  },
  {
    "text": "First off, what is observability\nand instrumentation?",
    "start": "14940",
    "end": "18300"
  },
  {
    "text": "Observability and instrumentation\nare crucial concepts",
    "start": "18300",
    "end": "20820"
  },
  {
    "text": "in modern software development.",
    "start": "20820",
    "end": "22710"
  },
  {
    "text": "Observability allows us to gain insights",
    "start": "22710",
    "end": "24599"
  },
  {
    "text": "into a system's behavior and performance",
    "start": "24600",
    "end": "26640"
  },
  {
    "text": "without delving into its\nintricate inner workings.",
    "start": "26640",
    "end": "29140"
  },
  {
    "text": "To achieve observability,\napplications must be",
    "start": "30240",
    "end": "32759"
  },
  {
    "text": "properly instrumented using libraries,",
    "start": "32760",
    "end": "35070"
  },
  {
    "text": "emitting signals such as\ntraces, metrics, and logs.",
    "start": "35070",
    "end": "38850"
  },
  {
    "text": "An application is\nconsidered well instrumented",
    "start": "38850",
    "end": "41219"
  },
  {
    "text": "when developers have access to",
    "start": "41220",
    "end": "42600"
  },
  {
    "text": "all the necessary information\nto troubleshoot issues.",
    "start": "42600",
    "end": "45250"
  },
  {
    "text": "OpenTelemetry is an\nopen-source vendor-agnostic",
    "start": "47130",
    "end": "50070"
  },
  {
    "text": "observability framework that has emerged",
    "start": "50070",
    "end": "51900"
  },
  {
    "text": "as the Cloud Native Computing Foundation's",
    "start": "51900",
    "end": "53850"
  },
  {
    "text": "second most popular project.",
    "start": "53850",
    "end": "56250"
  },
  {
    "text": "It was created to address\nthe lack of a standard",
    "start": "56250",
    "end": "58560"
  },
  {
    "text": "for instrumenting code\nand sending telemetry data",
    "start": "58560",
    "end": "60960"
  },
  {
    "text": "to an observability backend.",
    "start": "60960",
    "end": "62403"
  },
  {
    "text": "It allows you to instrument\nyour applications once,",
    "start": "63300",
    "end": "65729"
  },
  {
    "text": "collect and aggregate telemetry data,",
    "start": "65730",
    "end": "67800"
  },
  {
    "text": "and seamlessly send it\nto multiple destinations.",
    "start": "67800",
    "end": "70530"
  },
  {
    "text": "Designed as a cloud-centric framework,",
    "start": "70530",
    "end": "72505"
  },
  {
    "text": "OpenTelemetry supports\nmultiple programming languages,",
    "start": "72505",
    "end": "75420"
  },
  {
    "text": "providing flexibility and scalability",
    "start": "75420",
    "end": "77490"
  },
  {
    "text": "for monitoring your distributed systems",
    "start": "77490",
    "end": "79470"
  },
  {
    "text": "in today's cloud native world.",
    "start": "79470",
    "end": "81033"
  },
  {
    "text": "The purpose of\nOpenTelemetry is to collect,",
    "start": "83880",
    "end": "85920"
  },
  {
    "text": "process, and export signals.",
    "start": "85920",
    "end": "88170"
  },
  {
    "text": "Signals are system outputs that describe",
    "start": "88170",
    "end": "89909"
  },
  {
    "text": "the underlying activity\nof your applications.",
    "start": "89910",
    "end": "93030"
  },
  {
    "text": "Signals are composed of traces,\nmetrics, logs, and baggage.",
    "start": "93030",
    "end": "96903"
  },
  {
    "text": "Traces provide visibility\ninto the entire journey,",
    "start": "98070",
    "end": "100680"
  },
  {
    "text": "allowing you to understand\nwhat happens during requests",
    "start": "100680",
    "end": "103290"
  },
  {
    "text": "made by or to your application,",
    "start": "103290",
    "end": "105780"
  },
  {
    "text": "which is great for distributed systems.",
    "start": "105780",
    "end": "107729"
  },
  {
    "text": "Metrics offer real-time\ninsights into performance",
    "start": "109230",
    "end": "111840"
  },
  {
    "text": "and health of your services",
    "start": "111840",
    "end": "113130"
  },
  {
    "text": "by capturing measurements at runtime.",
    "start": "113130",
    "end": "115350"
  },
  {
    "text": "For example, you can record and capture",
    "start": "115350",
    "end": "117659"
  },
  {
    "text": "the number of clicks or API requests made.",
    "start": "117660",
    "end": "119883"
  },
  {
    "text": "Logs provide timestamped\ntext records with metadata,",
    "start": "121200",
    "end": "124619"
  },
  {
    "text": "offering a detailed\nchronological record of events.",
    "start": "124620",
    "end": "127473"
  },
  {
    "text": "Baggage enables the propagation",
    "start": "129390",
    "end": "130860"
  },
  {
    "text": "of contextual information\nacross distributed traces,",
    "start": "130860",
    "end": "133800"
  },
  {
    "text": "ensuring data is passed seamlessly",
    "start": "133800",
    "end": "135360"
  },
  {
    "text": "between spans during a trace.",
    "start": "135360",
    "end": "136983"
  },
  {
    "text": "And then finally, the\nOpenTelemetry Protocol",
    "start": "138330",
    "end": "140430"
  },
  {
    "text": "standardizes the way\ntelemetry data is transmitted,",
    "start": "140430",
    "end": "143430"
  },
  {
    "text": "enabling seamless integration\nwith observability tools.",
    "start": "143430",
    "end": "146180"
  },
  {
    "text": "AWS provides the AWS\nDistribution for OpenTelemetry",
    "start": "148500",
    "end": "151830"
  },
  {
    "text": "or ADOT, a secure, production-ready,",
    "start": "151830",
    "end": "154500"
  },
  {
    "text": "open-source distribution of OpenTelemetry.",
    "start": "154500",
    "end": "157680"
  },
  {
    "text": "This upstream-first\ndistro is certified by AWS",
    "start": "157680",
    "end": "161069"
  },
  {
    "text": "for security and predictability,",
    "start": "161070",
    "end": "163080"
  },
  {
    "text": "ensuring a stable and\nreliable user experience.",
    "start": "163080",
    "end": "166470"
  },
  {
    "text": "With AWS Support backing it, ADOT offers",
    "start": "166470",
    "end": "169050"
  },
  {
    "text": "one-click deployment and configuration",
    "start": "169050",
    "end": "171090"
  },
  {
    "text": "from AWS container and\nAWS Lambda consoles,",
    "start": "171090",
    "end": "173730"
  },
  {
    "text": "streamlining the implementation process.",
    "start": "173730",
    "end": "176610"
  },
  {
    "text": "Additionally, it provides exporters",
    "start": "176610",
    "end": "178410"
  },
  {
    "text": "for various AWS monitoring solutions,",
    "start": "178410",
    "end": "180480"
  },
  {
    "text": "including Amazon CloudWatch, AWS X-Ray,",
    "start": "180480",
    "end": "183810"
  },
  {
    "text": "Amazon OpenSearch Service,\nAmazon-managed Prometheus,",
    "start": "183810",
    "end": "187260"
  },
  {
    "text": "and partner solutions,\nenabling seamless integration",
    "start": "187260",
    "end": "190049"
  },
  {
    "text": "with your existing\nmonitoring infrastructure.",
    "start": "190050",
    "end": "192300"
  },
  {
    "text": "OpenTelemetry was created to standardize",
    "start": "194880",
    "end": "196470"
  },
  {
    "text": "instrumenting code and\nsending telemetry data",
    "start": "196470",
    "end": "198630"
  },
  {
    "text": "to an observability backend.",
    "start": "198630",
    "end": "200910"
  },
  {
    "text": "In the simple reference architecture,",
    "start": "200910",
    "end": "202440"
  },
  {
    "text": "an application is instrumented\nwith OpenTelemetry",
    "start": "202440",
    "end": "204960"
  },
  {
    "text": "to send signals to the AWS\nDistro for OpenTelemetry",
    "start": "204960",
    "end": "208140"
  },
  {
    "text": "or ADOT Collector.",
    "start": "208140",
    "end": "210030"
  },
  {
    "text": "The ADOT Collector has three components,",
    "start": "210030",
    "end": "212040"
  },
  {
    "text": "the receiver, exporter, and processor.",
    "start": "212040",
    "end": "214592"
  },
  {
    "text": "The receiver is responsible\nfor receiving signals",
    "start": "215460",
    "end": "217530"
  },
  {
    "text": "from one or more sources\nthrough GRPC or HTTP.",
    "start": "217530",
    "end": "220950"
  },
  {
    "text": "Using the OpenTelemetry Protocol.",
    "start": "220950",
    "end": "223260"
  },
  {
    "text": "The processor takes data\ncollected by receivers",
    "start": "223260",
    "end": "225750"
  },
  {
    "text": "and transforms it before\nsending it to the exporter.",
    "start": "225750",
    "end": "229290"
  },
  {
    "text": "Then the exporters send\ndata to one or more backends",
    "start": "229290",
    "end": "231209"
  },
  {
    "text": "like AWS X-Ray, Amazon-managed\nPrometheus, or Jaeger.",
    "start": "231210",
    "end": "235413"
  },
  {
    "text": "For .NET applications,\nOpenTelemetry provides",
    "start": "236640",
    "end": "239040"
  },
  {
    "text": "native libraries to add to your projects.",
    "start": "239040",
    "end": "241890"
  },
  {
    "text": "These packages allow you to\ninstrument your application",
    "start": "241890",
    "end": "244230"
  },
  {
    "text": "and export signals to the\nOpenTelemetry Collector",
    "start": "244230",
    "end": "246720"
  },
  {
    "text": "or other destinations like the console",
    "start": "246720",
    "end": "248430"
  },
  {
    "text": "for testing and debugging.",
    "start": "248430",
    "end": "249730"
  },
  {
    "text": "After you instrument your application,",
    "start": "252720",
    "end": "254520"
  },
  {
    "text": "you configure the collector\nby defining receivers,",
    "start": "254520",
    "end": "257040"
  },
  {
    "text": "processors, and exporters\nin the configuration file.",
    "start": "257040",
    "end": "260549"
  },
  {
    "text": "You then enable these components",
    "start": "260550",
    "end": "262019"
  },
  {
    "text": "by defining a pipeline\nunder the services block.",
    "start": "262020",
    "end": "264573"
  },
  {
    "text": "In this example, we're receiving traces",
    "start": "265710",
    "end": "267600"
  },
  {
    "text": "from OpenTelemetry Protocol on Port 4317.",
    "start": "267600",
    "end": "271200"
  },
  {
    "text": "We are running a batch\nprocessor to export our signals",
    "start": "271200",
    "end": "273810"
  },
  {
    "text": "in batches instead of one\nby one as they come in.",
    "start": "273810",
    "end": "278070"
  },
  {
    "text": "And then for our exporter,\nwe're exporting to AWS X-Ray",
    "start": "278070",
    "end": "281130"
  },
  {
    "text": "with the region configured as a us-east-1.",
    "start": "281130",
    "end": "283263"
  },
  {
    "text": "This code configures OpenTelemetry",
    "start": "288150",
    "end": "289949"
  },
  {
    "text": "for this ASP.NET Core application",
    "start": "289950",
    "end": "292440"
  },
  {
    "text": "by registering a singleton\nservice and setting up tracing.",
    "start": "292440",
    "end": "295830"
  },
  {
    "text": "It initializes OpenTelemetry with",
    "start": "295830",
    "end": "297840"
  },
  {
    "text": "the specific service name and version,",
    "start": "297840",
    "end": "299970"
  },
  {
    "text": "enabling tracing for HTTP\nrequests and client calls.",
    "start": "299970",
    "end": "303003"
  },
  {
    "text": "The tracing date is\nexported to both the console",
    "start": "304050",
    "end": "306330"
  },
  {
    "text": "for local debugging and an external",
    "start": "306330",
    "end": "308639"
  },
  {
    "text": "OpenTelemetry Collector\nendpoint for further analysis.",
    "start": "308640",
    "end": "311793"
  },
  {
    "text": "We also register a custom\ninstrumentation class",
    "start": "312810",
    "end": "315300"
  },
  {
    "text": "as a singleton for custom\ntelemetry purposes.",
    "start": "315300",
    "end": "318063"
  },
  {
    "text": "This is the custom instrumentation class,",
    "start": "320670",
    "end": "322620"
  },
  {
    "text": "which will hold a reference\nto our activity source.",
    "start": "322620",
    "end": "325320"
  },
  {
    "text": "Activity sources are used for creating",
    "start": "325320",
    "end": "327180"
  },
  {
    "text": "and managing telemetry data\nfor distributed tracing.",
    "start": "327180",
    "end": "329823"
  },
  {
    "text": "So here's the configuration\nwe're gonna use",
    "start": "332190",
    "end": "333960"
  },
  {
    "text": "for ADOT Collector.",
    "start": "333960",
    "end": "335789"
  },
  {
    "text": "We're gonna receive traces on port 4317",
    "start": "335790",
    "end": "338640"
  },
  {
    "text": "using the OpenTelemetry protocol.",
    "start": "338640",
    "end": "341310"
  },
  {
    "text": "We're gonna use a batch processor",
    "start": "341310",
    "end": "343470"
  },
  {
    "text": "to send our traces over in batches.",
    "start": "343470",
    "end": "346290"
  },
  {
    "text": "Then for our exporter, we'll\nsend our traces to AWS X-Ray,",
    "start": "346290",
    "end": "349710"
  },
  {
    "text": "the region configured for us-east-1.",
    "start": "349710",
    "end": "351723"
  },
  {
    "text": "So here we have the home controller.",
    "start": "353250",
    "end": "354840"
  },
  {
    "text": "We have the outgoing HTTP method.",
    "start": "354840",
    "end": "358590"
  },
  {
    "text": "So what this is going to do\nis make a call to aws.com",
    "start": "358590",
    "end": "363590"
  },
  {
    "text": "and return the website\ncontents as a string,",
    "start": "364230",
    "end": "367410"
  },
  {
    "text": "but also instrument that requests",
    "start": "367410",
    "end": "369150"
  },
  {
    "text": "and add a couple of custom tags",
    "start": "369150",
    "end": "371160"
  },
  {
    "text": "that we can attach to our traces.",
    "start": "371160",
    "end": "373773"
  },
  {
    "text": "So here we have our docker-compose file.",
    "start": "375840",
    "end": "378360"
  },
  {
    "text": "What this will allow us to\ndo is run our application",
    "start": "378360",
    "end": "381629"
  },
  {
    "text": "as a container as well\nas the ADOT Collector",
    "start": "381630",
    "end": "384750"
  },
  {
    "text": "as a container and the\nsidecar configuration.",
    "start": "384750",
    "end": "387390"
  },
  {
    "text": "This will allow us to generate traces",
    "start": "387390",
    "end": "389460"
  },
  {
    "text": "and then pass this to the collector",
    "start": "389460",
    "end": "390840"
  },
  {
    "text": "for processing and exporting.",
    "start": "390840",
    "end": "392523"
  },
  {
    "text": "We're also authenticating\nand configuring our collector",
    "start": "395160",
    "end": "397950"
  },
  {
    "text": "to use the AWS CLI credentials,",
    "start": "397950",
    "end": "400860"
  },
  {
    "text": "which I have configured\non my local machine,",
    "start": "400860",
    "end": "403289"
  },
  {
    "text": "as well as configuring the region",
    "start": "403290",
    "end": "406710"
  },
  {
    "text": "and pulling in the configuration file",
    "start": "406710",
    "end": "409080"
  },
  {
    "text": "from our local computer\ninto the container.",
    "start": "409080",
    "end": "411392"
  },
  {
    "text": "So here we have the application running.",
    "start": "412650",
    "end": "414900"
  },
  {
    "text": "We'll run our outgoing HTTP method,",
    "start": "414900",
    "end": "418020"
  },
  {
    "text": "which creates a HTTP request to aws.com,",
    "start": "418020",
    "end": "422970"
  },
  {
    "text": "which returns the\nwebsite as a HTML string.",
    "start": "422970",
    "end": "426120"
  },
  {
    "text": "So here we are in the CloudWatch console,",
    "start": "426120",
    "end": "427590"
  },
  {
    "text": "looking at our X-Ray traces.",
    "start": "427590",
    "end": "429600"
  },
  {
    "text": "As you can see from the trace map,",
    "start": "429600",
    "end": "431190"
  },
  {
    "text": "traces are correctly being\nexported to AWS X-Ray.",
    "start": "431190",
    "end": "434673"
  },
  {
    "text": "So we can click on one of these",
    "start": "435510",
    "end": "437190"
  },
  {
    "text": "and dive deeper into the request.",
    "start": "437190",
    "end": "439770"
  },
  {
    "text": "As you can see, the GET\nrequest that we created",
    "start": "439770",
    "end": "443550"
  },
  {
    "text": "going to aws.com, trace successfully.",
    "start": "443550",
    "end": "448199"
  },
  {
    "text": "And here we can dive\nin to get more details",
    "start": "448200",
    "end": "450120"
  },
  {
    "text": "such the duration of the trace",
    "start": "450120",
    "end": "451979"
  },
  {
    "text": "as well as the response codes.",
    "start": "451980",
    "end": "453573"
  },
  {
    "text": "And if we click on metadata,",
    "start": "454650",
    "end": "456270"
  },
  {
    "text": "we could see the custom tags\nwe added to our manual trace.",
    "start": "456270",
    "end": "459272"
  },
  {
    "text": "I hope you found this video useful.",
    "start": "461550",
    "end": "463199"
  },
  {
    "text": "Thank you for watching.",
    "start": "463200",
    "end": "464350"
  }
]