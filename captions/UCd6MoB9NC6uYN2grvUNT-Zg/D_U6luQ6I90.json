[
  {
    "text": "so my name is Austin Collins I'm a full stack JavaScript developer and entrepreneur uh I like to get out",
    "start": "80",
    "end": "5319"
  },
  {
    "text": "projects ideas startups really quickly get them to Market uh but the in reality what this lifestyle looks like is every",
    "start": "5319",
    "end": "12080"
  },
  {
    "text": "single month I'm forking over tons of cash to pay for all my various side projects and all their servers so when",
    "start": "12080",
    "end": "18279"
  },
  {
    "text": "AWS introduced Lambda it really spoke to me especially uh its unique pricing model pay per use and then when AWS",
    "start": "18279",
    "end": "26080"
  },
  {
    "text": "introduced API Gateway I said this is it this is everything I need to build an application without servers uh so I",
    "start": "26080",
    "end": "32320"
  },
  {
    "text": "immediately started refactoring one of my applications to use Lambda exclusively on the back end and while I",
    "start": "32320",
    "end": "38600"
  },
  {
    "text": "was conducting this experiment uh a framework started to emerge something that provided structure",
    "start": "38600",
    "end": "44719"
  },
  {
    "text": "and best practices and principles on how to architect an app to be truly serverless and as I continued the",
    "start": "44719",
    "end": "51559"
  },
  {
    "text": "framework started to be cooler than the project I was working on so I thought maybe some people will dig this I'll",
    "start": "51559",
    "end": "57239"
  },
  {
    "text": "I'll put it up on GitHub and open source it and see what happens so I prepared it on GitHub put a logo of",
    "start": "57239",
    "end": "63480"
  },
  {
    "text": "a shark on there big shark and uh and I posted on Hacker News and I immediately",
    "start": "63480",
    "end": "69799"
  },
  {
    "text": "became depressed because I thought it's never going to go anywhere no one will care it's just going to get bypassed on Hacker News like everything else on",
    "start": "69799",
    "end": "76280"
  },
  {
    "text": "there usually that's posted uh so I went to go drown my sorrows in a sandwich and I came back a couple hours later and uh",
    "start": "76280",
    "end": "83799"
  },
  {
    "text": "the project this framework on Hacker News was getting upvoted like crazy I couldn't believe it uh within a few",
    "start": "83799",
    "end": "89479"
  },
  {
    "text": "hours it was on the front page of Hacker News in the number two position uh had over 300 up votes hundreds of comments",
    "start": "89479",
    "end": "95799"
  },
  {
    "text": "um and in 24 hours I'd say we got over 1,000 stars on the GitHub repo there was something about this serverless",
    "start": "95799",
    "end": "102200"
  },
  {
    "text": "application framework that was really resonating with people and it resonated with one developer in particular",
    "start": "102200",
    "end": "108479"
  },
  {
    "text": "probably the first comment I got on The Hacker News Post was from my buddy Ryan here who was trying to do the exact same",
    "start": "108479",
    "end": "113680"
  },
  {
    "text": "thing and he's now my co-founder on the Jaws project hi so my name is Ryan Pendergast and I a full stack engineer",
    "start": "113680",
    "end": "120960"
  },
  {
    "text": "and I work for a company called doap out in Rochester Minnesota and um and I work",
    "start": "120960",
    "end": "126119"
  },
  {
    "text": "with a team of three backend developers and we work on we're responsible for managing tons and tons of applications",
    "start": "126119",
    "end": "131879"
  },
  {
    "text": "so like Austin said I was also working on a tool set to kind of solve this problem very similar to jaws and when I",
    "start": "131879",
    "end": "139120"
  },
  {
    "text": "saw it on Hacker News and after talking with Austin uh it was a perfect fit to combine forces and make a killer project",
    "start": "139120",
    "end": "146920"
  },
  {
    "text": "so before we get into the slides and the demo I just have two quick questions for the audience this is your participation part so question one can I get a show of",
    "start": "146920",
    "end": "153800"
  },
  {
    "text": "hands of everybody who uses AWS Lambda in some capacity",
    "start": "153800",
    "end": "159440"
  },
  {
    "text": "today okay so that's about 50% me too um Second and last question show of hands",
    "start": "159440",
    "end": "166519"
  },
  {
    "text": "again for the number of you who use a platform as a service play like Heroku or",
    "start": "166519",
    "end": "173280"
  },
  {
    "text": "parse okay maybe about a fifth or something okay thank you awesome take it away all right um oh I should have",
    "start": "173280",
    "end": "180800"
  },
  {
    "text": "switched to this in the beginning so there's me over there uh I need to build apps fast and cheap Ryan works at a Dev",
    "start": "180800",
    "end": "186120"
  },
  {
    "text": "shop where he has to manage a ton of applications and he's got to maintain all those without hassle hopefully so",
    "start": "186120",
    "end": "192239"
  },
  {
    "text": "serverless AWS is here and this is big you could tell this is an actual photo",
    "start": "192239",
    "end": "197440"
  },
  {
    "text": "of developers reaction when they first heard about this so but if you don't know what",
    "start": "197440",
    "end": "202519"
  },
  {
    "text": "serverless AWS is uh here's what we're talking about by serverless uh we mean",
    "start": "202519",
    "end": "207959"
  },
  {
    "text": "that you don't have to think about servers the developer doesn't have to think about servers they exist somewhere",
    "start": "207959",
    "end": "213360"
  },
  {
    "text": "but Amazon has to deal with them not you instead all you're giving as a developer is Lambda which is event-driven compute",
    "start": "213360",
    "end": "219879"
  },
  {
    "text": "resource um it's just sitting there waiting it's just code you deploy onto AWS to waiting to get triggered and",
    "start": "219879",
    "end": "226120"
  },
  {
    "text": "you're only going to get charged for the duration and how many times it's called Uh and then the other half of serverless",
    "start": "226120",
    "end": "231840"
  },
  {
    "text": "AWS is API Gateway and that's the rest API the URL routing layer for Lambda um",
    "start": "231840",
    "end": "238319"
  },
  {
    "text": "so serverless AWS is just Lambda plus API Gateway uh and it allows you to cut out the platform as a service backend as",
    "start": "238319",
    "end": "245120"
  },
  {
    "text": "a service middleman and there's one other quote I wanted to throw in here by this great analyst um he wrote this when",
    "start": "245120",
    "end": "250920"
  },
  {
    "text": "Lambda first came out he says Lambda has the potential to be the focal point of AWS Cloud I'm a big believer of that",
    "start": "250920",
    "end": "257320"
  },
  {
    "text": "maybe in the future everything you build on AWS will be using Lambda as his foundation so why server list why are we",
    "start": "257320",
    "end": "264240"
  },
  {
    "text": "so excited here um though Lambda running runs in containers you don't have to deal with containers uh when you know by",
    "start": "264240",
    "end": "271360"
  },
  {
    "text": "the time I was ready to learn Docker uh Lambda had just come out and I thought you know what let me hold back on this Docker technology and see where this",
    "start": "271360",
    "end": "277919"
  },
  {
    "text": "Lambda stuff is going uh orchestration Auto scale of containers is handled for you um and API Gateway also comes with",
    "start": "277919",
    "end": "284960"
  },
  {
    "text": "support to help you handle uh distributed denial of service attacks uh as well as rate limiting um and",
    "start": "284960",
    "end": "290800"
  },
  {
    "text": "furthermore uh logging uh all important metrics are already built into Lambda you don't have to set that stuff up you",
    "start": "290800",
    "end": "296320"
  },
  {
    "text": "can see them all in cloudwatch so second big reason here why",
    "start": "296320",
    "end": "301360"
  },
  {
    "text": "serverless AWS it's cheaper now I know that if I'm going to convert all my side",
    "start": "301360",
    "end": "306800"
  },
  {
    "text": "projects running on various platforms as a service um to Lambda I'm going to save a ton of money but I was talking to Ryan",
    "start": "306800",
    "end": "313479"
  },
  {
    "text": "here I said for the presentation since you're you know managing all these apps uh I'm just curious if you could take",
    "start": "313479",
    "end": "318880"
  },
  {
    "text": "one of those apps and do a cost savings estimate to see um you know the difference between your traditional",
    "start": "318880",
    "end": "325120"
  },
  {
    "text": "infrastructure versus if you were to switch that app entirely to run on Lambda and here's here's what he came up",
    "start": "325120",
    "end": "330639"
  },
  {
    "text": "with um so this is a real production workload we run at duap and I'm going to do a comparison that's just raw compute",
    "start": "330639",
    "end": "337720"
  },
  {
    "text": "it doesn't have routing stuff in it like elb or API Gateway So currently today we",
    "start": "337720",
    "end": "343680"
  },
  {
    "text": "run two ec2 instances we utilize the 100% Reserve capacity function and",
    "start": "343680",
    "end": "349440"
  },
  {
    "text": "specifically for this example we run two ec2 or uh C3 larges for high availability across uh 2 A's and you can",
    "start": "349440",
    "end": "357520"
  },
  {
    "text": "see it's a pretty light workload there's about 16 ,000 requests a day roughly 200 millisecond average response time and",
    "start": "357520",
    "end": "365160"
  },
  {
    "text": "that comes out at 3.2 uh million milliseconds total per day and an ec2",
    "start": "365160",
    "end": "370319"
  },
  {
    "text": "that costs us about $3 a day and here is the Lambda",
    "start": "370319",
    "end": "379120"
  },
  {
    "text": "version so as you can see uh a drastic savings the uh in this example the",
    "start": "381080",
    "end": "388039"
  },
  {
    "text": "Lambda were running a 1042 megabyte size uh container or size Lambda which is on",
    "start": "388039",
    "end": "393240"
  },
  {
    "text": "the lower end but not the lowest um and like Austin said they handle",
    "start": "393240",
    "end": "398840"
  },
  {
    "text": "everything for us the container the provisioning the deployment the ha the DS um they handle everything and as",
    "start": "398840",
    "end": "405280"
  },
  {
    "text": "we'll get into here it's more than just uh raw compute savings it's really what we're going to talk about today is a",
    "start": "405280",
    "end": "411360"
  },
  {
    "text": "total cost of ownership savings that's right so just looking at this real quick",
    "start": "411360",
    "end": "417080"
  },
  {
    "text": "there's a ton of smart people out there there's probably a ton of smart people in this room that could optimize that top scenario bring those costs down but",
    "start": "417080",
    "end": "423080"
  },
  {
    "text": "remember that takes time and time is your most precious resource and that's what Lambda provides out of the box and",
    "start": "423080",
    "end": "428919"
  },
  {
    "text": "that's a huge margin at the end of the day I mean if you're an aggressive competitive company or sort of a disruptive uh hacker uh I think you",
    "start": "428919",
    "end": "436720"
  },
  {
    "text": "could take on a lot of stuff just starting from here I mean you get started with this setup you're pretty",
    "start": "436720",
    "end": "442120"
  },
  {
    "text": "you're pretty dangerous I'd say so uh why servus AWS this is",
    "start": "442120",
    "end": "447720"
  },
  {
    "text": "honestly the biggest reason why we're excited exced here uh because this workflow rules and we're not just",
    "start": "447720",
    "end": "452840"
  },
  {
    "text": "talking about application isolation anymore we're talking about endpoint isolation multi-container code",
    "start": "452840",
    "end": "458440"
  },
  {
    "text": "deployment is handled for you and you could quickly provision new stages in regions by just copying your Lambda",
    "start": "458440",
    "end": "463879"
  },
  {
    "text": "functions over super easy with JW we'll show you that in a second uh and all this with as little devops as possible",
    "start": "463879",
    "end": "470400"
  },
  {
    "text": "and the little Hidden Gem here is as most of you know the most expensive part of the development cycle is the",
    "start": "470400",
    "end": "475919"
  },
  {
    "text": "maintenance phase and Jaws combined with API Gateway and Lambda really help address that because it reduces the",
    "start": "475919",
    "end": "482080"
  },
  {
    "text": "friction that it takes for a developer to deploy your application in multiple stages multiple regions just for a",
    "start": "482080",
    "end": "488960"
  },
  {
    "text": "function and you know we'll showcase that here in a minute except for one thing and this is",
    "start": "488960",
    "end": "494800"
  },
  {
    "text": "what I found when I started to refactor that first application to use Lambda exclusively serverless is",
    "start": "494800",
    "end": "501520"
  },
  {
    "text": "also Anarchy there a lot going on",
    "start": "501520",
    "end": "506879"
  },
  {
    "text": "here so what happens when you have many lamb is I mean lambda's cool you might you know start hacking with it you'll",
    "start": "506879",
    "end": "512360"
  },
  {
    "text": "get a few Lambda functions up and running and just feel like Superman or superwoman but uh keep in mind if you're",
    "start": "512360",
    "end": "518039"
  },
  {
    "text": "going to build a rest API on Lambda every single route has various methods",
    "start": "518039",
    "end": "523080"
  },
  {
    "text": "um and all those are going to require their own Lambda functions and it gets hairy pretty quickly uh so tons of",
    "start": "523080",
    "end": "528600"
  },
  {
    "text": "functions means tons of containers with multiple versions you're going to want to version those Lambda functions uh",
    "start": "528600",
    "end": "534279"
  },
  {
    "text": "across multiple stages uh across multiple regions and all these are required wiing their own AWS resources",
    "start": "534279",
    "end": "541200"
  },
  {
    "text": "securely so if you start heading down this path this is likely where you're going to end",
    "start": "541200",
    "end": "546680"
  },
  {
    "text": "up tons of swimmers all over the place so this is where we come in with",
    "start": "546680",
    "end": "554279"
  },
  {
    "text": "jaws so what is Jaws what are we talking about here uh Jaws is a free open-",
    "start": "555320",
    "end": "560640"
  },
  {
    "text": "source framework for building serverless web mobile and iot applications uh it's only two months old uh Jaws takes the",
    "start": "560640",
    "end": "568600"
  },
  {
    "text": "form of a CLI it's just a command line tool uh with some simple commands that",
    "start": "568600",
    "end": "573760"
  },
  {
    "text": "automate lots of great stuff and when we're talking about Jaws apps or serverless apps what we're talking about",
    "start": "573760",
    "end": "579680"
  },
  {
    "text": "here is just a group of lambdas so is that still an application I don't know",
    "start": "579680",
    "end": "584959"
  },
  {
    "text": "um but what Jaws does the value of Jaws is it provides structure Automation and optimization for Rowdy serverless",
    "start": "584959",
    "end": "591200"
  },
  {
    "text": "projects and you can see some of our traction numbers here um so that's 4,400",
    "start": "591200",
    "end": "597040"
  },
  {
    "text": "GitHub Stars uh this was made a week ago so I think we're almost at 4,700 GitHub Stars uh we have you know a few hundred,",
    "start": "597040",
    "end": "605560"
  },
  {
    "text": "unique views and a great community so in two months there's already over 100 people who are contributing to this",
    "start": "605560",
    "end": "611360"
  },
  {
    "text": "project uh and all day long you can find us in the getter chat room just trying to figure out you know this new",
    "start": "611360",
    "end": "618519"
  },
  {
    "text": "frontier so we just released Jaws version one it's in beta super powerful",
    "start": "619200",
    "end": "624800"
  },
  {
    "text": "uh but you're definitely looking at the bleeding edge here you know just FYI uh but in Jaws version one our goal was not",
    "start": "624800",
    "end": "630120"
  },
  {
    "text": "just to make a groundbreaking serverless framework but the best framework for building applications on AWS in general",
    "start": "630120",
    "end": "637079"
  },
  {
    "text": "uh so included within Jaws are AWS best practices uh lots of AWS automation you",
    "start": "637079",
    "end": "643040"
  },
  {
    "text": "know reducing the learning curve and making AWS more accessible to newcomers honestly I set out you know just to make",
    "start": "643040",
    "end": "649120"
  },
  {
    "text": "it my goal and Ryan did too to spare you from the AWS console uh UI you know",
    "start": "649120",
    "end": "654279"
  },
  {
    "text": "wherever possible so people who appreciate Jaws also most are are people who have done production based workloads",
    "start": "654279",
    "end": "660279"
  },
  {
    "text": "with AWS across regions and stag and are familiar with the pain points and also before we get into the",
    "start": "660279",
    "end": "667320"
  },
  {
    "text": "demo here I just want to show you what a Jaws application looks like when is deployed on AWS uh Jaws Works",
    "start": "667320",
    "end": "673600"
  },
  {
    "text": "exclusively with AWS it uses only AWS resources right now uh and every Jaws",
    "start": "673600",
    "end": "679360"
  },
  {
    "text": "project comes with uh cloud formation templates it comes with three cloud formation templates because uh cloud",
    "start": "679360",
    "end": "685320"
  },
  {
    "text": "formation has a 200 resource limit and we were worried you know with all your Lambda functions maybe API Gateway",
    "start": "685320",
    "end": "691120"
  },
  {
    "text": "endpoints and all the other resources you'd quickly surpass that so um we we",
    "start": "691120",
    "end": "696480"
  },
  {
    "text": "went with cloud formation because as they say it's a serer AWS API we're Believers of that uh and you can see how",
    "start": "696480",
    "end": "703680"
  },
  {
    "text": "Jaws works here so so Jaws is going to deploy a cloud formation stack uh in each stage and region replicating your",
    "start": "703680",
    "end": "710720"
  },
  {
    "text": "project entirely and I'm sorry this is so small you can see it in our documentation um but you can see",
    "start": "710720",
    "end": "716880"
  },
  {
    "text": "starting at the top we have different stages and stages are like environments so we have a development stage a test",
    "start": "716880",
    "end": "722720"
  },
  {
    "text": "stage for this project we have a production stage and within each stage you could easily replicate all your",
    "start": "722720",
    "end": "728320"
  },
  {
    "text": "resources across regions so in the production stage we have a Us East one uh and a US West that should be us West",
    "start": "728320",
    "end": "735360"
  },
  {
    "text": "2 is a little bit of a type with there I think Lambda only works in US West 2 uh but within each stage and each region of",
    "start": "735360",
    "end": "741600"
  },
  {
    "text": "that stage is a replication of your project and you'll see the three cloud formation Stacks there um the first one",
    "start": "741600",
    "end": "748279"
  },
  {
    "text": "contains your res sources outside of Lambda and API Gateway this is for your IM policies uh your IM roles uh Dynamo",
    "start": "748279",
    "end": "755839"
  },
  {
    "text": "DB um as well as an S3 bucket that Jaws uses to back up all your project data uh",
    "start": "755839",
    "end": "762240"
  },
  {
    "text": "within that stage and region so Jaws will push uh on every deployment it'll save a copy of your cloud formation",
    "start": "762240",
    "end": "768880"
  },
  {
    "text": "template timestamp it um and also all your Lambda functions it backs it up to S3 uh as well as environment variables",
    "start": "768880",
    "end": "776199"
  },
  {
    "text": "specific um to that stage and region so what you're looking at here is perfect replication and isolation of your",
    "start": "776199",
    "end": "782680"
  },
  {
    "text": "serverless project across stages and regions and uh let's show you how it",
    "start": "782680",
    "end": "789480"
  },
  {
    "text": "works okay so hopefully everyone can see this okay um so installing Jaws we'll start with that it's very easy it's just",
    "start": "791440",
    "end": "797680"
  },
  {
    "text": "an npm module so it's just uh install Jaws framework just to save time I'm not",
    "start": "797680",
    "end": "803839"
  },
  {
    "text": "going to do that actually execute it and um so so let's just jump into",
    "start": "803839",
    "end": "809880"
  },
  {
    "text": "creating a project so Jaws project create and you kind of get a little",
    "start": "809880",
    "end": "816199"
  },
  {
    "text": "welcome screen so welcome to Jaws that's how you make an entrance uh and it's just going to",
    "start": "816199",
    "end": "821480"
  },
  {
    "text": "prompt you for a few basic information here so we're just going to take some defaults for uh sake of",
    "start": "821480",
    "end": "827480"
  },
  {
    "text": "time um and you're going to enter your stage region I'm going to choose us East one and then the this step lets you",
    "start": "827480",
    "end": "834880"
  },
  {
    "text": "choose the AWS profile which kind of fits in with all the AWS SDK CLI ecosystem so if you have already have",
    "start": "834880",
    "end": "841440"
  },
  {
    "text": "profiles set up you can specify one of those if you don't Jaws will actually create it for you so I'm going to",
    "start": "841440",
    "end": "846800"
  },
  {
    "text": "specified jaws and this is the part that Austin talked about where we leverage cloud formation so here we're creating",
    "start": "846800",
    "end": "854120"
  },
  {
    "text": "the IM roles provisioning the S3 bucket for the environment variables and the um",
    "start": "854120",
    "end": "859920"
  },
  {
    "text": "and the code the code deploys and it takes about 5 minutes this is a onetime",
    "start": "859920",
    "end": "865000"
  },
  {
    "text": "cost so you do this one time per project uh per region per stage after that as",
    "start": "865000",
    "end": "870440"
  },
  {
    "text": "you'll see it's it's very quick yeah this is the only spot where cloud formation is really slow uh otherwise",
    "start": "870440",
    "end": "876639"
  },
  {
    "text": "deploying via cloud formation is really quickly everywhere else and this keeps us up at night so Amazon if you're",
    "start": "876639",
    "end": "881720"
  },
  {
    "text": "listening you know any way you could speed up that process that'd be super cool but we understand it's doing lots of stuff so really slow might be a",
    "start": "881720",
    "end": "888000"
  },
  {
    "text": "little harsh it's uh you're doing a lot for us in the back end so to save time I've already created a project and um",
    "start": "888000",
    "end": "894519"
  },
  {
    "text": "I'm just going to run you through the project skeleton that it creates when you create a new project project so",
    "start": "894519",
    "end": "899720"
  },
  {
    "text": "we're going to go bottom up here and I'll just touch on each of these real quick yeah this is scaffolding that Jaws just created us for us when we ran that",
    "start": "899720",
    "end": "906120"
  },
  {
    "text": "command so package.json by default currently today Jaws uses no JS runtime",
    "start": "906120",
    "end": "911560"
  },
  {
    "text": "so it just made a package Json for us uh a Jaws Json is metadata that defines",
    "start": "911560",
    "end": "916839"
  },
  {
    "text": "stuff about your project the project name the location and of importance here the stages so this represents every",
    "start": "916839",
    "end": "923160"
  },
  {
    "text": "stage every region that's contained in this project um and at the bottom there you can see the Jaws bucket it uses and",
    "start": "923160",
    "end": "929199"
  },
  {
    "text": "that Jaws bucket like Austin said we created for you at project create admin. EnV this is the way to tie",
    "start": "929199",
    "end": "937480"
  },
  {
    "text": "your project back to the the AWS profile on your file system specifically it's an",
    "start": "937480",
    "end": "943279"
  },
  {
    "text": "admin profile uh cloud formation this is one of the cloud",
    "start": "943279",
    "end": "948519"
  },
  {
    "text": "formation files we create and this contains all your resources um stages",
    "start": "948519",
    "end": "954120"
  },
  {
    "text": "project domains um creates the IM rolles S3 bucket it's all in here so your cloud",
    "start": "954120",
    "end": "959440"
  },
  {
    "text": "formation template is saved locally and then also backed up to S3 uh at certain times with time stamps and the beauty of",
    "start": "959440",
    "end": "966440"
  },
  {
    "text": "this is if you use revision control like git um before you do deploys you can use",
    "start": "966440",
    "end": "971720"
  },
  {
    "text": "git diffs and see what's changed so you're not only confident in what you're rolling out but you also have a quick",
    "start": "971720",
    "end": "977600"
  },
  {
    "text": "roll back support if you need to leverage that and then the AWS modules I'm going to punt on this for now we're",
    "start": "977600",
    "end": "983399"
  },
  {
    "text": "going to get into that here in a second all right let switch it over",
    "start": "983399",
    "end": "989839"
  },
  {
    "text": "so when we put out Jaws version zero um uh I I thought like oh it's going to use",
    "start": "989839",
    "end": "995360"
  },
  {
    "text": "Dynamo DB and everything's going to be done this way and of course as soon as it got popular uh the next morning the",
    "start": "995360",
    "end": "1001480"
  },
  {
    "text": "GitHub issues just piled on with all types of configuration request that I hadn't anticipated foolishly uh so uh we",
    "start": "1001480",
    "end": "1009440"
  },
  {
    "text": "decided to take a more modular uh approach with jaws where we don't really force you to uh use specific AWS",
    "start": "1009440",
    "end": "1017040"
  },
  {
    "text": "resources uh instead and Lambda functions you could do whatever you want and to accelerate this whole process",
    "start": "1017040",
    "end": "1023519"
  },
  {
    "text": "we've come up with something just a couple weeks ago is really interesting called AWS modules the acronym is",
    "start": "1023519",
    "end": "1032760"
  },
  {
    "text": "awesome so why why is this so interesting here so an AWS module is uh",
    "start": "1035280",
    "end": "1042480"
  },
  {
    "text": "it's just one or multiple Lambda functions uh focused on specific tasks",
    "start": "1042480",
    "end": "1048000"
  },
  {
    "text": "uh it's it it support it supports all AWS Lambda languages um and keep in mind",
    "start": "1048000",
    "end": "1053480"
  },
  {
    "text": "these are the Lambda functions in your jaws project they're just renamed to AWS modules and now that they can support",
    "start": "1053480",
    "end": "1060039"
  },
  {
    "text": "all the languages that Lambda will support it becomes really interesting because now you can mix and match programming languages uh within the same",
    "start": "1060039",
    "end": "1066600"
  },
  {
    "text": "application because some languages are more efficient for certain tasks so Jaws comes with commands to build these AWS",
    "start": "1066600",
    "end": "1073640"
  },
  {
    "text": "modules aka the lambdas that your jaws application runs on uh and also you can install all these AWS modules into your",
    "start": "1073640",
    "end": "1080960"
  },
  {
    "text": "project uh from an ecosystem that we're trying to spawn here so in each AWS module there's an awesome. Json file",
    "start": "1080960",
    "end": "1088240"
  },
  {
    "text": "which contains Lambda uh API Gateway and other AWS resource uh configuration",
    "start": "1088240",
    "end": "1093440"
  },
  {
    "text": "information so it's kind of like npm modules where mpm has a package.json uh",
    "start": "1093440",
    "end": "1099400"
  },
  {
    "text": "with awesome we have awesome. Json uh and in there is going to have a uh a",
    "start": "1099400",
    "end": "1104799"
  },
  {
    "text": "Lambda object with Lambda configuration settings API Gateway configuration",
    "start": "1104799",
    "end": "1110039"
  },
  {
    "text": "settings if this if this module needs an endpoint um and it's also going to",
    "start": "1110039",
    "end": "1115760"
  },
  {
    "text": "contain a cloud information snippet uh right in the AWS module so Jaws adds the",
    "start": "1115760",
    "end": "1121520"
  },
  {
    "text": "module's cloud information resources to your project automatically uh whenever you install an AWS module uh you know",
    "start": "1121520",
    "end": "1128320"
  },
  {
    "text": "from the ecosystem [Music] so before you know one last thing before",
    "start": "1128320",
    "end": "1134440"
  },
  {
    "text": "we get into it here uh my thinking here in short was just that you know what could be cooler than just having a",
    "start": "1134440",
    "end": "1141320"
  },
  {
    "text": "totally serverless application you know if you're building a rest API where every single endpoint is isolated in its",
    "start": "1141320",
    "end": "1146880"
  },
  {
    "text": "own container and you're only getting charged whenever that endpoint is called what could be cooler than that well I",
    "start": "1146880",
    "end": "1152919"
  },
  {
    "text": "thought if all the code you needed for your application was already written and that's kind of the goal of AWS modules",
    "start": "1152919",
    "end": "1159120"
  },
  {
    "text": "so we started this project just a couple weeks ago and we've already had people writing AWS modules for common tasks uh",
    "start": "1159120",
    "end": "1165440"
  },
  {
    "text": "we've got stripe uh web hook handlers Slack web hook handlers uh transactional",
    "start": "1165440",
    "end": "1171159"
  },
  {
    "text": "email lambdas um we have awesome uh users which is users crud for your",
    "start": "1171159",
    "end": "1176559"
  },
  {
    "text": "application so what's starting to take shape here is an ecosystem of everyone sort of writing your business logic and",
    "start": "1176559",
    "end": "1183679"
  },
  {
    "text": "we're all working on this um contained in in in Lambda functions and we're all",
    "start": "1183679",
    "end": "1189200"
  },
  {
    "text": "working to optimize this code and work on the best possible users crud you know functions or transactional email",
    "start": "1189200",
    "end": "1196000"
  },
  {
    "text": "functions uh and what's sort of starting to take shape here is you're less of a programmer and more of an assembler so",
    "start": "1196000",
    "end": "1203440"
  },
  {
    "text": "let's check out you know these AWS modules okay so let's start off by creating a",
    "start": "1203440",
    "end": "1210880"
  },
  {
    "text": "module and I'm just going to create a hello world module and it's pretty simple syntax you're creating the module",
    "start": "1210919",
    "end": "1217240"
  },
  {
    "text": "called greetings and we refer it to as an action but you can also think it as a Lambda uh but hello just a simple hello",
    "start": "1217240",
    "end": "1223880"
  },
  {
    "text": "world so so greetings is the name of the module that you want to create uh and hello will be the name of the first",
    "start": "1223880",
    "end": "1229720"
  },
  {
    "text": "Lambda function within that module remember a module can contain one or multiple Lambda",
    "start": "1229720",
    "end": "1234880"
  },
  {
    "text": "functions so remember how I punted on that AWS modules directory this is how it actually works so you can see",
    "start": "1234880",
    "end": "1241039"
  },
  {
    "text": "greetings hello and then the uh there's an awesome Json for the module and these",
    "start": "1241039",
    "end": "1246600"
  },
  {
    "text": "are the extension points that Austin talked about that get merged into your Project's cloud formation upon",
    "start": "1246600",
    "end": "1253960"
  },
  {
    "text": "install and then let's go into the uh Lambda directory and again here is a a",
    "start": "1254039",
    "end": "1260000"
  },
  {
    "text": "awesome. Json and this is where we do a lot of the heavy lifting for you you don't have",
    "start": "1260000",
    "end": "1265240"
  },
  {
    "text": "to touch this file if you don't want to um it should solve some use cases but in",
    "start": "1265240",
    "end": "1270799"
  },
  {
    "text": "here we do things like the environment variables this is really powerful because a module developer can say for",
    "start": "1270799",
    "end": "1276600"
  },
  {
    "text": "my code to work you need to set these environment variables and you'll see how this is leveraged in the CLI in a minute",
    "start": "1276600",
    "end": "1282840"
  },
  {
    "text": "um this package object specifically in this case for node.js we do the heavy",
    "start": "1282840",
    "end": "1288600"
  },
  {
    "text": "lifting of browsery and minifying your code it's very important in Lambda that",
    "start": "1288600",
    "end": "1293679"
  },
  {
    "text": "your code is lean as possible not only to encourage quicker like nodejs VM",
    "start": "1293679",
    "end": "1299679"
  },
  {
    "text": "startup times but the smaller your code base the quicker that code gets up to",
    "start": "1299679",
    "end": "1304799"
  },
  {
    "text": "Amazon gets into the Container the quicker the container gets provisioned and the quicker that container can start",
    "start": "1304799",
    "end": "1310840"
  },
  {
    "text": "up um the call formation object this kind of um describes the uh the Handler",
    "start": "1310840",
    "end": "1318600"
  },
  {
    "text": "for the Lambda the Lambda end point as well as the runtime and then the API",
    "start": "1318600",
    "end": "1323640"
  },
  {
    "text": "Gateway metadata okay so let's go back",
    "start": "1323640",
    "end": "1332360"
  },
  {
    "text": "here now we're GNA install a a separate module which I've created a few weeks",
    "start": "1333039",
    "end": "1338840"
  },
  {
    "text": "ago it's a image resizing awesome module so we just created our first AWS module",
    "start": "1338840",
    "end": "1344320"
  },
  {
    "text": "uh Jaws provides a ton of scaffolding for you a ton of uh best practices are are built in so you know if you want to",
    "start": "1344320",
    "end": "1350080"
  },
  {
    "text": "start you doing Lambda development uh Jaws will set you off in the right path right from the",
    "start": "1350080",
    "end": "1355480"
  },
  {
    "text": "get-go so there's a lot of stuff going on here but I'll highlight a few things you can see that this is an npm module",
    "start": "1355480",
    "end": "1360760"
  },
  {
    "text": "we leveraged the npm U module system to deliver our packages and maintain",
    "start": "1360760",
    "end": "1366200"
  },
  {
    "text": "dependencies but we Implement a post install hook to get Jaws hooks into the",
    "start": "1366200",
    "end": "1371520"
  },
  {
    "text": "code so you can see here there's some Jaws output we we merge in the Lambda in policy statements merge in the CL",
    "start": "1371520",
    "end": "1379000"
  },
  {
    "text": "resources and then we kick off an npm install and you can see here the awesome images module requires a few a few",
    "start": "1379000",
    "end": "1385960"
  },
  {
    "text": "packages and you'll see this warning that says hey like I said before module implementers can say which environment",
    "start": "1385960",
    "end": "1391640"
  },
  {
    "text": "variables need to be set to make this uh this Cod work so we're going to do a um after",
    "start": "1391640",
    "end": "1399080"
  },
  {
    "text": "after we've installed it we're going to deploy the resources and all this is doing is",
    "start": "1399080",
    "end": "1405360"
  },
  {
    "text": "executing your cloud formation resource file you know now now knowing that we've just merged in all that stuff from this",
    "start": "1405360",
    "end": "1412240"
  },
  {
    "text": "uh this new AWS or awesome module yeah installed a remote awesome module it comes with cloud formation",
    "start": "1412240",
    "end": "1418880"
  },
  {
    "text": "template specifying your AWS resources Jaws merg that in immediately on installation uh and now we have a Jaws",
    "start": "1418880",
    "end": "1425640"
  },
  {
    "text": "deploy resources command which is going to provision that stuff on your AWS account and some of the stuff might cost",
    "start": "1425640",
    "end": "1431440"
  },
  {
    "text": "money just FYI and you can see we're we're provisioning it uh within the stage uh",
    "start": "1431440",
    "end": "1438760"
  },
  {
    "text": "and in a specific region within that stage so this is the development stage and the US East one region within the",
    "start": "1438760",
    "end": "1444760"
  },
  {
    "text": "development stage okay and then we're going to I'm going to show you the Jaws EnV",
    "start": "1444760",
    "end": "1452080"
  },
  {
    "text": "command so I'm going to list all the div environment variables for my development stage across all",
    "start": "1452080",
    "end": "1458000"
  },
  {
    "text": "regions and if you're uh if you use herok you may be familiar with their EnV command this is similar um but with a",
    "start": "1458000",
    "end": "1464840"
  },
  {
    "text": "few more features and you can see here highlighted in red the the awesome module the resize awesome images resize",
    "start": "1464840",
    "end": "1471840"
  },
  {
    "text": "module said that I had to set image resize bucket I haven't done that yet so it's told me that in in Red so let me",
    "start": "1471840",
    "end": "1477039"
  },
  {
    "text": "set that here real quick so I'm going to set that",
    "start": "1477039",
    "end": "1482360"
  },
  {
    "text": "environment variable for that region for that stage we also have helpful utilities you can set it for multiple uh",
    "start": "1482360",
    "end": "1488399"
  },
  {
    "text": "multiple regions at the same time",
    "start": "1488399",
    "end": "1495679"
  },
  {
    "text": "okay so real quick before we deploy this oops I got to",
    "start": "1496000",
    "end": "1501600"
  },
  {
    "text": "Swit just to re just to talk about some stuff he touched on lightly um AWS",
    "start": "1501600",
    "end": "1507240"
  },
  {
    "text": "Lambda comes with a cold start startup cost uh especially for asynchronous Lambda calls um and this just happens uh",
    "start": "1507240",
    "end": "1515480"
  },
  {
    "text": "when your Lambda function on AWS hasn't been called for several minutes AWS is going to deprioritize it in their",
    "start": "1515480",
    "end": "1521039"
  },
  {
    "text": "infrastructure and it's going to take a little bit longer on that first initial request um so we've you know been paying",
    "start": "1521039",
    "end": "1527480"
  },
  {
    "text": "a lot of attention to this and focused uh and really provide a lot of optimization right in Jaws because if",
    "start": "1527480",
    "end": "1533840"
  },
  {
    "text": "we're talking about building web apps mobile apps you know lots of stuff uh we need that those Fast Response times um",
    "start": "1533840",
    "end": "1540799"
  },
  {
    "text": "and so Jaws out of the box comes with a ton of uh optimization uh and whenever it goes to deploy a Lambda function",
    "start": "1540799",
    "end": "1547720"
  },
  {
    "text": "here's what Jaws is going to do it's going to package and optimize your code it's going to run it through browser fi",
    "start": "1547720",
    "end": "1553399"
  },
  {
    "text": "uh to concatenate everything Traverse up the dependency graph bring everything into one file it's going to ify it uh",
    "start": "1553399",
    "end": "1559640"
  },
  {
    "text": "and then it's going to upload the compressed and timestamped Lambda to your S3 bucket in that stage and region",
    "start": "1559640",
    "end": "1565679"
  },
  {
    "text": "so you have a backup of that specific uh deployed Lambda uh and then it's then it's going to update uh the cloud",
    "start": "1565679",
    "end": "1572000"
  },
  {
    "text": "formation Lambda template within your project with the S3 keys to where that Lambda function is located uh and then",
    "start": "1572000",
    "end": "1578320"
  },
  {
    "text": "it's going to upload it's going to update the cloud formation stack in the stage in region uh to deploy your",
    "start": "1578320",
    "end": "1583799"
  },
  {
    "text": "lambdas in short Jaws deploys lambdas you know via cloud formation um but it does all that stuff behind the scenes",
    "start": "1583799",
    "end": "1589919"
  },
  {
    "text": "whenever you deploy your Lambda functions to give you the best possible response",
    "start": "1589919",
    "end": "1595360"
  },
  {
    "text": "times oh deploying endpoints with jaws so API Gateway is really powerful uh but",
    "start": "1596000",
    "end": "1602080"
  },
  {
    "text": "it's but it's pretty new uh and cloud formation does not have API Gateway support uh as of yet uh so Jaws fakes uh",
    "start": "1602080",
    "end": "1610480"
  },
  {
    "text": "cloud formation syntax um our strategy here is just fake it till they make it I",
    "start": "1610480",
    "end": "1616760"
  },
  {
    "text": "guess so the point of this is that you know whenever they do introduce uh cloud formation uh support for API Gateway",
    "start": "1616760",
    "end": "1623080"
  },
  {
    "text": "should be pretty easy to transition your DW project hopefully you know you won't even notice it um so uh another thing is",
    "start": "1623080",
    "end": "1630399"
  },
  {
    "text": "we had to build our own API Gateway SDK uh in node um and uh I took on that",
    "start": "1630399",
    "end": "1636440"
  },
  {
    "text": "project took me like three weeks uh but it deploys your whole rest API for you so when you deploy something with jaws",
    "start": "1636440",
    "end": "1643000"
  },
  {
    "text": "it's going to optimize your lamda functions for best possible response times back them up onto an S3 bucket",
    "start": "1643000",
    "end": "1648240"
  },
  {
    "text": "deploy them on a AWS in a stage in specific region uh and then if your",
    "start": "1648240",
    "end": "1654000"
  },
  {
    "text": "awesome Json contains API configuration uh API Gateway configuration settings um",
    "start": "1654000",
    "end": "1660519"
  },
  {
    "text": "jaw is then going to go deploy that endpoint for you and connect it to Lambda so let's see what this looks",
    "start": "1660519",
    "end": "1667799"
  },
  {
    "text": "like Okay so let's let's deploy something we're going to use the the dash command that's short for",
    "start": "1667799",
    "end": "1675480"
  },
  {
    "text": "dashboard as as you can see it's traversed the project it's identified all your lambdas and that's the L and",
    "start": "1676840",
    "end": "1683000"
  },
  {
    "text": "it's identified all your API Gateway endpoints that's the E and we're going to deploy all four the four of these",
    "start": "1683000",
    "end": "1689600"
  },
  {
    "text": "things at one time and this is something we came up with um this is needed for",
    "start": "1689600",
    "end": "1695039"
  },
  {
    "text": "serverless projects in general uh this dashboard because you have configuration settings specified all over the place we",
    "start": "1695039",
    "end": "1701360"
  },
  {
    "text": "wanted a way to centralize all that information so the developer can view it uh and deploy off of that quickly",
    "start": "1701360",
    "end": "1708799"
  },
  {
    "text": "and I know this kind of looks like a gooey but we also have commandline options to um run this without user",
    "start": "1708799",
    "end": "1715840"
  },
  {
    "text": "interaction so every command you see that's interactive is also a command line option alternative as well so I was",
    "start": "1715840",
    "end": "1722960"
  },
  {
    "text": "doing a lot of stuff here this is really the heavy lifting of Jaws like Austin said we're um running it through browser",
    "start": "1722960",
    "end": "1729679"
  },
  {
    "text": "five minifying it downloading the EMV file for the stage and region from S3",
    "start": "1729679",
    "end": "1735279"
  },
  {
    "text": "zipping all that stuff up uploading it to S3 up dating your cloud formation and executing the cloud formation and you",
    "start": "1735279",
    "end": "1742120"
  },
  {
    "text": "can see all four and the API Gateway so you can see both of those endpoints both of those lambdas were deployed uh before",
    "start": "1742120",
    "end": "1749159"
  },
  {
    "text": "we could finish talking here yeah it usually takes about 30 seconds to do a deployment um doesn't matter we we",
    "start": "1749159",
    "end": "1756240"
  },
  {
    "text": "haven't seen even if you increase the amount of Lambda functions uh it doesn't matter cloud formation will deploy all that in about 30 seconds and what's spit",
    "start": "1756240",
    "end": "1763760"
  },
  {
    "text": "out here uh is a URL this is your rest API that was created for you uh via API",
    "start": "1763760",
    "end": "1770720"
  },
  {
    "text": "Gateway okay so let's try this out so we're going to do the hello world one",
    "start": "1770720",
    "end": "1776000"
  },
  {
    "text": "first so in that Lambda function that we created in our project we specified in the awesome Json uh there was a Path",
    "start": "1776000",
    "end": "1783080"
  },
  {
    "text": "property where you could specify the route uh if you want to deploy if you want to hook up a a URL to the Lambda",
    "start": "1783080",
    "end": "1789440"
  },
  {
    "text": "function and that's what he put in here at the end let's give it a shot bam there we go this it by default",
    "start": "1789440",
    "end": "1797000"
  },
  {
    "text": "it returns this uh this Jason response here uh but I don't know if anyone's",
    "start": "1797000",
    "end": "1802240"
  },
  {
    "text": "done a lot of Lambda development or API Gateway development yet this is pretty powerful I mean it takes a long time to",
    "start": "1802240",
    "end": "1808320"
  },
  {
    "text": "set up your API endpoints and stuff uh in the console uh and Jaws just did all that stuff in a in a matter of seconds",
    "start": "1808320",
    "end": "1814360"
  },
  {
    "text": "and deployed it for you okay now let's try the uh the imagery",
    "start": "1814360",
    "end": "1821279"
  },
  {
    "text": "size that one is images thumbnail",
    "start": "1822240",
    "end": "1827440"
  },
  {
    "text": "we like Jeff bar so we're going to use him as an",
    "start": "1833799",
    "end": "1837840"
  },
  {
    "text": "example and so what this is doing is is downloading that that Earl or the data backed by that Earl um it's resizing the",
    "start": "1842960",
    "end": "1850720"
  },
  {
    "text": "image uploading it to an S3 bucket and just to prove it's not",
    "start": "1850720",
    "end": "1856000"
  },
  {
    "text": "vaporware there's [Applause]",
    "start": "1856000",
    "end": "1865519"
  },
  {
    "text": "so as I suspect many of you can appreciate this uh design and",
    "start": "1865519",
    "end": "1870799"
  },
  {
    "text": "development developer flow compared to the traditional ec2 code deploy flow right we did a real working project we",
    "start": "1870799",
    "end": "1877880"
  },
  {
    "text": "leveraged the open source Community the awesome modules we deployed this could have been a production workload um in",
    "start": "1877880",
    "end": "1885039"
  },
  {
    "text": "seconds minutes right and Austin could get check out my project Fork his own",
    "start": "1885039",
    "end": "1891000"
  },
  {
    "text": "Branch create his own stage in like 30 seconds so very powerful",
    "start": "1891000",
    "end": "1897638"
  },
  {
    "text": "stuff okay check one more thing we want to show you one other thing just to show",
    "start": "1897799",
    "end": "1903399"
  },
  {
    "text": "you how powerful the Jaws optimization uh pipeline is um let's",
    "start": "1903399",
    "end": "1908720"
  },
  {
    "text": "take a look at what our this the file sizes of our lambdas uh in in the console here so we have two lambdas um",
    "start": "1908720",
    "end": "1915360"
  },
  {
    "text": "the one I'm going to Showcase here is this the awesome images thumbnail service and as you can see now the",
    "start": "1915360",
    "end": "1920639"
  },
  {
    "text": "optimized package is 798k that's all the heavy lifting Jaws is already done for us by default and what I'm going to",
    "start": "1920639",
    "end": "1929720"
  },
  {
    "text": "do is go into the awesome Json for this",
    "start": "1929720",
    "end": "1936639"
  },
  {
    "text": "Lambda and I'm going to flip one little bit here or one string um and just make this false right",
    "start": "1936639",
    "end": "1944080"
  },
  {
    "text": "so we're not going to build we're not going to optimize or build the nodejs package package and there's a lot of",
    "start": "1944080",
    "end": "1949960"
  },
  {
    "text": "flexibility in here I'm not going to go into it today but there's packages you can exclude like the AWS STK which is",
    "start": "1949960",
    "end": "1955639"
  },
  {
    "text": "not browser fireable browser fireable um so we exclude that and you can also do include pass it's a little more advanced",
    "start": "1955639",
    "end": "1962639"
  },
  {
    "text": "but uh we do have support for that okay so now we're going to",
    "start": "1962639",
    "end": "1969480"
  },
  {
    "text": "do so you'll know what I'm not I'm not using the oops just use a",
    "start": "1975440",
    "end": "1982278"
  },
  {
    "text": "dash yeah and I'm just going to deploy the",
    "start": "1983000",
    "end": "1989159"
  },
  {
    "text": "Lambda in short we made a change to Lambda function and now we're just going to deploy that turn off the optimization",
    "start": "1989159",
    "end": "1995880"
  },
  {
    "text": "and you'll see it's not echoing the statements about um compiling the code so it just made the zip file from the",
    "start": "1995880",
    "end": "2002120"
  },
  {
    "text": "code and download the EnV F EnV file put it in the zip so what was the original",
    "start": "2002120",
    "end": "2008639"
  },
  {
    "text": "file size when it was optimized was almost 800",
    "start": "2008639",
    "end": "2012960"
  },
  {
    "text": "kiloby so bam two Megs all right so that's big yeah I don't know the",
    "start": "2015320",
    "end": "2021679"
  },
  {
    "text": "particulars of how AWS fires up uh these Lambda containers but I I believe that",
    "start": "2021679",
    "end": "2026960"
  },
  {
    "text": "they're they have to first transfer the code base somehow and then spin it up in a container uh and I think Downing the",
    "start": "2026960",
    "end": "2034200"
  },
  {
    "text": "file size uh helps both of those",
    "start": "2034200",
    "end": "2038880"
  },
  {
    "text": "so uh real quick we just want to give you some practical practical advice about optimizing uh your lamda functions",
    "start": "2041559",
    "end": "2048839"
  },
  {
    "text": "in particular um the first best tip we have going for you guys is that your",
    "start": "2048839",
    "end": "2054158"
  },
  {
    "text": "Lambda function should be a thin wrapper around your own separate modules to keep your code reusable testable and AWS",
    "start": "2054159",
    "end": "2061079"
  },
  {
    "text": "independent whenever you make a AWS module with jaws uh it's going to do this it's going to give you an an index",
    "start": "2061079",
    "end": "2067800"
  },
  {
    "text": "sorry a handler. JS file that just is the file that Lambda will call but it's going to keep all your code outside of",
    "start": "2067800",
    "end": "2074240"
  },
  {
    "text": "that in an index.js file what we're trying to do here is recreate traditional sort of uh application",
    "start": "2074240",
    "end": "2079760"
  },
  {
    "text": "framework structure um a second tip here is keep your deployed code footprint small as possible uh Jaws does that for",
    "start": "2079760",
    "end": "2087158"
  },
  {
    "text": "you as well uh keep module requires outside of your Lambda function Handler um and then the last and most important",
    "start": "2087159",
    "end": "2094079"
  },
  {
    "text": "uh Lambda optimization trick if you don't know know this already this is where we see the best performance and uh",
    "start": "2094079",
    "end": "2099200"
  },
  {
    "text": "improvements is just increasing your lambda's memory size uh especially if you have a lot of infrequent uh visits",
    "start": "2099200",
    "end": "2105040"
  },
  {
    "text": "or traffic to your application um increase your Lambda function memory size because when you increase the",
    "start": "2105040",
    "end": "2110160"
  },
  {
    "text": "memory you're getting more CPU uh and then dial it down uh when you have more traffic because those lambdas are",
    "start": "2110160",
    "end": "2116079"
  },
  {
    "text": "already going to be warm hopefully and you won't have to deal with that startup cost so we touched lightly on Jaws uh",
    "start": "2116079",
    "end": "2123599"
  },
  {
    "text": "you know we didn't get a chance to go into replicating your stuff across a region it's just another command or creating a new stage also just",
    "start": "2123599",
    "end": "2129920"
  },
  {
    "text": "another command but this is the Grand Vision here you instantly create a Jaws project select from tons of pre-written",
    "start": "2129920",
    "end": "2136040"
  },
  {
    "text": "AWS modules to rapidly build your application we just installed one that already did image resizing stuff uh",
    "start": "2136040",
    "end": "2142119"
  },
  {
    "text": "deploy all your functions at once or one function at a time with for easy updates and maintenance I mean the main of my",
    "start": "2142119",
    "end": "2148400"
  },
  {
    "text": "existence as a developer is just a big interconnected code base if I touch one thing over here it's going to affect this thing all the way over here or",
    "start": "2148400",
    "end": "2154640"
  },
  {
    "text": "several things uh but we have complete endpoint isolation here here with Lambda and serverless uh architectures uh",
    "start": "2154640",
    "end": "2161079"
  },
  {
    "text": "deploy to all regions why not uh it's cheaper than ever before again whenever you know that stuff is going to get",
    "start": "2161079",
    "end": "2166560"
  },
  {
    "text": "called you're only going to get charged at that point um and maybe AWS will build some type of latency based routing",
    "start": "2166560",
    "end": "2173400"
  },
  {
    "text": "uh for API Gateway and then one more thing I think we forgot to touch on is another Grand Vision is to have multiple",
    "start": "2173400",
    "end": "2180280"
  },
  {
    "text": "run times within the project so any runtime that Lambda supports you'll be able to mix and match the runtime that",
    "start": "2180280",
    "end": "2185800"
  },
  {
    "text": "best suits that solving that problem problem so if you want to mix Java with node today you can do",
    "start": "2185800",
    "end": "2192119"
  },
  {
    "text": "that and the goal is perfect cus applications cheap as possible monstrously scalable so that's the",
    "start": "2192119",
    "end": "2199040"
  },
  {
    "text": "future we're we're racing towards uh real quick I just want to give a shout out to the open source contributors uh I",
    "start": "2199040",
    "end": "2204079"
  },
  {
    "text": "don't know if we would have made it this far without them um all these guys are Trailblazers and super great people if",
    "start": "2204079",
    "end": "2209160"
  },
  {
    "text": "you can ever if you can't get a hold of Ryan or I you know hit these guys up these are their their GitHub usernames",
    "start": "2209160",
    "end": "2214599"
  },
  {
    "text": "uh and also I was shocked putting this open source project out there I didn't expect to really hear anything from Amazon wasn't sure but we've had a ton",
    "start": "2214599",
    "end": "2221839"
  },
  {
    "text": "of AWS Engineers uh come forward and talk to us about best practices and how to do this best so that it's aligned",
    "start": "2221839",
    "end": "2227960"
  },
  {
    "text": "with uh with Amazon and we forgot Stefano on here he's the API Gateway guy so he's he's helped us out as well yeah",
    "start": "2227960",
    "end": "2234079"
  },
  {
    "text": "that's right uh actually Stefano uh is on the API Gateway team um but real quick Amazon gave me",
    "start": "2234079",
    "end": "2241720"
  },
  {
    "text": "this this special edition hoodie for the Jaws project and I made",
    "start": "2241720",
    "end": "2247240"
  },
  {
    "text": "this Jaws video last week which they really liked and uh it's pretty it's",
    "start": "2247240",
    "end": "2252319"
  },
  {
    "text": "pretty slick here I think and uh I showed it to Stefano on the API Gateway team um just yesterday and he laughed at",
    "start": "2252319",
    "end": "2259640"
  },
  {
    "text": "me and he said I'll pay you a hundred bucks if you wear that during your breakout",
    "start": "2259640",
    "end": "2265480"
  },
  {
    "text": "session I was expecting this to say NASA yeah Stefano you just didn't specify how",
    "start": "2273240",
    "end": "2279520"
  },
  {
    "text": "long I had to wear it for so if you run into Stefano on the API Gateway team you",
    "start": "2279520",
    "end": "2285359"
  },
  {
    "text": "know just ask him to buy you a beer and put it on Austin's",
    "start": "2285359",
    "end": "2290119"
  },
  {
    "text": "credit so jaw's framework uh just redirects you to the GitHub uh repo for now um if you have any questions we'll",
    "start": "2296200",
    "end": "2302880"
  },
  {
    "text": "hang around for as long as it takes to answer all of them here's our contact information uh again just a free open",
    "start": "2302880",
    "end": "2308319"
  },
  {
    "text": "source project and um our goal is just to build the best serverless application framework out there so hopefully you",
    "start": "2308319",
    "end": "2314680"
  },
  {
    "text": "guys will dig into it thank you thank you thank you",
    "start": "2314680",
    "end": "2320000"
  }
]