[
  {
    "text": "- Hi, I'm Andrea from AWS.",
    "start": "570",
    "end": "2313"
  },
  {
    "text": "Here are some innovative ways",
    "start": "3300",
    "end": "4845"
  },
  {
    "text": "AWS customers are using\ncompute in the cloud.",
    "start": "4846",
    "end": "8280"
  },
  {
    "text": "Let's start with Insider,",
    "start": "8280",
    "end": "9900"
  },
  {
    "text": "which is ingesting billions\nof data points daily",
    "start": "9900",
    "end": "12780"
  },
  {
    "text": "to power their real-time products.",
    "start": "12780",
    "end": "14913"
  },
  {
    "text": "- Once we write the data,\nwe read it back into EKS",
    "start": "15859",
    "end": "19380"
  },
  {
    "text": "to our consumers, and we\nprovision more consumers",
    "start": "19380",
    "end": "22650"
  },
  {
    "text": "depending on how much data we\nhave in the queue, as I said.",
    "start": "22650",
    "end": "25860"
  },
  {
    "text": "And once we read that data,\nthat piece of traffic actually,",
    "start": "25860",
    "end": "29790"
  },
  {
    "text": "we write, we write it three ways",
    "start": "29790",
    "end": "32050"
  },
  {
    "text": "to, we write it to DynamoDB,\nour OLAP DB solution,",
    "start": "33240",
    "end": "38220"
  },
  {
    "text": "which is ClickHouse,",
    "start": "38220",
    "end": "39450"
  },
  {
    "text": "and then we write it to an S3 bucket.",
    "start": "39450",
    "end": "41340"
  },
  {
    "text": "- Okay.",
    "start": "41340",
    "end": "42173"
  },
  {
    "text": "Why the segregation of\ndata between DynamoDB",
    "start": "42173",
    "end": "44233"
  },
  {
    "text": "and ClickHouse and S3?",
    "start": "44233",
    "end": "45363"
  },
  {
    "text": "- Well, we use S3 to\ntroubleshoot our problems.",
    "start": "46950",
    "end": "50490"
  },
  {
    "text": "- Okay.",
    "start": "50490",
    "end": "52080"
  },
  {
    "text": "- What we do is we write\nevery piece of traffic to S3",
    "start": "52080",
    "end": "55320"
  },
  {
    "text": "along with a lot of metadata.",
    "start": "55320",
    "end": "57239"
  },
  {
    "text": "So in case there's like a bad integration",
    "start": "57240",
    "end": "60960"
  },
  {
    "text": "or unwanted data situations,\nwe just plug Athena in to S3",
    "start": "60960",
    "end": "65960"
  },
  {
    "text": "to find the root cause\nof that unwanted data,",
    "start": "67890",
    "end": "71850"
  },
  {
    "text": "we can easily identify it via the metadata",
    "start": "71850",
    "end": "74340"
  },
  {
    "text": "that we write alongside the traffic.",
    "start": "74340",
    "end": "75879"
  },
  {
    "text": "- Okay.",
    "start": "75879",
    "end": "76712"
  },
  {
    "text": "- So like we can do quick troubleshooting",
    "start": "76712",
    "end": "79350"
  },
  {
    "text": "regarding the ingestion of data.",
    "start": "79350",
    "end": "81390"
  },
  {
    "text": "And another use case we have",
    "start": "81390",
    "end": "82710"
  },
  {
    "text": "is if something goes wrong\nwith our data sources,",
    "start": "82710",
    "end": "85950"
  },
  {
    "text": "we can just replay the entire traffic",
    "start": "85950",
    "end": "90570"
  },
  {
    "text": "between a specified\namount of time from Athena",
    "start": "90570",
    "end": "95570"
  },
  {
    "text": "and we just read the traffic\nback and write it to queue",
    "start": "95610",
    "end": "98040"
  },
  {
    "text": "and then the process\nstarts all over again.",
    "start": "98040",
    "end": "100230"
  },
  {
    "text": "- That's great, it's a\nreally powerful use case",
    "start": "100230",
    "end": "101610"
  },
  {
    "text": "with Athena as well.",
    "start": "101610",
    "end": "102663"
  },
  {
    "text": "- Airbnb is focused on tenants,\nbut in this compute case,",
    "start": "103530",
    "end": "107970"
  },
  {
    "text": "we are looking at how they are securing",
    "start": "107970",
    "end": "109800"
  },
  {
    "text": "multi-tenant Kubernetes clusters at scale.",
    "start": "109800",
    "end": "112743"
  },
  {
    "text": "- So what are some of\nthe business challenges",
    "start": "113910",
    "end": "115835"
  },
  {
    "text": "that you are trying to solve\nwith your architecture?",
    "start": "115835",
    "end": "118470"
  },
  {
    "text": "- Yeah, so at Airbnb,",
    "start": "118470",
    "end": "120750"
  },
  {
    "text": "we run our own multi-tenant\nKubernetes clusters on EC2.",
    "start": "120750",
    "end": "125188"
  },
  {
    "text": "You know, we want our own clusters",
    "start": "125188",
    "end": "126990"
  },
  {
    "text": "because we sometimes\nneed to back port fixes",
    "start": "126990",
    "end": "129750"
  },
  {
    "text": "or add new features into our Kubernetes.",
    "start": "129750",
    "end": "134100"
  },
  {
    "text": "And the main challenge that\nwe ran into in the past",
    "start": "134100",
    "end": "136680"
  },
  {
    "text": "was we have, you know, many different pods",
    "start": "136680",
    "end": "140250"
  },
  {
    "text": "that run on a, you know, single host",
    "start": "140250",
    "end": "144270"
  },
  {
    "text": "and we want to give fine\ngrain access controls",
    "start": "144270",
    "end": "146760"
  },
  {
    "text": "or fine grain IAM roles to these pods.",
    "start": "146760",
    "end": "149163"
  },
  {
    "text": "And so the way we do\nthat now is, you know,",
    "start": "151380",
    "end": "154110"
  },
  {
    "text": "we have our control plane\nthat manages all of our pods",
    "start": "154110",
    "end": "157050"
  },
  {
    "text": "in our cluster.",
    "start": "157050",
    "end": "158400"
  },
  {
    "text": "What the control plane does is it injects",
    "start": "158400",
    "end": "160806"
  },
  {
    "text": "service account tokens into the pod.",
    "start": "160807",
    "end": "163443"
  },
  {
    "text": "- And that control plane\nis one of the EC2s?",
    "start": "166050",
    "end": "168240"
  },
  {
    "text": "- Yes, that's correct.",
    "start": "168240",
    "end": "169140"
  },
  {
    "text": "The control plane runs on a\nphysically separate EC2 host",
    "start": "169140",
    "end": "172500"
  },
  {
    "text": "than all of our worker nodes.\n- Okay.",
    "start": "172500",
    "end": "174873"
  },
  {
    "text": "- So the control plane injects tokens,",
    "start": "176490",
    "end": "179310"
  },
  {
    "text": "these tokens are cryptographically signed,",
    "start": "179310",
    "end": "182459"
  },
  {
    "text": "but they contain basically an identity,",
    "start": "182460",
    "end": "185220"
  },
  {
    "text": "they act like an ID card for these pods.",
    "start": "185220",
    "end": "187860"
  },
  {
    "text": "And some things that\na token will have are,",
    "start": "187860",
    "end": "190950"
  },
  {
    "text": "what namespace the pod belongs to,",
    "start": "190950",
    "end": "193150"
  },
  {
    "text": "and also the name of the pod.",
    "start": "196530",
    "end": "199323"
  },
  {
    "text": "The pod can then take this token",
    "start": "200940",
    "end": "203160"
  },
  {
    "text": "and send it directly to STS.",
    "start": "203160",
    "end": "205387"
  },
  {
    "text": "- Okay.\n- You know, for verification.",
    "start": "207661",
    "end": "210780"
  },
  {
    "text": "Since again, since I mentioned before,",
    "start": "210781",
    "end": "212520"
  },
  {
    "text": "these pods are cryptographically signed,",
    "start": "212520",
    "end": "214290"
  },
  {
    "text": "STS can verify that the token is valid",
    "start": "214290",
    "end": "217980"
  },
  {
    "text": "and hasn't been tampered with.",
    "start": "217980",
    "end": "219480"
  },
  {
    "text": "If that all checks out, STS\ncan then check the IAM role",
    "start": "220350",
    "end": "225040"
  },
  {
    "text": "and verify that the namespace\nand the name of the pod",
    "start": "227340",
    "end": "232230"
  },
  {
    "text": "is able to assume the IAM\nrole that it's requesting.",
    "start": "232230",
    "end": "237230"
  },
  {
    "text": "And if all that checks out, you know,",
    "start": "237900",
    "end": "239340"
  },
  {
    "text": "STS will get temporary\ncredentials for that IAM role",
    "start": "239340",
    "end": "242849"
  },
  {
    "text": "and send those credentials\nback to the pods.",
    "start": "242850",
    "end": "245050"
  },
  {
    "text": "- So from a multi-tenant perspective,",
    "start": "246420",
    "end": "248130"
  },
  {
    "text": "how do you secure those pods\nin a more clustered manner,",
    "start": "248130",
    "end": "252270"
  },
  {
    "text": "into your Kubernetes cluster?",
    "start": "252270",
    "end": "254130"
  },
  {
    "text": "- Yeah, it's a good question.",
    "start": "254130",
    "end": "254963"
  },
  {
    "text": "So, you know, each pod\nhas its own identity,",
    "start": "254963",
    "end": "258543"
  },
  {
    "text": "you know, that's provided\nby our control plane.",
    "start": "259590",
    "end": "262290"
  },
  {
    "text": "And, you know, in the IAM\nrole definition itself,",
    "start": "262290",
    "end": "267290"
  },
  {
    "text": "you know, service owners\nis able to say like,",
    "start": "267740",
    "end": "270030"
  },
  {
    "text": "you know, IAM role Foo, for\nexample, should only be allowed",
    "start": "270030",
    "end": "275030"
  },
  {
    "text": "to be assumed by pods\nin the Foo namespace.",
    "start": "275160",
    "end": "278373"
  },
  {
    "text": "So, you know, given that that\nconnection with each other,",
    "start": "281070",
    "end": "285420"
  },
  {
    "text": "we can guarantee that other pods",
    "start": "285420",
    "end": "287640"
  },
  {
    "text": "and different name spaces cannot assume,",
    "start": "287640",
    "end": "289740"
  },
  {
    "text": "you know, Foo's IAM role.",
    "start": "289740",
    "end": "291720"
  },
  {
    "text": "- Our last segment will show",
    "start": "291720",
    "end": "293070"
  },
  {
    "text": "how 3M is building an\nHPC modeling platform",
    "start": "293070",
    "end": "297090"
  },
  {
    "text": "to simplify AWS usage for\nscientists and engineers.",
    "start": "297090",
    "end": "301889"
  },
  {
    "text": "- Say this user is requesting a material,",
    "start": "301890",
    "end": "304333"
  },
  {
    "text": "they want to see the\nproperties of a given material",
    "start": "304333",
    "end": "307200"
  },
  {
    "text": "within the system.",
    "start": "307200",
    "end": "308548"
  },
  {
    "text": "The very first thing that happens",
    "start": "308548",
    "end": "310320"
  },
  {
    "text": "after that request comes through",
    "start": "310320",
    "end": "312030"
  },
  {
    "text": "is that we actually go over\nand we hit our DynamoDB here",
    "start": "312030",
    "end": "316200"
  },
  {
    "text": "that's dedicated to determining",
    "start": "316200",
    "end": "318480"
  },
  {
    "text": "whether or not they have that access.",
    "start": "318480",
    "end": "321000"
  },
  {
    "text": "So within this table we have UUIDs",
    "start": "321000",
    "end": "325650"
  },
  {
    "text": "of each material within the system.",
    "start": "325650",
    "end": "328169"
  },
  {
    "text": "We have user IDs associated\nwith that material",
    "start": "328170",
    "end": "331950"
  },
  {
    "text": "and then their access level.",
    "start": "331950",
    "end": "333240"
  },
  {
    "text": "So a bitmask that tells us",
    "start": "333240",
    "end": "335220"
  },
  {
    "text": "what they're allowed to\naccomplish with that material.",
    "start": "335220",
    "end": "337795"
  },
  {
    "text": "- So really fine grained\naccess control there.",
    "start": "337795",
    "end": "341010"
  },
  {
    "text": "You mentioned UUIDs, what, why, what, why?",
    "start": "341010",
    "end": "345660"
  },
  {
    "text": "- Yeah.",
    "start": "345660",
    "end": "346493"
  },
  {
    "text": "So access control is\nreally important for us.",
    "start": "346493",
    "end": "349710"
  },
  {
    "text": "3M thrives on our intellectual property",
    "start": "349710",
    "end": "353460"
  },
  {
    "text": "and one of the things that's\nreally important to us",
    "start": "353460",
    "end": "356009"
  },
  {
    "text": "is keeping novel materials secret",
    "start": "356010",
    "end": "358740"
  },
  {
    "text": "until they're ready to be patented.",
    "start": "358740",
    "end": "360633"
  },
  {
    "text": "And so we need to operate\non a need-to-know basis.",
    "start": "360633",
    "end": "363960"
  },
  {
    "text": "At the same time, we want our scientists",
    "start": "363960",
    "end": "366180"
  },
  {
    "text": "to have as much information as possible",
    "start": "366180",
    "end": "368460"
  },
  {
    "text": "to allow them to do their jobs.",
    "start": "368460",
    "end": "370142"
  },
  {
    "text": "And so this system is\nallowing us to do that",
    "start": "370142",
    "end": "373600"
  },
  {
    "text": "in a kind of a fail fast\nway, very performant.",
    "start": "374640",
    "end": "377550"
  },
  {
    "text": "- Awesome.",
    "start": "377550",
    "end": "378383"
  },
  {
    "text": "So let's say, make it through\nthe traffic light here,",
    "start": "378383",
    "end": "381479"
  },
  {
    "text": "the traffic check, what happens next?",
    "start": "381480",
    "end": "383910"
  },
  {
    "text": "- Yeah, so we travel\nup to our remix Lambda",
    "start": "383910",
    "end": "388380"
  },
  {
    "text": "and this is a kind of a\nmonolithic node application",
    "start": "388380",
    "end": "392490"
  },
  {
    "text": "that handles rendering our user interface",
    "start": "392490",
    "end": "396660"
  },
  {
    "text": "and interacting with our data store.",
    "start": "396660",
    "end": "398700"
  },
  {
    "text": "So the database we have for this product",
    "start": "398700",
    "end": "401670"
  },
  {
    "text": "is a Aurora-managed postgres.",
    "start": "401670",
    "end": "403650"
  },
  {
    "text": "That's where all the material\ndata ultimately resides.",
    "start": "403650",
    "end": "407520"
  },
  {
    "text": "- Okay.",
    "start": "407520",
    "end": "408389"
  },
  {
    "text": "So that's the flow for your scientists,",
    "start": "408390",
    "end": "413160"
  },
  {
    "text": "but I see another Lambda here.",
    "start": "413160",
    "end": "415560"
  },
  {
    "text": "Why do we have two\nLambdas in this workflow?",
    "start": "415560",
    "end": "418440"
  },
  {
    "text": "- Yeah.",
    "start": "418440",
    "end": "419273"
  },
  {
    "text": "So scientists are not\ngonna be the only audience",
    "start": "419273",
    "end": "422430"
  },
  {
    "text": "within our company",
    "start": "422430",
    "end": "423330"
  },
  {
    "text": "who wanna know more about our materials",
    "start": "423330",
    "end": "425586"
  },
  {
    "text": "as they're being developed.",
    "start": "425587",
    "end": "427350"
  },
  {
    "text": "So we also have an audience\nof primarily business analysts",
    "start": "427350",
    "end": "431220"
  },
  {
    "text": "who might want programmatic\naccess to this information.",
    "start": "431220",
    "end": "434790"
  },
  {
    "text": "- We hope you enjoyed this look",
    "start": "434790",
    "end": "436410"
  },
  {
    "text": "into some of the ways our\ncustomers are using compute",
    "start": "436410",
    "end": "439260"
  },
  {
    "text": "with AWS cloud solutions.",
    "start": "439260",
    "end": "441690"
  },
  {
    "text": "Find out more by watching\nthe full episodes",
    "start": "441690",
    "end": "444090"
  },
  {
    "text": "from the links in the description.",
    "start": "444090",
    "end": "446010"
  },
  {
    "text": "And keep watching \"This\nis My Architecture\".",
    "start": "446010",
    "end": "448767"
  }
]