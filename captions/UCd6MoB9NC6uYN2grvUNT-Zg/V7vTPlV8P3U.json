[
  {
    "text": "hello thank you for coming today my name is Nate I'm a software",
    "start": "2240",
    "end": "7279"
  },
  {
    "text": "development manager on the Amazon web services cloudfront and raw 53",
    "start": "7279",
    "end": "13639"
  },
  {
    "text": "team doses have been a fact of life or doses are a fact of life for many",
    "start": "14120",
    "end": "20240"
  },
  {
    "text": "service owners and in fact doses have been a fact of life for service owners",
    "start": "20240",
    "end": "25359"
  },
  {
    "text": "for more than a decade even before AWS was born as a Services Company Amazon has been",
    "start": "25359",
    "end": "32520"
  },
  {
    "text": "defending against dos attacks for many years and that experience has led us to",
    "start": "32520",
    "end": "38320"
  },
  {
    "text": "develop anti-dos capabilities and has influenced our service designs over that",
    "start": "38320",
    "end": "44200"
  },
  {
    "text": "time Amazon web services views dos as an availability issue and as such it's a",
    "start": "44200",
    "end": "49879"
  },
  {
    "text": "top priority for all of our engineering teams the goal of this presentation is",
    "start": "49879",
    "end": "56559"
  },
  {
    "text": "to provide you with information about what AWS does to help protect you from do DOS and for those areas where you'll",
    "start": "56559",
    "end": "64040"
  },
  {
    "text": "make architectural decisions to protect yourself we provide best practice this is a 300 level class and",
    "start": "64040",
    "end": "71200"
  },
  {
    "text": "uh I I skip over some of the technical background information in this slide particularly in areas of networking and",
    "start": "71200",
    "end": "77240"
  },
  {
    "text": "DNS and HTTP the concepts should be pretty clear without the background information but if you have any more",
    "start": "77240",
    "end": "83439"
  },
  {
    "text": "questions about the technical details I'd be happy to talk to you about them uh my personal goal for this whole",
    "start": "83439",
    "end": "89479"
  },
  {
    "text": "conference and for this presentation is to use this as a way to make a connection with customers and hear",
    "start": "89479",
    "end": "95240"
  },
  {
    "text": "feedback from you so uh please do come by AWS Central uh I won't have time to",
    "start": "95240",
    "end": "102520"
  },
  {
    "text": "probably much time to take questions after this presentation I may be able to take a few off stage uh but I will be",
    "start": "102520",
    "end": "108600"
  },
  {
    "text": "working at AWS Central tomorrow morning and if I'm not at the booth then there will be somebody at the storage and CDN",
    "start": "108600",
    "end": "116000"
  },
  {
    "text": "section of AWS Central that should be able to answer your questions about front rout",
    "start": "116000",
    "end": "122520"
  },
  {
    "text": "53 DS attacks are on the rise and I expect more than a few of you in the audience have had to defend your",
    "start": "125920",
    "end": "132480"
  },
  {
    "text": "services from dos attack this D this this presentation's",
    "start": "132480",
    "end": "137560"
  },
  {
    "text": "purpose is not to scare you but I do think it's important to look at some data regarding what attacks look like",
    "start": "137560",
    "end": "144000"
  },
  {
    "text": "today understanding the size and the shape of attack can help you as service owners understand what you need to do to",
    "start": "144000",
    "end": "150319"
  },
  {
    "text": "uh defend against them and I'll start by saying that big dos attacks on the order",
    "start": "150319",
    "end": "156000"
  },
  {
    "text": "of 300 gbits are out there and they do occur but they're rare uh they represent",
    "start": "156000",
    "end": "161920"
  },
  {
    "text": "less than tenth of a percent of the attacks that we've seen in the last year and they also tend to impact a specific",
    "start": "161920",
    "end": "168959"
  },
  {
    "text": "subset of services uh services that may um raise the ey of political activists",
    "start": "168959",
    "end": "177319"
  },
  {
    "text": "or may be the target of extortion and our observations are that that tends to",
    "start": "177319",
    "end": "182360"
  },
  {
    "text": "be a smaller percentage of service owners and in fact if we look at the data of the past four months we see that",
    "start": "182360",
    "end": "189959"
  },
  {
    "text": "the attack sizes average out to around 14 gabit and based on some customer",
    "start": "189959",
    "end": "195440"
  },
  {
    "text": "survey data we've taken we know that 70% of our customers have experienced ad dos",
    "start": "195440",
    "end": "201319"
  },
  {
    "text": "in the past but most of those customers experience them pretty infrequently on the order of maybe once a year",
    "start": "201319",
    "end": "209680"
  },
  {
    "text": "taking a closer look at the data we see that 70% of attacks in the last four months are actually smaller than 14",
    "start": "211519",
    "end": "218360"
  },
  {
    "text": "gbits in size and last less than 23 minutes and uh this data is taken from a",
    "start": "218360",
    "end": "225439"
  },
  {
    "text": "number of networks across the internet but it lines up pretty well with some of our own",
    "start": "225439",
    "end": "230920"
  },
  {
    "text": "observations so the takeaway here is that if you're in the majority of service owners there's quite a lot you",
    "start": "230920",
    "end": "236239"
  },
  {
    "text": "can do to make your services resilient to the average siiz dos attack and this should give you a pretty good",
    "start": "236239",
    "end": "241760"
  },
  {
    "text": "idea of the size and shape of doses today but how do they",
    "start": "241760",
    "end": "247599"
  },
  {
    "text": "work the goal of the Dos attacker is to exhaust resources required to operate",
    "start": "247599",
    "end": "253159"
  },
  {
    "text": "your service and required to serve your viewers the Dos attacker is seeking out",
    "start": "253159",
    "end": "258519"
  },
  {
    "text": "resource consumption imbalances between their malicious requests and the services response specifically the",
    "start": "258519",
    "end": "265560"
  },
  {
    "text": "attacker wants to craft cheap malicious requests that require lots of expensive resour resources on the service side and",
    "start": "265560",
    "end": "272000"
  },
  {
    "text": "as a service owner your job is to find a way to absorb the attack limit the blast",
    "start": "272000",
    "end": "277080"
  },
  {
    "text": "radius of any potential failures and limit and bound the cost of processing",
    "start": "277080",
    "end": "282360"
  },
  {
    "text": "requests starting with the application layer a smart attacker can overwhelm a vulnerable service if they can exploit a",
    "start": "282360",
    "end": "290400"
  },
  {
    "text": "resource intensive operation for example a computationally expensive surge query that perhaps",
    "start": "290400",
    "end": "296800"
  },
  {
    "text": "causes multiple Full Table scans on back-end databases uh could be used and it wouldn't take",
    "start": "296800",
    "end": "303880"
  },
  {
    "text": "too many requests stacked up to exhaust a lot of your service resources and start denying access to your",
    "start": "303880",
    "end": "310919"
  },
  {
    "text": "customers and even if that application layer is welld designed host layers and Os Network Stacks are susceptible to",
    "start": "310919",
    "end": "317199"
  },
  {
    "text": "Resource consumption too a common flavor of attack is connection consumption often through sin",
    "start": "317199",
    "end": "324160"
  },
  {
    "text": "floods it's even possible for enough attacking host to overwhelm a service's data center network connectivity imagine",
    "start": "326319",
    "end": "333319"
  },
  {
    "text": "a service owner who's provisioned a gigabit of internet connectivity in a traditional data center for their",
    "start": "333319",
    "end": "338639"
  },
  {
    "text": "service and in a world where home computers are starting to get one gigabit of Uplink it doesn't take that",
    "start": "338639",
    "end": "344360"
  },
  {
    "text": "many compromised hosts to overwhelm that network",
    "start": "344360",
    "end": "349159"
  },
  {
    "text": "connection and while it's a rare occurrence uh it's even possible for",
    "start": "350759",
    "end": "356199"
  },
  {
    "text": "large enough attacks to impact intermediary paths on the internet uh",
    "start": "356199",
    "end": "361680"
  },
  {
    "text": "you may have seen some recent press around this year around 300 gigabit sized attacks wreaking havoc on the",
    "start": "361680",
    "end": "368400"
  },
  {
    "text": "internet but I I'd like to put a little bit of different perspective on that and say that the internet is actually pretty",
    "start": "368400",
    "end": "374080"
  },
  {
    "text": "well built to take very large volumes of traffic to put that number in perspective last month one particularly",
    "start": "374080",
    "end": "381400"
  },
  {
    "text": "popular consumer device manufacturer released an update to its operating",
    "start": "381400",
    "end": "387759"
  },
  {
    "text": "system the resulting traffic was more than 2 terabits over normal traffic",
    "start": "387759",
    "end": "393000"
  },
  {
    "text": "volumes that's six times larger than the largest known reported Doos attack so",
    "start": "393000",
    "end": "398800"
  },
  {
    "text": "the internet's usually pretty good about absorbing those large volumes of",
    "start": "398800",
    "end": "403919"
  },
  {
    "text": "traffic so dos is a threat to availability fortunately many service",
    "start": "404639",
    "end": "411360"
  },
  {
    "text": "designs that work for General resilience and service availability also work well in a Dos context",
    "start": "411360",
    "end": "419638"
  },
  {
    "text": "Amazon's years of experience defending against dos have led to the development of such resilient service designs and if",
    "start": "420520",
    "end": "427000"
  },
  {
    "text": "you're using AWS Services you're already benefiting from these resilient service",
    "start": "427000",
    "end": "432120"
  },
  {
    "text": "designs just by running on AWS you have access to resources that can improve your services",
    "start": "432120",
    "end": "439160"
  },
  {
    "text": "resilience often times surviving a Dos attack is about having enough scale to just absorb the",
    "start": "439879",
    "end": "447160"
  },
  {
    "text": "attack in an AWS world the traditional data center model",
    "start": "448520",
    "end": "454240"
  },
  {
    "text": "changes and provides your services with access to large scale internet",
    "start": "454240",
    "end": "460319"
  },
  {
    "text": "connectivity the ability to provision large fleets of servers in",
    "start": "460319",
    "end": "465960"
  },
  {
    "text": "minutes and access to Edge services like Route 53 and cloudfront that can host",
    "start": "465960",
    "end": "471400"
  },
  {
    "text": "your service across the globally scaled Fleet of service",
    "start": "471400",
    "end": "476440"
  },
  {
    "text": "servers all of this means that a ser running in AWS has the scale needed to Simply absorb many dos",
    "start": "477360",
    "end": "485720"
  },
  {
    "text": "attacks AWS regions and Ed Edge locations are built with diverse connectivity in mind in the form of",
    "start": "487639",
    "end": "493720"
  },
  {
    "text": "multiple Transit providers and peering links into the internet these links act as redundant backups to one another and",
    "start": "493720",
    "end": "500560"
  },
  {
    "text": "can also effectively coordin off and isolate bad traffic from other",
    "start": "500560",
    "end": "506560"
  },
  {
    "text": "traffic that diversity is further extended with more points of presence today Amazon offers you the ability to",
    "start": "506879",
    "end": "513000"
  },
  {
    "text": "deploy your services into nine different regions worldwide and it can extend and",
    "start": "513000",
    "end": "518599"
  },
  {
    "text": "add even more uh internet connection points as a as a result that diversity is even further",
    "start": "518599",
    "end": "524519"
  },
  {
    "text": "extended when we bring Edge locations into the mix and today we have 46 Edge",
    "start": "524519",
    "end": "530760"
  },
  {
    "text": "locations and uh these numbers are of course growing now for some of those in for those of you in the audience that",
    "start": "530920",
    "end": "537000"
  },
  {
    "text": "saw Andy's keynote yesterday and are getting mad at me for Rehab cashing the same old content I in my defense I",
    "start": "537000",
    "end": "542320"
  },
  {
    "text": "didn't know Andy was going to steal my slides but I promise you this this sets up some context for some really",
    "start": "542320",
    "end": "548360"
  },
  {
    "text": "interesting stuff that I'm actually super excited to share with you uh this is the the first time that we've talked",
    "start": "548360",
    "end": "555600"
  },
  {
    "text": "about u a specific availability feature that we've built into Route 53 for the",
    "start": "555600",
    "end": "562480"
  },
  {
    "text": "purposes of increasing its service resiliency it takes advantage of all of these points of presence and network",
    "start": "562480",
    "end": "568480"
  },
  {
    "text": "diversity we call it anycast striping and uh if you're familiar with",
    "start": "568480",
    "end": "573800"
  },
  {
    "text": "raid dis striping uh the concept should be somewhat familiar so in for disk",
    "start": "573800",
    "end": "580440"
  },
  {
    "text": "striping the result is that data is striped across multiple Diss and if you have redundant discs you can add",
    "start": "580440",
    "end": "586680"
  },
  {
    "text": "additional resiliency well in the case of 53 zencast striping our goal is to",
    "start": "586680",
    "end": "591760"
  },
  {
    "text": "stripe uh client requests across multiple Edge locations to improve",
    "start": "591760",
    "end": "597600"
  },
  {
    "text": "availability we Leverage resolver behavior in order to do that this is an example of one of my",
    "start": "597600",
    "end": "605079"
  },
  {
    "text": "domains and here are my four assigned name",
    "start": "605079",
    "end": "610279"
  },
  {
    "text": "servers so when you create a r 53 hosted Zone you're issued four name servers the most common DNS resolvers on",
    "start": "610279",
    "end": "617279"
  },
  {
    "text": "the internet take advantage of the fact that that my domain has multiple name servers associated with it and those",
    "start": "617279",
    "end": "624640"
  },
  {
    "text": "resolvers will issue three simultaneous requests to uh",
    "start": "624640",
    "end": "630560"
  },
  {
    "text": "each three or four of these name servers only one of those requests have to succeed in order for the client to get",
    "start": "630560",
    "end": "637160"
  },
  {
    "text": "the information it needs to connect to the service each of my four name servers",
    "start": "637160",
    "end": "645279"
  },
  {
    "text": "come from one of our stripes we have.org co.uk doc",
    "start": "645279",
    "end": "652040"
  },
  {
    "text": "and.net um these Route 53 stripes are essentially a collection of virtual name",
    "start": "652040",
    "end": "657200"
  },
  {
    "text": "servers and we use them to manage how those stripes are served across our Edge",
    "start": "657200",
    "end": "664160"
  },
  {
    "text": "locations I'll show you what I mean so each of these stripes are hosted",
    "start": "664160",
    "end": "671720"
  },
  {
    "text": "by a unique subset of edge locations so the.org stripe may be served from C50",
    "start": "671720",
    "end": "678600"
  },
  {
    "text": "Frost 6 and nrt 54 where. co.uk may be served from lhr 3",
    "start": "678600",
    "end": "687839"
  },
  {
    "text": "gr one Sid one and so on so we're creating uh we're",
    "start": "687839",
    "end": "694680"
  },
  {
    "text": "intentionally Distributing our Stripes amongst a bunch of different Edge",
    "start": "694680",
    "end": "699839"
  },
  {
    "text": "locations I ran a trace route from my home in Seattle to each of my four name servers",
    "start": "700240",
    "end": "708760"
  },
  {
    "text": "and as you'll see as we look through these Trace routes what you'll notice is that uh each request takes a unique",
    "start": "708760",
    "end": "714279"
  },
  {
    "text": "network path and lands on a different Edge location so uh trace route to my.org",
    "start": "714279",
    "end": "722279"
  },
  {
    "text": "name server starts out in Seattle goes on to level three to San Jose Los",
    "start": "722279",
    "end": "728079"
  },
  {
    "text": "Angeles and is ultimately served from The lax3 Edge",
    "start": "728079",
    "end": "733320"
  },
  {
    "text": "location and our request to. co.uk starts out in Seattle goes to San",
    "start": "733760",
    "end": "740240"
  },
  {
    "text": "Jose and a serf from sf5 this next one is",
    "start": "740240",
    "end": "745720"
  },
  {
    "text": "interesting there we goom start out in Seattle goes to Denver Chicago New York",
    "start": "746160",
    "end": "753680"
  },
  {
    "text": "London and then Amsterdam and is ultimately served from The am50 Edge location you're probably looking at this",
    "start": "753680",
    "end": "760120"
  },
  {
    "text": "and going that seems crazy that's going to be super slow look it's 180 milliseconds well this particular path",
    "start": "760120",
    "end": "766839"
  },
  {
    "text": "would only be used as a last resort if the other requests failed for some reason along the way the DNS resolvers",
    "start": "766839",
    "end": "773399"
  },
  {
    "text": "are going to take the fastest response the first response that it gets is the one that it's going to go with and use",
    "start": "773399",
    "end": "778800"
  },
  {
    "text": "and as happens the net name server starts out in Seattle and goes out to",
    "start": "778800",
    "end": "784000"
  },
  {
    "text": "Quest and ends up getting served from C50 so this is the the lowest latency request of the bunch and in all",
    "start": "784000",
    "end": "789240"
  },
  {
    "text": "likelihood this is the one the my DNS resolver is going to",
    "start": "789240",
    "end": "794240"
  },
  {
    "text": "use so from my home in from my home in Seattle my DNS resolver will send requests to three of four of my name",
    "start": "795519",
    "end": "802440"
  },
  {
    "text": "servers and each request takes a different network path and lands on a different Edge location",
    "start": "802440",
    "end": "809560"
  },
  {
    "text": "and remember that my anycast server or sorry my Route 53 name servers are any",
    "start": "809560",
    "end": "814720"
  },
  {
    "text": "casted so the IP of each Edge each name server is announced from more than one",
    "start": "814720",
    "end": "820199"
  },
  {
    "text": "Edge location at the same time anycast is a uh Network routing",
    "start": "820199",
    "end": "827160"
  },
  {
    "text": "methodology that's used by Route 53 and cloudfront and it improves service resiliency I'm not going to go into all",
    "start": "827160",
    "end": "833279"
  },
  {
    "text": "the technical details uh here but I'm happy to go after go over it in more detail after the presentation or at the",
    "start": "833279",
    "end": "840120"
  },
  {
    "text": "AWS Central Booth but the the effect is the important thing to take note of and the effect of any cast routing is that",
    "start": "840120",
    "end": "847399"
  },
  {
    "text": "requesters from different Source networks will take a different network path and land on a different set of edge",
    "start": "847399",
    "end": "854279"
  },
  {
    "text": "locations so I've run a full set of Trace routes from two more viewer networks and as I overlay them you'll",
    "start": "854279",
    "end": "859519"
  },
  {
    "text": "see how different the network paths are so running a trace route from a viewer",
    "start": "859519",
    "end": "864880"
  },
  {
    "text": "Network in Italy reveals that requests land in La Frankfurt London and",
    "start": "864880",
    "end": "873079"
  },
  {
    "text": "Narita and Trace routes from a viewer Network in Japan reveal that requests land in Narita Osaka Hong Kong and",
    "start": "877079",
    "end": "887120"
  },
  {
    "text": "Mumbai so now when an edge location or a network path is blocked for any reason",
    "start": "888880",
    "end": "896040"
  },
  {
    "text": "other network paths remain available to the client and because uh any cast the IPS mean",
    "start": "896040",
    "end": "903759"
  },
  {
    "text": "that different sources will land in different set of edge locations there are a lot of clients that will see no",
    "start": "903759",
    "end": "909079"
  },
  {
    "text": "impact whatsoever none of the path will have the the same level of impact they'll use an altogether different set",
    "start": "909079",
    "end": "914920"
  },
  {
    "text": "of edge locations I'll also point out at this time that the use of edge locations in",
    "start": "914920",
    "end": "922040"
  },
  {
    "text": "this way when when cloudfront and Route 53 are placed in front of your service layer then a lot of lower level attacks",
    "start": "922040",
    "end": "929120"
  },
  {
    "text": "like um stuff happening at layer three and four and Below will go to the edge",
    "start": "929120",
    "end": "935519"
  },
  {
    "text": "servers themselves and they won't propagate back through to your um your API or your service they stop right",
    "start": "935519",
    "end": "942279"
  },
  {
    "text": "there at the edge so Route 53 anycast striping is",
    "start": "942279",
    "end": "949199"
  },
  {
    "text": "just one example of a service resilience feature that are built into our services and I think it's a a really good",
    "start": "949199",
    "end": "955440"
  },
  {
    "text": "demonstration of how that Network diversity and the multiple points of Pres can be maximized to deliver build a",
    "start": "955440",
    "end": "964920"
  },
  {
    "text": "service and before I move on to discussing uh resilient service designs I want to",
    "start": "968600",
    "end": "976160"
  },
  {
    "text": "make the recommendation that you take advantage of the scale and diversity made available through the use of these Edge locations so I'll refine my",
    "start": "976160",
    "end": "983000"
  },
  {
    "text": "guidance to be a bit more prescriptive and I'll say use Route 53 and cloudfront to take advantage of aws's scale and",
    "start": "983000",
    "end": "991639"
  },
  {
    "text": "diversity I've looked across the number of Amazon services in search of a practical best practices you can",
    "start": "993920",
    "end": "999399"
  },
  {
    "text": "Implement in your own Services I've selected five designs that can help you maintain availability in the event of",
    "start": "999399",
    "end": "1006000"
  },
  {
    "text": "Dos or Flash crowds uh some of these designs are already part of your system in all",
    "start": "1006000",
    "end": "1011959"
  },
  {
    "text": "likelihood and I'll illustrate how those designs help in the event of a DOS",
    "start": "1011959",
    "end": "1020279"
  },
  {
    "text": "N plus1 is a design pattern you're probably familiar with and are probably already using in your service it's",
    "start": "1023360",
    "end": "1029760"
  },
  {
    "text": "really just about scaling up with enough additional capacity to tolerate some",
    "start": "1029760",
    "end": "1034880"
  },
  {
    "text": "failures I like to think of uh n plus one as like bulkheads within a a ship if",
    "start": "1034880",
    "end": "1041079"
  },
  {
    "text": "the hole of a ship is pierced and water starts flooding in bulkheads can be closed off to contain that failure and",
    "start": "1041079",
    "end": "1047000"
  },
  {
    "text": "maintain buoyancy and keep that ship float and if you'll bear with me I'll extend the metaphor just a bit more and",
    "start": "1047000",
    "end": "1054400"
  },
  {
    "text": "say that if there was just one bulkhead then half of the ship would be flooded in the event of a whole breach wouldn't",
    "start": "1054400",
    "end": "1061240"
  },
  {
    "text": "it be better to have more bulkheads 10 100 a thousand so that if a failure occurs it can be isolated at very small",
    "start": "1061240",
    "end": "1069120"
  },
  {
    "text": "and have a very limited impact I think the same approach May apply to your services so when you look at your nplus1",
    "start": "1069120",
    "end": "1075960"
  },
  {
    "text": "scaleout system you may be better off with a higher number of smaller instance types like maybe a bunch of T1 micros",
    "start": "1075960",
    "end": "1083600"
  },
  {
    "text": "instead of a medium or large ec2 instance so doing so means that these failure units are much smaller and tend",
    "start": "1083600",
    "end": "1090960"
  },
  {
    "text": "to be easier to manage and recover from oftentimes n plus1 architectures",
    "start": "1090960",
    "end": "1098400"
  },
  {
    "text": "have a failover capability an automated failover capability and a health checking system built into",
    "start": "1098400",
    "end": "1104280"
  },
  {
    "text": "them I'm calling out a dns-based health check mechanism into particular uh",
    "start": "1104280",
    "end": "1110120"
  },
  {
    "text": "because I think it's it's interesting in a Dos context because it's not uncommon for",
    "start": "1110120",
    "end": "1117039"
  },
  {
    "text": "dos attackers to make a request to your DNS layer ahead in advance of attack",
    "start": "1117039",
    "end": "1122440"
  },
  {
    "text": "gather up a list of ips oftentimes a subset of of your total IP set and then",
    "start": "1122440",
    "end": "1128360"
  },
  {
    "text": "launch an attack directed at just those IPS without ever re resolving or",
    "start": "1128360",
    "end": "1134600"
  },
  {
    "text": "adapting when those scenarios or those types of attacks occur if the attacker",
    "start": "1134640",
    "end": "1140559"
  },
  {
    "text": "is successful in in causing an endpoint to fail the health checks would notice",
    "start": "1140559",
    "end": "1147240"
  },
  {
    "text": "and respond in kind and since clients are behaving as they're supposed to when they're re- resolving DNS they' get",
    "start": "1147240",
    "end": "1154039"
  },
  {
    "text": "redirected to a set of hosts that are still up and available so while attackers don't",
    "start": "1154039",
    "end": "1160400"
  },
  {
    "text": "universally follow this pattern this is a just a good illustration of an existing service design that happens to",
    "start": "1160400",
    "end": "1166960"
  },
  {
    "text": "work effectively in the midst of a DS as well you can configure",
    "start": "1166960",
    "end": "1173200"
  },
  {
    "text": "failover or uh this n plus1 with health checked record sets if you're using Route 53 today this is a screenshot from",
    "start": "1173200",
    "end": "1179960"
  },
  {
    "text": "the Route 53 console these are the record set properties and down at the bottom of the properties there's just a",
    "start": "1179960",
    "end": "1185880"
  },
  {
    "text": "couple configuration values that you can use to enable Health checking and Associate a record set with a particular",
    "start": "1185880",
    "end": "1192440"
  },
  {
    "text": "health check the health check starts failing this this answer would be removed from the set of records that are",
    "start": "1192440",
    "end": "1199000"
  },
  {
    "text": "return to customers smart client rryy logic can",
    "start": "1199000",
    "end": "1206039"
  },
  {
    "text": "also go a way to improve service resilience and as service owners your job is to provide those clients with the",
    "start": "1206039",
    "end": "1212919"
  },
  {
    "text": "tools they need to help themselves if you're not returning multiple IPS in your DNS responses you",
    "start": "1212919",
    "end": "1219960"
  },
  {
    "text": "should more IPS means increased opportunity for a retry to land on a healthy",
    "start": "1219960",
    "end": "1225919"
  },
  {
    "text": "endpoint and if you're building your own clients make sure you're randomizing your use of those IPS whenever you're",
    "start": "1225919",
    "end": "1232159"
  },
  {
    "text": "making a retry to take advantage of network and host diversity if your client as a web browser you're already",
    "start": "1232159",
    "end": "1238360"
  },
  {
    "text": "all set you'll find that many AWS Services leverage this pattern here's an example",
    "start": "1238360",
    "end": "1244400"
  },
  {
    "text": "of cloudfront and note that we're returning eight IPS to the",
    "start": "1244400",
    "end": "1250158"
  },
  {
    "text": "client I simulated a service failure uh by blocking off access to a set of Cl cloudfront IPS from my uh personal host",
    "start": "1252960",
    "end": "1261360"
  },
  {
    "text": "and I ran a packet capture to observe the retry behavior of a number of popular browsers this is a sample of",
    "start": "1261360",
    "end": "1270159"
  },
  {
    "text": "retries from Safari running on Mac OSX and actually Safari was really good at",
    "start": "1270159",
    "end": "1276400"
  },
  {
    "text": "at retrying pretty aggressively um it's retrying in less than one second and",
    "start": "1276400",
    "end": "1282880"
  },
  {
    "text": "it's doing a really good job of rotating through all of cloudfronts ips it's really trying to hard to find an IP",
    "start": "1282880",
    "end": "1288000"
  },
  {
    "text": "address that that works so this is uh data from a very",
    "start": "1288000",
    "end": "1295520"
  },
  {
    "text": "unscientific study and not comprehensive but this should give you an idea of how",
    "start": "1295520",
    "end": "1301080"
  },
  {
    "text": "some common browsers are behaving today I only tested the things that I had quick and easy access to U starting with",
    "start": "1301080",
    "end": "1308120"
  },
  {
    "text": "some of the browsers I tested on Windows 7 I noted that the retry logic was",
    "start": "1308120",
    "end": "1313320"
  },
  {
    "text": "actually pretty rapid some the first retry happened in 3 seconds but uh these",
    "start": "1313320",
    "end": "1318600"
  },
  {
    "text": "browsers tended to retry the same IP three times before rotating onto the next one so the total time to rotation",
    "start": "1318600",
    "end": "1325640"
  },
  {
    "text": "was between 12 and 20 seconds on uh OSX that story is a little",
    "start": "1325640",
    "end": "1331200"
  },
  {
    "text": "bit better Safari and Firefox both retry in less than one second and you saw that Safari was rotating through the full",
    "start": "1331200",
    "end": "1337000"
  },
  {
    "text": "list of ips as of Firefox 25 it now will rotate through two IP addresses from",
    "start": "1337000",
    "end": "1342720"
  },
  {
    "text": "that list of eight and chrome the last version of Chrome uh it didn't seem to to retry on",
    "start": "1342720",
    "end": "1349559"
  },
  {
    "text": "its own but if you manually refresh or try to connect again then it would pick up a second IP and attempt to make a",
    "start": "1349559",
    "end": "1355600"
  },
  {
    "text": "connection there so it rotate on a on a manual refresh and that is the same behavior ads served with all these browsers as",
    "start": "1355600",
    "end": "1363120"
  },
  {
    "text": "well so the effect is that if when tackers are sticky to a set of ips or",
    "start": "1363480",
    "end": "1368679"
  },
  {
    "text": "they're causing a subset of your IP addresses to become unavailable to your clients a retry that's using a different",
    "start": "1368679",
    "end": "1375440"
  },
  {
    "text": "IP is more likely to reach a healthy host than a retry that just uses the same IP address over and over and over",
    "start": "1375440",
    "end": "1382919"
  },
  {
    "text": "again and adding this resilience to your services is just a matter of adding multiple records to your record set got",
    "start": "1383520",
    "end": "1389760"
  },
  {
    "text": "an example again of a rout 53 console a record set with four IP",
    "start": "1389760",
    "end": "1396039"
  },
  {
    "text": "addresses flash crowd and dos resilience is really a lot about controlling how",
    "start": "1401720",
    "end": "1407240"
  },
  {
    "text": "many resources you allow each request to consume and the better you can be at",
    "start": "1407240",
    "end": "1413240"
  },
  {
    "text": "that the the more you'll be able to manage flash clowds or DS",
    "start": "1413240",
    "end": "1418840"
  },
  {
    "text": "events uh one pattern that is sometimes easier said than done is this idea of striving for sameness the more you can",
    "start": "1419120",
    "end": "1426400"
  },
  {
    "text": "limit the amount of resources each request used and even the amount the the sameness of those requests from one to",
    "start": "1426400",
    "end": "1432600"
  },
  {
    "text": "another generally make it much easier as a service operator to manage spikes and workload",
    "start": "1432600",
    "end": "1438600"
  },
  {
    "text": "and uh if if that doesn't work there's always throttling or ways to back off and limit the amount of resources that",
    "start": "1438600",
    "end": "1445720"
  },
  {
    "text": "are consumed on your service side so on striving for say this as I said this is easier said than done if we look back at",
    "start": "1445720",
    "end": "1452320"
  },
  {
    "text": "uh the first attack type against an application layer you recall we talked",
    "start": "1452320",
    "end": "1457640"
  },
  {
    "text": "about this idea of one expensive operation this expensive search",
    "start": "1457640",
    "end": "1463360"
  },
  {
    "text": "call we better to find a way instead of searching and and Gathering up this giant data set and bundling it up and",
    "start": "1464240",
    "end": "1471000"
  },
  {
    "text": "returning the user things like pagination can go a long way to limiting the amount of work that your servers",
    "start": "1471000",
    "end": "1476559"
  },
  {
    "text": "side's doing it reduces the attack surface and doesn't give uh doesn't make yourself as easy in a target for",
    "start": "1476559",
    "end": "1482679"
  },
  {
    "text": "attackers and again generally is much easier to manage scaling out of your services when all of your uh requests",
    "start": "1482679",
    "end": "1488120"
  },
  {
    "text": "are about the same size or about the same cost of",
    "start": "1488120",
    "end": "1492039"
  },
  {
    "text": "process throttling works because host layers can typically hand handle many orders of magnitude more request volumes",
    "start": "1494360",
    "end": "1501760"
  },
  {
    "text": "than application layers if I'm generous I'd say that application layers can handle between a",
    "start": "1501760",
    "end": "1507440"
  },
  {
    "text": "th000 and 10,000 requests per second and uh by conservative estimate",
    "start": "1507440",
    "end": "1513320"
  },
  {
    "text": "host and Os layers can handle 500,000 to 5 million packets per",
    "start": "1513320",
    "end": "1518440"
  },
  {
    "text": "second and this is because application layers often have to do a lot of heavy lifting for every",
    "start": "1518440",
    "end": "1524159"
  },
  {
    "text": "request and it's better if you can stop overwhelming amounts of traffic cheaply and upfront rather than failing deep",
    "start": "1524159",
    "end": "1530880"
  },
  {
    "text": "within your appstack doing so can dramatically improve your service's ability to recover from large volumes of",
    "start": "1530880",
    "end": "1536600"
  },
  {
    "text": "traffic and why allocate a bunch of expensive resources for requests that are likely F to fail due to overwhelmed",
    "start": "1536600",
    "end": "1543760"
  },
  {
    "text": "backend resources so save all that memory allocation and processor Time by putting in an official an efficient",
    "start": "1543760",
    "end": "1550039"
  },
  {
    "text": "throttle at the front of your stack by installing that throttle you can bridge the gap between app layer",
    "start": "1550039",
    "end": "1556720"
  },
  {
    "text": "capabilities and host layer capabil ities and better protect your application layers and pairing this kind",
    "start": "1556720",
    "end": "1562760"
  },
  {
    "text": "of throttle with things like uh top talker or based on the the actual caller can further limit the collateral damage",
    "start": "1562760",
    "end": "1569679"
  },
  {
    "text": "caused by throttling and now admittedly an upfront throttle it is an important fallback but",
    "start": "1569679",
    "end": "1575760"
  },
  {
    "text": "it's heavy-handed and it's not something that's good we don't want to do that we don't want to throw away requests if it's at all possible",
    "start": "1575760",
    "end": "1582720"
  },
  {
    "text": "so it's also possible to eek out more application capacity by first capping",
    "start": "1582720",
    "end": "1589480"
  },
  {
    "text": "some of the non-essential operations within your application logging for example often",
    "start": "1589480",
    "end": "1596919"
  },
  {
    "text": "has some amount of per request cost associated with it in fact actually sometimes it has a lot of cost",
    "start": "1596919",
    "end": "1602600"
  },
  {
    "text": "associated with it and for many services not all log entries are absolutely",
    "start": "1602600",
    "end": "1607919"
  },
  {
    "text": "essential all of the time so by doing something like Reservoir sampling your log data or even just putting a simple",
    "start": "1607919",
    "end": "1613480"
  },
  {
    "text": "throttle on on your logging interfaces you can put a tap on non-essential resource consumption and this is a a",
    "start": "1613480",
    "end": "1620200"
  },
  {
    "text": "common pattern for networking gear especially for emitting metrics when",
    "start": "1620200",
    "end": "1625559"
  },
  {
    "text": "these routers come under a great load they change their sampling rates so that that that request processing time isn't",
    "start": "1625559",
    "end": "1631919"
  },
  {
    "text": "quite as expensive and they focus and Reserve resources for the actual routing of",
    "start": "1631919",
    "end": "1636960"
  },
  {
    "text": "packets so identify the non-essential operations in your service that scale By Request volumes and look for opportunity",
    "start": "1636960",
    "end": "1644080"
  },
  {
    "text": "to cap their resource consumption by preserving valuable resources for the essential parts of your",
    "start": "1644080",
    "end": "1650960"
  },
  {
    "text": "application process isolation means it uh process isolation is about",
    "start": "1653039",
    "end": "1658399"
  },
  {
    "text": "splitting up a single process application into a multi-process application and introducing interpr interprocess calls and it does uh add",
    "start": "1658399",
    "end": "1666799"
  },
  {
    "text": "additional complexity to the application but comes with the benefit of increased",
    "start": "1666799",
    "end": "1671960"
  },
  {
    "text": "service resilience if one process fails or consumes lots of system resources",
    "start": "1671960",
    "end": "1678600"
  },
  {
    "text": "isolation can give the operating system more chances to protect those critical applications each process has its own",
    "start": "1678600",
    "end": "1685000"
  },
  {
    "text": "memory pool and in a multi-core environment it may be completely isolated from another",
    "start": "1685000",
    "end": "1691440"
  },
  {
    "text": "process so if your logging layer happens to crash under certain request patterns it won't to take the",
    "start": "1691720",
    "end": "1697640"
  },
  {
    "text": "essential service operations down with them in this example if we lost our logging capability that would make",
    "start": "1697640",
    "end": "1703720"
  },
  {
    "text": "things a pain to operate but we could still fulfill real user requests in the",
    "start": "1703720",
    "end": "1710120"
  },
  {
    "text": "meantime all right now Shuffle sharting Shuffle sharting is the second part of",
    "start": "1713120",
    "end": "1721240"
  },
  {
    "text": "Route 53's resilience pattern is something that we use on our AWS services and again it's it's another",
    "start": "1721240",
    "end": "1726480"
  },
  {
    "text": "thing that before today we haven't publicly discussed it with our customers and so I'm actually really excited to be",
    "start": "1726480",
    "end": "1733039"
  },
  {
    "text": "up here and and getting the opportunity to share it with you Shuffle sharing is a technique that",
    "start": "1733039",
    "end": "1738960"
  },
  {
    "text": "builds on wellestablished distributed systems patterns and provides AWS services like Route 53 with resilience",
    "start": "1738960",
    "end": "1747039"
  },
  {
    "text": "that is unique in the marketplace and this pattern is one we believe will could also benefit you our",
    "start": "1747039",
    "end": "1753919"
  },
  {
    "text": "customer when you're building your own services and so uh that's why we're here and we're talking about it",
    "start": "1753919",
    "end": "1760519"
  },
  {
    "text": "today so in the beginning there was no such thing as distributed systems all",
    "start": "1760519",
    "end": "1766159"
  },
  {
    "text": "resources were served from a single endpoint and for sake of example let's say that",
    "start": "1766159",
    "end": "1771360"
  },
  {
    "text": "each of these resources represent a different video file if any one video file attracts",
    "start": "1771360",
    "end": "1777240"
  },
  {
    "text": "enough client traffic or enough traffic to overwhelm the endpoint then all of the other video files become",
    "start": "1777240",
    "end": "1784880"
  },
  {
    "text": "unavailable n plus1 scales scale out improves service resilience client requests or load balance across many",
    "start": "1785320",
    "end": "1792480"
  },
  {
    "text": "endpoints ensuring that when an endpoint fails the impact is limited to just a subset of requests",
    "start": "1792480",
    "end": "1800039"
  },
  {
    "text": "but if traffic to a particular video file becomes great enough to overwhelm the whole Fleet none of the video files",
    "start": "1801399",
    "end": "1807760"
  },
  {
    "text": "are accessible by sharding videos across scaled out endpoints endpoint failures",
    "start": "1807760",
    "end": "1815279"
  },
  {
    "text": "only impact a subset of videos but there may be other points of",
    "start": "1815279",
    "end": "1821399"
  },
  {
    "text": "failure in the system are all of these servers sitting in a single Rack or are they sharing the same network infrastructure",
    "start": "1821399",
    "end": "1829159"
  },
  {
    "text": "when you run your endpoints in AWS regions we provide you with access to redundant availability zones service",
    "start": "1829159",
    "end": "1836640"
  },
  {
    "text": "resilience improves when redundancies are modeled and considered when Distributing videos across",
    "start": "1836640",
    "end": "1844000"
  },
  {
    "text": "endpoints if one video file attracts a flash crowd sharding does provide some level of isolation and other videos are",
    "start": "1845000",
    "end": "1851679"
  },
  {
    "text": "accessible but all of the videos that are sharted together share the same fate in this example the light blue videos",
    "start": "1851679",
    "end": "1858840"
  },
  {
    "text": "availability may be compromised if gray attracts an overwhelming flash",
    "start": "1858840",
    "end": "1864559"
  },
  {
    "text": "crowd Shuffle sharting intelligently allocates resources across service",
    "start": "1865000",
    "end": "1870240"
  },
  {
    "text": "points service end points and availability dimensions in a way that maximize video",
    "start": "1870240",
    "end": "1876760"
  },
  {
    "text": "resilience if one video attracts a flash crowd the other videos are available via",
    "start": "1876760",
    "end": "1882120"
  },
  {
    "text": "other endpoints Shuffle sharting leverages an",
    "start": "1882120",
    "end": "1887919"
  },
  {
    "text": "an N choose M concept to deliver high levels of isolation with fewer end points in our video example it it was a",
    "start": "1887919",
    "end": "1894240"
  },
  {
    "text": "simplified version with two end points and two azs resulting in four unique",
    "start": "1894240",
    "end": "1899360"
  },
  {
    "text": "permeations so four videos there we're able to uh maintain a high level of",
    "start": "1899360",
    "end": "1906519"
  },
  {
    "text": "isolation but these numbers grow pretty quickly as you add more end points so with six more end from if we go to eight",
    "start": "1906519",
    "end": "1914240"
  },
  {
    "text": "end points per a we end up going to 64 unique",
    "start": "1914240",
    "end": "1919279"
  },
  {
    "text": "permutations and if we add another eight end points in a third availability Zone",
    "start": "1919279",
    "end": "1924440"
  },
  {
    "text": "the number of permutations increases to 512 Route 53 uses Shuffle sharting to",
    "start": "1924440",
    "end": "1932559"
  },
  {
    "text": "improve the resilience of hosted zones and we actually use more than one",
    "start": "1932559",
    "end": "1937960"
  },
  {
    "text": "dimension in availability we we call it an availability lattice so instead of just modeling the single availability",
    "start": "1937960",
    "end": "1945000"
  },
  {
    "text": "Zone we add a second a second dimension so the First Dimension is Stripes we've",
    "start": "1945000",
    "end": "1950880"
  },
  {
    "text": "talked about Stripes already we use Stripes to manage uh how hosted zones",
    "start": "1950880",
    "end": "1956679"
  },
  {
    "text": "are served across our Edge locations the second dimension of our availability lattice is something we",
    "start": "1956679",
    "end": "1962519"
  },
  {
    "text": "call braids braids allow us to guarantee host",
    "start": "1962519",
    "end": "1967799"
  },
  {
    "text": "level isolation even when more than one stripe is served from a single edge location so let me let me say that again",
    "start": "1967799",
    "end": "1974399"
  },
  {
    "text": "if in the event we end up serving a stripe two stripes from one Edge",
    "start": "1974399",
    "end": "1979639"
  },
  {
    "text": "location we use braids to ensure that we serve one Stripe from one set of of",
    "start": "1979639",
    "end": "1985799"
  },
  {
    "text": "physical servers and another set of physical servers for the other stripe so there's still we still maintain that",
    "start": "1985799",
    "end": "1992240"
  },
  {
    "text": "that isolation once the availability lattice is defined we assign all of our",
    "start": "1992240",
    "end": "1997440"
  },
  {
    "text": "endpoints in Rob 53's case these are virtual name servers we assign them into the a lattice and Associate them with",
    "start": "1997440",
    "end": "2003840"
  },
  {
    "text": "particular stripes and braids and then when customers come and request a new hosted Zone we allocate",
    "start": "2003840",
    "end": "2010799"
  },
  {
    "text": "that customer uh for name servers and we pick them from amongst that availability",
    "start": "2010799",
    "end": "2016679"
  },
  {
    "text": "lattice being careful to use these Shuffle sharting techniques to maximize isolation availability for all hosted",
    "start": "2016679",
    "end": "2023399"
  },
  {
    "text": "zones and don't worry I'll walk you through how this works we'll start by uh",
    "start": "2023399",
    "end": "2029279"
  },
  {
    "text": "working backward from what the customer experiences in this example we have our two hosted zones and I'm showing the",
    "start": "2029279",
    "end": "2037000"
  },
  {
    "text": "delegation set or the four name servers that we issue for each of those domains",
    "start": "2037000",
    "end": "2042799"
  },
  {
    "text": "and take a note here that each of these hosted zones ends up with a different set of name",
    "start": "2042799",
    "end": "2049040"
  },
  {
    "text": "servers I'll walk you through how we do this allocation first we Define our",
    "start": "2049040",
    "end": "2056000"
  },
  {
    "text": "availability lattice the first dimension of our availability lattice is Stripes",
    "start": "2056000",
    "end": "2061040"
  },
  {
    "text": "our doc.net doo. and.org Stripes this is dividing up all of our",
    "start": "2061040",
    "end": "2067358"
  },
  {
    "text": "end points points So within each stripe we have lots of virtual name servers and I've called out a couple examples that",
    "start": "2067359",
    "end": "2073398"
  },
  {
    "text": "came from the the previous hosted zones we add a second dimension to our",
    "start": "2073399",
    "end": "2080919"
  },
  {
    "text": "availability lattice braids so this divides up our name servers by another",
    "start": "2080919",
    "end": "2087158"
  },
  {
    "text": "dimension and remember physical hosts can only serve hosted zones from a single",
    "start": "2087159",
    "end": "2093158"
  },
  {
    "text": "braid now when it comes to allocating end points for hosted",
    "start": "2094000",
    "end": "2099960"
  },
  {
    "text": "zones we take care to select a virtual name server from each stripe and each",
    "start": "2099960",
    "end": "2105320"
  },
  {
    "text": "braid but never selecting a braider stripe more than once for that hosted",
    "start": "2105320",
    "end": "2110640"
  },
  {
    "text": "Zone and when we allocate resources for another hosted Zone we use the same selection algorithm but we end up with a",
    "start": "2110640",
    "end": "2116960"
  },
  {
    "text": "different combination of stripes and braids you can see how this works when",
    "start": "2116960",
    "end": "2123920"
  },
  {
    "text": "we simulate a failure if a sector shared by Orange and gray is impacted non-overlapping sectors are still",
    "start": "2123920",
    "end": "2129839"
  },
  {
    "text": "available in traditional sharding all resources sharted together share the same fate but Shuffle sharting limits",
    "start": "2129839",
    "end": "2136480"
  },
  {
    "text": "the blast radius and improves resilience and we're back to our final",
    "start": "2136480",
    "end": "2142839"
  },
  {
    "text": "product so two different unique delegation sets each with name servers from different sectors of the Route 53",
    "start": "2142839",
    "end": "2148359"
  },
  {
    "text": "availability lattice providing high levels of isolation for each hosted zone so let's look at a shuffle Shard",
    "start": "2148359",
    "end": "2155400"
  },
  {
    "text": "Shuffle Shard resilience in action using a simplified version of Route 53 in this",
    "start": "2155400",
    "end": "2160560"
  },
  {
    "text": "example we have two Edge locations each serving a single stripe with four braids in each Edge",
    "start": "2160560",
    "end": "2166680"
  },
  {
    "text": "location gray and orange are Shuffle sharded across braids and Stripes to ensure host",
    "start": "2166680",
    "end": "2173520"
  },
  {
    "text": "isolation and if the orange domain attracts an attack the gray domain is isolated from potential",
    "start": "2174160",
    "end": "2181480"
  },
  {
    "text": "impact uh today I'm also happy to say that we're releasing a tool that can help you bring the same capability into",
    "start": "2184880",
    "end": "2191119"
  },
  {
    "text": "your own Services it just went live today on the aw Labs GitHub site uh and it a source",
    "start": "2191119",
    "end": "2199920"
  },
  {
    "text": "code is also available and we think this is a really effective way to help take this kind of complicated concept and",
    "start": "2199920",
    "end": "2205560"
  },
  {
    "text": "make it a little bit easier for you to wrap your heads around I'll give you a quick tour of what that how that Library",
    "start": "2205560",
    "end": "2211240"
  },
  {
    "text": "works so we're flipping back to our our simplified video example and the first",
    "start": "2211240",
    "end": "2217720"
  },
  {
    "text": "step again is to Define our availability lattice the video example uses a one-dimension availability lattice with",
    "start": "2217720",
    "end": "2225640"
  },
  {
    "text": "azs so in this case we instantiate a new instance of a one-dimensional lattice uh",
    "start": "2225640",
    "end": "2230880"
  },
  {
    "text": "we specify the endpoint type when we do that and in this case I'm using a health checked record",
    "start": "2230880",
    "end": "2236880"
  },
  {
    "text": "set this health checked record set is also part of the same uh in Route 53 in from a library and is linked and can be",
    "start": "2236880",
    "end": "2245200"
  },
  {
    "text": "used in conjunction with another portion of the libr library that that can be published and pushed into R 53 through",
    "start": "2245200",
    "end": "2252359"
  },
  {
    "text": "the API so you can build up this configuration with your Shuffle started lattice and ultimately publish this up",
    "start": "2252359",
    "end": "2257599"
  },
  {
    "text": "into Route 53 if you want to leverage this through a DNS service but that",
    "start": "2257599",
    "end": "2262800"
  },
  {
    "text": "endpoint could be anything you want you could use this to shuffle Shard resources that are internal to your",
    "start": "2262800",
    "end": "2268800"
  },
  {
    "text": "application maybe you're using multiple cues and you want to have high levels of isolation and availability in how those",
    "start": "2268800",
    "end": "2275119"
  },
  {
    "text": "cues are used so you could use that here as as well and then uh the last parameter there we name the dimension of",
    "start": "2275119",
    "end": "2281520"
  },
  {
    "text": "our availability lattice we're using availability",
    "start": "2281520",
    "end": "2286400"
  },
  {
    "text": "zones all right now that we have our latus defined we need to populate it with end",
    "start": "2286839",
    "end": "2294000"
  },
  {
    "text": "points that done with the add endpoint call we name the dimension of the",
    "start": "2294960",
    "end": "2300640"
  },
  {
    "text": "availability lattice so in the first example there we're adding an endpoint from us West in the 1A availability Zone",
    "start": "2300640",
    "end": "2308359"
  },
  {
    "text": "and we pass in a new instance of our endpoint type a health check record set in this case with a the IP address for",
    "start": "2308359",
    "end": "2314640"
  },
  {
    "text": "that endpoint and we keep doing that until the lattice is fully populated with all of our",
    "start": "2314640",
    "end": "2320319"
  },
  {
    "text": "endpoints and once the lattice is built and the end points have been added it's time to allocate specific endpoints to",
    "start": "2320319",
    "end": "2326520"
  },
  {
    "text": "resources a simple Shuffle sharter will select n number of endpoints from each",
    "start": "2326520",
    "end": "2331839"
  },
  {
    "text": "of three selected sectors U when we initiate the shuffle Charter we need to",
    "start": "2331839",
    "end": "2337000"
  },
  {
    "text": "pass an seed value and then we're ready to shuffle when the when you call the",
    "start": "2337000",
    "end": "2343800"
  },
  {
    "text": "shuffle you pass in the full availability lattice with all of the end points and all the dimensions the second",
    "start": "2343800",
    "end": "2349920"
  },
  {
    "text": "parameter is an identifier that represents the resource that you're sharting so in our case this is an",
    "start": "2349920",
    "end": "2355000"
  },
  {
    "text": "identifier for a video file and the last parameter are the number of endpoints you want for each sector we're",
    "start": "2355000",
    "end": "2361119"
  },
  {
    "text": "specifying one we've configured three availability zones so we're going to end up with three end points",
    "start": "2361119",
    "end": "2368480"
  },
  {
    "text": "Shuffle shter gives us a lattice back but this lattice contains only the end",
    "start": "2368480",
    "end": "2373560"
  },
  {
    "text": "points for that specific video file so we'll have three end points in here and it's still populated inside the same uh",
    "start": "2373560",
    "end": "2380960"
  },
  {
    "text": "lattice structure with the dimension descriptions and in our case since we're",
    "start": "2380960",
    "end": "2387040"
  },
  {
    "text": "using a health checked record set we can actually take that lattice structure and",
    "start": "2387040",
    "end": "2392760"
  },
  {
    "text": "push it into the rubber tree utility which will construct a tree of Records sets and Associate them with health",
    "start": "2392760",
    "end": "2399680"
  },
  {
    "text": "checks and uh generate an API call that you can push into Route 53 so we can actually create a record",
    "start": "2399680",
    "end": "2408119"
  },
  {
    "text": "set like this that will give us uh these answers and we'll respond also to health",
    "start": "2408119",
    "end": "2413720"
  },
  {
    "text": "endpoint failure so that unhealthy endpoints are removed from the list so each of these endpoints are running in a",
    "start": "2413720",
    "end": "2419160"
  },
  {
    "text": "different availability",
    "start": "2419160",
    "end": "2421960"
  },
  {
    "text": "Zone all right so we've uh discussed a number of of patterns you can use to improve overall system resilience and",
    "start": "2424319",
    "end": "2430400"
  },
  {
    "text": "we've discussed how those patterns help under dos situations but this talk would be",
    "start": "2430400",
    "end": "2435440"
  },
  {
    "text": "incomplete if we didn't spend at least a little time talking about some of the actions you can take as service operators in response to a Dos event and",
    "start": "2435440",
    "end": "2442440"
  },
  {
    "text": "I'll cover some of the the more common ones that we've seen surface operators",
    "start": "2442440",
    "end": "2447680"
  },
  {
    "text": "use uh the first step of course is detecting the dos and figuring out whether or not you're under",
    "start": "2449720",
    "end": "2456240"
  },
  {
    "text": "attack there are a number of key metrics that usually show evidence of a Dos packets per second counts or requests",
    "start": "2456240",
    "end": "2462880"
  },
  {
    "text": "per second counts are a really good place to start I've got a example of a packet per second graph showing a a Dos",
    "start": "2462880",
    "end": "2470839"
  },
  {
    "text": "attack once you identify an attack oh sorry uh traffic drops are",
    "start": "2470839",
    "end": "2477280"
  },
  {
    "text": "another way to identify a possible attack and they may actually indicate that the uh attack had exhausted enough",
    "start": "2477280",
    "end": "2484359"
  },
  {
    "text": "resources to actually deny real user requests once you've identified that attack it's",
    "start": "2484359",
    "end": "2489839"
  },
  {
    "text": "time to move on to identifying The Source or teasing out key characteristics that can help you throttle or block the bad traffic and",
    "start": "2489839",
    "end": "2496400"
  },
  {
    "text": "separate it from the good traffic and remember logs and monitoring won't work if your host is so",
    "start": "2496400",
    "end": "2502480"
  },
  {
    "text": "overwhelmed that you can't get to them so use throttling and process isolation techniques to ensure you'll have access",
    "start": "2502480",
    "end": "2508599"
  },
  {
    "text": "to the logs and your hosts when you need them and don't forget to log X forwarded for if you're sitting behind a load",
    "start": "2508599",
    "end": "2514480"
  },
  {
    "text": "balancer or an HTTP proxy you'll need X fored for to see the actual traffic",
    "start": "2514480",
    "end": "2519960"
  },
  {
    "text": "Source instead of just seeing the IP address of the prox your load balancing balancer you're sitting",
    "start": "2519960",
    "end": "2525960"
  },
  {
    "text": "behind um and as it turns out many attacks are actually identifiable by simple sorting and summing techniques on",
    "start": "2525960",
    "end": "2532119"
  },
  {
    "text": "your logs using specific Keys Source IPS and exported for are a good place to start and at an application layer URI",
    "start": "2532119",
    "end": "2538920"
  },
  {
    "text": "popularity can often help you zero in on a request pattern that's consuming your application's resources",
    "start": "2538920",
    "end": "2546880"
  },
  {
    "text": "make sure you understand the behavior of your load balancer proxy layer uh with regard to X fored for headers like many",
    "start": "2548559",
    "end": "2556640"
  },
  {
    "text": "parts of the HTTP RFC the specification isn't particularly specific it's open to",
    "start": "2556640",
    "end": "2562240"
  },
  {
    "text": "interpretation and lots of developers have interpreted it many different ways so U they're exported for uh comes in",
    "start": "2562240",
    "end": "2569839"
  },
  {
    "text": "many varieties cloudfront will append a real client IP address to a common delimited",
    "start": "2569839",
    "end": "2577440"
  },
  {
    "text": "list of of exported for values so if cloudfront is the proxy layer that's sitting in front of your service it'll",
    "start": "2577440",
    "end": "2583599"
  },
  {
    "text": "be the last IP in that",
    "start": "2583599",
    "end": "2587280"
  },
  {
    "text": "list uh something also to be aware of is that many web servers don't log exp fored for by default and you will need",
    "start": "2589359",
    "end": "2595359"
  },
  {
    "text": "to enable it ahead of time if you want to use it as a mechanism for detecting and figuring out how to block these",
    "start": "2595359",
    "end": "2600720"
  },
  {
    "text": "malicious request uh this is actually something that many customers Overlook if you're using I you will also",
    "start": "2600720",
    "end": "2608720"
  },
  {
    "text": "need to install an additional IAS Advanced logging package in order to log",
    "start": "2608720",
    "end": "2614160"
  },
  {
    "text": "exported for or other HTTP headers and then you'll have to configure a custom",
    "start": "2614160",
    "end": "2620160"
  },
  {
    "text": "parameter to log the exported for field uh there's examples available online I'm not going to go into the details here if",
    "start": "2620160",
    "end": "2626680"
  },
  {
    "text": "you're using enginex or Apache there are lots of examples again available for uh logging exported for",
    "start": "2626680",
    "end": "2634400"
  },
  {
    "text": "values the typical implementations usually have some sort of conditional logic like this it'll check to see if",
    "start": "2634400",
    "end": "2640200"
  },
  {
    "text": "there's a value in the x fored 4 header if there is it'll use that value if not",
    "start": "2640200",
    "end": "2645240"
  },
  {
    "text": "it'll fall back just using the client IP address now with the X fored for header",
    "start": "2645240",
    "end": "2652280"
  },
  {
    "text": "in the access logs you'll have the information to see who's hitting your site even if you're sitting behind a",
    "start": "2652280",
    "end": "2658800"
  },
  {
    "text": "proxy and now that you've got the client IP address in the logs you can identify you can typically identify the bad",
    "start": "2659440",
    "end": "2665200"
  },
  {
    "text": "players with simple log puring so sorting and summing your log data is a surprisingly effective way to find out",
    "start": "2665200",
    "end": "2670760"
  },
  {
    "text": "who's consuming resources and in my example the bad guys usually stand out",
    "start": "2670760",
    "end": "2677559"
  },
  {
    "text": "pretty apparently typical number of connection counts in this example are around two",
    "start": "2677559",
    "end": "2682800"
  },
  {
    "text": "for normal clients and then we've got this one guy that's doing over a thousand requests from a single IP",
    "start": "2682800",
    "end": "2688040"
  },
  {
    "text": "that's not normal once the offending Source IPS",
    "start": "2688040",
    "end": "2693640"
  },
  {
    "text": "have been identified there are a number of options that allow you to deny access to application layers for services",
    "start": "2693640",
    "end": "2699079"
  },
  {
    "text": "hosted in AWS host level firewalling can uh be",
    "start": "2699079",
    "end": "2704520"
  },
  {
    "text": "very effective and can mitigate in the order of tens of thousands to even millions of packets per second and the",
    "start": "2704520",
    "end": "2711680"
  },
  {
    "text": "number of web application configuration for popular web servers allows you to deny access to Source IPS just right",
    "start": "2711680",
    "end": "2718319"
  },
  {
    "text": "within the web server configuration and sometimes even uh you can apply a conditional logic to http headers that",
    "start": "2718319",
    "end": "2725640"
  },
  {
    "text": "can effectively result in Block based on something in the HTTP request",
    "start": "2725640",
    "end": "2730960"
  },
  {
    "text": "itself and there are even some web server modules available that perform on the Fly top talker analysis and can",
    "start": "2730960",
    "end": "2737040"
  },
  {
    "text": "automatically configure IP tables rules to block those those Source IPS that are",
    "start": "2737040",
    "end": "2742640"
  },
  {
    "text": "misbehaving VPC Network accles are an effective way to manage rules across many ec2",
    "start": "2743200",
    "end": "2750400"
  },
  {
    "text": "instances VPC Network accles are applied to a VPC subnet and when you spin up",
    "start": "2750400",
    "end": "2755480"
  },
  {
    "text": "your ec2 instances you assign them into that that VPC subnet and the important",
    "start": "2755480",
    "end": "2761079"
  },
  {
    "text": "bit is uh that Network akles support deny rules for IP",
    "start": "2761079",
    "end": "2768280"
  },
  {
    "text": "cers this is a screenshot from the VPC console and an example of a network AAL configuration so we've configured a rule",
    "start": "2769119",
    "end": "2777040"
  },
  {
    "text": "a TCP rule for Port 80 coming from a single Source IP using",
    "start": "2777040",
    "end": "2783240"
  },
  {
    "text": "the CER notation so we have a sl32 there um this is pretty quick and easy to set",
    "start": "2783240",
    "end": "2788640"
  },
  {
    "text": "up and to deploy and can be applied across many ec2 instances all at",
    "start": "2788640",
    "end": "2795240"
  },
  {
    "text": "once if you're looking for more advanced firewalling or Doss protection features or more of a turnkey solution you may be",
    "start": "2795720",
    "end": "2801760"
  },
  {
    "text": "interested in a web application firewall and I'd encourage you to take a look at some of the offerings in the AWS",
    "start": "2801760",
    "end": "2807880"
  },
  {
    "text": "Marketplace there are a number of uh readymade wa solutions that are actually pretty easy to configure and spin up and",
    "start": "2807880",
    "end": "2814359"
  },
  {
    "text": "put in front of your ec2 instances and many of these tool sets offer help",
    "start": "2814359",
    "end": "2820040"
  },
  {
    "text": "with real-time detection mechanisms and even automatic mitigations and instead of just a straight denial some of these",
    "start": "2820040",
    "end": "2826280"
  },
  {
    "text": "waffs offer the ability to impose throttling limits so that can help reduce uh some of the collateral damage",
    "start": "2826280",
    "end": "2831640"
  },
  {
    "text": "associated with a mitigation at a minimum be sure these tools support Source IP or xsx forwarded",
    "start": "2831640",
    "end": "2839240"
  },
  {
    "text": "for blacklisting all right so we've",
    "start": "2839240",
    "end": "2845559"
  },
  {
    "text": "discussed methods for detecting and blocking top talker clients having these capabilities in place ahead of any",
    "start": "2845559",
    "end": "2851599"
  },
  {
    "text": "attack will ensure you have the tools you need to respond and if that's not enough uh",
    "start": "2851599",
    "end": "2857480"
  },
  {
    "text": "support teams are available for more Hands-On",
    "start": "2857480",
    "end": "2861640"
  },
  {
    "text": "help if you think you may be subject to a denial of service attack I would encourage you to take a look at some of",
    "start": "2862760",
    "end": "2869359"
  },
  {
    "text": "the uh business and Enterprise levels of support those come in particular with a",
    "start": "2869359",
    "end": "2875520"
  },
  {
    "text": "24x7 Communication channel and that Communication channel",
    "start": "2875520",
    "end": "2880760"
  },
  {
    "text": "can be used as a bidirectional flow of information and can get you connected to an online with people that might be able",
    "start": "2880760",
    "end": "2886960"
  },
  {
    "text": "to provide you with more assistance uh it can provide you with a direct line to uh service teams on",
    "start": "2886960",
    "end": "2894359"
  },
  {
    "text": "AWS all right so we covered a lot of ground today if I were to say if I were leave",
    "start": "2896240",
    "end": "2902920"
  },
  {
    "text": "you with just three of these things probably Focus here by using Edge",
    "start": "2902920",
    "end": "2908200"
  },
  {
    "text": "services like cloudfront and Route 53 AWS has more tools at its disposal to",
    "start": "2908200",
    "end": "2913920"
  },
  {
    "text": "help you in the event of DS and you get the advantage of a kind of an alwayson infrastructure that's running in a",
    "start": "2913920",
    "end": "2920359"
  },
  {
    "text": "globally distributed environment that has access to lots of diverse network connectivity and has some of those",
    "start": "2920359",
    "end": "2925920"
  },
  {
    "text": "built-in resilience features that I talked about earlier so take a look at those services and see if they might be",
    "start": "2925920",
    "end": "2932200"
  },
  {
    "text": "a good fit uh AWS business and Enterprise",
    "start": "2932200",
    "end": "2937240"
  },
  {
    "text": "support provide you with access on a 24x7 to support",
    "start": "2937240",
    "end": "2942319"
  },
  {
    "text": "teams and at a minimum I recommend you you have a system in place to support some some of self-service Source IP",
    "start": "2942319",
    "end": "2950079"
  },
  {
    "text": "blacklisting Solutions like VPC can provide you with such a capability but almost all of these do require some",
    "start": "2950079",
    "end": "2955839"
  },
  {
    "text": "upfront consideration and upfront uh uh configuration",
    "start": "2955839",
    "end": "2960760"
  },
  {
    "text": "rather all right well thank you very much for coming today I will will be available at the uh Amazon Booth",
    "start": "2963200",
    "end": "2969440"
  },
  {
    "text": "tomorrow so please do stop by if you have any more questions thank you very much",
    "start": "2969440",
    "end": "2975960"
  }
]