[
  {
    "start": "0",
    "end": "94000"
  },
  {
    "text": "that's that's great thank you for coming so today we're going to talk about",
    "start": "30",
    "end": "6500"
  },
  {
    "text": "advance continues delivery best practices on AWS so I'm Leo Jadhav ski",
    "start": "6500",
    "end": "13139"
  },
  {
    "text": "I'm a principal Solutions Architect at AWS and again thank you all for coming",
    "start": "13139",
    "end": "20430"
  },
  {
    "text": "and so we've got over 20 years of experience as a company operating both",
    "start": "20430",
    "end": "26130"
  },
  {
    "text": "amazon.com and AWS and so we'll talk",
    "start": "26130",
    "end": "31289"
  },
  {
    "text": "about kind of the lessons learned and how that translated into our continuous deployment best practices how and why",
    "start": "31289",
    "end": "40350"
  },
  {
    "text": "you should deploy those best practices on your by yourself and where and how",
    "start": "40350",
    "end": "47039"
  },
  {
    "text": "you can integrate security testing into your CI CD pipelines so as you build",
    "start": "47039",
    "end": "52530"
  },
  {
    "text": "your pipelines to you know build your code test your code deploy your code monitor your code how do you integrate",
    "start": "52530",
    "end": "59699"
  },
  {
    "text": "security testing into that because security is obviously really important and ultimately make sure you leave",
    "start": "59699",
    "end": "68340"
  },
  {
    "text": "feedback at the end so we'd love to keep improving this talk to make sure that our attendees of our summits you know",
    "start": "68340",
    "end": "74700"
  },
  {
    "text": "get a lot of value for their time so go through the app for the summit and make",
    "start": "74700",
    "end": "81210"
  },
  {
    "text": "sure at the end that you fill out the survey if you have time so before we",
    "start": "81210",
    "end": "88380"
  },
  {
    "text": "begin let me kind of tell you about continuous delivery at AWS and what that",
    "start": "88380",
    "end": "94590"
  },
  {
    "start": "94000",
    "end": "94000"
  },
  {
    "text": "means if you're using our services so we",
    "start": "94590",
    "end": "100079"
  },
  {
    "text": "these are the different stages of the software development lifecycle right you've got your source code so that's",
    "start": "100079",
    "end": "105930"
  },
  {
    "text": "when you've got your you're writing your code you're doing your peer review then you got your build stage so if you have",
    "start": "105930",
    "end": "111869"
  },
  {
    "text": "to build your code if it's a language where it has to be built and then you've got your pretest so that's when you're",
    "start": "111869",
    "end": "117570"
  },
  {
    "text": "you know testing your code and then you deploy your code to staging environments to integration testing environments",
    "start": "117570",
    "end": "124799"
  },
  {
    "text": "ultimately to production environments and then after your codes up and running then you've got the post test stage",
    "start": "124799",
    "end": "130649"
  },
  {
    "text": "that's when you know you you make sure your app is running according to your",
    "start": "130649",
    "end": "136260"
  },
  {
    "text": "specifications so then we've got continuous integration continues delivery and continues deployment so",
    "start": "136260",
    "end": "144690"
  },
  {
    "text": "continues integration right it's all that is is when you have it your source",
    "start": "144690",
    "end": "150360"
  },
  {
    "text": "code and you commit it to the mainline branch of a repository and basically",
    "start": "150360",
    "end": "155430"
  },
  {
    "text": "every time there's a commit to the mainline branch a series of tests to run so they're unit tests and tax tests",
    "start": "155430",
    "end": "162030"
  },
  {
    "text": "style checkers that kind of thing and your code is then built and so either",
    "start": "162030",
    "end": "167120"
  },
  {
    "text": "the build is successful and you have an artifact that you can then deploy that artifact could be a serverless function",
    "start": "167120",
    "end": "173790"
  },
  {
    "text": "and a zip file could be a container like a docker container could be an Amazon",
    "start": "173790",
    "end": "179130"
  },
  {
    "text": "machine image could be a zip file it could be an MSI whatever it is that you're actually using to deploy or your",
    "start": "179130",
    "end": "186270"
  },
  {
    "text": "build fails and your developers have very quick feedback to be able to fix",
    "start": "186270",
    "end": "192150"
  },
  {
    "text": "whatever the cause of the failure was then you've got continuous delivery so",
    "start": "192150",
    "end": "197670"
  },
  {
    "text": "continues delivery is what most of the customers that I talk to when I say what they want to do DevOps what they",
    "start": "197670",
    "end": "204030"
  },
  {
    "text": "actually mean is they want to do continuous delivery so continues delivery is when you not only you know",
    "start": "204030",
    "end": "210900"
  },
  {
    "text": "build your artifact automatically but you run your tests you do your deploys and so you deploy your staging and need",
    "start": "210900",
    "end": "217200"
  },
  {
    "text": "to put a production and it's all with full automation however you usually have a manual for it to be continued delivery",
    "start": "217200",
    "end": "223560"
  },
  {
    "text": "you have a manual approval process in between right before you get to production so everything is automated",
    "start": "223560",
    "end": "229230"
  },
  {
    "text": "but before the code gets pushed to production somebody has to go in and make sure okay",
    "start": "229230",
    "end": "234390"
  },
  {
    "text": "this commit makes sense I'm gonna go ahead and say yes and deploy this to production that's what most of my",
    "start": "234390",
    "end": "239970"
  },
  {
    "text": "customers are going for they want automation they still want the safety measure of having a manual approval process before you go to production and",
    "start": "239970",
    "end": "246930"
  },
  {
    "text": "then there's continuous deployment so as you know you go down this path of",
    "start": "246930",
    "end": "252360"
  },
  {
    "text": "automation you're going to build a excellence in these processes so you'll",
    "start": "252360",
    "end": "258419"
  },
  {
    "text": "get more confident in your how you do automation and how you're doing your automated tests and how you're doing",
    "start": "258419",
    "end": "263520"
  },
  {
    "text": "your deploys and so then you might decide okay micro-service that's part of my app this",
    "start": "263520",
    "end": "269790"
  },
  {
    "text": "one I feel safe just doing full automation on we don't need a manual approval anymore so that's continuous",
    "start": "269790",
    "end": "275010"
  },
  {
    "text": "deployment and some of my customers they never do this some of my customers they'll put a few you know little risk",
    "start": "275010",
    "end": "281430"
  },
  {
    "text": "micro services with full automated deployments and then some customers they",
    "start": "281430",
    "end": "286980"
  },
  {
    "text": "do this for everything right but most of my customers what they're really looking for is continuous delivery so let's talk",
    "start": "286980",
    "end": "293340"
  },
  {
    "start": "293000",
    "end": "293000"
  },
  {
    "text": "about continuous delivery best practices so one thing that we're assuming since",
    "start": "293340",
    "end": "301530"
  },
  {
    "text": "again this is a more advanced talk is that you already have all this stuff in place and we're going to talk about more",
    "start": "301530",
    "end": "307200"
  },
  {
    "text": "advanced practices if you want to do a more introductory course or to a session",
    "start": "307200",
    "end": "312540"
  },
  {
    "text": "on our code services in our developers suite there's a session I believe tomorrow it's called the - pizza talk and talks",
    "start": "312540",
    "end": "320640"
  },
  {
    "text": "more about like just the basics of code commit code deploy code build a code",
    "start": "320640",
    "end": "325950"
  },
  {
    "text": "star and the rest of our developer tool suite so what do we mean when we say",
    "start": "325950",
    "end": "331440"
  },
  {
    "text": "continues deployment best practice or continues delivery best practices so your source code it's version so it's in",
    "start": "331440",
    "end": "339030"
  },
  {
    "text": "something like it and you know my customers they you typically use github or code commit or",
    "start": "339030",
    "end": "346050"
  },
  {
    "text": "get lab or bitbucket it doesn't really matter what's important is you're using a version control system for your code",
    "start": "346050",
    "end": "351200"
  },
  {
    "text": "you've got an automated build so again when you commit to your version control",
    "start": "351200",
    "end": "358110"
  },
  {
    "text": "system that triggers an automatic build and that other passes or fails and then that artifact that's generated from your",
    "start": "358110",
    "end": "364650"
  },
  {
    "text": "automated build its automate it's it's automated in its deployment so it gets deployed to a bunch of environments and",
    "start": "364650",
    "end": "371130"
  },
  {
    "text": "still gets to production ideally right you're deploying to more than one instance so you don't have any single",
    "start": "371130",
    "end": "378570"
  },
  {
    "text": "points of failure in your architecture so you know when you deploy to something that deployment goes bad you still have",
    "start": "378570",
    "end": "384419"
  },
  {
    "text": "another instance running the known working version of your code that you can fall back to you're doing basic unit",
    "start": "384419",
    "end": "391020"
  },
  {
    "text": "tests on your code you're doing integration tests to make sure that as you deploy your services they work well",
    "start": "391020",
    "end": "398910"
  },
  {
    "text": "with you know the rest of your services that come your application and you're doing continuous delivery and lastly you have",
    "start": "398910",
    "end": "407610"
  },
  {
    "text": "an Operations dashboard so you have some kind of dashboard that shows you what is",
    "start": "407610",
    "end": "412860"
  },
  {
    "text": "the status of my code what commit is currently deployed to production are my builds passing or",
    "start": "412860",
    "end": "417870"
  },
  {
    "text": "failing what are the you know metrics that I care about for my code so for",
    "start": "417870",
    "end": "423690"
  },
  {
    "text": "example for a retail website like amazon.com orders per second is an important metric depending on what your",
    "start": "423690",
    "end": "429509"
  },
  {
    "text": "business is your metrics that are important are gonna vary and so we can",
    "start": "429509",
    "end": "435300"
  },
  {
    "text": "kind of tie this to to these stages that we'll talk about in a second",
    "start": "435300",
    "end": "442340"
  },
  {
    "start": "442000",
    "end": "442000"
  },
  {
    "text": "so let's talk about the tools that we'll be using in this talk so for monitoring",
    "start": "442340",
    "end": "448919"
  },
  {
    "text": "we've got Amazon Cloud Watch cloud watch gives you monitoring it gives you metrics both built-in metrics that",
    "start": "448919",
    "end": "455190"
  },
  {
    "text": "services give you and custom metrics so if you have metric like number of Tomcat",
    "start": "455190",
    "end": "462060"
  },
  {
    "text": "processes running on my instance you can inject that metric into cloud watch cloud watch also does log so you can",
    "start": "462060",
    "end": "468000"
  },
  {
    "text": "send application logs or any other kind of logs to cloud watch and there's the cloud much events so you can trigger",
    "start": "468000",
    "end": "473210"
  },
  {
    "text": "like for example lambda functions off of an event so you find that your instance",
    "start": "473210",
    "end": "479400"
  },
  {
    "text": "reboots that means you have to redeploy your code to the new to a new instance so you can you can hook that up with",
    "start": "479400",
    "end": "484710"
  },
  {
    "text": "cloud watch events for example for software development we'll be talking",
    "start": "484710",
    "end": "489930"
  },
  {
    "text": "about SNS or simple notification service and lambda which is our serverless compute service for continues delivery",
    "start": "489930",
    "end": "498449"
  },
  {
    "text": "we'll be talking about using a Tobias code deploy and for continuous deployment we'll be talking about using a biscuit pipeline and for security",
    "start": "498449",
    "end": "506940"
  },
  {
    "text": "we'll be talking about Amazon inspector we'll also be talking about using some",
    "start": "506940",
    "end": "511949"
  },
  {
    "text": "non database tools for that and lastly fridging both builds and tests you'll",
    "start": "511949",
    "end": "517050"
  },
  {
    "text": "can use a base code build for that so let's see how these services map to the",
    "start": "517050",
    "end": "522899"
  },
  {
    "text": "software release steps so for monitoring again we've got cloud watch and we've",
    "start": "522899",
    "end": "528450"
  },
  {
    "start": "525000",
    "end": "525000"
  },
  {
    "text": "got x-ray so x-rays are distributed tracing service so for example if you want to use an x-ray with your",
    "start": "528450",
    "end": "534690"
  },
  {
    "text": "lambda functions what you can do is just as you can figure lambda function you can click an enable on x-ray and then",
    "start": "534690",
    "end": "540990"
  },
  {
    "text": "will automatically start monitoring it and you can go and do a distributor trace of your lambda function but you",
    "start": "540990",
    "end": "546120"
  },
  {
    "text": "could say plug in x-ray into other services and languages as well and then",
    "start": "546120",
    "end": "551459"
  },
  {
    "text": "we've got code commit so cou commit is our managed get service could build is a",
    "start": "551459",
    "end": "556709"
  },
  {
    "text": "service that you can use for both builds and tests and also most of my customers when they do testing and do things like",
    "start": "556709",
    "end": "563490"
  },
  {
    "text": "integration testing UI testing they're also using third-party tools for that a",
    "start": "563490",
    "end": "568699"
  },
  {
    "text": "lot as well and for deployment we've got a lot of different deployment services",
    "start": "568699",
    "end": "574410"
  },
  {
    "text": "so we've got elastic Beanstalk we've got ops work but today we'll be talking about code deploy and to kind of bring",
    "start": "574410",
    "end": "582029"
  },
  {
    "text": "all these things together we've got good pipeline so what code pipeline does is it orchestrates the movement of your",
    "start": "582029",
    "end": "588660"
  },
  {
    "text": "code to eventually going into production through all of these stages however you have them configured so code pipeline",
    "start": "588660",
    "end": "594990"
  },
  {
    "text": "will monitor your code repo as soon as there's a change it's gonna do a build",
    "start": "594990",
    "end": "601079"
  },
  {
    "text": "and code build it'll run some tests it'll do deploys to different environments and ultimately you'll have",
    "start": "601079",
    "end": "606810"
  },
  {
    "text": "an artifact that's in production and again how you can figure that which of these services you use which third-party",
    "start": "606810",
    "end": "612509"
  },
  {
    "text": "services is use that's all configurable in code pipeline so then we've got code",
    "start": "612509",
    "end": "619079"
  },
  {
    "text": "star could start is a really good service for getting started with these other services so let's say you just",
    "start": "619079",
    "end": "624569"
  },
  {
    "text": "want to kind of kick the tires try these services out you can go to code star it has a bunch of templates so you can for",
    "start": "624569",
    "end": "630870"
  },
  {
    "text": "example do a template that lets you you know pick a project that's built in node.js and it's going to use lambda",
    "start": "630870",
    "end": "637050"
  },
  {
    "text": "functions and so what it'll do is it'll spin up a code commit repo for you it'll set up a code pipeline it'll set up a",
    "start": "637050",
    "end": "642990"
  },
  {
    "text": "build it'll set up deploys so it'll take some combination of these services and within like five minutes get you up and",
    "start": "642990",
    "end": "649769"
  },
  {
    "text": "running on them so you can see how they work and you can see how the deployment works in it and code star also has a",
    "start": "649769",
    "end": "655620"
  },
  {
    "text": "built in wiki tile it has JIRA integration as well and it manages",
    "start": "655620",
    "end": "661410"
  },
  {
    "text": "members of your team so it's a great way to just kind of get started and play around with these services",
    "start": "661410",
    "end": "667620"
  },
  {
    "text": "outside of our developer tools which are the tools on the left side of the slide here we've got infrastructures Co tools",
    "start": "667620",
    "end": "674910"
  },
  {
    "start": "668000",
    "end": "668000"
  },
  {
    "text": "so CloudFormation right so cloud formation is basically write a JSON or Y",
    "start": "674910",
    "end": "680550"
  },
  {
    "text": "amel template and that defines your either base infrastructure so you know let's say you've got an app the apps",
    "start": "680550",
    "end": "686940"
  },
  {
    "text": "using load balancers and ec2 instances an auto scaling groups and RDS instances",
    "start": "686940",
    "end": "692040"
  },
  {
    "text": "and clapping distribution instead of manually setting all those things up you rate a CloudFormation template that",
    "start": "692040",
    "end": "697670"
  },
  {
    "text": "describes the infrastructure as code and then you can deploy off that template we've also got UPS works - UPS works is",
    "start": "697670",
    "end": "703380"
  },
  {
    "text": "basically managed chef or puppet for logging and monitoring there's cloud trail which is an audit",
    "start": "703380",
    "end": "709650"
  },
  {
    "text": "log of all your API actions there's cloud watch which we discussed x-ray which we discussed and AWS config which",
    "start": "709650",
    "end": "715680"
  },
  {
    "text": "I'll show you a use case of that here but a device config is basically like a CMDB like service so it records the",
    "start": "715680",
    "end": "721530"
  },
  {
    "text": "configuration of resources in your AWS account so you can go back in time and say what did this instance what security",
    "start": "721530",
    "end": "727860"
  },
  {
    "text": "groups was a connected to a tags that have at this moment in time so for any supported resources it stores all that",
    "start": "727860",
    "end": "734760"
  },
  {
    "text": "configuration information there so what you can do is translate this abstract",
    "start": "734760",
    "end": "741420"
  },
  {
    "start": "737000",
    "end": "737000"
  },
  {
    "text": "release process into code pipeline so even if you're not using code pipeline",
    "start": "741420",
    "end": "746940"
  },
  {
    "text": "like if using an open source tool like Jenkins where the pipeline's plug-in or using something else you can translate",
    "start": "746940",
    "end": "752910"
  },
  {
    "text": "this into whatever you're using today but I'm gonna use code pipeline since that's the service I use most of the",
    "start": "752910",
    "end": "759000"
  },
  {
    "text": "time and so these stages map into different stages and could pipeline so",
    "start": "759000",
    "end": "766290"
  },
  {
    "text": "this whole thing here this is the pipeline and code pipeline and then we've got distinct stages so there's a",
    "start": "766290",
    "end": "773490"
  },
  {
    "text": "source stage a build stage and integration stage in a production stage and again how you define these totally",
    "start": "773490",
    "end": "780300"
  },
  {
    "text": "up to you and then within each stage you can have multiple actions so you're gonna have sequential actions like",
    "start": "780300",
    "end": "786330"
  },
  {
    "text": "what's here and you can also have parallel actions as well and these",
    "start": "786330",
    "end": "792000"
  },
  {
    "text": "actions are what actually trigger events that happen in your pipeline and then",
    "start": "792000",
    "end": "797070"
  },
  {
    "text": "we've got transitions so when one stage is done when all the actions that are done if they're all",
    "start": "797070",
    "end": "803399"
  },
  {
    "text": "successful it'll transition to the next stage and you can disable these transitions as well so if you know",
    "start": "803399",
    "end": "810060"
  },
  {
    "text": "you've got like a if you've got to fully automate a deploy without manual approvals and your testings not quite working and you know you don't want your",
    "start": "810060",
    "end": "816779"
  },
  {
    "text": "code to get to production you can disable the transition to production and then you can keep debugging it in your",
    "start": "816779",
    "end": "822329"
  },
  {
    "text": "test environments until everything's stable then you can re-enable the transition to production but until you do that if the transition is disabled",
    "start": "822329",
    "end": "829230"
  },
  {
    "text": "they won't go on to the next stage so let's see how this works we create a",
    "start": "829230",
    "end": "836120"
  },
  {
    "text": "revision that's a change and they'll run through all of these stages and actions",
    "start": "836120",
    "end": "841350"
  },
  {
    "text": "and assuming it works it gets to the end and the pipeline run is considered successful so let's look at the starting",
    "start": "841350",
    "end": "848490"
  },
  {
    "start": "846000",
    "end": "846000"
  },
  {
    "text": "point here so our pipeline is configured to use code deploy to deploy to three",
    "start": "848490",
    "end": "856079"
  },
  {
    "text": "hosts so using the cou deploy defaults will deploy to production one host at a",
    "start": "856079",
    "end": "861839"
  },
  {
    "text": "time in this example we have three hosts in each AZ so we're using code deploy",
    "start": "861839",
    "end": "867740"
  },
  {
    "text": "we've got three hosts and we're deploying to them why are we doing one",
    "start": "867740",
    "end": "873209"
  },
  {
    "text": "host at a time well since its production I don't want a bad deployment to",
    "start": "873209",
    "end": "879600"
  },
  {
    "text": "automatically deploy to all three of my hosts and then cause downtime so if I do one who deploy to one host check that",
    "start": "879600",
    "end": "886949"
  },
  {
    "text": "it's healthy validate go on to the next host gone to the next host then I can be sure I have healthy hosts that are",
    "start": "886949",
    "end": "892680"
  },
  {
    "text": "serving traffic if I don't do that I could experience an outage we also have",
    "start": "892680",
    "end": "898139"
  },
  {
    "text": "each host into an availability zone why do we do that well if there's some kind",
    "start": "898139",
    "end": "903240"
  },
  {
    "text": "of service issue there's a flood the same Virginia and one of the",
    "start": "903240",
    "end": "909029"
  },
  {
    "text": "availability zones goes down well you've still got hosts on the other two availability zones and I having three",
    "start": "909029",
    "end": "914310"
  },
  {
    "text": "hosts and one availability zone cost the same amount of money as having three hosts in three availability zones so",
    "start": "914310",
    "end": "920550"
  },
  {
    "text": "just use three availability zones and we're gonna keep modifying the slide through this presentation trying to go",
    "start": "920550",
    "end": "926370"
  },
  {
    "text": "through all these stages so if you would like to dive deeper into we're gonna be",
    "start": "926370",
    "end": "932010"
  },
  {
    "text": "talking about doing this kind of with instant ec2 instances but if you dive deeper into doing this with",
    "start": "932010",
    "end": "937110"
  },
  {
    "text": "containers and server lists there's a talk tomorrow called CI cd4 containers a way forward for DevOps pipeline and it",
    "start": "937110",
    "end": "944190"
  },
  {
    "text": "talks about how to use code some of these code services for containers and also for service and if you don't check",
    "start": "944190",
    "end": "951870"
  },
  {
    "text": "YouTube for dev 3:09 - r is a really good talk from reinvent but by one of",
    "start": "951870",
    "end": "957810"
  },
  {
    "text": "our principal engineers and it talks again about deploying to service and",
    "start": "957810",
    "end": "962940"
  },
  {
    "text": "containerized applications and it should be on youtube so you can see the whole video you can give the slides on SlideShare so let's talk about",
    "start": "962940",
    "end": "971630"
  },
  {
    "text": "automation here so an automated pipeline",
    "start": "971630",
    "end": "976680"
  },
  {
    "start": "974000",
    "end": "974000"
  },
  {
    "text": "what does that actually mean that means that the actual pipeline itself is defined as code so in terms of a Debus",
    "start": "976680",
    "end": "984870"
  },
  {
    "text": "code pipeline that means that you've got a CloudFormation template that defines your actual pipeline that pipelines",
    "start": "984870",
    "end": "992430"
  },
  {
    "text": "should be checked into your version control repo so you've got your CloudFormation template you're storing",
    "start": "992430",
    "end": "998160"
  },
  {
    "text": "it in a code repo such as code commit so you're treating your actual infrastructure as a piece of code you",
    "start": "998160",
    "end": "1006770"
  },
  {
    "text": "can use this pipeline with both ADB of services so you know could deploy it",
    "start": "1006770",
    "end": "1012470"
  },
  {
    "text": "could build all the stuff I talked about but also third-party services so if you've got you know a third party",
    "start": "1012470",
    "end": "1019190"
  },
  {
    "text": "loading service or load testing service or your you need to trigger a security test you want to be able to trigger that",
    "start": "1019190",
    "end": "1025790"
  },
  {
    "text": "from your pipeline you want to be able to get really fast feedback and if the pipeline pastor failed so the developer",
    "start": "1025790",
    "end": "1033020"
  },
  {
    "text": "that's pushing code they should be able to see and get alerts on did my deploys complete successfully or not and if not",
    "start": "1033020",
    "end": "1041000"
  },
  {
    "start": "1041000",
    "end": "1041000"
  },
  {
    "text": "why so I'll put other opportunities for automation all of your continuous",
    "start": "1041000",
    "end": "1047990"
  },
  {
    "text": "integration processes so your builds your integration tests your UI tests your security tests this should all be",
    "start": "1047990",
    "end": "1054440"
  },
  {
    "text": "automated so for example there's talk of years at reinvent from one of our service teams about how they integrate",
    "start": "1054440",
    "end": "1061690"
  },
  {
    "text": "or they automate UI testing and it was using some open source UI testing suite",
    "start": "1061690",
    "end": "1067640"
  },
  {
    "text": "that I rather than a love for security testing we'll talk about that in a second how you can automate that for a build you",
    "start": "1067640",
    "end": "1074090"
  },
  {
    "text": "can use something that could build for integration tests could pipeline both supports for you can do something that",
    "start": "1074090",
    "end": "1079970"
  },
  {
    "text": "could build or you can do something with Jenkins for example you also want to automate your health checks right so you",
    "start": "1079970",
    "end": "1085009"
  },
  {
    "text": "want to be able to see is my application or healthy or not after each stage of the deploy automatically your",
    "start": "1085009",
    "end": "1091759"
  },
  {
    "text": "application tests so synthetic user tests application performance monitoring",
    "start": "1091759",
    "end": "1096830"
  },
  {
    "text": "you can get some of this from x-ray but most of my customers also use a partner solution like New Relic or data dog or",
    "start": "1096830",
    "end": "1104450"
  },
  {
    "text": "app dynamics or something of that sort to do API monitoring and you want to have notifications and alerts for when",
    "start": "1104450",
    "end": "1110749"
  },
  {
    "text": "both things go badly and for when things go well so you want to have your cloud watch alarms configured on your",
    "start": "1110749",
    "end": "1115759"
  },
  {
    "text": "deployments and you want to also probably use some kind of third-party tools so again Splunk is really common",
    "start": "1115759",
    "end": "1121220"
  },
  {
    "text": "one data dogs are really common one and you can wire these alerts and notifications up with SNS so as soon",
    "start": "1121220",
    "end": "1127399"
  },
  {
    "text": "esas our simple notification service so that could give you push alerts on your phone it gave an SMS text message it",
    "start": "1127399",
    "end": "1133369"
  },
  {
    "text": "could give you an email so you can't figure different consumers of that notification service a lot of my",
    "start": "1133369",
    "end": "1138830"
  },
  {
    "text": "customers have their alerts hooked up to something like slack or other kinds of a",
    "start": "1138830",
    "end": "1144710"
  },
  {
    "text": "chat services and we'll talk about how to do that and also paid your duties so some things down you gotta wake some",
    "start": "1144710",
    "end": "1151850"
  },
  {
    "text": "people up at night something like pager duty is a great tool for that so let's talk about how to",
    "start": "1151850",
    "end": "1158779"
  },
  {
    "start": "1157000",
    "end": "1157000"
  },
  {
    "text": "do our builds and tests so each commit to your source code repository is gonna trigger a new pipeline run right so the",
    "start": "1158779",
    "end": "1165169"
  },
  {
    "text": "the pipeline is looking at in this example the code commit repo and it's waiting for a new build so you trigger your pipeline on a source",
    "start": "1165169",
    "end": "1172669"
  },
  {
    "text": "change that'll automatically trigger this whole pipeline to be run so the",
    "start": "1172669",
    "end": "1177679"
  },
  {
    "text": "first stage that runs after the the source is the building unit tests so in",
    "start": "1177679",
    "end": "1182899"
  },
  {
    "text": "this example we're doing that in could build so could build just spins up a temporary docker container and runs",
    "start": "1182899",
    "end": "1188690"
  },
  {
    "text": "whatever commands you tell it to run so you can integrate it with your existing test suite you can kind of do whatever",
    "start": "1188690",
    "end": "1195230"
  },
  {
    "text": "you want there and then you deploy to an integration environment so",
    "start": "1195230",
    "end": "1201620"
  },
  {
    "text": "this is using code deploy you probably have a set of instances those instances are in a set in it in an integration",
    "start": "1201620",
    "end": "1208640"
  },
  {
    "text": "environment it's very similar to production but it's not production and then you are running integration tests",
    "start": "1208640",
    "end": "1215539"
  },
  {
    "text": "so you do things like I want to see how those web app that I'm building looks on",
    "start": "1215539",
    "end": "1220610"
  },
  {
    "text": "Chrome and I want to see how it looks on different versions of Chrome so for example you can use a selenium for that",
    "start": "1220610",
    "end": "1227270"
  },
  {
    "text": "which is an open source tool and you can you can trigger that selenium to be run in code build and then you might have a",
    "start": "1227270",
    "end": "1234529"
  },
  {
    "text": "custom integration test and so that lets say that's a lambda function right so lambda function you can put any kind of",
    "start": "1234529",
    "end": "1240409"
  },
  {
    "text": "code you want in it so we're going to write a custom lambda function and we're gonna trigger it with code pipeline so",
    "start": "1240409",
    "end": "1247840"
  },
  {
    "start": "1247000",
    "end": "1247000"
  },
  {
    "text": "one thing that's important again we want to be notified when a when a build fails",
    "start": "1247840",
    "end": "1254929"
  },
  {
    "text": "right so we're deploying a change it turns out that this change is broken in",
    "start": "1254929",
    "end": "1261649"
  },
  {
    "text": "one of our versions of Chrome so what do we do how do we find how do we get alerted on that so could pipeline is",
    "start": "1261649",
    "end": "1268220"
  },
  {
    "text": "integrated with cloud watch events so every time if you set up cloud watch events with you with your pipeline you",
    "start": "1268220",
    "end": "1274520"
  },
  {
    "text": "can get almost instant notification that your pipeline has failed once that's failed you can take your cloud watch",
    "start": "1274520",
    "end": "1280730"
  },
  {
    "text": "event and you can trigger a lambda function off of it so you can write a lambda function or I'm sure you can find",
    "start": "1280730",
    "end": "1285799"
  },
  {
    "text": "one if you search it on just on github that will alert you on slack so your",
    "start": "1285799",
    "end": "1292159"
  },
  {
    "text": "engineers they're sitting on the slack channel and they get a notification hey this bill failed so they know",
    "start": "1292159",
    "end": "1298220"
  },
  {
    "text": "immediately that it failed they then trigger another change and now they've broken something else so it's",
    "start": "1298220",
    "end": "1304970"
  },
  {
    "text": "even earlier in the build and that so all of these will trigger the same cloud watch event so they can trigger the same",
    "start": "1304970",
    "end": "1310429"
  },
  {
    "text": "lambda function to notify you that the build has failed now you can also trigger cloud watch events if the build",
    "start": "1310429",
    "end": "1315799"
  },
  {
    "text": "has succeeded so if you want notifications for when it's exceeded as well you can do that to you let's talk",
    "start": "1315799",
    "end": "1321740"
  },
  {
    "text": "about integrating security testing in your pipelines so you want to automate",
    "start": "1321740",
    "end": "1328070"
  },
  {
    "start": "1325000",
    "end": "1325000"
  },
  {
    "text": "as much of your security testing as possible when you're deploying to production and then you check after the fact and you have someone manually check",
    "start": "1328070",
    "end": "1334640"
  },
  {
    "text": "it nealy scan your code a your sort your codes ready in production so there's a",
    "start": "1334640",
    "end": "1340340"
  },
  {
    "text": "risk of you know even if someone finds something it'll be after the fact that the bad guys can find it first right so",
    "start": "1340340",
    "end": "1346670"
  },
  {
    "text": "you don't want that you want to and also if you're doing your security testing before you go to production and it's manual you might be slowing down your",
    "start": "1346670",
    "end": "1353720"
  },
  {
    "text": "your code actually getting to production so that's bad right so what you want to do is you want to integrate your security testing a you want to automated",
    "start": "1353720",
    "end": "1359809"
  },
  {
    "text": "B you want to integrate it into your pipeline so you want to have an action in your pipeline somewhere that triggers",
    "start": "1359809",
    "end": "1365780"
  },
  {
    "text": "a security test so if your pipeline is producing Amazon machine images or",
    "start": "1365780",
    "end": "1371030"
  },
  {
    "text": "docker containers what you can do in your pipeline is you can use tools like Amazon the inspector or open source",
    "start": "1371030",
    "end": "1378620"
  },
  {
    "text": "tools for containers like Claire or a commercial tool like twist lock and so what these tools do is you can spin up a",
    "start": "1378620",
    "end": "1385820"
  },
  {
    "text": "version of the container for example you just built you can scan it and you can wait for it to finish scanning and you",
    "start": "1385820",
    "end": "1391610"
  },
  {
    "text": "can see okay this is this container image is fine or it's not fine and you continue or stop your pipeline based on",
    "start": "1391610",
    "end": "1398419"
  },
  {
    "text": "that result same thing with the Ami's you spin up in uc2 instance you run an amazon inspector scan on it you wait for",
    "start": "1398419",
    "end": "1404419"
  },
  {
    "text": "the assessment to finish and if it passes great if it fails you stop it",
    "start": "1404419",
    "end": "1409580"
  },
  {
    "text": "from ever getting to production also if you're using any other kind of tool and it has an api that means you can build a",
    "start": "1409580",
    "end": "1416870"
  },
  {
    "text": "custom lambda action to trigger that tool from code pipeline you get you have the lambda function wait for the tool to",
    "start": "1416870",
    "end": "1423710"
  },
  {
    "text": "finish executing you fetch the result and you issue a pass or fail in your pipeline based on that so again if any",
    "start": "1423710",
    "end": "1430669"
  },
  {
    "text": "of these security tests fail and you have an integrator properly you can make sure that anything that fails the",
    "start": "1430669",
    "end": "1436340"
  },
  {
    "text": "security test does not make it to production so let's take a look at how this looks like so one other thing is fairly new aside",
    "start": "1436340",
    "end": "1443690"
  },
  {
    "start": "1439000",
    "end": "1439000"
  },
  {
    "text": "from github and code commit you can actually use ECR which is our elastic container registry as a source code as a",
    "start": "1443690",
    "end": "1451520"
  },
  {
    "text": "source stage in code pipeline so you got a one pipeline that builds your docker container and you can then when that",
    "start": "1451520",
    "end": "1460490"
  },
  {
    "text": "docker container is dropped into ECR with a certain tag that can trigger another pipeline then deploys that",
    "start": "1460490",
    "end": "1465980"
  },
  {
    "text": "continue so in this example I've my my app right so I've gotten a new",
    "start": "1465980",
    "end": "1473880"
  },
  {
    "text": "instead of source change I've got a new docker container that's been dropped here this triggers a security test so I",
    "start": "1473880",
    "end": "1480120"
  },
  {
    "text": "have a lambda function that lambda function triggers clear which is again this open source container testing",
    "start": "1480120",
    "end": "1485490"
  },
  {
    "text": "framework and then I'm gonna deploy to my integration environment and deploy to",
    "start": "1485490",
    "end": "1492510"
  },
  {
    "text": "my do of my test just like I did last time right so I'm gonna execute my UI test X you get my integration tests and",
    "start": "1492510",
    "end": "1498390"
  },
  {
    "text": "everything's great so and it's the same situation if this fails it's just gonna",
    "start": "1498390",
    "end": "1504360"
  },
  {
    "start": "1499000",
    "end": "1499000"
  },
  {
    "text": "trigger my it's not watch event trigger my lambda function and then find me in slack so I'll know I need to change what",
    "start": "1504360",
    "end": "1511530"
  },
  {
    "text": "version of some package that's insecure in my docker container so if you're",
    "start": "1511530",
    "end": "1517500"
  },
  {
    "text": "building Amazon machine images similar search story so I've got my code for my application and could commit I've got",
    "start": "1517500",
    "end": "1525510"
  },
  {
    "text": "I'm triggering on a source code change so then I can use code build and so",
    "start": "1525510",
    "end": "1531870"
  },
  {
    "text": "could build is going to build my MI and we've got a blog post on that I'll show you the URL in a second on how to do",
    "start": "1531870",
    "end": "1537420"
  },
  {
    "text": "that so you're gonna build your ami you're gonna launch a test instance with a lambda function that lambda function",
    "start": "1537420",
    "end": "1543510"
  },
  {
    "text": "then triggers an inspector run so you've got a version of that instance running",
    "start": "1543510",
    "end": "1548940"
  },
  {
    "text": "with that mi that you just built you wait for you wait for it to finish you",
    "start": "1548940",
    "end": "1555720"
  },
  {
    "text": "kill the test instance and then baste it and then you know assuming everything",
    "start": "1555720",
    "end": "1561630"
  },
  {
    "text": "passes you go on to the next stage so if you want to learn how to build a mais we",
    "start": "1561630",
    "end": "1569280"
  },
  {
    "text": "have a really good blog post on using packer which is an open source tool and AWS could build also a really nice thing",
    "start": "1569280",
    "end": "1576510"
  },
  {
    "text": "is so if you just need to run for a security test like any either base CLI",
    "start": "1576510",
    "end": "1581850"
  },
  {
    "text": "command or any bash command ring kind of shell command you can actually do that so and could build and you know you",
    "start": "1581850",
    "end": "1588510"
  },
  {
    "text": "literally just give it commands to run and in code in lambda you can now do",
    "start": "1588510",
    "end": "1594210"
  },
  {
    "text": "custom runtimes I'm sure you can find a runtime that's running bash or zsh or whatever your shell of choices and then",
    "start": "1594210",
    "end": "1600060"
  },
  {
    "text": "just run any kind of arbitrary bash command so you know for example here I've got a",
    "start": "1600060",
    "end": "1605690"
  },
  {
    "text": "really simple security test right it's a compliance test so I've got my code and could commit I've got this compliance",
    "start": "1605690",
    "end": "1616760"
  },
  {
    "text": "test so it's gonna run a test and code build and my code in this case is Python and what I'm doing is I'm making sure",
    "start": "1616760",
    "end": "1623600"
  },
  {
    "text": "that the in the requirements that txt file visits a Python package it's only using my Python modules that I approve",
    "start": "1623600",
    "end": "1630320"
  },
  {
    "text": "of so if that passes I'll do a deploy so",
    "start": "1630320",
    "end": "1635600"
  },
  {
    "text": "what that looks like it's something as simple as this so basically I'm comparing a whitelist a txt file which is a wait list of approved Python",
    "start": "1635600",
    "end": "1641930"
  },
  {
    "text": "modules with the requirements that takes T file which is what they're crimes from my Python script R and if they don't",
    "start": "1641930",
    "end": "1648500"
  },
  {
    "text": "match it'll fail out that'll cause the code build project to fail which will cause this not to get deployed to the",
    "start": "1648500",
    "end": "1655070"
  },
  {
    "text": "next stage so you can do something as simple as this really easily with both code build you could also I'm sure do it",
    "start": "1655070",
    "end": "1661250"
  },
  {
    "text": "with lambda as well so just to summarize some security tools options out there so",
    "start": "1661250",
    "end": "1668240"
  },
  {
    "start": "1666000",
    "end": "1666000"
  },
  {
    "text": "for containers these are the ones that I've had experience with Claire is an open source option twistlock is a",
    "start": "1668240",
    "end": "1676060"
  },
  {
    "text": "proprietary option for scanning instances Amazon inspector is really good for J any kind of custom testing",
    "start": "1676060",
    "end": "1684200"
  },
  {
    "text": "that doesn't fall under this again could build and lambda or both great so let's",
    "start": "1684200",
    "end": "1690290"
  },
  {
    "text": "talk about the next best practice here so making sure that your deployments are actually healthy right so what you're",
    "start": "1690290",
    "end": "1696620"
  },
  {
    "text": "deploying is actually functional code that returns what it's supposed to return so we're going to build this on top of our foundation of automation and",
    "start": "1696620",
    "end": "1705070"
  },
  {
    "start": "1700000",
    "end": "1700000"
  },
  {
    "text": "again this just verifies that what you're deploying is actually working so",
    "start": "1705310",
    "end": "1711460"
  },
  {
    "text": "an example of this that happened internally is one of our teams built a new service they were getting already",
    "start": "1711460",
    "end": "1717950"
  },
  {
    "text": "launched it and Suns dashboard reviews a standard step when we're preparing to",
    "start": "1717950",
    "end": "1724370"
  },
  {
    "text": "release a new service so in the review we noticed that the service was unavailable when we tried to the poetess test environment on a deeper inspection",
    "start": "1724370",
    "end": "1731720"
  },
  {
    "text": "we found out that after one deployment we had a database migration wasn't functioning properly like we",
    "start": "1731720",
    "end": "1737960"
  },
  {
    "text": "renamed the database table and spelled the name incorrectly and that caused the deployment to fail so the team",
    "start": "1737960",
    "end": "1747350"
  },
  {
    "text": "redeployed and they didn't think anything of the situation but during that deployment window they found that",
    "start": "1747350",
    "end": "1753650"
  },
  {
    "text": "not one host in their fleet was serving traffic they were completely down and so they should have had like a health check",
    "start": "1753650",
    "end": "1758870"
  },
  {
    "text": "and automated health check to check for this so we're trying to you know basically stop this kind of thing from",
    "start": "1758870",
    "end": "1764300"
  },
  {
    "text": "making it to production so let's when you're using code deploy let's say you",
    "start": "1764300",
    "end": "1770270"
  },
  {
    "text": "have you're using rolling deployments so here's what a successful deployment looks like so it's gonna go one instance",
    "start": "1770270",
    "end": "1778790"
  },
  {
    "text": "at a time and it's gonna update the version of the code in each of these instances you've got a fixed number of instances it's a version 2.0 so each",
    "start": "1778790",
    "end": "1786290"
  },
  {
    "text": "host is taken out of the load balancer while the host is updated and then it's placed back into the load balancer after",
    "start": "1786290",
    "end": "1792800"
  },
  {
    "text": "it's updated so this all works this is great everything's great right but the problem is what we want to avoid is this",
    "start": "1792800",
    "end": "1799940"
  },
  {
    "text": "kind of scenario upon failure so ruling deployments by themselves don't verify",
    "start": "1799940",
    "end": "1805280"
  },
  {
    "text": "that the application actually works and so what that means is you make a change that breaks things and you know have",
    "start": "1805280",
    "end": "1810440"
  },
  {
    "text": "proper testing you could find out that everything's broken because even our deployed code that's airing out two",
    "start": "1810440",
    "end": "1816950"
  },
  {
    "text": "productions and I you've deployed bad code and now from this point you have to rollback and so you've already had some",
    "start": "1816950",
    "end": "1822830"
  },
  {
    "text": "downtime at this point you want to avoid this situation so what you want to do as add safety to your rolling deployments",
    "start": "1822830",
    "end": "1829280"
  },
  {
    "start": "1825000",
    "end": "1825000"
  },
  {
    "text": "so for each hose that we deploy to we want to start up the application and just verify it's at the very least like",
    "start": "1829280",
    "end": "1834920"
  },
  {
    "text": "returning a two hundred or if so an OK code or you know better yet have like a",
    "start": "1834920",
    "end": "1840560"
  },
  {
    "text": "health check page built into your application and that health check page checks like the database health they're",
    "start": "1840560",
    "end": "1846950"
  },
  {
    "text": "connected database that everything works as it should and then it returns a two hundred and you can monitor for that so",
    "start": "1846950",
    "end": "1853040"
  },
  {
    "text": "we also want to configure our deployment to actually tolerate a small number of failures so if we're deploying to 20",
    "start": "1853040",
    "end": "1858950"
  },
  {
    "text": "instances and one of them fails that's probably okay all right it's probably just something wrong with that instance it's not a systemic issue so we want to",
    "start": "1858950",
    "end": "1865880"
  },
  {
    "text": "make sure that that's okay and that doesn't stop our deployment pipeline we also want to figure out if a",
    "start": "1865880",
    "end": "1872240"
  },
  {
    "text": "deployment fails we want to be able to automatically roll back to the previous version or stop this deployment to be to",
    "start": "1872240",
    "end": "1879740"
  },
  {
    "text": "actually make it you know before it can make it to production so again these are the steps that we're doing here so let's",
    "start": "1879740",
    "end": "1886730"
  },
  {
    "text": "take a look at how to do that so this is the app spec file this is a file that controls your could deploy",
    "start": "1886730",
    "end": "1892940"
  },
  {
    "text": "process and the EPS book file has lifecycle events so application start is",
    "start": "1892940",
    "end": "1898820"
  },
  {
    "text": "a life cycle event in the application start the way that works is it's just a shell script here and it's gonna start let's say your Apache or nginx web",
    "start": "1898820",
    "end": "1905059"
  },
  {
    "text": "server and then we've got a validate service life cycle event so the validate service life cycle event in this case it",
    "start": "1905059",
    "end": "1911330"
  },
  {
    "text": "could be something as simple as a shell script that just curls localhost right so the applications have been deployed at korells localhost and if it's a 200",
    "start": "1911330",
    "end": "1918350"
  },
  {
    "text": "great for turns an error code that will that stage will fail and it'll cause the deployment to fail so let's say we've",
    "start": "1918350",
    "end": "1927259"
  },
  {
    "text": "got this basic thing in there so now we're gonna do a deployment everything",
    "start": "1927259",
    "end": "1933230"
  },
  {
    "text": "looks good you have this validation in there oh one of my instances failed so",
    "start": "1933230",
    "end": "1939860"
  },
  {
    "text": "again in this case if we just by default don't you new settings this is gonna fail the whole deployment that's",
    "start": "1939860",
    "end": "1946490"
  },
  {
    "text": "probably not what we want because most of my instances have succeeded right so what we want to do is use something",
    "start": "1946490",
    "end": "1952460"
  },
  {
    "text": "called minimum and healthy hosts so in code deploy you can configure what is",
    "start": "1952460",
    "end": "1957740"
  },
  {
    "text": "considered a minimum of healthy host count so as long as you have let's say 70% of your hosts are healthy across ten",
    "start": "1957740",
    "end": "1964789"
  },
  {
    "text": "hosts you can one deployment is okay or what one bad deployments okay when too",
    "start": "1964789",
    "end": "1970399"
  },
  {
    "text": "bad deployments are okay so in this case this would now be considered a",
    "start": "1970399",
    "end": "1975590"
  },
  {
    "text": "successful deploy but if you had four failures that's over 40 percent right or",
    "start": "1975590",
    "end": "1983179"
  },
  {
    "text": "it is forty percent so then that's the fail deploy so you can set kind of what your safety threshold is there so if you",
    "start": "1983179",
    "end": "1989450"
  },
  {
    "text": "want to actually do that the way you do it is in code deploy you configure your configuration health and you can choose",
    "start": "1989450",
    "end": "1996200"
  },
  {
    "text": "that can the deploy config here and what you can do is the code deploy default ones the one at a time all at once",
    "start": "1996200",
    "end": "2003340"
  },
  {
    "text": "half at a time that's actually that's like how fast it deploys but you can do",
    "start": "2003340",
    "end": "2009160"
  },
  {
    "text": "a custom configuration so you can get in figure say I want two thirds of my fleet to be healthy at all times and you can",
    "start": "2009160",
    "end": "2015700"
  },
  {
    "text": "define that threshold so to do that you can use the CLI command and well basically what this does is it creates a",
    "start": "2015700",
    "end": "2023290"
  },
  {
    "text": "deployment config and it says the minimum healthy host has to be 66 percent of my total fleet so you can",
    "start": "2023290",
    "end": "2030070"
  },
  {
    "text": "customize what metrics you use for those the other thing you want to configure is rollbacks",
    "start": "2030070",
    "end": "2035980"
  },
  {
    "start": "2033000",
    "end": "2033000"
  },
  {
    "text": "right and this is assuming you're not doing a blue green to play so this is a built-in feature and code deploy and you",
    "start": "2035980",
    "end": "2041830"
  },
  {
    "text": "can say okay when the deployment fails just to automatically roll back to the old version so the way that this works",
    "start": "2041830",
    "end": "2051040"
  },
  {
    "text": "is you know we've got this it doesn't actually change anything about the release process it's just when it gets",
    "start": "2051040",
    "end": "2057040"
  },
  {
    "text": "the could deploy stage it's going to basically either pass or fail now based",
    "start": "2057040",
    "end": "2064000"
  },
  {
    "text": "on if your deployment actually works or not so in this case it passed we're good",
    "start": "2064000",
    "end": "2070510"
  },
  {
    "text": "to go to the next stage so let's talk about blue green deploys so the blue",
    "start": "2070510",
    "end": "2075970"
  },
  {
    "start": "2072000",
    "end": "2072000"
  },
  {
    "text": "greens employees work right is you've got two groups of instances so you've got your blue group which is what is",
    "start": "2075970",
    "end": "2082090"
  },
  {
    "text": "running right now and you've got your green group so your green group is a new set of instances that's spun up when you",
    "start": "2082090",
    "end": "2088030"
  },
  {
    "text": "do a deployment the new code is then deployed onto it and if there's a",
    "start": "2088030",
    "end": "2096159"
  },
  {
    "text": "failure is it gonna say oh this deployments bad but you're not actually",
    "start": "2096160",
    "end": "2102820"
  },
  {
    "text": "serving traffic out of the green group so this is a new set of instances they're spun up and your load bounce",
    "start": "2102820",
    "end": "2108670"
  },
  {
    "text": "you're still sending traffic to your old instances so this is great the deployment failed but I haven't lost",
    "start": "2108670",
    "end": "2113980"
  },
  {
    "text": "any capacity and I haven't had nothing I just have to fix my deployment but there's no impact to production here and",
    "start": "2113980",
    "end": "2119800"
  },
  {
    "text": "then if you have a successful deployment basically what happens is your",
    "start": "2119800",
    "end": "2125170"
  },
  {
    "text": "deployment goes through Oh everything's successful I've updated all my instance my new instances and my green group this",
    "start": "2125170",
    "end": "2131890"
  },
  {
    "text": "is marked a successful deployment and now I can shift traffic for my load balancer to my",
    "start": "2131890",
    "end": "2136960"
  },
  {
    "text": "in group so I've had zero downtime when I switch over I'm at full capacity on my",
    "start": "2136960",
    "end": "2142630"
  },
  {
    "text": "new group of instances and I can just terminate my old instances after I'm confident that my deployment is",
    "start": "2142630",
    "end": "2148450"
  },
  {
    "text": "successful so that's built in natively in code deploy so when you configure",
    "start": "2148450",
    "end": "2154150"
  },
  {
    "text": "your application could deploy you could just check Bluegreen ándale that's what it does under the hood to make that work",
    "start": "2154150",
    "end": "2159660"
  },
  {
    "text": "so let's talk about also deploying to one segment at a time so if you consider",
    "start": "2159660",
    "end": "2166990"
  },
  {
    "start": "2160000",
    "end": "2160000"
  },
  {
    "text": "your production to be one big pool then any bad change perfects all customers that's a really big blast radius and the",
    "start": "2166990",
    "end": "2174580"
  },
  {
    "text": "change could be a bad deployment could be somebody typing a command in that's you know by accident into the wrong",
    "start": "2174580",
    "end": "2181180"
  },
  {
    "text": "environment so you want to be able to catch these kind of issues before your",
    "start": "2181180",
    "end": "2186430"
  },
  {
    "text": "actual users of your application do and you want to be able to roll back really quickly with the least amount of impact",
    "start": "2186430",
    "end": "2191500"
  },
  {
    "text": "so we've actually learned this you know the hard way several times over the",
    "start": "2191500",
    "end": "2197260"
  },
  {
    "start": "2197000",
    "end": "2197000"
  },
  {
    "text": "course of our history and so what we what we do is we segment our deploys we",
    "start": "2197260",
    "end": "2202450"
  },
  {
    "text": "break production into multiple segments we deploy to a segment we test the",
    "start": "2202450",
    "end": "2208060"
  },
  {
    "text": "segment after a deployment and then we keep doing it until we deploy to everything that we have so these are",
    "start": "2208060",
    "end": "2213790"
  },
  {
    "text": "some typical segmentations that we do internally so the biggest segment is a region right so for abs you know for",
    "start": "2213790",
    "end": "2221349"
  },
  {
    "text": "example in the u.s. we've got a region Virginia we've got one in Ohio Oregon California then within each region we've",
    "start": "2221349",
    "end": "2229270"
  },
  {
    "text": "got availability zones right so we've got at least two availability zones in every region then within that zone you",
    "start": "2229270",
    "end": "2236740"
  },
  {
    "text": "can have a sub zonal group and then you can have a single host which is a canary",
    "start": "2236740",
    "end": "2242170"
  },
  {
    "text": "deploy so basically the one we deploy we start from the smallest segment here and go up and if something fails at any",
    "start": "2242170",
    "end": "2249670"
  },
  {
    "text": "point we can stop the deploy and roll back and you know ideally we catch it at the canary or sub zonal level before it",
    "start": "2249670",
    "end": "2256119"
  },
  {
    "text": "actually gets the whole easy or a whole region so if your deployment process",
    "start": "2256119",
    "end": "2262690"
  },
  {
    "start": "2259000",
    "end": "2259000"
  },
  {
    "text": "you've got one big pool again any bad deploy will take everything down so you don't want that so the first",
    "start": "2262690",
    "end": "2269020"
  },
  {
    "text": "thing to do is a canary deployment so canary deployment again is just one instance and you break it down and say",
    "start": "2269020",
    "end": "2275410"
  },
  {
    "text": "ZZZ and then you do your pose deployment tests so I I'm deploying on my canary",
    "start": "2275410",
    "end": "2281050"
  },
  {
    "text": "instance this instance is in production but they're just one standalone instance so I deployed to it I do a test",
    "start": "2281050",
    "end": "2288810"
  },
  {
    "text": "everything's as expected I'm then gonna deploy it to my first AZ everything went",
    "start": "2288810",
    "end": "2295990"
  },
  {
    "text": "well here to another test I'm going to deploy to my other AZ's now everything's",
    "start": "2295990",
    "end": "2301810"
  },
  {
    "text": "successful and then I can go on to repeat the same steps in the next region",
    "start": "2301810",
    "end": "2308370"
  },
  {
    "text": "so what could deploy allows you to do is you can segment your deployment groups",
    "start": "2308370",
    "end": "2315400"
  },
  {
    "text": "by tags them by auto scaling groups so if you've got an auto scaling group you",
    "start": "2315400",
    "end": "2320590"
  },
  {
    "text": "can deploy it so you can have an auto scaling group for example per AZ or you can have just tags however you want them",
    "start": "2320590",
    "end": "2326500"
  },
  {
    "text": "to so when you're configuring your deployment in code deploy you can specify either your auto scan group or",
    "start": "2326500",
    "end": "2333400"
  },
  {
    "text": "your ec2 instance tags so you deploy to the smallest segment then you have a",
    "start": "2333400",
    "end": "2341260"
  },
  {
    "text": "test then you deploy to the AZ number one in geo test then you deploy to the",
    "start": "2341260",
    "end": "2347110"
  },
  {
    "text": "remaining AZ's and then you repeat it for other regions so test each segment",
    "start": "2347110",
    "end": "2356170"
  },
  {
    "start": "2354000",
    "end": "2354000"
  },
  {
    "text": "so deployment should be valid if you've gathered enough data to make sure that the deployments successful if you",
    "start": "2356170",
    "end": "2362080"
  },
  {
    "text": "haven't had any alarms fire your tests haven't timed out and so you can extend",
    "start": "2362080",
    "end": "2368860"
  },
  {
    "start": "2366000",
    "end": "2366000"
  },
  {
    "text": "code pipeline with custom test actions and lambda and VOC actions and custom",
    "start": "2368860",
    "end": "2374680"
  },
  {
    "text": "actions which are running on ec2 instances so all of these have a one-hour time out so if you configure a",
    "start": "2374680",
    "end": "2380200"
  },
  {
    "text": "custom test with lambda it'll timeout after an hour if it hasn't gotten a result and if you haven't a manual",
    "start": "2380200",
    "end": "2386110"
  },
  {
    "text": "approval that'll timeout after a week so you can also use approvals to trigger",
    "start": "2386110",
    "end": "2392230"
  },
  {
    "text": "tests so for example this is typically a manual approval but you can actually automate it so my when I get it to the",
    "start": "2392230",
    "end": "2398770"
  },
  {
    "text": "approval stage that can be hooked up to an SNS topic the SNS topic can have a lambda function",
    "start": "2398770",
    "end": "2404260"
  },
  {
    "text": "a subscriber of it that lambda function can then look at the it can inspect the",
    "start": "2404260",
    "end": "2409360"
  },
  {
    "text": "metrics that it needs so again this is my configuration of my manual approval that's my SNS topic these are my actual",
    "start": "2409360",
    "end": "2418480"
  },
  {
    "text": "metrics that I care about and I've configured so so it's looking at it",
    "start": "2418480",
    "end": "2424150"
  },
  {
    "text": "wants to 120 metrics basically and it wants the maximum title those metrics to",
    "start": "2424150",
    "end": "2429520"
  },
  {
    "text": "be two seconds so I've got a I've got a change I'm pushing goes to that stage",
    "start": "2429520",
    "end": "2435210"
  },
  {
    "text": "this kicks off this lambda function the lambda functions writing results inside",
    "start": "2435210",
    "end": "2440590"
  },
  {
    "text": "DynamoDB table and I have another lambda function that it's kicked off by that DynamoDB table and it evaluates whatever",
    "start": "2440590",
    "end": "2447730"
  },
  {
    "text": "metrics I care about and say it'll say okay I'm looking at these CloudWatch",
    "start": "2447730",
    "end": "2455080"
  },
  {
    "text": "metrics about you know how much latency is triggered by this new deployment and",
    "start": "2455080",
    "end": "2460510"
  },
  {
    "text": "if it's under the time that I need it successful if it's over the time that I'm looking for it fails the function",
    "start": "2460510",
    "end": "2466660"
  },
  {
    "text": "and it doesn't get approved so let's say everything goes well it triggers the",
    "start": "2466660",
    "end": "2473530"
  },
  {
    "text": "approval process and goes on to deploy into production so this function for",
    "start": "2473530",
    "end": "2479740"
  },
  {
    "text": "example this is a node so again this just rights to document their rights to",
    "start": "2479740",
    "end": "2488110"
  },
  {
    "text": "dynamo dynamodb table and then writes data right and my lambda function here",
    "start": "2488110",
    "end": "2495450"
  },
  {
    "text": "it's basically looking at that data and when it hits whatever the metrics are",
    "start": "2495450",
    "end": "2503650"
  },
  {
    "text": "it'll go in and approve my manual approval so this code is on you can find",
    "start": "2503650",
    "end": "2509560"
  },
  {
    "text": "it on github by the way so let's talk about Canary deployments so Canary deployments there again it's a regular",
    "start": "2509560",
    "end": "2516040"
  },
  {
    "text": "production host it participates in serving production traffic but a canary",
    "start": "2516040",
    "end": "2521410"
  },
  {
    "text": "deployment also has its own metric system right because if you have one instance that's a canary in sense and",
    "start": "2521410",
    "end": "2526900"
  },
  {
    "text": "you have ten total instances you don't to look at the instances that are the metrics of all the instances does that",
    "start": "2526900",
    "end": "2532780"
  },
  {
    "text": "I'll actually throw off the metrics of the gist the canary instance so you want to look at for example cloud watch metrics just that canary instance and you want to",
    "start": "2532780",
    "end": "2540490"
  },
  {
    "text": "determine based on that if your deployment your canary deployment is successful or not so again just a",
    "start": "2540490",
    "end": "2547240"
  },
  {
    "start": "2541000",
    "end": "2541000"
  },
  {
    "text": "summary you want to segment your production to reduce the impact of a bad change you want to do minimum",
    "start": "2547240",
    "end": "2553870"
  },
  {
    "text": "segmentation so ideally at least separate segments by region and do a",
    "start": "2553870",
    "end": "2560710"
  },
  {
    "text": "canary deployment before you go to a full region even better than that you'll buy availability zone and even better",
    "start": "2560710",
    "end": "2567130"
  },
  {
    "text": "than that do sub availability zones so make sure you test each segment before going on so let's talk also about",
    "start": "2567130",
    "end": "2573700"
  },
  {
    "text": "deploying into multiple regions so in November of 2018 we came out with a new feature in code pipeline allows you to",
    "start": "2573700",
    "end": "2579940"
  },
  {
    "text": "deploy to multiple regions and also trigger multiple actions from different accounts from a single pipeline so if",
    "start": "2579940",
    "end": "2586840"
  },
  {
    "text": "you're in multiple regions you could do that because you want to have lower latency so you have customers for your",
    "start": "2586840",
    "end": "2592360"
  },
  {
    "text": "product across the world so you want to deploy your app all over the place to be closer to your customers or you want",
    "start": "2592360",
    "end": "2597580"
  },
  {
    "text": "great availability so if you're worried about a region going down you can deploy to multiple regions so if you're doing that it's basically taking our last",
    "start": "2597580",
    "end": "2605130"
  },
  {
    "text": "pipeline and we're adding on the same steps let me go back here for a second we're adding on the same steps but for",
    "start": "2605130",
    "end": "2611440"
  },
  {
    "text": "region 1 2 & 3 at the end the last thing",
    "start": "2611440",
    "end": "2616780"
  },
  {
    "text": "I'm going to talk about here basically is how now how do we make sure so we've got all these best practices for our",
    "start": "2616780",
    "end": "2622240"
  },
  {
    "text": "pipelines how do we make sure that they're being followed so you've got a big organization developers are",
    "start": "2622240",
    "end": "2629110"
  },
  {
    "text": "following a DevOps model they're doing their own pipelines so you want to make",
    "start": "2629110",
    "end": "2634150"
  },
  {
    "text": "sure that new pipelines as they're created they follow best practices so",
    "start": "2634150",
    "end": "2639400"
  },
  {
    "text": "for example you have a test stage before you go to production whatever your best practices are so",
    "start": "2639400",
    "end": "2644560"
  },
  {
    "text": "anyone do this because you want to minimize their risk of downtime right",
    "start": "2644560",
    "end": "2649750"
  },
  {
    "text": "because downtime could cause reputation loss it could cause financial loss and so what you want to do is leverage a de",
    "start": "2649750",
    "end": "2655030"
  },
  {
    "text": "base config to ensure your pipeline compliance so let me show you how that works so you can build a configural that",
    "start": "2655030",
    "end": "2662770"
  },
  {
    "start": "2660000",
    "end": "2660000"
  },
  {
    "text": "it alerts when your pipelines aren't configured to your best practices and the other thing you can do is you can",
    "start": "2662770",
    "end": "2669730"
  },
  {
    "text": "just build a pipeline which only pushes to production which blocks pushes to production when your pipeline",
    "start": "2669730",
    "end": "2675610"
  },
  {
    "text": "isn't compliant so you can use an approval process for that and you can have a lambda function that looks at the",
    "start": "2675610",
    "end": "2681400"
  },
  {
    "text": "pipeline and figures out if the pipeline is compliant or not so let's take a look first at the approval action based",
    "start": "2681400",
    "end": "2687670"
  },
  {
    "start": "2686000",
    "end": "2686000"
  },
  {
    "text": "pipeline safety check so we've got our pipeline and it eventually hits this manual approval process that goes to an",
    "start": "2687670",
    "end": "2694510"
  },
  {
    "text": "SMS topic that triggers a slam to function which is a safety check so that's going to look at a dubious config",
    "start": "2694510",
    "end": "2701700"
  },
  {
    "text": "it's going to check through config if the pipeline is compliant or not and if",
    "start": "2701700",
    "end": "2708490"
  },
  {
    "text": "it is it'll pass the check and we'll approve the change to production so let",
    "start": "2708490",
    "end": "2718690"
  },
  {
    "text": "me go here so the way you do this is so we've got config rules and configure",
    "start": "2718690",
    "end": "2725800"
  },
  {
    "start": "2719000",
    "end": "2719000"
  },
  {
    "text": "rules have built-in checks for pipelines so for example there's a built in check the checks that the first deployment",
    "start": "2725800",
    "end": "2732520"
  },
  {
    "text": "stage of code pipeline performs more than one deployment so you're deploying to more than one host so that's a built",
    "start": "2732520",
    "end": "2738520"
  },
  {
    "text": "in check you can also write your own custom configure rules based on whatever your compliance requirements are for",
    "start": "2738520",
    "end": "2744310"
  },
  {
    "text": "your pipeline so you create this pipeline and you wire it up through",
    "start": "2744310",
    "end": "2751630"
  },
  {
    "text": "cloud watch events so now I'm taking that check and I'm basically whenever you get triggered it's gonna fire off",
    "start": "2751630",
    "end": "2758680"
  },
  {
    "text": "the slammd a function called disable non-compliant pipeline so the way this works now is I don't have a special",
    "start": "2758680",
    "end": "2765040"
  },
  {
    "text": "stage in my pipeline I'm a developer I just build up my pipeline and a base can fig is monitoring my",
    "start": "2765040",
    "end": "2770560"
  },
  {
    "text": "pipeline from the outside and basically as soon as it detects that this pipeline",
    "start": "2770560",
    "end": "2776470"
  },
  {
    "text": "is not compliant it's gonna fire off that lambda function and it's just gonna push it's gonna disable the transition",
    "start": "2776470",
    "end": "2781840"
  },
  {
    "text": "to production so if I'm a developer until I fix my pipeline I can't push the production and I don't have to worry",
    "start": "2781840",
    "end": "2788350"
  },
  {
    "text": "about like manually adding this approval stage that I had to the last point this might be easier if you're managing a lot",
    "start": "2788350",
    "end": "2793690"
  },
  {
    "text": "of different pipelines for a lot of developers because if they're doing all the right things everything works and if they're not they're their push to",
    "start": "2793690",
    "end": "2799630"
  },
  {
    "text": "productions disabled so just to summarize here you want to use a book you can use config rules and",
    "start": "2799630",
    "end": "2805670"
  },
  {
    "start": "2801000",
    "end": "2801000"
  },
  {
    "text": "watch events to automatically remediate non-compliant pipelines you can also add a common action which checks per",
    "start": "2805670",
    "end": "2812569"
  },
  {
    "text": "pipeline compliance and aside from that what you want to do is provide your developers a best practice pipeline to",
    "start": "2812569",
    "end": "2819200"
  },
  {
    "text": "start with so instead of them figuring it out on their own you can give them a CloudFormation template that defines",
    "start": "2819200",
    "end": "2824390"
  },
  {
    "text": "what your best practice pipeline is they can spin that pipeline up and then change it accordingly to their needs to",
    "start": "2824390",
    "end": "2829730"
  },
  {
    "text": "whatever tools they're using you could also use do this in service catalog which is another one of our products and",
    "start": "2829730",
    "end": "2834799"
  },
  {
    "text": "something that's pretty new is you can use our cdk product so this isn't a it's still in preview so cdk is our cloud",
    "start": "2834799",
    "end": "2840710"
  },
  {
    "text": "developer kit and so it in you can do you can define base clean code what a",
    "start": "2840710",
    "end": "2846260"
  },
  {
    "text": "compliant best practices pipeline is for you and so what they then have to do cdk",
    "start": "2846260",
    "end": "2851900"
  },
  {
    "text": "supports a bunch of different languages but they can instantiate an instance of that pipeline based on whatever module",
    "start": "2851900",
    "end": "2858470"
  },
  {
    "text": "you built with your best practices in it in like a few lines of code instead of I having to spin up a whole CloudFormation",
    "start": "2858470",
    "end": "2863839"
  },
  {
    "text": "template again you can also use our approval actions and could pipeline to",
    "start": "2863839",
    "end": "2869000"
  },
  {
    "text": "implement this stuff so I've got two minutes left so I'm going to talk really quickly about a few more things you can",
    "start": "2869000",
    "end": "2876349"
  },
  {
    "text": "add even more safety to your pipeline with deployment gates so basically the",
    "start": "2876349",
    "end": "2883460"
  },
  {
    "text": "way that works is again this is typically throw lambda action let's say you've got periods of time where you",
    "start": "2883460",
    "end": "2890750"
  },
  {
    "text": "don't want to do any production deployers so for example for amazon.com you know when we have prime day there's",
    "start": "2890750",
    "end": "2897980"
  },
  {
    "text": "there's an emergency hot fix or something we probably don't want to do any deploys to production that day because it's a high-traffic day and I'm",
    "start": "2897980",
    "end": "2904519"
  },
  {
    "text": "sure when you're building your app you have days where you don't want to do too you want to deploy to production so you can build in the lambda function",
    "start": "2904519",
    "end": "2911180"
  },
  {
    "text": "basically checks against some calendar you have or some data source oh is this deployment going on during a",
    "start": "2911180",
    "end": "2917329"
  },
  {
    "text": "bad period and if it is I'm gonna fail and then it'll stop the pipeline from getting to production so that's another",
    "start": "2917329",
    "end": "2922430"
  },
  {
    "text": "common practice so just to summarize what we've learned you want to make your pipeline safer by identifying issues",
    "start": "2922430",
    "end": "2929630"
  },
  {
    "text": "with your pipeline quickly through continuous testing you want to get notifications if something passes or",
    "start": "2929630",
    "end": "2934759"
  },
  {
    "text": "even if it fails really quick and you want to be able to safely deploy so you want to manage deployment health",
    "start": "2934759",
    "end": "2941660"
  },
  {
    "text": "you want to see after deployment if it's successful or not and you want to segment your production deploy so you",
    "start": "2941660",
    "end": "2948410"
  },
  {
    "text": "want to deploy into small pieces and make sure all the pieces work and if you",
    "start": "2948410",
    "end": "2953600"
  },
  {
    "text": "want to improve latency and availability you can also deploy across multiple regions and if you want to make sure",
    "start": "2953600",
    "end": "2960410"
  },
  {
    "text": "that security you know is best practices are followed and combines best practices are followed you can implement features",
    "start": "2960410",
    "end": "2966470"
  },
  {
    "text": "to block non-compliant pipelines so at the end of the day what we're looking",
    "start": "2966470",
    "end": "2971570"
  },
  {
    "text": "for is all this stuff has succeeded we're deploying to production we're",
    "start": "2971570",
    "end": "2976880"
  },
  {
    "text": "testing and yeah we're doing a traffic test and everything's successful and so",
    "start": "2976880",
    "end": "2983450"
  },
  {
    "text": "the only code that gets to production is code that's verified from security from a load from an availability perspective",
    "start": "2983450",
    "end": "2989300"
  },
  {
    "text": "that's verified that it's successful so your users aren't exposed to failures so",
    "start": "2989300",
    "end": "2995450"
  },
  {
    "text": "that's what I had for you today please remember to complete the session survey",
    "start": "2995450",
    "end": "3000880"
  },
  {
    "text": "and thank you for your time and if you have any questions because it's a silent",
    "start": "3000880",
    "end": "3006370"
  },
  {
    "text": "disco format what I'm going to do is I'm going to go out there there's a meet the speaker area so I'll just hang out there",
    "start": "3006370",
    "end": "3012720"
  },
  {
    "text": "for like you know probably however long it takes to answer all your questions and just come ask me a question over",
    "start": "3012720",
    "end": "3019240"
  },
  {
    "text": "there thank you for your time [Applause]",
    "start": "3019240",
    "end": "3025760"
  }
]