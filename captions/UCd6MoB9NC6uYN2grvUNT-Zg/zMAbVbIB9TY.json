[
  {
    "text": "In this video, you’ll see how to create a \ncontinuous deployment pipeline using",
    "start": "480",
    "end": "4262"
  },
  {
    "text": "AWS Service Catalog products for CodePipeline\nand Amazon Elastic Container Service (Amazon ECS).",
    "start": "4262",
    "end": "10641"
  },
  {
    "text": "With this solution, you can leverage \nAWS reference architecture from GitHub",
    "start": "11440",
    "end": "15599"
  },
  {
    "text": "to easily set up a continuous integration \nand deployment (CI/CD) pipeline  ",
    "start": "15600",
    "end": "20320"
  },
  {
    "text": "that employs a container-based workflow.",
    "start": "20320",
    "end": "22380"
  },
  {
    "text": "We’ll begin from the GitHub repository that contains\nthe AWS Service Catalog reference architecture",
    "start": "23374",
    "end": "28466"
  },
  {
    "text": "for the CI/CD pipeline.",
    "start": "28466",
    "end": "30000"
  },
  {
    "text": "This diagram gives a quick overview \nof the reference architecture.",
    "start": "32890",
    "end": "35770"
  },
  {
    "text": "To install the reference architecture \nin your account, click Launch Stack.",
    "start": "38000",
    "end": "41485"
  },
  {
    "text": "A wizard will guide you through some setup steps. ",
    "start": "42160",
    "end": "44216"
  },
  {
    "text": "For demonstration purposes, we have already launched\nthe stack and set it up in our AWS account.",
    "start": "44898",
    "end": "49671"
  },
  {
    "text": "Let’s take a look. ",
    "start": "49976",
    "end": "50730"
  },
  {
    "text": "The reference architecture created a portfolio \nwith Service Catalog products needed",
    "start": "53280",
    "end": "57624"
  },
  {
    "text": "to create a full DevOps deployment pipeline\nfrom code to container deployment in Fargate.",
    "start": "57624",
    "end": "62098"
  },
  {
    "text": "It also provisioned an AWS Cloud9 IDE product.",
    "start": "63074",
    "end": "66375"
  },
  {
    "text": "The first product we’ll deploy is the\nContainer CodePipeline project,",
    "start": "67802",
    "end": "71344"
  },
  {
    "text": "which serves as the basis for\nthe container-based CI/CD workflow.",
    "start": "71344",
    "end": "74896"
  },
  {
    "text": "To do so, let’s launch the product\nthe way an end user would.",
    "start": "75254",
    "end": "78054"
  },
  {
    "text": "Let’s give our CodePipeline \ninstance a custom name.",
    "start": "80320",
    "end": "82720"
  },
  {
    "text": "We’ll retain the default \nvalues in the other fields.",
    "start": "83360",
    "end": "85661"
  },
  {
    "text": "Next, we’ll deploy the Cloud9 IDE instance \nin our portfolio so we can edit code",
    "start": "89200",
    "end": "93777"
  },
  {
    "text": "and push changes to the CodeCommit repository.",
    "start": "93777",
    "end": "96064"
  },
  {
    "text": "Users can, of course, choose to configure their own\nlocal development environment for this purpose.",
    "start": "97107",
    "end": "101368"
  },
  {
    "text": "Let’s obtain the Git repository URL so we can associate\nthe repository with the development environment.",
    "start": "102258",
    "end": "107435"
  },
  {
    "text": "Copy the URL. ",
    "start": "108375",
    "end": "109508"
  },
  {
    "text": "Launch the Cloud9 development environment.",
    "start": "114960",
    "end": "116890"
  },
  {
    "text": "Now paste the URL we just copied to specify \nthe repo you wish to include in the IDE.",
    "start": "120320",
    "end": "125121"
  },
  {
    "text": "Let’s also specify where in the Git repository\nfolder our project code will live.",
    "start": "126125",
    "end": "130045"
  },
  {
    "text": "Let's skip ahead to when the Cloud9 \nenvironment has fully deployed and open it.",
    "start": "131120",
    "end": "134677"
  },
  {
    "text": "For the purposes of this example, we’ll \nclone a sample Flask web application.",
    "start": "142143",
    "end": "145983"
  },
  {
    "text": "Now let’s push the application’s contents to \nCodeCommit to begin the CodePipeline execution. ",
    "start": "147040",
    "end": "151730"
  },
  {
    "text": "Next, let’s check to make sure the \nCodePipeline execution triggered.",
    "start": "156720",
    "end": "159814"
  },
  {
    "text": "The pipeline successfully pulled \nour project code from CodeCommit",
    "start": "163200",
    "end": "166080"
  },
  {
    "text": "and is now building and containerizing \nthe application for deployment on ECS.",
    "start": "166080",
    "end": "170064"
  },
  {
    "text": "Let’s return to Service Catalog to deploy the container\nservices necessary to run our application.",
    "start": "170738",
    "end": "175220"
  },
  {
    "text": "We’ll deploy an ECS Fargate cluster\nto host the servicesand tasks",
    "start": "176437",
    "end": "180135"
  },
  {
    "text": "that enable our application to run\nin a containerized workflow.",
    "start": "180135",
    "end": "183097"
  },
  {
    "text": "Next, let’s quickly check the status \nof our CodePipeline execution.",
    "start": "187165",
    "end": "190444"
  },
  {
    "text": "As you can see, CodePipeline successfully \nsourced our project code from CodeCommit,",
    "start": "192240",
    "end": "196400"
  },
  {
    "text": "built and containerized the application, \nand deployed the latest version.",
    "start": "196400",
    "end": "199937"
  },
  {
    "text": "Let’s also check the Amazon \nElastic Container Registry (ECR)",
    "start": "200800",
    "end": "204560"
  },
  {
    "text": "to view the container image that was built \nfrom our deployment in Service Catalog.",
    "start": "204560",
    "end": "208000"
  },
  {
    "text": "The Service Catalog product \ncreated a new ECR repository,",
    "start": "210560",
    "end": "214239"
  },
  {
    "text": "which we’ll use to define the ECS service that \nwill run our containerized web application.",
    "start": "214240",
    "end": "218400"
  },
  {
    "text": "Copy the ECR repository URI.",
    "start": "219343",
    "end": "221690"
  },
  {
    "text": "Return to Service Catalog to \nprovision the ECS service.",
    "start": "222738",
    "end": "225652"
  },
  {
    "text": "Give a custom name to the ECS service.",
    "start": "230561",
    "end": "232641"
  },
  {
    "text": "Paste in the ECR repository URI we copied.",
    "start": "236934",
    "end": "239801"
  },
  {
    "text": "Provide a task definition name for the service.",
    "start": "240759",
    "end": "243072"
  },
  {
    "text": "Launch the product. ",
    "start": "246560",
    "end": "247502"
  },
  {
    "text": "Now that the container service \nhas finished provisioning,",
    "start": "251200",
    "end": "253520"
  },
  {
    "text": "our Fargate cluster should be running \nour web application as a service.",
    "start": "253520",
    "end": "256810"
  },
  {
    "text": "Let’s head back to the cluster’s provisioned \nproducts view to see the outputs.",
    "start": "257387",
    "end": "260845"
  },
  {
    "text": "Let’s visit the external URL to verify that \nthe ECS service is executing as expected.",
    "start": "267645",
    "end": "272525"
  },
  {
    "text": "As you can see, our containerized Flask application is running\nas part of the ECS service we just instantiated.",
    "start": "275040",
    "end": "280639"
  },
  {
    "text": "Next, let’s edit the deployment configurations\nto associate our sample Flask project",
    "start": "283227",
    "end": "287587"
  },
  {
    "text": "with our ECS Fargate cluster and the ECS service.",
    "start": "287588",
    "end": "290392"
  },
  {
    "text": "This will enable automatic re-deployment and \nre-execution whenever the CodePipeline executes.",
    "start": "291040",
    "end": "295840"
  },
  {
    "text": "We’ll uncomment the last line and add the ECS \nFargate cluster name and the service name.",
    "start": "296712",
    "end": "301112"
  },
  {
    "text": "This association will result in\nzero-downtime automated deployments",
    "start": "301840",
    "end": "305457"
  },
  {
    "text": "upon every new push to the\nCodeCommit repository master branch.",
    "start": "305457",
    "end": "308881"
  },
  {
    "text": "Save the changes.",
    "start": "311649",
    "end": "312577"
  },
  {
    "text": "Finally, let’s test our configuration\nby modifying the Flask application code",
    "start": "314960",
    "end": "319089"
  },
  {
    "text": "to see whether the changes are reflected in\nthe application running in the Fargate cluster service.",
    "start": "319089",
    "end": "323354"
  },
  {
    "text": "We’ll change the index page heading to “Hello \nCodePipeline!” and update the version number.",
    "start": "324240",
    "end": "328569"
  },
  {
    "text": "Now we’ll push our edits to the CodeCommit \nrepo and execute the CodePipeline.",
    "start": "334000",
    "end": "337840"
  },
  {
    "text": "Now that the pipeline has finished executing,\nlet’s see if our change deployed.",
    "start": "348445",
    "end": "351885"
  },
  {
    "text": "The page now shows the new \nheadline and version number.",
    "start": "353227",
    "end": "355787"
  },
  {
    "text": "You’ve just seen how to create a continuous deployment\npipeline using AWS Service Catalog products",
    "start": "356854",
    "end": "361549"
  },
  {
    "text": "for CodePipeline and Amazon ECS.",
    "start": "361549",
    "end": "363949"
  },
  {
    "text": "Thanks for watching.\nNow it’s your turn to try.",
    "start": "364835",
    "end": "366731"
  }
]