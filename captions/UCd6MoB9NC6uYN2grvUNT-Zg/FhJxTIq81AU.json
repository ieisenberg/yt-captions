[
  {
    "text": "okay can everyone hear me yeah okay hi everyone uh welcome this is uh my",
    "start": "1800",
    "end": "8080"
  },
  {
    "text": "session on Lambda as cron so hopefully you're in the right place um we're going to be talking about scheduling",
    "start": "8080",
    "end": "14240"
  },
  {
    "text": "invocations in AWS Lambda so let's get to it um a little bit about me my name",
    "start": "14240",
    "end": "21199"
  },
  {
    "text": "is Guy Davis I'm a Senior Systems engineer for sofos limited sofos is a computer security company global company",
    "start": "21199",
    "end": "28800"
  },
  {
    "text": "um and and we do um security products to secure your endpoint your gateway um we",
    "start": "28800",
    "end": "36920"
  },
  {
    "text": "use AWS a lot we have a lot of backend systems that our products communicate with and we've been implementing these",
    "start": "36920",
    "end": "44840"
  },
  {
    "text": "uh systems on AWS for a good few years now we also Supply um security products",
    "start": "44840",
    "end": "51079"
  },
  {
    "text": "for you the AWS customers to use within your um uh within your AWS deployments",
    "start": "51079",
    "end": "58120"
  },
  {
    "text": "we've got the UTM unified threat management um uh which is available on Marketplace",
    "start": "58120",
    "end": "65040"
  },
  {
    "text": "it's a it's kind of like NextGen firewall allows you to um it's a web",
    "start": "65040",
    "end": "70200"
  },
  {
    "text": "application file will allows you to secure and lock down your uh your your V",
    "start": "70200",
    "end": "75720"
  },
  {
    "text": "VPC deployment it's also elastic so our firewall will will scale with your load",
    "start": "75720",
    "end": "80920"
  },
  {
    "text": "as well we also have the secure server for Linux this is a free Ami available in Marketplace which is basically Centos",
    "start": "80920",
    "end": "87079"
  },
  {
    "text": "with our uh endpoint antivirus software on on it it also does detect Windows",
    "start": "87079",
    "end": "92159"
  },
  {
    "text": "viruses so if you have untrusted data flowing through you're more than welcome to use that everything's under soft.com",
    "start": "92159",
    "end": "98880"
  },
  {
    "text": "AWS so I'd ow you to go have a look anyway you didn't come here to see that",
    "start": "98880",
    "end": "103920"
  },
  {
    "text": "you came here to see about Lander's cron right so what are we going to talk about we're going to be talking about how to",
    "start": "103920",
    "end": "110000"
  },
  {
    "text": "schedule tasks we're going to be talking about why you need to schedule tasks some of the use cases for scheduling",
    "start": "110000",
    "end": "116159"
  },
  {
    "text": "tasks specifically with AWS Lambda um we're going to um start off at a high",
    "start": "116159",
    "end": "122320"
  },
  {
    "text": "level but this is a 400 level uh uh topic so we're going to be diving into some source code I'm afraid I'll keep",
    "start": "122320",
    "end": "127960"
  },
  {
    "text": "that to a minimum um and um we're going to look at the various options available",
    "start": "127960",
    "end": "133560"
  },
  {
    "text": "any of these might be suitable for you for your needs and then we're going to focus in on one particular solution",
    "start": "133560",
    "end": "139080"
  },
  {
    "text": "which we've been developing for a little while and go through do a a quick demo",
    "start": "139080",
    "end": "144319"
  },
  {
    "text": "give some uh resources and templates and um and hopefully give you guys some ideas on how you can implement this in",
    "start": "144319",
    "end": "152239"
  },
  {
    "text": "your infrastructures so hopefully we'll have enough time to get through it all anyway so scheduling why do we need",
    "start": "152239",
    "end": "160760"
  },
  {
    "text": "scheduling Lambda is event based it's event-based Computing and event driven",
    "start": "160760",
    "end": "166640"
  },
  {
    "text": "Computing is really awesome that's why lots of us are using Lambda now you know you want to trigger because something",
    "start": "166640",
    "end": "173280"
  },
  {
    "text": "happens um event driven Computing operating systems use event driven Computing most modern Frameworks use an",
    "start": "173280",
    "end": "180280"
  },
  {
    "text": "event loop it's uh that's the way Computing works really because there's",
    "start": "180280",
    "end": "185720"
  },
  {
    "text": "no point if somebody's not doing something um obviously um if you've seen",
    "start": "185720",
    "end": "191560"
  },
  {
    "text": "the cheesy example of Lambda that's event based the uh upload a image to S3",
    "start": "191560",
    "end": "197840"
  },
  {
    "text": "and it takes it and then generates a thumbnail for it um that's event Bas that's awesome",
    "start": "197840",
    "end": "203840"
  },
  {
    "text": "but some of the time you just play need a schedule um I've put a few examples here",
    "start": "203840",
    "end": "211280"
  },
  {
    "text": "so log cleanup you know you need to do stuff on a uh on a schedule log cleanup",
    "start": "211280",
    "end": "217080"
  },
  {
    "text": "is is one of those things nobody likes doing it but it needs to be done batching up your statistics there's no",
    "start": "217080",
    "end": "223239"
  },
  {
    "text": "point having uh something triggered off an event of a file being uploaded if you need to work on multiple files because",
    "start": "223239",
    "end": "229319"
  },
  {
    "text": "you get multiple events and that wouldn't really work um I've put a la CL",
    "start": "229319",
    "end": "235079"
  },
  {
    "text": "there but really is it a notification to a user that the user hasn't actually done anything to trigger you know and",
    "start": "235079",
    "end": "241680"
  },
  {
    "text": "and you can see a a lot of benefits for that also INF infrastructure automation I'll go in in depth in um in a little",
    "start": "241680",
    "end": "248159"
  },
  {
    "text": "while but um you can do things like scheduled Auto scaling on steroids I",
    "start": "248159",
    "end": "253799"
  },
  {
    "text": "know Amazon Supply scheduled Auto scaling at the moment but you can do so much more with that so A few examples of",
    "start": "253799",
    "end": "260120"
  },
  {
    "text": "why you might need to schedule your code and specifically why you might need to",
    "start": "260120",
    "end": "265320"
  },
  {
    "text": "schedule Lambda so on traditional infrastructure what options do we have",
    "start": "265320",
    "end": "270600"
  },
  {
    "text": "for scheduling well we've got cron hopefully most people will understand the format of that that lineup there",
    "start": "270600",
    "end": "277120"
  },
  {
    "text": "we've got cron we've also got at which is the often forgotten cousin of cron",
    "start": "277120",
    "end": "282840"
  },
  {
    "text": "um um and and both of these things they've been around for for ages and",
    "start": "282840",
    "end": "288759"
  },
  {
    "text": "they are clearly useful because they've been implemented in other os's and also",
    "start": "288759",
    "end": "294320"
  },
  {
    "text": "if KRON stops running on your on your Linux box it's going to be screwed pretty quickly right it's",
    "start": "294320",
    "end": "300759"
  },
  {
    "text": "you're going to fill up your storage so it's useful stuff I'm sure I don't need to be telling you guys all this",
    "start": "300759",
    "end": "307560"
  },
  {
    "text": "so if we want to schedule our Lambda functions what can we do well there's a",
    "start": "307560",
    "end": "315560"
  },
  {
    "text": "bunch of options a heap of options so here we go number one you can spin up something in",
    "start": "315560",
    "end": "322680"
  },
  {
    "text": "ec2 and then use Chron tab to schedule your",
    "start": "322680",
    "end": "328360"
  },
  {
    "text": "invocations that's that works does the trick but if you're doing that why don't you just run your",
    "start": "328360",
    "end": "334560"
  },
  {
    "text": "code on the ec2 instance also of course you've got to patch it you've got to",
    "start": "334560",
    "end": "339960"
  },
  {
    "text": "manage it you got to check it doesn't go down um so yeah it works it it could be",
    "start": "339960",
    "end": "347199"
  },
  {
    "text": "something for you if you do need to schedule land inv vacations and you've got like a box doing nothing then yeah",
    "start": "347199",
    "end": "353080"
  },
  {
    "text": "you could do that but that kind of violates the sort of principle of separation of",
    "start": "353080",
    "end": "358400"
  },
  {
    "text": "responsibilities so so yeah and it could cost you a bunch of",
    "start": "358400",
    "end": "363759"
  },
  {
    "text": "money if you're running it running something just to kick off Lambda not necessarily the most financially",
    "start": "363759",
    "end": "369479"
  },
  {
    "text": "efficient way of doing it option two is a lot better option two is the unreliable Town clock this is an awesome",
    "start": "369479",
    "end": "376479"
  },
  {
    "text": "public Amazon SNS topic developed by Eric Hammond who's here today hey Eric",
    "start": "376479",
    "end": "382800"
  },
  {
    "text": "thanks for coming um it's a public SNS toic that you can subscribe your Lambda",
    "start": "382800",
    "end": "388639"
  },
  {
    "text": "function to and this SNS toic uh topic Chimes every 15 minutes so it'll send a",
    "start": "388639",
    "end": "394360"
  },
  {
    "text": "message which then will trigger your Lambda function once every 15 minutes",
    "start": "394360",
    "end": "399880"
  },
  {
    "text": "this is awesome Eric looks after it it's community supported and um the",
    "start": "399880",
    "end": "405120"
  },
  {
    "text": "granularity is 15 minutes it's super easy to use so I'd urge you to go take a look at it under town",
    "start": "405120",
    "end": "411280"
  },
  {
    "text": "clock. now that might not be what you need it's it might not be granular",
    "start": "411280",
    "end": "417879"
  },
  {
    "text": "enough it's got a 15-minute granular ity what if you want to run something every every 5",
    "start": "417879",
    "end": "423639"
  },
  {
    "text": "minutes also because it's Community sported and cluing the name it's the unreliable T Town clock although it's",
    "start": "423639",
    "end": "430120"
  },
  {
    "text": "pretty reliable right oh yeah well absolutely um um so",
    "start": "430120",
    "end": "437960"
  },
  {
    "text": "this might not meet your organization's regulatory requirements they might not allow you to use a community supported",
    "start": "437960",
    "end": "444759"
  },
  {
    "text": "uh service it's open source so you can download the code and run it up on your own",
    "start": "444759",
    "end": "450680"
  },
  {
    "text": "instance so um so you can do that um but um this",
    "start": "450680",
    "end": "459199"
  },
  {
    "text": "could definitely be something for you guys to use so if you've just got a a simple use case awesome way of doing",
    "start": "459199",
    "end": "466599"
  },
  {
    "text": "things there's a bunch of other options as well I'm not going to go into such detail from this trigger from swf",
    "start": "466599",
    "end": "472319"
  },
  {
    "text": "there's a lot of buzz on the for ons about triggering from swf I'm not going to talk a huge amount about that because",
    "start": "472319",
    "end": "479520"
  },
  {
    "text": "I didn't want to learn a new technology I swf just to schedule out all my",
    "start": "479520",
    "end": "485840"
  },
  {
    "text": "functions you know I don't know sswf it seems like Overkill to use Simple workflow service hey it's simple but it",
    "start": "485840",
    "end": "492360"
  },
  {
    "text": "seems like Overkill to use that just to be uh scheduling functions trigger from",
    "start": "492360",
    "end": "497680"
  },
  {
    "text": "an instance in data pipeline data pipeline has an option where you can uh",
    "start": "497680",
    "end": "503039"
  },
  {
    "text": "schedule an instance to start up and then you could trigger from that but",
    "start": "503039",
    "end": "508120"
  },
  {
    "text": "instance startup it takes an undefined number of",
    "start": "508120",
    "end": "513279"
  },
  {
    "text": "minutes and you get charged for an hour anyway so if you're starting it up for 5 minutes just to trigger a Lambda",
    "start": "513279",
    "end": "519518"
  },
  {
    "text": "function you're going to get charged for an hour anyway so you might as well use option one um but but for something that",
    "start": "519519",
    "end": "525640"
  },
  {
    "text": "runs maybe once a day that could be awesome that could be that could be your thing another interesting one is trigger from a cloud trail upload now if you",
    "start": "525640",
    "end": "532519"
  },
  {
    "text": "enable cloud trail on your account it delivers a file to an S3",
    "start": "532519",
    "end": "537760"
  },
  {
    "text": "bucket every five minutes or so something like that so it's every 5 minutes or so so it's not necessarily",
    "start": "537760",
    "end": "544320"
  },
  {
    "text": "all that predictable also if you're following security best practice then your cloud trail upload should go to a",
    "start": "544320",
    "end": "551320"
  },
  {
    "text": "bucket in a different account so that if you're having to audit something or if the bad guy gets in he can't delete your",
    "start": "551320",
    "end": "557760"
  },
  {
    "text": "cloud trail stuff so that would make it potentially harder to trigger your Lambda function from but all of those",
    "start": "557760",
    "end": "564920"
  },
  {
    "text": "they could be the solution for you like there's a heap of ways of doing this but but we're going to focus on something a",
    "start": "564920",
    "end": "571600"
  },
  {
    "text": "little bit more pure a little bit within Lambda that you don't have the management uh problems with and it's",
    "start": "571600",
    "end": "579240"
  },
  {
    "text": "managed by AWS so we've got a pure land Sher I must",
    "start": "579240",
    "end": "585920"
  },
  {
    "text": "say actually since the the sessions were um were announced I've had a a good two",
    "start": "585920",
    "end": "591720"
  },
  {
    "text": "or three uh individual people emailing me to say hey I was working on something",
    "start": "591720",
    "end": "597120"
  },
  {
    "text": "exactly like you're working on so this isn't Ally Innovative but it's a way of",
    "start": "597120",
    "end": "602200"
  },
  {
    "text": "doing it so let's focus in on this all righty so what do you need we're going to go back to basics here a timing",
    "start": "602200",
    "end": "608959"
  },
  {
    "text": "signal you need a clock to schedule right so what do you need for a timing signal now some of you may recognize",
    "start": "608959",
    "end": "615160"
  },
  {
    "text": "this this is the grade school way to make a timing signal that is a 555",
    "start": "615160",
    "end": "620680"
  },
  {
    "text": "timer as 40-year-old Tech right you know we're at The Cutting Edge here um so",
    "start": "620680",
    "end": "626720"
  },
  {
    "text": "that's the way to do it now um a timing signal a classic timing signal is a digital signal output goes high for a",
    "start": "626720",
    "end": "634440"
  },
  {
    "text": "period low for a period high for a period low for a period it's called a",
    "start": "634440",
    "end": "639680"
  },
  {
    "text": "bable oscillator because it's oscillating between two states and if you graph it kind of looks",
    "start": "639680",
    "end": "646120"
  },
  {
    "text": "like that there's a graph zeros and ones zeros and ones",
    "start": "646120",
    "end": "651600"
  },
  {
    "text": "now the graph thing is interesting because it's a graph yet where else do",
    "start": "651600",
    "end": "657600"
  },
  {
    "text": "you get graphs that AWS could provide Cloud watch Cloud watch those grass kind",
    "start": "657600",
    "end": "663839"
  },
  {
    "text": "of looks similar right okay so surprise surprise I'm going to",
    "start": "663839",
    "end": "669760"
  },
  {
    "text": "talk about using cloudwatch to do this you know get that segue in there right",
    "start": "669760",
    "end": "675440"
  },
  {
    "text": "so what we can do as you know as you may know cloudwatch has metrics and",
    "start": "675440",
    "end": "682160"
  },
  {
    "text": "alarms now an alarm triggers off a stake uh a condition on a particular metric",
    "start": "682160",
    "end": "689480"
  },
  {
    "text": "now you can set an alarm and alarm can do one of many things first thing it does is it turns that alarms page in the",
    "start": "689480",
    "end": "696320"
  },
  {
    "text": "uh in the Eda of this console red right that's that that's something that happens you can terminate an instance",
    "start": "696320",
    "end": "703320"
  },
  {
    "text": "you can do all sorts of things you can send a notification to SNS which in turn can send an email fair",
    "start": "703320",
    "end": "710000"
  },
  {
    "text": "enough or trigger Lambda so you've got an alarm it's going into",
    "start": "710000",
    "end": "717600"
  },
  {
    "text": "the alarm state which can trigger SNS which can then trigger Lambda now",
    "start": "717600",
    "end": "724519"
  },
  {
    "text": "lambda's pretty cool because you get the AWS SDK for free in Lambda it's fine so",
    "start": "724519",
    "end": "730160"
  },
  {
    "text": "Lambda can actually do things with that alarm do things with that metric so why don't we invert the state of that metrix",
    "start": "730160",
    "end": "736199"
  },
  {
    "text": "so if it's just gone to one we can invert it to zero and then we uh we we",
    "start": "736199",
    "end": "743120"
  },
  {
    "text": "we've reverted it to zero so the alarm goes into the okay state I'm not alarming but the great thing about",
    "start": "743120",
    "end": "748600"
  },
  {
    "text": "cloudwatch alarm is you trigger on state transitions not on specific States so it",
    "start": "748600",
    "end": "753839"
  },
  {
    "text": "goes into the okay state that can trigger a notification itself which can trigger Lambda and then Lambda inverts",
    "start": "753839",
    "end": "760600"
  },
  {
    "text": "the state of the metric and then it goes back to two and you get a Cheesy animation and um and",
    "start": "760600",
    "end": "769160"
  },
  {
    "text": "then Lambda can then invert the state of the metric and it goes down to there",
    "start": "769160",
    "end": "774440"
  },
  {
    "text": "again so you get this kind of by stable oscillator it's the same deal it's it's",
    "start": "774440",
    "end": "780399"
  },
  {
    "text": "oscillating between two states which kind of ends up looking like our graph that we had okay so um",
    "start": "780399",
    "end": "789040"
  },
  {
    "text": "hopefully uh you can all get that now it's interesting because this is the same Lambda function because with Lambda",
    "start": "789040",
    "end": "796240"
  },
  {
    "text": "as a recap Lambda sends in an event um into into the Lambda function and that",
    "start": "796240",
    "end": "802199"
  },
  {
    "text": "event is either an S3 put or an SNS uh notification now the SNS notification",
    "start": "802199",
    "end": "808040"
  },
  {
    "text": "actually says the new state of the metric so the alarm generates the SNS notification which has in the in the",
    "start": "808040",
    "end": "815160"
  },
  {
    "text": "data structure the new state of the metric so Lambda can tell whether it's going from one to zero or 0 to one and",
    "start": "815160",
    "end": "821440"
  },
  {
    "text": "it can tell what to push in [Music] so there we go right let's jump in",
    "start": "821440",
    "end": "830000"
  },
  {
    "text": "configuring up the cloudwatch alarm now I'm well aware that you probably can't read that so we're going to focus on each individual Point uh individually",
    "start": "830000",
    "end": "837399"
  },
  {
    "text": "this is configuring it via the the web interface obviously you can configure it via the cly or via uh cloud",
    "start": "837399",
    "end": "844160"
  },
  {
    "text": "formation so we've chosen this metric and we've chosen it to go from zero to one because that kind of matches our 555",
    "start": "844160",
    "end": "850560"
  },
  {
    "text": "timer you notice here we've got a period there what the period means is when the",
    "start": "850560",
    "end": "857320"
  },
  {
    "text": "uh the metric changes state it will wait for that period of time we choose a",
    "start": "857320",
    "end": "862959"
  },
  {
    "text": "minute here because a minute is kind of useful right um but you could choose five minutes you could choose one",
    "start": "862959",
    "end": "869440"
  },
  {
    "text": "whatever period you want and the period of the oscillation will just go",
    "start": "869440",
    "end": "874920"
  },
  {
    "text": "out so we can set this up and then we can set up our",
    "start": "874920",
    "end": "880120"
  },
  {
    "text": "notifications now I was saying it was a bable oscillator well actually it's bable but with a third state the third",
    "start": "880120",
    "end": "886959"
  },
  {
    "text": "state is insufficient data what insufficient data means is that nothing's been pushed into that metric",
    "start": "886959",
    "end": "893519"
  },
  {
    "text": "recently so there is no way that the Alan can know what it should be doing",
    "start": "893519",
    "end": "899880"
  },
  {
    "text": "and you may notice we've actually configured this up as well we're sending a notification to an SNS topic um and I've got my email address",
    "start": "899880",
    "end": "908079"
  },
  {
    "text": "in there as well so I can keep tabs on it the reason I do this is if heaven",
    "start": "908079",
    "end": "913480"
  },
  {
    "text": "forbid there's a outage of AWS in the region that you're looking at then um",
    "start": "913480",
    "end": "920480"
  },
  {
    "text": "and and Lambda goes down and Lambda doesn't manage to push in that next value into that",
    "start": "920480",
    "end": "927480"
  },
  {
    "text": "metric then after a little while it'll go into the insufficient State the insufficient",
    "start": "927480",
    "end": "933040"
  },
  {
    "text": "State let's say everything is back the insufficient state will trigger Lambda and kind of kick it off again so it's a",
    "start": "933040",
    "end": "939959"
  },
  {
    "text": "way of kicking it back off when it might have otherwise broken gives it a little bit more",
    "start": "939959",
    "end": "945040"
  },
  {
    "text": "resilience so yeah and as I said we're triggering the exact same land Lambda",
    "start": "945040",
    "end": "951519"
  },
  {
    "text": "function so let's put this together that's pretty much it really you know you've got Lambda function you've got",
    "start": "951519",
    "end": "957680"
  },
  {
    "text": "the cloud watch alarm SNS and you get it to trigger so we're going to put it together so we've got a Lambda Chrome",
    "start": "957680",
    "end": "963319"
  },
  {
    "text": "function now the Lambda Chrome function this is just a dispatcher it's just a",
    "start": "963319",
    "end": "968440"
  },
  {
    "text": "function that does the the the timing signal functionality all it needs to do",
    "start": "968440",
    "end": "975240"
  },
  {
    "text": "is check a schedule and invoke uh your other functions this is your application",
    "start": "975240",
    "end": "980920"
  },
  {
    "text": "Logic the functions that you want to schedule up the things doing your log cleanup Etc",
    "start": "980920",
    "end": "987199"
  },
  {
    "text": "so what it'll do is is if they match a schedule if they're scheduled to be run right now it'll invoke these further",
    "start": "987199",
    "end": "994120"
  },
  {
    "text": "Lambda functions and it will also reset the cloudwatch metric so it resets",
    "start": "994120",
    "end": "999839"
  },
  {
    "text": "cloudwatch metric a minute passes the cloudwatch alarm triggers hits an SNS",
    "start": "999839",
    "end": "1006040"
  },
  {
    "text": "topic the SNS topic send a notification to",
    "start": "1006040",
    "end": "1011079"
  },
  {
    "text": "lambron which then might uh which then will invoke any functions that have been",
    "start": "1011079",
    "end": "1016759"
  },
  {
    "text": "scheduled for and it goes around you get another minute and it goes",
    "start": "1016759",
    "end": "1023079"
  },
  {
    "text": "green and it triggers again and I had lots of fun with PowerPoint animations",
    "start": "1023079",
    "end": "1028120"
  },
  {
    "text": "on this so and so on and so on so there we",
    "start": "1028120",
    "end": "1034079"
  },
  {
    "text": "go hopefully the concept makes a lot of sense let's dive into the function this is the source code bit",
    "start": "1034079",
    "end": "1041160"
  },
  {
    "text": "right so the event C SNS notification this is what it needs to",
    "start": "1041160",
    "end": "1046760"
  },
  {
    "text": "do um it needs to read its J jobs in it schedule which are in this implementation managed as a separate",
    "start": "1046760",
    "end": "1053360"
  },
  {
    "text": "Json file in the uh in the bundle check that check that the schedule uh check against each job that",
    "start": "1053360",
    "end": "1060440"
  },
  {
    "text": "you configured that um whether it needs to be run right now invoke any Lambda",
    "start": "1060440",
    "end": "1066280"
  },
  {
    "text": "functions invert the value of the cloud watch metric and then we're done reasonably",
    "start": "1066280",
    "end": "1071919"
  },
  {
    "text": "simple so a main Lambda function we're actually using the async module now the async module is great because because I",
    "start": "1071919",
    "end": "1079280"
  },
  {
    "text": "cut my teeth on procedural programming for those of you that don't know node.js relies on callbacks it's all",
    "start": "1079280",
    "end": "1086960"
  },
  {
    "text": "asynchronous and if you actually want to do a um a series of events in order you",
    "start": "1086960",
    "end": "1092799"
  },
  {
    "text": "end up getting into like like seven levels down in callback functions with braces everywhere and it's and it's",
    "start": "1092799",
    "end": "1098280"
  },
  {
    "text": "hideous even to close your callback function um so um I'm using the async",
    "start": "1098280",
    "end": "1103880"
  },
  {
    "text": "module which makes all of this a lot easier I would urge you to check it out if you um are doing any no. JS stuff",
    "start": "1103880",
    "end": "1110760"
  },
  {
    "text": "really really useful module anyway so first thing we do is split Cloud watch we do that first thing because we need",
    "start": "1110760",
    "end": "1117360"
  },
  {
    "text": "to flip Cloud watch to keep this running it's kind of like a perpetual motion machine you know it looks like it's all",
    "start": "1117360",
    "end": "1122960"
  },
  {
    "text": "running all nice and everything but there's energy going in um and and and it's constantly flipping Cloud watch and",
    "start": "1122960",
    "end": "1129720"
  },
  {
    "text": "flipping cloud cloud watch we do that first just in case anything else breaks and um and it doesn't get to it we read",
    "start": "1129720",
    "end": "1136280"
  },
  {
    "text": "in the Chron tab simple the the chab uh file is a Json format file I'm calling",
    "start": "1136280",
    "end": "1142679"
  },
  {
    "text": "it Chron tab it's not actually a Chron tab but yeah it's a Json format file in there and then we execute the Lambda",
    "start": "1142679",
    "end": "1149919"
  },
  {
    "text": "functions and then there's a bit of error logic at the bottom so first thing",
    "start": "1149919",
    "end": "1155520"
  },
  {
    "text": "we do we flip cloudwatch flipping Cloud watch is relatively simple because the",
    "start": "1155520",
    "end": "1161120"
  },
  {
    "text": "AWS SDK is really simple and actually Cloud pushing stuff into cloudwatch metrics is about the simplest thing you",
    "start": "1161120",
    "end": "1166799"
  },
  {
    "text": "can do with the AWS SDK because there's not much to it so we take the SNS message decode it the SNS message um as",
    "start": "1166799",
    "end": "1175559"
  },
  {
    "text": "I mentioned before has the information of the state change encoded within the",
    "start": "1175559",
    "end": "1181679"
  },
  {
    "text": "the SNS message so we decode it and then we say okay let's look at this new new",
    "start": "1181679",
    "end": "1187480"
  },
  {
    "text": "new state value that's the uh uh the the the item inside the object and it says",
    "start": "1187480",
    "end": "1194000"
  },
  {
    "text": "well if it's alarm then actually we want to reset it back to zero whereas if it's okay or if it's insufficient data I it",
    "start": "1194000",
    "end": "1201640"
  },
  {
    "text": "hasn't run for a while then reset it back to one and then we just push it into cloudwatch pretty simple",
    "start": "1201640",
    "end": "1209200"
  },
  {
    "text": "right so let's get on to the Chron tab so it's Chron tab like configuration for",
    "start": "1209200",
    "end": "1217240"
  },
  {
    "text": "Lambda we got a jobs object and you'll notice that this is a list square",
    "start": "1217240",
    "end": "1223400"
  },
  {
    "text": "bracket um and so you can specify as many jobs as you want you can specify all your sh schedules in one thing and",
    "start": "1223400",
    "end": "1230200"
  },
  {
    "text": "one lambron dispatcher would take care of all that stuff give a schedule hopefully you'll recognize that uh that",
    "start": "1230200",
    "end": "1237720"
  },
  {
    "text": "format use Chron tab format jeez I should have chosen a different color shouldn't I um use Chron tab like format",
    "start": "1237720",
    "end": "1245760"
  },
  {
    "text": "it'll support Chron tab so if you want something to run at 20 8 on a Sunday night on the first Sunday of the month",
    "start": "1245760",
    "end": "1251360"
  },
  {
    "text": "you can do that um so we put that in we got to give it a function to run that's",
    "start": "1251360",
    "end": "1256960"
  },
  {
    "text": "the whole point give it r a function to run and also with Lambda usually you",
    "start": "1256960",
    "end": "1263400"
  },
  {
    "text": "don't have any control over what's passed into your Lambda function because what's passed into your Lambda function",
    "start": "1263400",
    "end": "1268600"
  },
  {
    "text": "is the event that triggered it which is in a predefined format that um that AWS",
    "start": "1268600",
    "end": "1273919"
  },
  {
    "text": "have defined which is really useful however this there is no event triggering it",
    "start": "1273919",
    "end": "1278960"
  },
  {
    "text": "this is the whole point so you can you can specify whatever arguments you",
    "start": "1278960",
    "end": "1285080"
  },
  {
    "text": "want a feature request on on this entire um infrastructure could be to actually",
    "start": "1285080",
    "end": "1290640"
  },
  {
    "text": "set these arguments dynamically you know so so you can actually do proper functional programming with",
    "start": "1290640",
    "end": "1297559"
  },
  {
    "text": "this so there we go there's the schedule this is what the dispatcher reads in um",
    "start": "1297559",
    "end": "1303799"
  },
  {
    "text": "every invocation and we check the check the schedule now I'm lazy so I've used a",
    "start": "1303799",
    "end": "1310559"
  },
  {
    "text": "library code reuse is good right so um it's it's an awesome Library it's a no",
    "start": "1310559",
    "end": "1317120"
  },
  {
    "text": "JS uh no Js Library which allows you to pass Chron tab like format uh it's MIT",
    "start": "1317120",
    "end": "1323039"
  },
  {
    "text": "licensed so there won't be too bothered with me using it here so we created a data object now this is running at some",
    "start": "1323039",
    "end": "1329200"
  },
  {
    "text": "point within the minute it's not guaranteed to run at the top of the minute it's running at some point within your minute um but actually the Chron",
    "start": "1329200",
    "end": "1336279"
  },
  {
    "text": "tab um requires it to be the top of the minute so we actually created a new data",
    "start": "1336279",
    "end": "1341400"
  },
  {
    "text": "object which is set to now and then we set the the seconds and the milliseconds back to zero so it's the top of the",
    "start": "1341400",
    "end": "1347600"
  },
  {
    "text": "current minutes and then we can just pass the Chron Tab",
    "start": "1347600",
    "end": "1353200"
  },
  {
    "text": "and we get this uh interval. next which tell which once you pass the Chron tab",
    "start": "1353200",
    "end": "1358360"
  },
  {
    "text": "it tells us when the next invocation should be now um that can be expressed",
    "start": "1358360",
    "end": "1364520"
  },
  {
    "text": "as a string and the date with the seconds the date at the top of the minute can be expressed as a string and",
    "start": "1364520",
    "end": "1370120"
  },
  {
    "text": "actually the that's the easiest thing to do so we do a string comparison between when the chrom passer thinks is the next",
    "start": "1370120",
    "end": "1376279"
  },
  {
    "text": "time to run the the job and and the date at the top of the minute and if they match then it's time to run the job and",
    "start": "1376279",
    "end": "1384720"
  },
  {
    "text": "running the job is very simple as well it's um it's using the ad SDK to trigger",
    "start": "1384720",
    "end": "1390200"
  },
  {
    "text": "Lambda pretty simple right so we're going to do a quick demo so",
    "start": "1390200",
    "end": "1396520"
  },
  {
    "text": "hopefully the demo Gods will be will be good to me the mouse doesn't work which is great",
    "start": "1396520",
    "end": "1404840"
  },
  {
    "text": "start awesome",
    "start": "1405559",
    "end": "1409559"
  },
  {
    "text": "all right let's flip that it works cool",
    "start": "1415200",
    "end": "1420320"
  },
  {
    "text": "okay so um it's part of the demo um we",
    "start": "1420320",
    "end": "1426159"
  },
  {
    "text": "have a cloud formation build to build all of this but in order to demonstrate it properly we need to actually run",
    "start": "1426159",
    "end": "1432000"
  },
  {
    "text": "something on a schedule and I thought I had a long think about what can I demo",
    "start": "1432000",
    "end": "1438039"
  },
  {
    "text": "running on on a schedule and I came up with um a bunch of ideas but it was like",
    "start": "1438039",
    "end": "1444200"
  },
  {
    "text": "that was too complicated so what I've done is I've written a little Lambda function and we'll just test it out now",
    "start": "1444200",
    "end": "1450400"
  },
  {
    "text": "to show what we should be seeing once it runs on the schedule what it does is it",
    "start": "1450400",
    "end": "1456159"
  },
  {
    "text": "generates a little clock it uses the image magic libraries to generate little little clock which is super fun to work",
    "start": "1456159",
    "end": "1462240"
  },
  {
    "text": "with um go test and it sticks it in an S3 bucket and and that S3 bucket is",
    "start": "1462240",
    "end": "1470720"
  },
  {
    "text": "accessible by the website okay so here's the clock so this is what we should be seeing on a schedule I've I've left it",
    "start": "1470720",
    "end": "1477039"
  },
  {
    "text": "in UTC because that reminds me exactly how jet lagged I am right now um so anyway so that's what we want to",
    "start": "1477039",
    "end": "1484360"
  },
  {
    "text": "run this is just a static page right now so let's go ahead and build the cloud",
    "start": "1484360",
    "end": "1492440"
  },
  {
    "text": "formation template so ah okay first we're going to configure our content Tab",
    "start": "1492440",
    "end": "1498679"
  },
  {
    "text": "and hopefully you can see that so this is the Chron tab a schedule we want to run it every minute we want to run the",
    "start": "1498679",
    "end": "1505080"
  },
  {
    "text": "function put clock in S3 and we want to uh send in a couple of arguments I've given it the bucket to put it in and the",
    "start": "1505080",
    "end": "1512360"
  },
  {
    "text": "uh the key to use so let's do exactly that so there's the Chron tab um with",
    "start": "1512360",
    "end": "1518200"
  },
  {
    "text": "Lambda you need to a Deployable object is a ZIP file it can be just a text file but if you've got anything more complex",
    "start": "1518200",
    "end": "1525039"
  },
  {
    "text": "needs to be a zip file so let's zip it up up it's zipped up let's push it",
    "start": "1525039",
    "end": "1533200"
  },
  {
    "text": "to S3 there we go it's an",
    "start": "1533200",
    "end": "1539559"
  },
  {
    "text": "S3 um and now let's run up the cloud formation",
    "start": "1539559",
    "end": "1545760"
  },
  {
    "text": "build so we're creating a stack again here we're giving the stack parameters",
    "start": "1545760",
    "end": "1550919"
  },
  {
    "text": "of the S3 bucket to find the code in and the S3 object that the code is the the",
    "start": "1550919",
    "end": "1556000"
  },
  {
    "text": "uh the zip file it's about it right let's go like that that seems to have worked and let's",
    "start": "1556000",
    "end": "1562640"
  },
  {
    "text": "follow the creation of that so this cloud formation",
    "start": "1562640",
    "end": "1569398"
  },
  {
    "text": "build oh I've got to Lo it okay cloud formation",
    "start": "1571000",
    "end": "1576520"
  },
  {
    "text": "build it builds up everything that we need so it builds up an iron roll it",
    "start": "1576520",
    "end": "1581640"
  },
  {
    "text": "builds up the cloudwatch alarm it builds it it it puts the Lambda function into",
    "start": "1581640",
    "end": "1588960"
  },
  {
    "text": "Lambda Associates the role with it and it generates the SNS topic so hopefully",
    "start": "1588960",
    "end": "1595240"
  },
  {
    "text": "it shouldn't take too long to run there we go we've got a we've got an IMR for the function we've got the",
    "start": "1595240",
    "end": "1600399"
  },
  {
    "text": "function we've got the permissions for the",
    "start": "1600399",
    "end": "1603799"
  },
  {
    "text": "function nearly there creating",
    "start": "1605960",
    "end": "1613919"
  },
  {
    "text": "SNS they need a button that you can click that constantly clicks the ref trash",
    "start": "1614720",
    "end": "1619880"
  },
  {
    "text": "button anyone anyone from Ador here feature request",
    "start": "1619880",
    "end": "1626600"
  },
  {
    "text": "yeah okay the Stack's complete right so you can see that we've built the role we've built the function the permission",
    "start": "1626600",
    "end": "1632960"
  },
  {
    "text": "on the Lambda function the topic and the cloudwatch alarm let's just check there there I'm sure it works great",
    "start": "1632960",
    "end": "1639559"
  },
  {
    "text": "but so here's an alarm it's currently an insufficient data State because we haven't actually pushed anything into it",
    "start": "1639559",
    "end": "1646200"
  },
  {
    "text": "yet there it is landron alarm we've got an",
    "start": "1646200",
    "end": "1651320"
  },
  {
    "text": "alarm we have an SNS topic awesome we have a new",
    "start": "1651320",
    "end": "1658320"
  },
  {
    "text": "Lambda function lamb Chrome function and that's pretty much it now I",
    "start": "1658320",
    "end": "1665399"
  },
  {
    "text": "have been unable to get cloud formation to automatically hook up an SNS topic",
    "start": "1665399",
    "end": "1671000"
  },
  {
    "text": "with a Lambda function the reason for that is that there's some additional permissions although you can set a",
    "start": "1671000",
    "end": "1676760"
  },
  {
    "text": "Lambda permission up in cloud formation there's additional permissions required",
    "start": "1676760",
    "end": "1682200"
  },
  {
    "text": "so the the manual uh item of work here is to go into SNS and manually subscribe",
    "start": "1682200",
    "end": "1688080"
  },
  {
    "text": "that um that function to it which behind the scenes sets all the permissions up for",
    "start": "1688080",
    "end": "1694360"
  },
  {
    "text": "you so let's just do that",
    "start": "1694360",
    "end": "1701120"
  },
  {
    "text": "L create subscription cool okay and the final",
    "start": "1701519",
    "end": "1707000"
  },
  {
    "text": "piece of the puzzle is we've got to kick it off because currently it's in insufficient data State data state but",
    "start": "1707000",
    "end": "1713240"
  },
  {
    "text": "that um that state change happened a while ago before it was associated with the Lambda function so we got to kick it",
    "start": "1713240",
    "end": "1719919"
  },
  {
    "text": "off now the easiest way to kick it off it's bizarre you can't actually P push a",
    "start": "1719919",
    "end": "1725039"
  },
  {
    "text": "value into a metric via the web console so we're going to have to do it via the",
    "start": "1725039",
    "end": "1730760"
  },
  {
    "text": "cly Cloud watch okay Cloud watch put metric data we've chosen the metric name",
    "start": "1730760",
    "end": "1736360"
  },
  {
    "text": "lambron and in the names space lambron and we're putting a value into there so",
    "start": "1736360",
    "end": "1743000"
  },
  {
    "text": "hopefully we can go back into cloudwatch it's still insufficient data",
    "start": "1743000",
    "end": "1748519"
  },
  {
    "text": "because we've got a one minute uh waight period before the alarm fires but if we",
    "start": "1748519",
    "end": "1753600"
  },
  {
    "text": "go here and here and here there we",
    "start": "1753600",
    "end": "1759080"
  },
  {
    "text": "go and please ignore the previous stuff I was testing it out earlier but we have a data point right",
    "start": "1759080",
    "end": "1766880"
  },
  {
    "text": "here so that's what we put in now we wait we got to wait for the um for the",
    "start": "1766880",
    "end": "1774000"
  },
  {
    "text": "state of this to change from insufficient data which should take about a minute I",
    "start": "1774000",
    "end": "1780440"
  },
  {
    "text": "wish I had more jokes to fill this minute with but talk about yourselves",
    "start": "1780440",
    "end": "1787919"
  },
  {
    "text": "um again likewise I want something to push this button",
    "start": "1793399",
    "end": "1799679"
  },
  {
    "text": "hey okay no record bad so it's gone to okay you'll notice over here and that should have invoked the",
    "start": "1801360",
    "end": "1809320"
  },
  {
    "text": "Lambda function let's jump back into Lambda we can go here and we can say",
    "start": "1809320",
    "end": "1816640"
  },
  {
    "text": "monitoring invocation count hey we have one invocation it's worked okay so the",
    "start": "1816640",
    "end": "1822559"
  },
  {
    "text": "proof of the pudding is in this hey we've updated to 2344 GMT awesome it",
    "start": "1822559",
    "end": "1828320"
  },
  {
    "text": "works we might check back on that a little bit later but that's that's basically it and that will that now keep",
    "start": "1828320",
    "end": "1834640"
  },
  {
    "text": "going and keep inv invoking once a minute so anyway let's let's hop back to",
    "start": "1834640",
    "end": "1841200"
  },
  {
    "text": "the presentation we'll come back to that and take a look a little bit later so what can you use this for it's all",
    "start": "1841200",
    "end": "1848519"
  },
  {
    "text": "very cool and stuff but what can you use it for now we've actually been um triing using this to do something that I",
    "start": "1848519",
    "end": "1855120"
  },
  {
    "text": "mentioned a little bit earlier intelligence scaling on a schedule now um AWS allow you to",
    "start": "1855120",
    "end": "1862320"
  },
  {
    "text": "autoscale both dynamically based on on a metric and also on a schedule the auto",
    "start": "1862320",
    "end": "1869639"
  },
  {
    "text": "scaling on the schedule thing doesn't get mentioned so often because it's not as cool so um but it does have some",
    "start": "1869639",
    "end": "1876440"
  },
  {
    "text": "limitations the limitations are that um you have to specify an absolute number",
    "start": "1876440",
    "end": "1881880"
  },
  {
    "text": "of desired instances so if you put an auto auto scaling schedule in you have to say Okay at this time I want B 20",
    "start": "1881880",
    "end": "1889159"
  },
  {
    "text": "instances and also you you have a limit of 120 tasks per month which seems a little arbitrary now we've been triing",
    "start": "1889159",
    "end": "1896159"
  },
  {
    "text": "using a Lambda function triggered by lambar Chron and you can do more interesting stuff you can say Okay I",
    "start": "1896159",
    "end": "1902039"
  },
  {
    "text": "want to add 20% of the capacity at the moment at this time unless it's already",
    "start": "1902039",
    "end": "1907760"
  },
  {
    "text": "deployed out things like that you can actually put some intelligence into it and you can use lambron to do this and",
    "start": "1907760",
    "end": "1914120"
  },
  {
    "text": "of course because it's Lambda you have no additional infrastructure nothing to keep up hopefully not so much to go",
    "start": "1914120",
    "end": "1920840"
  },
  {
    "text": "wrong um so you can use it for things like that and um I'm sure you guys can",
    "start": "1920840",
    "end": "1926320"
  },
  {
    "text": "come up with other use cases now there's no point if it's not",
    "start": "1926320",
    "end": "1931559"
  },
  {
    "text": "reliable so empirically it's pretty reliable this has been running since April um which is when I when I first",
    "start": "1931559",
    "end": "1938519"
  },
  {
    "text": "did did this haven't had much intervention and you uh you'll have noticed that when I was configuring up",
    "start": "1938519",
    "end": "1944559"
  },
  {
    "text": "the alarm I put my email address in there so I can keep tabs on it my it Department are going to really hate me",
    "start": "1944559",
    "end": "1949760"
  },
  {
    "text": "because I've got 200,000 emails in one folder in Outlook our",
    "start": "1949760",
    "end": "1956600"
  },
  {
    "text": "look's pretty slow right now right um um so it's kept going you know it um",
    "start": "1956600",
    "end": "1962600"
  },
  {
    "text": "I haven't had to do much intervention I say it even comes back after outages it did always come back",
    "start": "1962600",
    "end": "1969080"
  },
  {
    "text": "after outages until a couple of weeks ago so a couple of weeks ago you may recall that there was a big outage the",
    "start": "1969080",
    "end": "1976519"
  },
  {
    "text": "AWS guys are going to hate me talk talking about this um um there was a big outage in in Us East now the first big",
    "start": "1976519",
    "end": "1983320"
  },
  {
    "text": "outage it came back fine we we had an outage because Lambda was affected so I",
    "start": "1983320",
    "end": "1989279"
  },
  {
    "text": "didn't have any emails for uh for that period and then once it all came back we had an insufficient data email and then",
    "start": "1989279",
    "end": "1996679"
  },
  {
    "text": "it uh coughed back into life so that proves that the insufficient data um uh",
    "start": "1996679",
    "end": "2002399"
  },
  {
    "text": "uh State rule is a is a good thing to do so that was that now there was a second outage a few days later that was that",
    "start": "2002399",
    "end": "2008880"
  },
  {
    "text": "was very similar and that didn't come back so what I'm saying is it is pretty",
    "start": "2008880",
    "end": "2014440"
  },
  {
    "text": "reliable it's been running for over six months and it's only gone down once and that was a that was pretty big outage",
    "start": "2014440",
    "end": "2020519"
  },
  {
    "text": "right so um so hopefully it's as reliable as as you would want but if",
    "start": "2020519",
    "end": "2026000"
  },
  {
    "text": "it's not 100% reliable we should monitor it now you can use cloudwatch for monitoring it you",
    "start": "2026000",
    "end": "2034240"
  },
  {
    "text": "get it works really well um um cloudwatch is awesome um so you get",
    "start": "2035279",
    "end": "2042639"
  },
  {
    "text": "Lambda publishes a metric into cloudwatch um every time it invokes so you can uh you can pick that up using",
    "start": "2042639",
    "end": "2048358"
  },
  {
    "text": "the sum aggregation method and you're getting 60 invocations an hour now you could set an alarm on that to send you",
    "start": "2048359",
    "end": "2056200"
  },
  {
    "text": "an email into the massive email bucket um if it goes wrong or I'm sure you guys",
    "start": "2056200",
    "end": "2062320"
  },
  {
    "text": "can think of a better way of monitoring it but um um you can use cloudwatch for that also you're running your jobs you",
    "start": "2062320",
    "end": "2068520"
  },
  {
    "text": "need to be monitoring that those jobs are doing what they should be doing as well as monitoring that the the Chrome",
    "start": "2068520",
    "end": "2073800"
  },
  {
    "text": "function is kicking off if you've got both of those things then hopefully you should be pretty covered uh with this",
    "start": "2073800",
    "end": "2081000"
  },
  {
    "text": "option okay so that's pretty much it so to summarize we're using cloudwatch",
    "start": "2081000",
    "end": "2087280"
  },
  {
    "text": "alarms as two states but we've actually got three states to enhance the reliability allows us to do stuff just",
    "start": "2087280",
    "end": "2093398"
  },
  {
    "text": "within Lambda and the Chrome function yeah it invokes about once minute now we",
    "start": "2093399",
    "end": "2099160"
  },
  {
    "text": "got some resources this is on GitHub um we've got the cloud formation I've put stack there but it's actually a template",
    "start": "2099160",
    "end": "2105079"
  },
  {
    "text": "on GitHub um cloud formation template so you can run this up just like I did in the demo we' got the Lambda function on",
    "start": "2105079",
    "end": "2111520"
  },
  {
    "text": "there um please email me um if you have any problems um it's all up there it's",
    "start": "2111520",
    "end": "2117200"
  },
  {
    "text": "up there right now um I just want to uh touch on the libraries we used as",
    "start": "2117200",
    "end": "2123520"
  },
  {
    "text": "well um we used the async library really really cool use it the Chrome pass Library also cool",
    "start": "2123520",
    "end": "2130599"
  },
  {
    "text": "use it if you need to pass Chrome tabs um and",
    "start": "2130599",
    "end": "2137240"
  },
  {
    "text": "also um I want to say remember to check out our products these guys have flown me here so I've got to say this um",
    "start": "2137240",
    "end": "2143599"
  },
  {
    "text": "remember to check our products um we got the unified threat management for AWS free trial is available go check out our",
    "start": "2143599",
    "end": "2149359"
  },
  {
    "text": "booth we're in the exhibition Hall we've got the secure server and there's free trials free AV",
    "start": "2149359",
    "end": "2156319"
  },
  {
    "text": "um feel free to use it it and that's pretty much it I'm going to leave it on on that slide any",
    "start": "2156319",
    "end": "2163000"
  },
  {
    "text": "questions thank you",
    "start": "2163000",
    "end": "2167160"
  }
]