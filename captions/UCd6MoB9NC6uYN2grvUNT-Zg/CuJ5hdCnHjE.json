[
  {
    "text": "hello everyone and welcome to today's webinar Rackspace best practices for",
    "start": "840",
    "end": "5960"
  },
  {
    "text": "devops on AWS thank you for joining you'll have the opportunity to submit questions to",
    "start": "5960",
    "end": "12759"
  },
  {
    "text": "today's presenters in the questions Pane and we will get these together and",
    "start": "12759",
    "end": "17760"
  },
  {
    "text": "address them during the Q&A session at the end of today's presentation if you uh if we can't get",
    "start": "17760",
    "end": "24960"
  },
  {
    "text": "to your question we'll plan on responding to each of you personally via email and the SL deck will be available",
    "start": "24960",
    "end": "31080"
  },
  {
    "text": "through SlideShare along with a recording of the webinar two to three days after the conclusion of this",
    "start": "31080",
    "end": "36559"
  },
  {
    "text": "presentation so keep an eye out for that email my name is Lex cett from Amazon",
    "start": "36559",
    "end": "42520"
  },
  {
    "text": "web services and I'll be your leadoff speaker and moderator for today's webinar I'm pleased to have my",
    "start": "42520",
    "end": "48879"
  },
  {
    "text": "colleagues from rack Bas Eric Johnson and Jerry Hargrove with me today as well",
    "start": "48879",
    "end": "54800"
  },
  {
    "text": "as our customer in common Larry Scott from script drop",
    "start": "54800",
    "end": "61239"
  },
  {
    "text": "I'll start off with a highlevel AWS devops overview and then the rack Bas",
    "start": "62920",
    "end": "68479"
  },
  {
    "text": "team will dive in to explain these tools and their application in depth we'll",
    "start": "68479",
    "end": "73880"
  },
  {
    "text": "also focus on the use of devops techniques with new technologies such as",
    "start": "73880",
    "end": "78920"
  },
  {
    "text": "microservices and containers script drop will run through their use case in some detail and",
    "start": "78920",
    "end": "85840"
  },
  {
    "text": "explain why they picked Rackspace and AWS as a platform finally we'll try to finish up with 15",
    "start": "85840",
    "end": "92560"
  },
  {
    "text": "minutes to spare so that we can all answer your",
    "start": "92560",
    "end": "97078"
  },
  {
    "text": "questions devops is the combination of cultural philosophies practices and",
    "start": "110200",
    "end": "115320"
  },
  {
    "text": "tools that you can use to improve your ability to deliver applications and services at High Velocity evolving in",
    "start": "115320",
    "end": "122920"
  },
  {
    "text": "improving your products at a faster Pace than any other than other organizations",
    "start": "122920",
    "end": "128000"
  },
  {
    "text": "can using traditional software development and infrastructure management processes you can use this",
    "start": "128000",
    "end": "133840"
  },
  {
    "text": "speed to better serve your customers and compete more effectively in the market there have been some interesting and",
    "start": "133840",
    "end": "140040"
  },
  {
    "text": "fairly hyperbolic statements from The Venture capitalists world uh saying",
    "start": "140040",
    "end": "145319"
  },
  {
    "text": "software is eating the world uh with respect to cloud computing and software software is definitely eating the",
    "start": "145319",
    "end": "151920"
  },
  {
    "text": "infrastructure creation world and to some degree software is also eating the",
    "start": "151920",
    "end": "157120"
  },
  {
    "text": "security world since it's possible to build and deploy applications the related infrastructure and security",
    "start": "157120",
    "end": "163800"
  },
  {
    "text": "methods using code and then test all of it to look for errors just as you would",
    "start": "163800",
    "end": "169680"
  },
  {
    "text": "have tested application software only in the old days while it is certainly",
    "start": "169680",
    "end": "174760"
  },
  {
    "text": "possible to use devops techniques in the on premises data center world it's faster easier and much more approachable",
    "start": "174760",
    "end": "182120"
  },
  {
    "text": "to do so on AWS AWS provides a set of flexible Services designed to help you more",
    "start": "182120",
    "end": "188840"
  },
  {
    "text": "rapidly and reliably build and deliver products using devop practices these",
    "start": "188840",
    "end": "194440"
  },
  {
    "text": "Services simplify provisioning and managing infrastructure deploying application code automating software",
    "start": "194440",
    "end": "200599"
  },
  {
    "text": "release processes and monitoring your application and infrastructure performance I'll do a high Lev overview",
    "start": "200599",
    "end": "207200"
  },
  {
    "text": "of these",
    "start": "207200",
    "end": "210400"
  },
  {
    "text": "after today's webinar we hope that you'll be able to return to work with a",
    "start": "214439",
    "end": "220239"
  },
  {
    "text": "renewed enthusiasm for Bridging the Gap between development and QA and your",
    "start": "220239",
    "end": "226319"
  },
  {
    "text": "infrastructure team you can use code to describe the application the infrastructure and the deployment",
    "start": "226319",
    "end": "232560"
  },
  {
    "text": "process and tell test all of it using software methods you can continue the",
    "start": "232560",
    "end": "237920"
  },
  {
    "text": "bridging exercise to work with your security and compliance team rather than waiting until a system is deployed and",
    "start": "237920",
    "end": "245079"
  },
  {
    "text": "then running through a checklist to see if it matches security standards it's possible to reflect those standards and",
    "start": "245079",
    "end": "251239"
  },
  {
    "text": "best practices in code and test them for correctness before the",
    "start": "251239",
    "end": "256239"
  },
  {
    "text": "fact as we talked to customers at AWS a key a key pain point is the ability to",
    "start": "256239",
    "end": "262759"
  },
  {
    "text": "release software more quickly avoiding and eliminating downtime and getting rid of those awful release Readiness",
    "start": "262759",
    "end": "268960"
  },
  {
    "text": "planning meetings where you re review a deployment run book and think about how to recover from a fail deployment if you",
    "start": "268960",
    "end": "276479"
  },
  {
    "text": "want to deploy software many times per day or per week and increase the velocity of your teams you need to adopt",
    "start": "276479",
    "end": "283600"
  },
  {
    "text": "devops techniques to do so using AWS Technologies can make this",
    "start": "283600",
    "end": "290160"
  },
  {
    "text": "easier the AWS developer tools are inspired by the same devops tools used",
    "start": "290960",
    "end": "297160"
  },
  {
    "text": "by Amazon's internal teams",
    "start": "297160",
    "end": "301400"
  },
  {
    "text": "and help you use software development best practices used by Amazon Amazon's",
    "start": "303160",
    "end": "308560"
  },
  {
    "text": "engineering teams function like small startups with each team responsible for everything from collecting customer",
    "start": "308560",
    "end": "315360"
  },
  {
    "text": "feedback and writing requirements to owning the development test deployment",
    "start": "315360",
    "end": "320880"
  },
  {
    "text": "and operations of their services Amazon created developer tools to help its teams independently release updates to",
    "start": "320880",
    "end": "327479"
  },
  {
    "text": "their customers more quickly and in the self-service manner you can use these",
    "start": "327479",
    "end": "332919"
  },
  {
    "text": "tools and services on AWS uh to get started quickly all you",
    "start": "332919",
    "end": "337960"
  },
  {
    "text": "need is an AWS account there's no software required or software to install many of the services are fully",
    "start": "337960",
    "end": "344680"
  },
  {
    "text": "managed meaning that you can take advantage of AWS resources more quickly you don't have to worry about setting up",
    "start": "344680",
    "end": "351000"
  },
  {
    "text": "installing and operating infrastructure on your own and this allows you to focus on your core product uh these tools are",
    "start": "351000",
    "end": "358680"
  },
  {
    "text": "also built for scale SC you can manage a single instance or scale up to thousands using AWS Services these Services make",
    "start": "358680",
    "end": "367160"
  },
  {
    "text": "uh it make the best of flexible compute Resources by simplifying provisioning",
    "start": "367160",
    "end": "373400"
  },
  {
    "text": "coni configuration and scaling and finally there are cicd tools",
    "start": "373400",
    "end": "379039"
  },
  {
    "text": "AWS developer tools which will help you securely store and verion your application source code and",
    "start": "379039",
    "end": "385319"
  },
  {
    "text": "automatically build test and deploy your application to AWS or your on premises",
    "start": "385319",
    "end": "391120"
  },
  {
    "text": "environment you can start with AWS code pipeline to build a continuous integration or continuous delivery",
    "start": "391120",
    "end": "396560"
  },
  {
    "text": "workflow that uses AWS code uh build AWS code deploy and other tools or use each",
    "start": "396560",
    "end": "404000"
  },
  {
    "text": "service separately with your own tools if you wish the Rackspace team will talk more",
    "start": "404000",
    "end": "409639"
  },
  {
    "text": "about these in uh additional detail to get started with",
    "start": "409639",
    "end": "414840"
  },
  {
    "text": "infrastructure as code you can use AWS cloud formation to make it easy to create and manage a collection of",
    "start": "414840",
    "end": "420800"
  },
  {
    "text": "related AWS resources provisioning and updating them in an orderly and predictable fashion uh I don't know if",
    "start": "420800",
    "end": "427879"
  },
  {
    "text": "you've seen the bumper sticker out there that rides around on some uh cars uh but",
    "start": "427879",
    "end": "433720"
  },
  {
    "text": "uh the joke is that my other data center is a text file that's the kind of capability that you can use and with",
    "start": "433720",
    "end": "442240"
  },
  {
    "text": "cloud formation so you can use uh cloud formation sample templates or create your own templates to describe the AWS",
    "start": "442240",
    "end": "449120"
  },
  {
    "text": "resource you want to deploy and along with any Associated dependencies or",
    "start": "449120",
    "end": "454800"
  },
  {
    "text": "runtime parameters required to run the application and there's an AWS cloud formation designer you'll also hear uh",
    "start": "454800",
    "end": "463240"
  },
  {
    "text": "as you learn more about cloud formation about other tools and Technologies out there that offer similar benefits such",
    "start": "463240",
    "end": "469560"
  },
  {
    "text": "as Chef puppet anible terraform and",
    "start": "469560",
    "end": "475599"
  },
  {
    "text": "others you can and this is an interesting topic which will come up later uh you can build and deploy",
    "start": "477319",
    "end": "483800"
  },
  {
    "text": "microservices architecture using containers or serverless Computing and there's lots of strong feelings about",
    "start": "483800",
    "end": "489440"
  },
  {
    "text": "when to use each or either um we have at AWS an ec2 container service that allows",
    "start": "489440",
    "end": "496400"
  },
  {
    "text": "you to build a production Docker platform with very little to manage uh and be able to scale up that uh Docker",
    "start": "496400",
    "end": "504240"
  },
  {
    "text": "uh container service instance uh without any hard work at all we also",
    "start": "504240",
    "end": "510120"
  },
  {
    "text": "uh offer serverless Computing with a capability called AWS Lambda that lets",
    "start": "510120",
    "end": "516279"
  },
  {
    "text": "you run code without provisioning or managing servers with you code for",
    "start": "516279",
    "end": "521680"
  },
  {
    "text": "virtually any type of application or backend service with zero Administration just upload your code and Lambda takes",
    "start": "521680",
    "end": "528080"
  },
  {
    "text": "care of the rest most AWS customers that will will",
    "start": "528080",
    "end": "536040"
  },
  {
    "text": "tell you that their goal is to log everything because they have the goal of getting to zero errors in their logs and",
    "start": "536040",
    "end": "541800"
  },
  {
    "text": "therefore to get to the highest possible level of reliability availability and security of of their applications and",
    "start": "541800",
    "end": "549040"
  },
  {
    "text": "infrastructure really all logs have business value there's a joke that Netflix is a Logging company that",
    "start": "549040",
    "end": "555600"
  },
  {
    "text": "occasionally streams video as a leading adopter of AWS Technologies Netflix",
    "start": "555600",
    "end": "561279"
  },
  {
    "text": "exemplifies the use of logging to optimize continuous integration and deployment of applications and using",
    "start": "561279",
    "end": "567279"
  },
  {
    "text": "infrastructure as code you can use Amazon cloudwatch and cloudwatch metrics to monitor your infrastructure and use",
    "start": "567279",
    "end": "574000"
  },
  {
    "text": "code to respond to failures via Lambda functions for instance you can use cloudwatch logs to monitor store and",
    "start": "574000",
    "end": "580560"
  },
  {
    "text": "access your log files from ec2 instances and from cloud others and uh I can go on",
    "start": "580560",
    "end": "587519"
  },
  {
    "text": "from there but I'll continue with a focus on",
    "start": "587519",
    "end": "591800"
  },
  {
    "text": "devops with respect to continuous integration and continuous delivery the AWS developer tools help you securely",
    "start": "593519",
    "end": "600200"
  },
  {
    "text": "store inversion your application source and automatically build test in your",
    "start": "600200",
    "end": "605440"
  },
  {
    "text": "build test and deploy your applications so you can start with AWS code pipeline",
    "start": "605440",
    "end": "610760"
  },
  {
    "text": "or you can use any of the code. star uh services that are out there and you'll hear more about this from the RX Bas",
    "start": "610760",
    "end": "617880"
  },
  {
    "text": "team and from script script drop their customer",
    "start": "617880",
    "end": "623959"
  },
  {
    "text": "so in general what are the benefits of devops on AWS first you can automate",
    "start": "633360",
    "end": "639279"
  },
  {
    "text": "systems operation you can get started quickly and pay as you go by using our tools or your own you can improve",
    "start": "639279",
    "end": "647000"
  },
  {
    "text": "visibility and security into the performance of your applications and the ability toate them uh quickly in",
    "start": "647000",
    "end": "653519"
  },
  {
    "text": "response to difficulties you can leverage fully managed services to do it all and you can scale without",
    "start": "653519",
    "end": "659440"
  },
  {
    "text": "infrastructure constraints so with that I'm going to turn it over to my Rx Bas colleague Eric",
    "start": "659440",
    "end": "667000"
  },
  {
    "text": "please take it away all right thank you Lex I",
    "start": "667000",
    "end": "672360"
  },
  {
    "text": "appreciate it um we're g to climb in you know Lex talked about kind of an overview of devops and and how you know",
    "start": "672360",
    "end": "679399"
  },
  {
    "text": "how devops works and how AWS works and and we're going to get more specific as as we're going forward all the way to",
    "start": "679399",
    "end": "685480"
  },
  {
    "text": "the point on on how do you deal with devops and containers but before we do that I want to talk about some of the tools that we that are that AWS has",
    "start": "685480",
    "end": "692839"
  },
  {
    "text": "specifically for devops and uh so we'll jump into that just a little bit of an intro my name is Eric Johnson I'm the",
    "start": "692839",
    "end": "698720"
  },
  {
    "text": "AWS evangelist and and also a cloud architect for Rackspace I love all things development and Architectural uh",
    "start": "698720",
    "end": "706399"
  },
  {
    "text": "and I'm a real geek about devops itself I love Automation and seeing how it could be done better and better so let's",
    "start": "706399",
    "end": "714000"
  },
  {
    "text": "get started so the first tool we look at uh is called cloud",
    "start": "714000",
    "end": "719920"
  },
  {
    "text": "formation and cloud formation you know this idea of infrastructure as code is really embodied in cloud formation this",
    "start": "719920",
    "end": "726120"
  },
  {
    "text": "is aws's native answer to how do I keep my code as you know as you know as or",
    "start": "726120",
    "end": "732360"
  },
  {
    "text": "how do I keep my infrastructure as code uh and I like the idea of the bumper sticker and my other data center is a",
    "start": "732360",
    "end": "737760"
  },
  {
    "text": "text file but if you want to be syntactically correct it'd be my other data center is a yaml file or you know",
    "start": "737760",
    "end": "743480"
  },
  {
    "text": "or Json file and I really like that idea so um Cloud F supports a wide range of",
    "start": "743480",
    "end": "749279"
  },
  {
    "text": "ABS Services you can you can bring up just about most of AWS uh through cloud formation it's declarative and flexible",
    "start": "749279",
    "end": "755760"
  },
  {
    "text": "uh and it supports both Json and yaml uh formats the next tool that they provide",
    "start": "755760",
    "end": "762519"
  },
  {
    "text": "uh is called uh is called uh code commit excuse me uh now code commit and my uh",
    "start": "762519",
    "end": "768760"
  },
  {
    "text": "presentation's working to keep up with me here so bear with me one",
    "start": "768760",
    "end": "774240"
  },
  {
    "text": "second all right we're having issues taking control there we go so AWS code",
    "start": "776959",
    "end": "782959"
  },
  {
    "text": "commit is you know it's kind of in the name it's a fully managed repo service this is where you're going to commit your code uh it's a private repository",
    "start": "782959",
    "end": "790079"
  },
  {
    "text": "secured through AWS IM Access Control uh it's get compatible uh but it's also AWS",
    "start": "790079",
    "end": "795720"
  },
  {
    "text": "CLI accessible so you can use both patterns uh this the nice thing about code commit is it's right in your AWS",
    "start": "795720",
    "end": "803040"
  },
  {
    "text": "account it allows you you know the security is kind of built in automatically uh so that that provides",
    "start": "803040",
    "end": "808480"
  },
  {
    "text": "you a place like again that gives you a git compatible repository and it ties in with you know the the code pipeline uh",
    "start": "808480",
    "end": "815560"
  },
  {
    "text": "and different tools throughout so the next tool that we're",
    "start": "815560",
    "end": "821240"
  },
  {
    "text": "going to talk about is called uh is called code pipeline now code pipeline is it's the overarching tool that kind",
    "start": "821240",
    "end": "828920"
  },
  {
    "text": "of it orchestrates the rest of them so code pipeline is going to listen to code commit and watch for new uh commits",
    "start": "828920",
    "end": "835839"
  },
  {
    "text": "coming in it's going to then you know call on code uh build to to build stuff it's going to call on code deploy to",
    "start": "835839",
    "end": "842560"
  },
  {
    "text": "deploy stuff it's going to call on Lambda to do kind of you know whatever you want uh so you know Lambda is kind",
    "start": "842560",
    "end": "848320"
  },
  {
    "text": "of that you know the the super toolbox you can do anything with and it's tied in with code pipeline so you can you",
    "start": "848320",
    "end": "854399"
  },
  {
    "text": "know send SCS messages or or SNS messages and and and and do all that with code pipeline it's it's really a",
    "start": "854399",
    "end": "861120"
  },
  {
    "text": "workflow modeling you're able to say okay build this test this deploy this or test this build this and then get get uh",
    "start": "861120",
    "end": "869320"
  },
  {
    "text": "authorization to deploy something uh it has it's AWS Integrations like we talked about it also has third party",
    "start": "869320",
    "end": "874880"
  },
  {
    "text": "Integrations so if you do want to use jenin or you want you there's there's different things that you can use where",
    "start": "874880",
    "end": "881279"
  },
  {
    "text": "you may not want to use code build to build and test you may use something else so it'll shift the ship the artifacts out let you do what you want",
    "start": "881279",
    "end": "887600"
  },
  {
    "text": "in a third party and then let those ship them back into code pipeline so it handles the you know again the overall",
    "start": "887600",
    "end": "894639"
  },
  {
    "text": "orchestration all right next to we're going to talk about is AWS code build now this is the newest Tool uh brought",
    "start": "894639",
    "end": "901040"
  },
  {
    "text": "by AWS this was announced last year in 2016 in the uh AWS reinvent and to me",
    "start": "901040",
    "end": "906160"
  },
  {
    "text": "this is kind of the missing piece uh this this is used to build end test code it takes preconfigured build",
    "start": "906160",
    "end": "911880"
  },
  {
    "text": "environments or you can customize your own uh is fully config configurable has",
    "start": "911880",
    "end": "916959"
  },
  {
    "text": "centralized monitoring on it and and really if you think about it the way it works is you know I'm going to have",
    "start": "916959",
    "end": "923279"
  },
  {
    "text": "what's called a buildpc file it's going to sit in the root of my project and when I load my project up when code",
    "start": "923279",
    "end": "929000"
  },
  {
    "text": "pipeline gets my project and pass it code to code build code build's going to read that build spec and the build spec",
    "start": "929000",
    "end": "934040"
  },
  {
    "text": "is literally just a set of command lines so if you can do it from a command line on your machine you can do it uh in code",
    "start": "934040",
    "end": "940800"
  },
  {
    "text": "build and again that gives you tons of flexibility and you can bake you know you can bake a lot of stuff into your",
    "start": "940800",
    "end": "946839"
  },
  {
    "text": "environment because it's a container that's spinning up or you can spin up you know just one of the pre-built ones from AWS and and install things as you",
    "start": "946839",
    "end": "954160"
  },
  {
    "text": "need uh so code build really kind of kind of rounds out the suite of of devop",
    "start": "954160",
    "end": "959560"
  },
  {
    "text": "tools the final tool we're going to talk about is code deploy code deploy is is you know all right I've done all my",
    "start": "959560",
    "end": "966000"
  },
  {
    "text": "continuous integration everything's continuously integrating but now I need to deploy it so that's that's exactly",
    "start": "966000",
    "end": "971040"
  },
  {
    "text": "what code deploy does it's it's automated repeatable deployments it does now here the fun part about it is it'll",
    "start": "971040",
    "end": "976880"
  },
  {
    "text": "it'll deploy into AWS ec2s obviously that makes sense but it'll also deploy into on premise deployment so if you",
    "start": "976880",
    "end": "983279"
  },
  {
    "text": "have a hybrid setup you're not stuck with okay I'm going to deploy to AWS through my code deploy but then I have to manually deploy to my premise you can",
    "start": "983279",
    "end": "990120"
  },
  {
    "text": "easily maintain and control those as well it provides rolling and blue green updates so you can you know roll out to",
    "start": "990120",
    "end": "996279"
  },
  {
    "text": "partial machines or you can set up a whole new one and and switch over uh easy to roll back uh and centralized",
    "start": "996279",
    "end": "1003040"
  },
  {
    "text": "monitoring which which is critical in a in a cicd operation when when that monitoring happens when the flags go off",
    "start": "1003040",
    "end": "1008720"
  },
  {
    "text": "you're able to to roll things back so that gives you a little bit of of overview on on the devops tools that",
    "start": "1008720",
    "end": "1015399"
  },
  {
    "text": "that you know AWS provides there's a couple more I'm going to let Jerry tell you about those as he starts climbing into uh containers and devops for",
    "start": "1015399",
    "end": "1022800"
  },
  {
    "text": "containers Jerry all right so thanks Eric um and",
    "start": "1022800",
    "end": "1029760"
  },
  {
    "text": "welcome everybody um my name is Jerry Hargrove and I'll be talking a little",
    "start": "1029760",
    "end": "1035640"
  },
  {
    "text": "bit about uh devops and new technologies today specifically around",
    "start": "1035640",
    "end": "1041640"
  },
  {
    "text": "containers um and just to give you a little bit of background I'm a member of a group of solutions Architects at",
    "start": "1041640",
    "end": "1047600"
  },
  {
    "text": "Rackspace and our role is to work with racks based customers who are making",
    "start": "1047600",
    "end": "1054080"
  },
  {
    "text": "their Journey to the AWS Cloud um we provide sort of best practice architectural guidance and advice to",
    "start": "1054080",
    "end": "1062240"
  },
  {
    "text": "customers as they're moving their way to the cloud to make sure that their applications and workloads are are",
    "start": "1062240",
    "end": "1067400"
  },
  {
    "text": "effectively cloud ready working with them with on on things like high availability high scalability and fault",
    "start": "1067400",
    "end": "1074280"
  },
  {
    "text": "tolerance effectively to make sure that they're uh good Cloud citizens uh today what I'm going to share with you though",
    "start": "1074280",
    "end": "1081080"
  },
  {
    "text": "are some of those best practices particularly those associated with um uh",
    "start": "1081080",
    "end": "1087240"
  },
  {
    "text": "customers who are running containerized applications on the cloud and being good container uh citizens um so let's go",
    "start": "1087240",
    "end": "1095000"
  },
  {
    "text": "ahead and and get started with that the first question though that um the first",
    "start": "1095000",
    "end": "1100720"
  },
  {
    "text": "topic that usually comes up though in talking with with customers who are using containers is really why containers why containers now so you",
    "start": "1100720",
    "end": "1108440"
  },
  {
    "text": "know in sort of the evolution of the industry and Technology why are we using containers now and why containers here",
    "start": "1108440",
    "end": "1114720"
  },
  {
    "text": "why are you using containers for your particular uh applications so I'd like",
    "start": "1114720",
    "end": "1119960"
  },
  {
    "text": "to start with just a real quick overview of container history for to to get an answer to those uh two",
    "start": "1119960",
    "end": "1128879"
  },
  {
    "text": "questions um the question why containers now um is is really just a part of the",
    "start": "1132200",
    "end": "1139280"
  },
  {
    "text": "evolution of Technology containers have been around for a long time and they've actually been work in progress for uh",
    "start": "1139280",
    "end": "1145799"
  },
  {
    "text": "quite a long time um their Origins go back to even before you know BSD jails",
    "start": "1145799",
    "end": "1151360"
  },
  {
    "text": "Solaris zones um well back into the 70s when we were working on things like uh",
    "start": "1151360",
    "end": "1157720"
  },
  {
    "text": "CH root and process isolation and and the evolution of distributed computing just in general from Individual servers",
    "start": "1157720",
    "end": "1164520"
  },
  {
    "text": "to Virtual machines um and now to containers effectively OS virtualization",
    "start": "1164520",
    "end": "1170400"
  },
  {
    "text": "is sort of a logical one that's been a long time incoming so the fact that we're using containers Now is really",
    "start": "1170400",
    "end": "1176760"
  },
  {
    "text": "just a matter of evolution just like other changes that we've seen in the industry so the next question then is",
    "start": "1176760",
    "end": "1182280"
  },
  {
    "text": "why containers here why are we why as a customer are you using containers in this particular application and and",
    "start": "1182280",
    "end": "1189159"
  },
  {
    "text": "oftentimes that's attributed to their popularity um in recent years in developer circles it's coming from a",
    "start": "1189159",
    "end": "1195520"
  },
  {
    "text": "developer background I can attest that you know I like containing because you know as long as I'm",
    "start": "1195520",
    "end": "1200559"
  },
  {
    "text": "following best practices my code works the same everywhere whether it's I'm running it in a container on my laptop",
    "start": "1200559",
    "end": "1207320"
  },
  {
    "text": "on a server as long as there's a Linux kernel um underneath and the use of containers can help help me speed up my",
    "start": "1207320",
    "end": "1214799"
  },
  {
    "text": "development and uh tighten up the feedback loop on uh changes and",
    "start": "1214799",
    "end": "1220200"
  },
  {
    "text": "adjustments that need to be made to my container images and can also help me deploy them more quickly they help",
    "start": "1220200",
    "end": "1225799"
  },
  {
    "text": "streamline development and deployment now a lot of focus recently has been on development tools but but even more",
    "start": "1225799",
    "end": "1231799"
  },
  {
    "text": "recently we've seen much more focus on um production use of containers around",
    "start": "1231799",
    "end": "1238559"
  },
  {
    "text": "orchestration and and orchestration tools and that's why we see a lot of of interest in containers now moving into",
    "start": "1238559",
    "end": "1247000"
  },
  {
    "text": "into production workloads so let's go ahead and start talking about some of the best practices that we've uh seen",
    "start": "1247000",
    "end": "1254360"
  },
  {
    "text": "and established at Rackspace around the use of containers",
    "start": "1254360",
    "end": "1259600"
  },
  {
    "text": "the first best practice we're going to talk about associated with container images is around image size in in",
    "start": "1259600",
    "end": "1266400"
  },
  {
    "text": "particular minimizing container image sizes um container size is often a very",
    "start": "1266400",
    "end": "1273880"
  },
  {
    "text": "important factor in the effectiveness of of anyone's cicd",
    "start": "1273880",
    "end": "1279320"
  },
  {
    "text": "pipeline um in a in a very Dynamic agile environment where we have very tight",
    "start": "1279320",
    "end": "1284960"
  },
  {
    "text": "feedback loops where we're making changes often we're Tes in them often and we're getting feedback often",
    "start": "1284960",
    "end": "1293520"
  },
  {
    "text": "um nonoptimal images large images effectively uh can slow deployment down",
    "start": "1293520",
    "end": "1300840"
  },
  {
    "text": "of those images to containers and and then subsequently delay feedback",
    "start": "1300840",
    "end": "1307440"
  },
  {
    "text": "um as a result of testing so in order to",
    "start": "1307440",
    "end": "1312720"
  },
  {
    "text": "reduce the size of container image it's interesting to just do a quick refresher on the the structure of Docker images um",
    "start": "1312720",
    "end": "1320279"
  },
  {
    "text": "if you look at the diagram here on the right you can see the sort of the basic layout of of a Docker image and without",
    "start": "1320279",
    "end": "1326400"
  },
  {
    "text": "going into a huge amount of detail Docker images are built using layers and",
    "start": "1326400",
    "end": "1332799"
  },
  {
    "text": "those layers contain things like the operating system they contain libraries",
    "start": "1332799",
    "end": "1337840"
  },
  {
    "text": "third-party software configuration files Etc that are associated with your",
    "start": "1337840",
    "end": "1343400"
  },
  {
    "text": "application and so if you have large libraries those will contribute to the",
    "start": "1343400",
    "end": "1349039"
  },
  {
    "text": "image size if you have large binaries those will also contribute to the image size as will the operating system so",
    "start": "1349039",
    "end": "1357679"
  },
  {
    "text": "it's important when you're putting these images together that number one use as",
    "start": "1357679",
    "end": "1363240"
  },
  {
    "text": "small a base image as possible like the Debian image or one of the Alpine images",
    "start": "1363240",
    "end": "1369000"
  },
  {
    "text": "so that you're not carrying around additional resources Services libraries",
    "start": "1369000",
    "end": "1374360"
  },
  {
    "text": "that aren't applicable to your particular application if they are there",
    "start": "1374360",
    "end": "1379400"
  },
  {
    "text": "then every time you deploy this application those will have to be copied over the other thing is don't install",
    "start": "1379400",
    "end": "1386840"
  },
  {
    "text": "unnecessary packages in your application again unnecessary packages they're not",
    "start": "1386840",
    "end": "1392960"
  },
  {
    "text": "going to be used they simply add to the size of the image and increase the amount of time to move that image",
    "start": "1392960",
    "end": "1400360"
  },
  {
    "text": "around um and and also use do Docker ignore it it's very easy to Simply add",
    "start": "1400360",
    "end": "1407720"
  },
  {
    "text": "files uh to. Docker ignore so that when you do a Docker build those aren't included in your particular image",
    "start": "1407720",
    "end": "1415159"
  },
  {
    "text": "another um uh best practice is as you're doing installation of software in um",
    "start": "1415159",
    "end": "1422919"
  },
  {
    "text": "your Docker file remember that if you're downloading something you're unzipping it expanding it and install it",
    "start": "1422919",
    "end": "1429799"
  },
  {
    "text": "installing it remember to actually de delete the original zip file there's no reason to keep it in the image um so",
    "start": "1429799",
    "end": "1438000"
  },
  {
    "text": "these techniques like You' see in here are often used to optimize add image",
    "start": "1438000",
    "end": "1443880"
  },
  {
    "text": "size um in addition to these methods having an understanding of docker's use",
    "start": "1443880",
    "end": "1450360"
  },
  {
    "text": "of copy on Right storage and how it how it changes to uh per container writable",
    "start": "1450360",
    "end": "1457240"
  },
  {
    "text": "layer and use of shared image layers are important so that if if you're shipping",
    "start": "1457240",
    "end": "1465240"
  },
  {
    "text": "a large file that is going to be written to by your",
    "start": "1465240",
    "end": "1470720"
  },
  {
    "text": "application understand that every time each time that's written to that an actual copy of that will be made on the",
    "start": "1470720",
    "end": "1477320"
  },
  {
    "text": "local file system so if you have large writable files it's best to optimize",
    "start": "1477320",
    "end": "1483200"
  },
  {
    "text": "those and try a different technique um smaller more concise container images like I mentioned result in more",
    "start": "1483200",
    "end": "1490640"
  },
  {
    "text": "operationally efficient deployment pipelines with tighter feedback loops and systems can be more effectively or",
    "start": "1490640",
    "end": "1498679"
  },
  {
    "text": "more effectively and efficiently make use of available system resources like disk space memory and and",
    "start": "1498679",
    "end": "1506200"
  },
  {
    "text": "CPU so the next um topic that I'd like to talk about is running containers as",
    "start": "1506200",
    "end": "1514000"
  },
  {
    "text": "root um when we run applications on directly",
    "start": "1514000",
    "end": "1519399"
  },
  {
    "text": "on our own computers like our laptop or our desktop service we usually avoid running as the root user or admin user",
    "start": "1519399",
    "end": "1527640"
  },
  {
    "text": "unless absolutely necessary and if you work in a corporate environment that is something that is strictly enforced",
    "start": "1527640",
    "end": "1535000"
  },
  {
    "text": "oftentimes um not running applications as a root user is is viewed as being a",
    "start": "1535000",
    "end": "1540399"
  },
  {
    "text": "best security practice so we don't want to do that but when we run applications inside of a Docker container very often",
    "start": "1540399",
    "end": "1547799"
  },
  {
    "text": "we don't have qualms about running everything as the root user and as a matter of fact that's the default so and",
    "start": "1547799",
    "end": "1554799"
  },
  {
    "text": "and it can certainly be the the case that you know running applications in",
    "start": "1554799",
    "end": "1560640"
  },
  {
    "text": "containers we can consider those as effectively isolated and that they shouldn't be able to break out and as a",
    "start": "1560640",
    "end": "1566919"
  },
  {
    "text": "matter of fact um things like name spaces and control groups exist to limit what a particular process can see and",
    "start": "1566919",
    "end": "1574320"
  },
  {
    "text": "use like file systems or how much CPU or Ram they can allocate but the fact",
    "start": "1574320",
    "end": "1579840"
  },
  {
    "text": "remains a process that is running with root capabilities could increase uh the",
    "start": "1579840",
    "end": "1587000"
  },
  {
    "text": "risk of an application being able to use those elevated privileges to access um",
    "start": "1587000",
    "end": "1592279"
  },
  {
    "text": "resource unintended resources um due to a bug for example in",
    "start": "1592279",
    "end": "1597640"
  },
  {
    "text": "Docker or a misconfiguration so it's always best to Simply avoid the possibility alt together and run a",
    "start": "1597640",
    "end": "1605679"
  },
  {
    "text": "explicitly as a nonroot user and i' I've shown a sample Docker file here on the right hand side that that shows um how",
    "start": "1605679",
    "end": "1614360"
  },
  {
    "text": "to use a non-privileged user if you don't have that user state m in your Docker file it will run as the root user",
    "start": "1614360",
    "end": "1622760"
  },
  {
    "text": "um it's also important to look at the source image that you're pulling from to",
    "start": "1622760",
    "end": "1628520"
  },
  {
    "text": "see what user that Source image is using so that when you do inherit from that",
    "start": "1628520",
    "end": "1634640"
  },
  {
    "text": "that you're you understand what level of permissions and privileges that container is running",
    "start": "1634640",
    "end": "1641520"
  },
  {
    "text": "as so the next topic I'd like to to switch to the next best practice is",
    "start": "1641520",
    "end": "1646840"
  },
  {
    "text": "container scope um it you know it's very commonly heard",
    "start": "1646840",
    "end": "1652640"
  },
  {
    "text": "in the container world that you should run each container and",
    "start": "1652640",
    "end": "1659120"
  },
  {
    "text": "each container should have a single process in it now this this this",
    "start": "1659120",
    "end": "1664919"
  },
  {
    "text": "practice espouses the sort of the separation of applications and services into their component pieces each one of",
    "start": "1664919",
    "end": "1671320"
  },
  {
    "text": "those pieces uh residing in its own container I mean and the benefits of this decomposition are similar to those",
    "start": "1671320",
    "end": "1677480"
  },
  {
    "text": "found when we're building applications and architectures that we want to be highly available and super scalable we",
    "start": "1677480",
    "end": "1683919"
  },
  {
    "text": "can decouple those components they're allowed to very independent of one another they can scale at different rates you can use different tools and",
    "start": "1683919",
    "end": "1691200"
  },
  {
    "text": "different languages on each one of these components and they can have differing dependencies and libraries Etc I mean",
    "start": "1691200",
    "end": "1697080"
  },
  {
    "text": "those benefits are they're true they're real they're tangible but the thing to be careful about is taking this too",
    "start": "1697080",
    "end": "1703559"
  },
  {
    "text": "literally and applying it at too granular level you know it sounds um",
    "start": "1703559",
    "end": "1710120"
  },
  {
    "text": "it's a very sound argument theoretically but in practical application it can",
    "start": "1710880",
    "end": "1715919"
  },
  {
    "text": "become a a large burden to manage you know the potential fan out of additional Services metrics and logs associated",
    "start": "1715919",
    "end": "1723399"
  },
  {
    "text": "with all those different containers could negate some of those benefits so what we recommend is that for most systems simply using a role-based",
    "start": "1723399",
    "end": "1730120"
  },
  {
    "text": "container boundary are often sufficient and and more provide more B benefit",
    "start": "1730120",
    "end": "1735200"
  },
  {
    "text": "there's no reason to break it down as granular as you might find in in some",
    "start": "1735200",
    "end": "1741360"
  },
  {
    "text": "cases so moving on from uh container images themselves let's talk a little",
    "start": "1741559",
    "end": "1747080"
  },
  {
    "text": "bit about container orchestration as I mentioned um as we move from",
    "start": "1747080",
    "end": "1755080"
  },
  {
    "text": "containerized development environments to containerized production environments",
    "start": "1755080",
    "end": "1760120"
  },
  {
    "text": "we start to see different types of best practices come out and and the first is",
    "start": "1760120",
    "end": "1766399"
  },
  {
    "text": "really around orchestration of these environments um orchestration just a brief definition of",
    "start": "1766399",
    "end": "1773799"
  },
  {
    "text": "it is you know we like to think about it as including tasks associated with scheduling of containers placement of",
    "start": "1773799",
    "end": "1780559"
  },
  {
    "text": "them how to replicate and scale them how to resurrect them should there be a",
    "start": "1780559",
    "end": "1786320"
  },
  {
    "text": "problem and a container die uh when to reschedule how to do upgrades and downgrades of containers um you know",
    "start": "1786320",
    "end": "1793799"
  },
  {
    "text": "orchestration also includes Resource Management like uh memory CPU discs IP",
    "start": "1793799",
    "end": "1799720"
  },
  {
    "text": "addresses container images um service management like uh orchestrating groups",
    "start": "1799720",
    "end": "1806200"
  },
  {
    "text": "of containers into a service if you will load balancing traffic to Containers within that service assessing the health",
    "start": "1806200",
    "end": "1813240"
  },
  {
    "text": "of those containers and so what we found is that when you it comes down to",
    "start": "1813240",
    "end": "1819279"
  },
  {
    "text": "actually choosing a container orchestration system it can turn out to be a very important decision and it",
    "start": "1819279",
    "end": "1826519"
  },
  {
    "text": "includes you know key fact factors like you know when you're choosing an orchestration system what",
    "start": "1826519",
    "end": "1832519"
  },
  {
    "text": "are some of the features that that are provided with it what level of experience your team might have with it",
    "start": "1832519",
    "end": "1839960"
  },
  {
    "text": "um licensing for example you might choose a particular platform like Amazon's um ECS system or contenna",
    "start": "1839960",
    "end": "1847799"
  },
  {
    "text": "because your members of your team have previous experience with it um and it'll reduce ramp time and reduce time to",
    "start": "1847799",
    "end": "1854760"
  },
  {
    "text": "Market um or you might simply choose an orchestration simp a system because it happens to be open source and free the",
    "start": "1854760",
    "end": "1862440"
  },
  {
    "text": "one thing that we've found though is that oftentimes that orchestration system isn't what differentiate",
    "start": "1862440",
    "end": "1868120"
  },
  {
    "text": "differentiates you from your customer and um when we provide recommendations",
    "start": "1868120",
    "end": "1873279"
  },
  {
    "text": "to customers around orchestration um we often recommend",
    "start": "1873279",
    "end": "1878919"
  },
  {
    "text": "choosing a managed system over a do-it-yourself self-managed system now in the AWS environment you have um",
    "start": "1878919",
    "end": "1886360"
  },
  {
    "text": "because of the nature of it and the flexibility of it you always have the opportunity to run orchestration on ec2",
    "start": "1886360",
    "end": "1893240"
  },
  {
    "text": "and you can run things like Docker swarm you can run contenna you can run kubernetes as well as other mesosphere",
    "start": "1893240",
    "end": "1900360"
  },
  {
    "text": "there's there's a whole slew of them now that are coming out where you are then responsible for managing those or you",
    "start": "1900360",
    "end": "1905960"
  },
  {
    "text": "can hand it all over to Amazon ECS and have them manage it for you that's our",
    "start": "1905960",
    "end": "1911480"
  },
  {
    "text": "best practice and recommendation is that you use a managed service like that so you can focus on your particular",
    "start": "1911480",
    "end": "1917159"
  },
  {
    "text": "application not on the underlying infrastructure um one other thing to",
    "start": "1917159",
    "end": "1923080"
  },
  {
    "text": "think about in terms of orchestration is just that container pipeline that you're going to be using and I'd like to share",
    "start": "1923080",
    "end": "1930480"
  },
  {
    "text": "with you right now A a very common pipeline that we see that works well in development and in production and this",
    "start": "1930480",
    "end": "1937799"
  },
  {
    "text": "particular one here is composed of all managed AWS services and features and",
    "start": "1937799",
    "end": "1945039"
  },
  {
    "text": "for the benefits I I mentioned before we would default to this type of environment and making recommendations",
    "start": "1945039",
    "end": "1951480"
  },
  {
    "text": "to customers so just kind of walking through this environment from left to right just to give you some familiarity",
    "start": "1951480",
    "end": "1956919"
  },
  {
    "text": "with it um in this environment containers or I'm sorry developers are you know integrating their changes",
    "start": "1956919",
    "end": "1963559"
  },
  {
    "text": "together into a source repository on the left in this case it's AWS code commit",
    "start": "1963559",
    "end": "1970519"
  },
  {
    "text": "um AWS code pipeline just to the right of that is polling that Source",
    "start": "1970519",
    "end": "1976200"
  },
  {
    "text": "repository and when it detects the change triggers execution of a uh uh",
    "start": "1976200",
    "end": "1983320"
  },
  {
    "text": "continuous delivery Pipeline with a new revision that code pipeline then sends",
    "start": "1983320",
    "end": "1989080"
  },
  {
    "text": "that new revision to code build in this case which builds the docker container image from the source code located in",
    "start": "1989080",
    "end": "1995720"
  },
  {
    "text": "the repository AWS code build then pushes that newly built Docker container",
    "start": "1995720",
    "end": "2002559"
  },
  {
    "text": "image to an Amazon ECR repository once that done code pipeline",
    "start": "2002559",
    "end": "2009919"
  },
  {
    "text": "initiates an update of the AWS cloud formation stack associated with the ECS task definition",
    "start": "2009919",
    "end": "2017039"
  },
  {
    "text": "and service and creates and then Cloud information creates a new ECS task",
    "start": "2017039",
    "end": "2023039"
  },
  {
    "text": "definition referencing that image located in ECR and updates the ECS",
    "start": "2023039",
    "end": "2028600"
  },
  {
    "text": "service ECS service then fetches that new container from the ECR repository",
    "start": "2028600",
    "end": "2034519"
  },
  {
    "text": "replaces the old task one the old task with a new one and thus completing the",
    "start": "2034519",
    "end": "2039679"
  },
  {
    "text": "deployment and all of this can be entirely automated each of the components in this system you see here",
    "start": "2039679",
    "end": "2045760"
  },
  {
    "text": "whether it's AWS code commit or pipeline or code build or cloud formation you can actually interchange those with other um",
    "start": "2045760",
    "end": "2054358"
  },
  {
    "text": "applications and tools that are available such as Jenkins if you happen to be a Jenkins house and you're using",
    "start": "2054359",
    "end": "2060200"
  },
  {
    "text": "that and you want to start with that you can use that um in case you know in you can actually use that in case of in",
    "start": "2060200",
    "end": "2066878"
  },
  {
    "text": "place of code build or code pipeline or some combination of those AWS code commit is used here as a source",
    "start": "2066879",
    "end": "2073358"
  },
  {
    "text": "repository you could also be using um GitHub or you could be using a bit",
    "start": "2073359",
    "end": "2079560"
  },
  {
    "text": "bucket whatever your choice may be this is a a common practice to use um and",
    "start": "2079560",
    "end": "2085358"
  },
  {
    "text": "it's also very easy inside of AWS to um choose the orchestration engine as I",
    "start": "2085359",
    "end": "2093118"
  },
  {
    "text": "mentioned you can choose ECS as your orchestration engine but if you have a very simple environment that only has a",
    "start": "2093119",
    "end": "2098800"
  },
  {
    "text": "single container or perhaps just a couple of containers you can actually use elastic beant stock instead and",
    "start": "2098800",
    "end": "2105960"
  },
  {
    "text": "using the same type of of cicd pipeline um but pushing things out to elastic",
    "start": "2105960",
    "end": "2112680"
  },
  {
    "text": "beant stock instead of of ECS um and so with that I'd like to",
    "start": "2112680",
    "end": "2119040"
  },
  {
    "text": "finish up this section on containers hand to back over to Eric all right thanks Jerry um as as you",
    "start": "2119040",
    "end": "2127760"
  },
  {
    "text": "both Jerry and I like as Jerry said earlier we both work on a team that that we sit down with customers and we help",
    "start": "2127760",
    "end": "2133400"
  },
  {
    "text": "them uh work through architecture uh we help them work through how how do you do what you're already doing or what you",
    "start": "2133400",
    "end": "2140119"
  },
  {
    "text": "want to do in a cloudy way that's you know secure resilient redundant reliable",
    "start": "2140119",
    "end": "2146280"
  },
  {
    "text": "and all those those different things and so one of the customers that we've worked with is script drop uh and we",
    "start": "2146280",
    "end": "2152280"
  },
  {
    "text": "have today as a guest we have Larry Scott who's the CTO of script drop and he's going to tell you uh about script",
    "start": "2152280",
    "end": "2158280"
  },
  {
    "text": "drop and some of of you know what we we've been able to do with them and so Larry I'm going to turn it over to",
    "start": "2158280",
    "end": "2165480"
  },
  {
    "text": "you all right thank you Eric yeah uh about script drop we are a healthc care",
    "start": "2165480",
    "end": "2171280"
  },
  {
    "text": "startup focusing on two products right now uh our prescription delivery service is currently live in New York and our",
    "start": "2171280",
    "end": "2178480"
  },
  {
    "text": "second product will be released this summer and that's our medication reminders for patients that they can",
    "start": "2178480",
    "end": "2184040"
  },
  {
    "text": "interact through Google home Alexa text or rooc call",
    "start": "2184040",
    "end": "2189559"
  },
  {
    "text": "so right now we're we're currently uh a team consisting of three total members that all hell from uh cover my meds that",
    "start": "2190119",
    "end": "2197599"
  },
  {
    "text": "recently had an exit that sold for approximately 1.4 billion we're located",
    "start": "2197599",
    "end": "2203240"
  },
  {
    "text": "here in Columbus Ohio and uh we're prescription delivery service",
    "start": "2203240",
    "end": "2208319"
  },
  {
    "text": "that's currently live in New York so evaluating the solutions why why",
    "start": "2208319",
    "end": "2216000"
  },
  {
    "text": "did we choose Rackspace uh when we first started script drop we knew that we would need help on the infrastructure",
    "start": "2216000",
    "end": "2222160"
  },
  {
    "text": "side from day one uh we searched around quite a bit to ultimately land on",
    "start": "2222160",
    "end": "2227800"
  },
  {
    "text": "Rackspace after having the initial Discovery call with Rackspace we felt very confident with their skills and",
    "start": "2227800",
    "end": "2233800"
  },
  {
    "text": "expertise to build out what we needed to get our startup off the ground uh I'm not going to lie at first our initial",
    "start": "2233800",
    "end": "2239680"
  },
  {
    "text": "thoughts were with going with rack space is oh man they're going to charge us like an arm and a leg and we're not",
    "start": "2239680",
    "end": "2245440"
  },
  {
    "text": "going to be able to afford this but uh however we found the opposite to be true they're very affordable and fit well",
    "start": "2245440",
    "end": "2251160"
  },
  {
    "text": "within our price range especially for the the value that you get so uh why rack space on AWS our um",
    "start": "2251160",
    "end": "2260240"
  },
  {
    "text": "experience in healthc care around infrastructure especially was uh always to be taught to build an",
    "start": "2260240",
    "end": "2266359"
  },
  {
    "text": "inhouse uh when we started with that concept we quickly found that all of those barriers were removed when we see",
    "start": "2266359",
    "end": "2273480"
  },
  {
    "text": "what that AWS could Supply us with everything we needed while staying safe in the cloud uh when we initially",
    "start": "2273480",
    "end": "2280240"
  },
  {
    "text": "started look at AWS we noticed there was a ton of products and services that they offer and when we first signed up for an",
    "start": "2280240",
    "end": "2286119"
  },
  {
    "text": "account we it was overwhelming and uh we just knew that we were kind of in over",
    "start": "2286119",
    "end": "2291319"
  },
  {
    "text": "our head so once again rack space showed us that we could uh ultimately be",
    "start": "2291319",
    "end": "2296720"
  },
  {
    "text": "confident in what they had to offer and to get us off the ground to so that way us as developers can deploy code easily",
    "start": "2296720",
    "end": "2304359"
  },
  {
    "text": "and keeping our data safe in the cloud and that that hip of compliance is what ultimately sealed the deal for",
    "start": "2304359",
    "end": "2312838"
  },
  {
    "text": "us so our initial process uh looks something like this where you can see we",
    "start": "2313720",
    "end": "2320160"
  },
  {
    "text": "we would start with uh putting code up to bit bucket it would be a feature or a",
    "start": "2320160",
    "end": "2326319"
  },
  {
    "text": "new application uh code ship code ship would detect a change and test that out for us and prepare any artifacts that",
    "start": "2326319",
    "end": "2334400"
  },
  {
    "text": "may be needed to uh for that specific app application or that deployment then we would manually push that code to AWS",
    "start": "2334400",
    "end": "2341839"
  },
  {
    "text": "code commit for it to to be detected by a AWS code pipeline to use our AWS code",
    "start": "2341839",
    "end": "2348800"
  },
  {
    "text": "deploy strategy to deploy it to all of our ec2",
    "start": "2348800",
    "end": "2354040"
  },
  {
    "text": "instances so some of the issues with this workflow is that there's manual",
    "start": "2354200",
    "end": "2359400"
  },
  {
    "text": "steps that are required uh to make something go live it",
    "start": "2359400",
    "end": "2364560"
  },
  {
    "text": "requires the juggling of multiple repositor and uh storing unneeded code",
    "start": "2364560",
    "end": "2370480"
  },
  {
    "text": "and there was just multiple pipelines to manage so the Rackspace",
    "start": "2370480",
    "end": "2376400"
  },
  {
    "text": "Advantage uh as you can see in this graphic it it's it's cleaned up you know",
    "start": "2376400",
    "end": "2381560"
  },
  {
    "text": "we would be able to as developers deploy something to GitHub and then from there",
    "start": "2381560",
    "end": "2387760"
  },
  {
    "text": "AWS code pipeline would detect that change kick that over to AWS code Bild",
    "start": "2387760",
    "end": "2393599"
  },
  {
    "text": "to build out any artifacts and prepare that deployment and then it would use our AWS code deploy strategy to get that",
    "start": "2393599",
    "end": "2400720"
  },
  {
    "text": "out to our uh ec2",
    "start": "2400720",
    "end": "2404599"
  },
  {
    "text": "instances so with their proposed story uh they they advising us to move it over",
    "start": "2408680",
    "end": "2414200"
  },
  {
    "text": "to GitHub for Source control that allows for a more native integration for our uh",
    "start": "2414200",
    "end": "2419920"
  },
  {
    "text": "repository code build replace Cod ship in this particular diagram and the",
    "start": "2419920",
    "end": "2426200"
  },
  {
    "text": "better pipeline or cration that we' get and we' be able to deploy with C- deoy",
    "start": "2426200",
    "end": "2432119"
  },
  {
    "text": "so the improvements are one pipeline fully automated no more juggling of uh",
    "start": "2432119",
    "end": "2437960"
  },
  {
    "text": "multiple repositories and it would just sing Single it down to that GitHub",
    "start": "2437960",
    "end": "2444160"
  },
  {
    "text": "repository but as we were heading down that path we we had uh two different",
    "start": "2448680",
    "end": "2455160"
  },
  {
    "text": "interests here in in script drop we noticed that you know we want we wanted to start going down the docker and",
    "start": "2455160",
    "end": "2461760"
  },
  {
    "text": "container way and Rackspace noticed that that we were heading down this way of",
    "start": "2461760",
    "end": "2467359"
  },
  {
    "text": "that proposed uh proposed outline of work that was in the previous slide and",
    "start": "2467359",
    "end": "2473079"
  },
  {
    "text": "they said hey you know if you're if you're really serious about doing Docker the work that we're doing now will",
    "start": "2473079",
    "end": "2478720"
  },
  {
    "text": "change significantly and it'll be a wasted effort let's explore what our options are here and you can choose the",
    "start": "2478720",
    "end": "2484400"
  },
  {
    "text": "way that you want to go so they they gave us the heads up and it allowed us to Pivot and we ultimately chose to go",
    "start": "2484400",
    "end": "2491960"
  },
  {
    "text": "to uh containers so with containers it allows",
    "start": "2491960",
    "end": "2498400"
  },
  {
    "text": "us to to stay consistent between environments as developers you know the",
    "start": "2498400",
    "end": "2504200"
  },
  {
    "text": "the struggle or the pain of having to have a development or a staging or QA",
    "start": "2504200",
    "end": "2509319"
  },
  {
    "text": "environment that mimics production is is is a hassle to build",
    "start": "2509319",
    "end": "2514680"
  },
  {
    "text": "and try to maintain that if you're not if you're you're not keeping up to date or if you have some weird way that",
    "start": "2514680",
    "end": "2519760"
  },
  {
    "text": "you're doing that with containers that allows us to stay consistent um we can put each service on",
    "start": "2519760",
    "end": "2526440"
  },
  {
    "text": "this container and we can subscribe to that separations of concerns model and we can also uh think of it as the way of",
    "start": "2526440",
    "end": "2534920"
  },
  {
    "text": "the insects versus cattle versus pets model I'm pretty sure everyone's heard of that so I'm I'm gonna jump in there",
    "start": "2534920",
    "end": "2541599"
  },
  {
    "text": "real quick on you um this is an interesting you know uh thought you know",
    "start": "2541599",
    "end": "2547200"
  },
  {
    "text": "insects versus cattles versus pets and I wonder you know we talk a lot you know",
    "start": "2547200",
    "end": "2553520"
  },
  {
    "text": "in our industry and and when we're talking to people we talk about this idea of cattles versus pets but it's",
    "start": "2553520",
    "end": "2558599"
  },
  {
    "text": "surprisingly Larry how much people don't really get this idea so I'm actually G to jump in and explain it a little bit",
    "start": "2558599",
    "end": "2565319"
  },
  {
    "text": "um when we when we look at doing architecture um especially when we're on",
    "start": "2565319",
    "end": "2570480"
  },
  {
    "text": "premise and we paid a lot of money for these servers you know we think of them as pets if if a server goes bad we work",
    "start": "2570480",
    "end": "2576839"
  },
  {
    "text": "to make it healthy again we you know we feed it you know we we we keep it in blankets on I watch TV all day to see if",
    "start": "2576839",
    "end": "2583680"
  },
  {
    "text": "it's going to get better I mean we really dump a lot of time and money into them but when you go to the cloud you",
    "start": "2583680",
    "end": "2589599"
  },
  {
    "text": "don't really think of it that way you think of it more as cattle which is something where you know if if a cattle gets sick then generally you know you",
    "start": "2589599",
    "end": "2596480"
  },
  {
    "text": "put it out to pasture and you put a new one in its place there's not a lot of time spent on you know you know bring it",
    "start": "2596480",
    "end": "2602319"
  },
  {
    "text": "bringing it back and making it healthy uh and so so it's the same with like servers in the cloud if was server goes",
    "start": "2602319",
    "end": "2607680"
  },
  {
    "text": "bad in the cloud or something happens throw it away bring a new one up that's that's generally the methodology of",
    "start": "2607680",
    "end": "2612839"
  },
  {
    "text": "cattles versus pets but then you introduce this new idea of this insects versus cattles versus pets and that's",
    "start": "2612839",
    "end": "2618440"
  },
  {
    "text": "really where the container kind of thought process is is is it's it's it's a small insignificant thing that you",
    "start": "2618440",
    "end": "2625839"
  },
  {
    "text": "toss without even thinking you know it's so so and it's and it's very you know it's very granular very minuscule and so",
    "start": "2625839",
    "end": "2632400"
  },
  {
    "text": "even even more so than cattle if a process is going bad if a container's going bad you pop new one in I mean no",
    "start": "2632400",
    "end": "2638680"
  },
  {
    "text": "no thought about it no no time spent there so I think that's good that you bring this up and it's and it's an interesting approach on on wrapping your",
    "start": "2638680",
    "end": "2646400"
  },
  {
    "text": "mind around how fast can we can we spit up containers how fast can we replace them if needed so sorry to interrupt you",
    "start": "2646400",
    "end": "2653559"
  },
  {
    "text": "but I thought I'd throw that out there oh no that that's definitely a great explanation I appreciate it so um going",
    "start": "2653559",
    "end": "2660319"
  },
  {
    "text": "back to this the the rag space Ena enablement uh it rag space had the",
    "start": "2660319",
    "end": "2666520"
  },
  {
    "text": "foresight to see where we wanted to go and call flag on the play and provide us with an even better solution uh they",
    "start": "2666520",
    "end": "2673200"
  },
  {
    "text": "extend their best practices for Designing AWS infrastructure for containers and laying the groundwork for",
    "start": "2673200",
    "end": "2679880"
  },
  {
    "text": "devops processes for containers as well so we we truly appreciate",
    "start": "2679880",
    "end": "2685920"
  },
  {
    "text": "that so with this new Docker container way it looks much like the the graphic",
    "start": "2686559",
    "end": "2694040"
  },
  {
    "text": "that Jerry just showed us uh we have that same proposed way that that uh",
    "start": "2694040",
    "end": "2699079"
  },
  {
    "text": "standardized way that they lay things out for us we'll we'll commit code to AWS code commit for uh AWS code",
    "start": "2699079",
    "end": "2707920"
  },
  {
    "text": "Pipeline and then have that test and built out using AWS code build and",
    "start": "2707920",
    "end": "2713599"
  },
  {
    "text": "prepare any artifacts and then pass that over to ECR or the container registry to deploy that out to",
    "start": "2713599",
    "end": "2721279"
  },
  {
    "text": "ECS all right excellent thank you Larry I appreciate it uh you know in working",
    "start": "2722960",
    "end": "2728440"
  },
  {
    "text": "with script drop one they they've been you know just really great to work with uh they're technically you know they're",
    "start": "2728440",
    "end": "2733800"
  },
  {
    "text": "Advanced they're doing some great things and they're kind of a cloud story in that you know they're they're three guys",
    "start": "2733800",
    "end": "2739040"
  },
  {
    "text": "but because of AWS and the power of AWS they're able to compete with you know well established Enterprises uh so it's",
    "start": "2739040",
    "end": "2745720"
  },
  {
    "text": "a it's a great story there and and working with them you know I got to do what what sometimes we get to do at",
    "start": "2745720",
    "end": "2750960"
  },
  {
    "text": "Rackspace and I got to call Larry up and go hey uh you know we've got this plan to build this this model for you that",
    "start": "2750960",
    "end": "2757280"
  },
  {
    "text": "was the original model they had looked at to to help you with your pipeline get your devops story going well but you",
    "start": "2757280",
    "end": "2763079"
  },
  {
    "text": "know some of our guys have noticed that you're you're you know fiddling around with uh with Docker and and and looking",
    "start": "2763079",
    "end": "2768640"
  },
  {
    "text": "at at how do you do containers so uh so we we got to talk and and and really",
    "start": "2768640",
    "end": "2774400"
  },
  {
    "text": "honestly I got to say look it's a waste of money to to have us build out a pipeline if you're going to change it in",
    "start": "2774400",
    "end": "2780480"
  },
  {
    "text": "a couple weeks or or a month or so why don't we evaluate this Docker um",
    "start": "2780480",
    "end": "2785599"
  },
  {
    "text": "approach and let us help you I we have we have expertise in house uh let us help you do it the Cloudy way so that it",
    "start": "2785599",
    "end": "2791280"
  },
  {
    "text": "works well on AWS uh and it it just makes for a fun story uh and Larry I",
    "start": "2791280",
    "end": "2796359"
  },
  {
    "text": "appreciate your time coming on this to to tell that story with us yeah it's uh it's truly been a great working",
    "start": "2796359",
    "end": "2803400"
  },
  {
    "text": "relationship we appreciate it Eric thank you sir and with that Lex I'm gonna turn it over to you and we'll we'll answer",
    "start": "2803400",
    "end": "2809119"
  },
  {
    "text": "some questions well thanks gentlemen that was really interesting and helpful so now",
    "start": "2809119",
    "end": "2816400"
  },
  {
    "text": "we'll take questions from the audience and uh see if we can explain ourselves",
    "start": "2816400",
    "end": "2822440"
  },
  {
    "text": "more completely so uh first question that seems relevant here uh is how much did",
    "start": "2822440",
    "end": "2829160"
  },
  {
    "text": "you save going from ec2 to the container service I guess in this",
    "start": "2829160",
    "end": "2836599"
  },
  {
    "text": "example uh so yeah we definitely saved a bit on labor and definitely time uh what",
    "start": "2836599",
    "end": "2843800"
  },
  {
    "text": "our our team here we're mainly developers so we're not INF structure guys by by trade so we know a little bit",
    "start": "2843800",
    "end": "2849720"
  },
  {
    "text": "about it because we we dabble and we have to know how to navigate around but",
    "start": "2849720",
    "end": "2855559"
  },
  {
    "text": "having that expertise inhouse that allowed us to to run leaner we didn't have to hire another uh person on staff",
    "start": "2855559",
    "end": "2863359"
  },
  {
    "text": "uh so it definitely saved quite a bit and the time was uh was super helpful",
    "start": "2863359",
    "end": "2869119"
  },
  {
    "text": "because we didn't have to spend time learning how to do this we could just rely on aw I mean AWS uh with rack space",
    "start": "2869119",
    "end": "2876119"
  },
  {
    "text": "behind us to get everything spun up so it was definitely a savings on both ends from from our",
    "start": "2876119",
    "end": "2883720"
  },
  {
    "text": "part great well so here's another question uh when deploying containers",
    "start": "2883920",
    "end": "2889359"
  },
  {
    "text": "what's better bean stock or ECS so this is Jerry I'll go ahead and",
    "start": "2889359",
    "end": "2894960"
  },
  {
    "text": "take a stab at that one I think a lot of it depends on the type of environment",
    "start": "2894960",
    "end": "2900280"
  },
  {
    "text": "that you're running and obviously there are some um some things to consider when choosing between beanock and ECF if you",
    "start": "2900280",
    "end": "2908880"
  },
  {
    "text": "have for example a single container and you want to run it on on AWS then the",
    "start": "2908880",
    "end": "2916040"
  },
  {
    "text": "easiest way of going about that is to Simply put it in a single container beanock instance that U makes it very",
    "start": "2916040",
    "end": "2924240"
  },
  {
    "text": "easy to um simply deploy that particular container and you don't have to get",
    "start": "2924240",
    "end": "2931240"
  },
  {
    "text": "really involved in orchestration of multiple containers now if you have a couple of containers and you need to be",
    "start": "2931240",
    "end": "2937079"
  },
  {
    "text": "able to scale those in and out you can still use beanock in a multicontainer",
    "start": "2937079",
    "end": "2942400"
  },
  {
    "text": "environment and build out fairly complex infrastructures that way I think once you move Beyond maybe I this is an",
    "start": "2942400",
    "end": "2950960"
  },
  {
    "text": "arbitrary number but maybe 10 containers or it becomes much more complex then you really start wanting to look at",
    "start": "2950960",
    "end": "2957760"
  },
  {
    "text": "something like um ECS which gives you much more flexibility about scheduling",
    "start": "2957760",
    "end": "2964280"
  },
  {
    "text": "tasks and services and allow owing those different containers to scale independent of one another so as you",
    "start": "2964280",
    "end": "2970960"
  },
  {
    "text": "scale out and grow larger ECS is an obvious Evolution you may want to start",
    "start": "2970960",
    "end": "2976280"
  },
  {
    "text": "with beanock if you just got a few and then move to ECS as you grow I think that's a great explanation",
    "start": "2976280",
    "end": "2984400"
  },
  {
    "text": "I think I've also um encountered quite a few customers deploying applications on beanock all by themselves in containers",
    "start": "2984400",
    "end": "2992480"
  },
  {
    "text": "because they were Legacy apps and relatively straightforward to deploy uh where the customer didn't want to pull",
    "start": "2992480",
    "end": "2998520"
  },
  {
    "text": "the application apart and build build it in chunks or microservices so uh kind of an",
    "start": "2998520",
    "end": "3005040"
  },
  {
    "text": "interesting use case for bean stock uh typically different than the ECS use",
    "start": "3005040",
    "end": "3011520"
  },
  {
    "text": "case Okay uh so let's see another question",
    "start": "3011520",
    "end": "3017280"
  },
  {
    "text": "here where do chef and puppet fit in this picture that we've",
    "start": "3017920",
    "end": "3024680"
  },
  {
    "text": "drawn uh um I mean for my perspective on Jerry again I I think they fit in the",
    "start": "3024760",
    "end": "3030720"
  },
  {
    "text": "same way that they do in a traditional environment whether you're running on AWS or whether you just happen to be",
    "start": "3030720",
    "end": "3037640"
  },
  {
    "text": "running in your own data center you're still going to use them or can use them in the same manner that you've used them",
    "start": "3037640",
    "end": "3044000"
  },
  {
    "text": "before so I I don't see any real significant difference um if you're a chef house or",
    "start": "3044000",
    "end": "3051079"
  },
  {
    "text": "a puppet house and you want to continue using those for configuration management even in a container ized environment um",
    "start": "3051079",
    "end": "3058200"
  },
  {
    "text": "I've seen customers who have continued to do that with great success all right very good um along",
    "start": "3058200",
    "end": "3066440"
  },
  {
    "text": "those lines uh how do beanock and ECS handle logging and for instance would",
    "start": "3066440",
    "end": "3072119"
  },
  {
    "text": "they integrate with an seim like Sumo logic most if um I I think",
    "start": "3072119",
    "end": "3079640"
  },
  {
    "text": "most have agents that you can actually install um in containers you can have of",
    "start": "3079640",
    "end": "3086839"
  },
  {
    "text": "sidecar containers that are running in your environments like ECS whose sole purpose is to do logging in many cases",
    "start": "3086839",
    "end": "3096480"
  },
  {
    "text": "um with uh orchestration engines ECS included if your containers are piping",
    "start": "3096480",
    "end": "3104040"
  },
  {
    "text": "log information to standard out or standard error you can feed that directly into U Cloud watch and Cloud",
    "start": "3104040",
    "end": "3112000"
  },
  {
    "text": "watch logs um and the same is true with beanock and I said you can you can use",
    "start": "3112000",
    "end": "3118520"
  },
  {
    "text": "uh Sumo you can use uh logi a lot of those will provide either containers in",
    "start": "3118520",
    "end": "3124359"
  },
  {
    "text": "enough themselves that you can configure your containers um to to ship logs to",
    "start": "3124359",
    "end": "3131599"
  },
  {
    "text": "or you can install agents on your containers and have them ship logs off",
    "start": "3131599",
    "end": "3136680"
  },
  {
    "text": "container but I the key point there is obviously in this type of environment to",
    "start": "3136680",
    "end": "3142119"
  },
  {
    "text": "get that log information off of those containers as quickly as possible um because they are you should treat them",
    "start": "3142119",
    "end": "3147680"
  },
  {
    "text": "as ephemeral like Eric said as as bugs in the pets cattle versus bugs type of",
    "start": "3147680",
    "end": "3152799"
  },
  {
    "text": "uh scenario right very good thank you so",
    "start": "3152799",
    "end": "3159160"
  },
  {
    "text": "thinking also about other ways other things one has to do with containers uh where is testing done uh with a",
    "start": "3159160",
    "end": "3166440"
  },
  {
    "text": "container architecture and what technology does the testing in the containers I mean in the",
    "start": "3166440",
    "end": "3173760"
  },
  {
    "text": "environments that I've seen and worked with it again it's very similar to a traditional cicd pipeline where you're",
    "start": "3173760",
    "end": "3180240"
  },
  {
    "text": "going to build out your pipeline and you're going to include test and um uh",
    "start": "3180240",
    "end": "3187240"
  },
  {
    "text": "testing stages where you can actually perform some automated testing and and again the same types of tools can be",
    "start": "3187240",
    "end": "3194280"
  },
  {
    "text": "used that you're using in your current environment so whatever test tools",
    "start": "3194280",
    "end": "3200119"
  },
  {
    "text": "you're using you use those same ones put it into a cicd pipeline like code",
    "start": "3200119",
    "end": "3205640"
  },
  {
    "text": "Pipeline and have it trigger those tests to happen and automate feedback into the development environment so again in that",
    "start": "3205640",
    "end": "3212200"
  },
  {
    "text": "sense it doesn't change that much um but you continue doing the same",
    "start": "3212200",
    "end": "3219559"
  },
  {
    "text": "thing okay interesting question here I can see",
    "start": "3219559",
    "end": "3225079"
  },
  {
    "text": "how this fits when code is actually being written by developers what about",
    "start": "3225079",
    "end": "3230720"
  },
  {
    "text": "off-the-shelf products from vendors I guess meaning commercial off-the-shelf software do these fit in the Dev opson",
    "start": "3230720",
    "end": "3237160"
  },
  {
    "text": "container model um so I think so that and and",
    "start": "3237160",
    "end": "3245359"
  },
  {
    "text": "that's often I and I think you mentioned this too that for legacy software even even CS commercial offthe shelf software",
    "start": "3245359",
    "end": "3252559"
  },
  {
    "text": "you may want to containerize it and put it into a container um unless there are",
    "start": "3252559",
    "end": "3258280"
  },
  {
    "text": "some specific requirements that would prevent you from doing that um I I don't",
    "start": "3258280",
    "end": "3263880"
  },
  {
    "text": "I don't see any reason why you wouldn't okay so here's a Rex Bas question what",
    "start": "3263880",
    "end": "3272000"
  },
  {
    "text": "was the worst pain point for Rex Bas moving from virtualized hardware and code deployment to a container process",
    "start": "3272000",
    "end": "3279920"
  },
  {
    "text": "it's an opportunity to tell the Rex Bas container story a little bit as well we transitioned and started",
    "start": "3279920",
    "end": "3287760"
  },
  {
    "text": "providing fanatical support for aw we had to build out our own internal",
    "start": "3287760",
    "end": "3293839"
  },
  {
    "text": "infrastructure and tooling um to allow us to work with our customers and to provide interfaces for",
    "start": "3293839",
    "end": "3300599"
  },
  {
    "text": "our customers to work with us and our systems in backends and internally we",
    "start": "3300599",
    "end": "3306599"
  },
  {
    "text": "use Amazon ECS and containers and it provided the same benefits that that",
    "start": "3306599",
    "end": "3312400"
  },
  {
    "text": "Larry mentioned um as he seeing in his environment that is you know increased",
    "start": "3312400",
    "end": "3318200"
  },
  {
    "text": "agility turnaround time and feedback time um and provided us with a way of",
    "start": "3318200",
    "end": "3323960"
  },
  {
    "text": "scaling our system out um on AWS at a much more granular level than perhaps if",
    "start": "3323960",
    "end": "3330480"
  },
  {
    "text": "we had gone the route of using ec2 instances natively for",
    "start": "3330480",
    "end": "3335920"
  },
  {
    "text": "example but on the back end our just it's it's worth mentioning that our entire backend um that's used to support",
    "start": "3335920",
    "end": "3344480"
  },
  {
    "text": "our AWS customers is running on AWS and in a containerized environment and and",
    "start": "3344480",
    "end": "3351520"
  },
  {
    "text": "very much of that a lot of that is is uh serverless as well",
    "start": "3351520",
    "end": "3357480"
  },
  {
    "text": "very good thanks it looks like we're running out of time here we really appreciate these very interesting questions from the audience and the",
    "start": "3357480",
    "end": "3363520"
  },
  {
    "text": "audience's time and attention so we're going to wrap up on that note wrap up today's webinar and as a reminder you'll",
    "start": "3363520",
    "end": "3370680"
  },
  {
    "text": "receive an email within the next two to three days with a link to these slides on slides share thank you very much for",
    "start": "3370680",
    "end": "3377440"
  },
  {
    "text": "attending and if you have any other questions please don't hesitate to reach out thank you",
    "start": "3377440",
    "end": "3385480"
  }
]