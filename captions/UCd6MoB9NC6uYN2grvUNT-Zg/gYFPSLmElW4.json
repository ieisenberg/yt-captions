[
  {
    "start": "0",
    "end": "17000"
  },
  {
    "text": "hey guys welcome to containers the mission-critical applications session my",
    "start": "2389",
    "end": "9179"
  },
  {
    "text": "name is Jani I am a chief Enterprise Architect in Vanguard and today we're going to talk about our journey into",
    "start": "9179",
    "end": "15360"
  },
  {
    "text": "containers first a little bit of introduction about Vanguard it's one of",
    "start": "15360",
    "end": "22680"
  },
  {
    "start": "17000",
    "end": "31000"
  },
  {
    "text": "the largest investment companies and we started operation in 1975 the year when",
    "start": "22680",
    "end": "30420"
  },
  {
    "text": "I was born Vanguard is strategically located between Wall Street and u.s. East one",
    "start": "30420",
    "end": "38399"
  },
  {
    "start": "31000",
    "end": "54000"
  },
  {
    "text": "data center in modern PA we have",
    "start": "38399",
    "end": "44070"
  },
  {
    "text": "multiple lines of business and we are currently managing a little bit over",
    "start": "44070",
    "end": "50280"
  },
  {
    "text": "five trillion dollars in the infant's so",
    "start": "50280",
    "end": "56219"
  },
  {
    "start": "54000",
    "end": "96000"
  },
  {
    "text": "today we're going to talk about our container journey talk about the",
    "start": "56219",
    "end": "61770"
  },
  {
    "text": "reference architecture that we put together and we have implemented talk",
    "start": "61770",
    "end": "67740"
  },
  {
    "text": "about data protection i didn'ti an access management talk about infrastructure protection using",
    "start": "67740",
    "end": "74220"
  },
  {
    "text": "aqua some reliability conversation that ECS offers you see has the service and",
    "start": "74220",
    "end": "81720"
  },
  {
    "text": "then finally we're going to close with some next steps and cost optimization",
    "start": "81720",
    "end": "87860"
  },
  {
    "text": "advices kyla lessons learns learn and where our journey will take us and if",
    "start": "87860",
    "end": "93210"
  },
  {
    "text": "you follow probably you as well so we started on this journey we kind of",
    "start": "93210",
    "end": "101130"
  },
  {
    "start": "96000",
    "end": "200000"
  },
  {
    "text": "it was a year ago we had an existing I",
    "start": "101130",
    "end": "106380"
  },
  {
    "text": "want to call it legacy container orchestration system using a",
    "start": "106380",
    "end": "111810"
  },
  {
    "text": "third-party provider we had it for about fari for about five years we ran it on",
    "start": "111810",
    "end": "119850"
  },
  {
    "text": "Prem and when we decided to go to public cloud we also decided to use the same",
    "start": "119850",
    "end": "125850"
  },
  {
    "text": "system because we knew how to use it with the over the years we kind of understood that the system is fairly",
    "start": "125850",
    "end": "135180"
  },
  {
    "text": "complex for us for us to manage operationally and and we wanted certain",
    "start": "135180",
    "end": "141120"
  },
  {
    "text": "things to change so some of the design principles that we followed in this new",
    "start": "141120",
    "end": "147480"
  },
  {
    "text": "implementation is the system the next system that we were or stack that we want to deploy or implement has to be",
    "start": "147480",
    "end": "153060"
  },
  {
    "text": "fully distributed it has to enable deficit cops although if you heard the keynotes today you probably know it's",
    "start": "153060",
    "end": "159630"
  },
  {
    "text": "not a thing anymore it's just ops it has to be backwards compatible with that legacy system that",
    "start": "159630",
    "end": "166830"
  },
  {
    "text": "we are replacing we need to make sure that the people that want to make great to the next to the new stack or system",
    "start": "166830",
    "end": "174350"
  },
  {
    "text": "don't have to do too much with their application code in order to switch over",
    "start": "174350",
    "end": "180410"
  },
  {
    "text": "it has to be fully automated and fully automation able secure by default and",
    "start": "180410",
    "end": "186950"
  },
  {
    "text": "cost effective although when you see the stack you might think that it's not but",
    "start": "186950",
    "end": "192989"
  },
  {
    "text": "it's more cost effective than what we have today and that was the goal it's more cost effective but when we have today",
    "start": "192989",
    "end": "200900"
  },
  {
    "start": "200000",
    "end": "560000"
  },
  {
    "text": "so then this is our stack and I'm going to talk a little bit about this in in",
    "start": "201270",
    "end": "208080"
  },
  {
    "text": "detail a little bit of primer though for ECS for those of you by the way you",
    "start": "208080",
    "end": "213810"
  },
  {
    "text": "anybody here uses ECS razor okay good ECS with Fargate great so I'm just gonna",
    "start": "213810",
    "end": "222720"
  },
  {
    "text": "mention it briefly just so we know you know when I say some things what exactly do I mean because it's a little",
    "start": "222720",
    "end": "228450"
  },
  {
    "text": "confusing so ECS is elastic container service there are three main components",
    "start": "228450",
    "end": "233670"
  },
  {
    "text": "of ECS elastic dcs cluster easiest service not to be confused with ETS the",
    "start": "233670",
    "end": "239370"
  },
  {
    "text": "service and then ACS tasks so the first",
    "start": "239370",
    "end": "245190"
  },
  {
    "text": "component the cluster when you deploy see us with ec2 instances that run your",
    "start": "245190",
    "end": "250290"
  },
  {
    "text": "compute this es cluster plays a role of grouping those ec2 instances that run",
    "start": "250290",
    "end": "255420"
  },
  {
    "text": "your container nodes your ACS tasks when you switch to for gate all of a sudden is es cluster loses its function it",
    "start": "255420",
    "end": "263070"
  },
  {
    "text": "becomes just a logical container there's no association with ec2 instances anymore so instead of and again when you",
    "start": "263070",
    "end": "271110"
  },
  {
    "text": "deploy it with the SI toos you probably want as fewer ECS clusters and a fewer",
    "start": "271110",
    "end": "277590"
  },
  {
    "text": "easy to nodes to to do that as much density as possible when you do it with",
    "start": "277590",
    "end": "283380"
  },
  {
    "text": "Fergie though each Fargate node represents a task so there is no density",
    "start": "283380",
    "end": "289230"
  },
  {
    "text": "for you to worry about you don't care how many clusters you deploy and I think",
    "start": "289230",
    "end": "295140"
  },
  {
    "text": "the soft limit on clusters per account is 2,000 and with our micro count",
    "start": "295140",
    "end": "300270"
  },
  {
    "text": "strategy that limit is not even in play so we decided to deploy a micro service",
    "start": "300270",
    "end": "307290"
  },
  {
    "text": "on an application ACS task and dedicate a cluster to it so now there is a cluster per micro service of course this",
    "start": "307290",
    "end": "314370"
  },
  {
    "text": "here service is something that groups number of ECS tasks together and it's within a NACS cluster so each is each",
    "start": "314370",
    "end": "323550"
  },
  {
    "text": "micro service running in this pattern has an one ECS service so it's like one-to-one mapping and",
    "start": "323550",
    "end": "330190"
  },
  {
    "text": "the number of ECS tasks is decided by desired State I'm going to talk a little",
    "start": "330190",
    "end": "335230"
  },
  {
    "text": "bit about that so we deploy a minimum of two we also",
    "start": "335230",
    "end": "340930"
  },
  {
    "text": "wanted to create a single if possible CloudFormation template where we code",
    "start": "340930",
    "end": "346960"
  },
  {
    "text": "everything in troposphere or cloud formation so the code that I'm gonna show you in the next couple of slides in",
    "start": "346960",
    "end": "352420"
  },
  {
    "text": "troposphere but if you know CloudFormation you we should be able to fall so wanting to create a single stack",
    "start": "352420",
    "end": "359350"
  },
  {
    "text": "highly parameterised that will suit any everybody's needs there's gonna be a lot of default values associated with it",
    "start": "359350",
    "end": "366430"
  },
  {
    "text": "that you can override but if you don't have to the defaults are good enough for you so by default we are deploying to",
    "start": "366430",
    "end": "373240"
  },
  {
    "text": "VCS tasks into availability zones or scaling is also part of the scaling the",
    "start": "373240",
    "end": "379450"
  },
  {
    "text": "service the new database service that was rolled out is also pre-configured in this template and because we want to",
    "start": "379450",
    "end": "388420"
  },
  {
    "text": "enable this dev sock ops mode we also threw in an elastic load balancer so an",
    "start": "388420",
    "end": "395620"
  },
  {
    "text": "application load balancer into the stack so this CloudFormation template deploys an application load balancer VCS cluster",
    "start": "395620",
    "end": "402580"
  },
  {
    "text": "ECS service VCS tasks and although the",
    "start": "402580",
    "end": "408640"
  },
  {
    "text": "scaling bits the rest of the components here the endpoints for example they are already pre-existing in our V PC so then",
    "start": "408640",
    "end": "416200"
  },
  {
    "text": "the domain of this devstack ops team or ops team is the compute and everything",
    "start": "416200",
    "end": "422470"
  },
  {
    "text": "to do with their micro service they can deploy as many of those of those as they want independently over others and when",
    "start": "422470",
    "end": "428919"
  },
  {
    "text": "I say one of the design principles was distribution we wanted this stack to be",
    "start": "428919",
    "end": "435570"
  },
  {
    "text": "ISO contained and and in distributed from one to another we have multiple",
    "start": "435570",
    "end": "440590"
  },
  {
    "text": "lines of businesses as I mentioned before each line of business has its own database account and sometimes",
    "start": "440590",
    "end": "446980"
  },
  {
    "text": "contractually institutional line of business cannot cross into retail line of business so it's important for us",
    "start": "446980",
    "end": "452860"
  },
  {
    "text": "that everybody lives in their line of businesses when we have a shared cluster or how to share cluster before it wasn't",
    "start": "452860",
    "end": "459400"
  },
  {
    "text": "as easily accomplished so that's another added benefit ACM ADA base certificate management",
    "start": "459400",
    "end": "466129"
  },
  {
    "text": "service allows us to retain certificates easily we install it on every application load balancer and again this",
    "start": "466129",
    "end": "474780"
  },
  {
    "text": "also happens within the CloudFormation template within the stack within the deployment and as long as the entry the",
    "start": "474780",
    "end": "482639"
  },
  {
    "text": "DNS entry for for that name remains in",
    "start": "482639",
    "end": "488219"
  },
  {
    "text": "DNS in route 53 that we use to validate ownership of those domains AWS will",
    "start": "488219",
    "end": "494449"
  },
  {
    "text": "automatically rotate the certificates for you nothing you need to do for this so that's another added benefit for us",
    "start": "494449",
    "end": "499800"
  },
  {
    "text": "we wanted to reduce our creational toll as much as possible and that allowed",
    "start": "499800",
    "end": "505349"
  },
  {
    "text": "that Alice allowed us to do this I'm not going to talk too much about state here",
    "start": "505349",
    "end": "510599"
  },
  {
    "text": "other than the compute nodes needed to be stateless that's another design principles they can come and go they",
    "start": "510599",
    "end": "517560"
  },
  {
    "text": "will deploy it and be deployed in multiple availability zones they can crash the application inside them and",
    "start": "517560",
    "end": "522810"
  },
  {
    "text": "the service will bring them up we didn't want to maintain any states so then the",
    "start": "522810",
    "end": "528269"
  },
  {
    "text": "tasks will interact with services like dynamodb using IM roles",
    "start": "528269",
    "end": "533910"
  },
  {
    "text": "that's another added benefit of of acs tasks you can attach a role to a",
    "start": "533910",
    "end": "541260"
  },
  {
    "text": "specific task and you do it through the service so everything is only a AWS",
    "start": "541260",
    "end": "546839"
  },
  {
    "text": "Fargate we didn't want to maintain NEC to insist not not not anymore we have enough of those and then let AWS take",
    "start": "546839",
    "end": "555449"
  },
  {
    "text": "care of everything else okay so let's talk about far gate",
    "start": "555449",
    "end": "562540"
  },
  {
    "start": "560000",
    "end": "657000"
  },
  {
    "text": "security why far gate a debates announced it last year at reinvent we",
    "start": "562540",
    "end": "569290"
  },
  {
    "text": "started taking a hard look at it it's implemented with firecracker or I think",
    "start": "569290",
    "end": "574720"
  },
  {
    "text": "they're in the process of migrating every Fargate implementation into firecracker firecracker is a micro VM",
    "start": "574720",
    "end": "581040"
  },
  {
    "text": "which provides a host based hypervisor based isolation for each task for each",
    "start": "581040",
    "end": "587009"
  },
  {
    "text": "ECS task that you're running so there's no multi-tenancy to worry about you're",
    "start": "587009",
    "end": "593259"
  },
  {
    "text": "taking the shared responsibility model that abs provides to the next level now they are not have been managing that",
    "start": "593259",
    "end": "598959"
  },
  {
    "text": "you're not even managing the compute nodes they do it for you so your domain of responsibilities from security",
    "start": "598959",
    "end": "605259"
  },
  {
    "text": "perspective shrinks even further an ability to ask to use task roles for",
    "start": "605259",
    "end": "611769"
  },
  {
    "text": "native integration is tremendous I don't think there is any other container",
    "start": "611769",
    "end": "617920"
  },
  {
    "text": "orchestration system that exists today that allows you that level of granularity to have a task attached to an individual to have a role attached to",
    "start": "617920",
    "end": "624910"
  },
  {
    "text": "individual tasks so no operational over had no more hosts to maintain forget any",
    "start": "624910",
    "end": "633069"
  },
  {
    "text": "serious both our four nines of availability SLA per region and has a",
    "start": "633069",
    "end": "638379"
  },
  {
    "text": "slew of certificates that are pertinent to us like soft - for other industries maybe medical there's HIPPA compliance",
    "start": "638379",
    "end": "646149"
  },
  {
    "text": "and stuff like that and a whole bunch of others so it's pretty mature service even though it's been introduced a year",
    "start": "646149",
    "end": "651459"
  },
  {
    "text": "ago so let's talk about data protection a little bit we want to protect",
    "start": "651459",
    "end": "660459"
  },
  {
    "start": "657000",
    "end": "721000"
  },
  {
    "text": "sensitive environment variables if you use TC as before if you inject environment variables which is the only",
    "start": "660459",
    "end": "665860"
  },
  {
    "text": "way to provide input into containers because they're immutable anybody who",
    "start": "665860",
    "end": "671319"
  },
  {
    "text": "has access to the console can use any kind of describe command they can see the clear tech text of each environment",
    "start": "671319",
    "end": "677620"
  },
  {
    "text": "variable for each task definition for both key and value so for",
    "start": "677620",
    "end": "682810"
  },
  {
    "text": "protected or sensitive in my own variables it was important for us to secure those I want to make sure there",
    "start": "682810",
    "end": "689870"
  },
  {
    "text": "is an end-to-end encryption in motion certificates are issued by ACM we talked",
    "start": "689870",
    "end": "695780"
  },
  {
    "text": "about this before we don't want to rotate certificates anymore we don't want to be in this business ACM allows us to do this so we decided",
    "start": "695780",
    "end": "702410"
  },
  {
    "text": "to do it with that and whenever possible we want to access all the data endpoints",
    "start": "702410",
    "end": "709640"
  },
  {
    "text": "using a debaters hyperplane so we for",
    "start": "709640",
    "end": "714800"
  },
  {
    "text": "whatever services are available we're gonna use AWS VPC endpoints gateway interface so let's talk about how we",
    "start": "714800",
    "end": "722690"
  },
  {
    "start": "721000",
    "end": "854000"
  },
  {
    "text": "accomplish sensitive environment variable encryption so here is the logical description or logical",
    "start": "722690",
    "end": "730270"
  },
  {
    "text": "visualization of i.m policy or to policies rather the encrypted value we",
    "start": "730270",
    "end": "736580"
  },
  {
    "text": "have like a master key we can encrypt the value or somebody can encrypt the value with this master key and then The",
    "start": "736580",
    "end": "743780"
  },
  {
    "text": "Blob can be provided to the to the pipeline the pipeline or the agents of",
    "start": "743780",
    "end": "749630"
  },
  {
    "text": "the pipeline which are running on ec2 instance or docker container down down the line have an instance profile or a",
    "start": "749630",
    "end": "755270"
  },
  {
    "text": "task role which allows it to decrypt whatever was encrypted with its master KMS key and only encrypt although this",
    "start": "755270",
    "end": "762500"
  },
  {
    "text": "policy doesn't reflect it because of shortage of space only encrypt with key - which is a key for the individual",
    "start": "762500",
    "end": "769160"
  },
  {
    "text": "tasks so then the pipeline passes it to the cloud formation template the",
    "start": "769160",
    "end": "775820"
  },
  {
    "text": "CloudFormation template has a custom resource by the way though those of you who don't know custom resource is a",
    "start": "775820",
    "end": "781430"
  },
  {
    "text": "lambda function that allows you to extend functionality of CloudFormation that doesn't exist there previously so",
    "start": "781430",
    "end": "787760"
  },
  {
    "text": "you can write a call a lambda function to do that that lambda function can have a role obviously with the policy in our",
    "start": "787760",
    "end": "794810"
  },
  {
    "text": "case that that role allows the custom resource and its own running within the",
    "start": "794810",
    "end": "801470"
  },
  {
    "text": "scope of running cloud formation stack deployment right so when it comes to the point where it has a blob that was",
    "start": "801470",
    "end": "808250"
  },
  {
    "text": "passed as invite as a parameter to the template it decrypts it with one",
    "start": "808250",
    "end": "813500"
  },
  {
    "text": "invocation of custom resource it now has a clear value of it and then another invocation",
    "start": "813500",
    "end": "818880"
  },
  {
    "text": "of that same customers but with different parameters it now encrypts it with key to it cannot decrypt with key",
    "start": "818880",
    "end": "825660"
  },
  {
    "text": "to it only increase with key to and then the route that the the role with the policy of the tasks now running can",
    "start": "825660",
    "end": "832170"
  },
  {
    "text": "decrypt anything that was encrypted with key to and now at runtime when when the",
    "start": "832170",
    "end": "838560"
  },
  {
    "text": "the work oh that it starts to start script if you will of the container is running it decrypts",
    "start": "838560",
    "end": "843720"
  },
  {
    "text": "the value of the protected environment variable and now it has a clear text in memory and applications have access to",
    "start": "843720",
    "end": "849089"
  },
  {
    "text": "it hopefully it wasn't too confusing so",
    "start": "849089",
    "end": "855240"
  },
  {
    "start": "854000",
    "end": "905000"
  },
  {
    "text": "how to path environment variable into CloudFormation template as a parameter alias allows number of parameters to be",
    "start": "855240",
    "end": "862410"
  },
  {
    "text": "passed the most common one is string there is no way for you to unless you",
    "start": "862410",
    "end": "867570"
  },
  {
    "text": "pass different and by different parameters for key and for value there is no way for you to pass key values in",
    "start": "867570",
    "end": "873720"
  },
  {
    "text": "a single string as a pair so we created this kind of pipe separated a parameter",
    "start": "873720",
    "end": "882180"
  },
  {
    "text": "type and this regular expression basically allows us to specify key on",
    "start": "882180",
    "end": "888089"
  },
  {
    "text": "the left and the value on on the right of this pipe of course if you have values with pipe it kind of breaks the",
    "start": "888089",
    "end": "894300"
  },
  {
    "text": "logic in our use case it works but if you have pipe in your values or keys I don't think so then you need some other",
    "start": "894300",
    "end": "901529"
  },
  {
    "text": "delimiter for this implementation but this works with that so remember",
    "start": "901529",
    "end": "907440"
  },
  {
    "start": "905000",
    "end": "979000"
  },
  {
    "text": "previously I was talking to you about the the encryption and decryption so",
    "start": "907440",
    "end": "913050"
  },
  {
    "text": "this is the section of CloudFormation template that does the decryption of the",
    "start": "913050",
    "end": "918180"
  },
  {
    "text": "encrypted value with key one again it's troposphere code but the TUI trees just like CloudFormation just more dense just",
    "start": "918180",
    "end": "926010"
  },
  {
    "text": "a you know a plug for troposphere you can write it in Python you could add comments now you have yam also we can do",
    "start": "926010",
    "end": "932610"
  },
  {
    "text": "it still but if you want to kind of have a more higher level programming for your CloudFormation templates the output of",
    "start": "932610",
    "end": "939209"
  },
  {
    "text": "it is when you when you run and compile the output is called formation but you implement it in Python so the pertinent",
    "start": "939209",
    "end": "946410"
  },
  {
    "text": "bit here is between the the comment lines right so the encrypted text is the select one",
    "start": "946410",
    "end": "952080"
  },
  {
    "text": "of the split by pipe of the value of the parameter that we've seen in a previous",
    "start": "952080",
    "end": "958380"
  },
  {
    "text": "screen the custom resource then the VG encrypt string py CR takes this as well",
    "start": "958380",
    "end": "965610"
  },
  {
    "text": "as some other parameters the service the service token for the lambda invocation and then when it returns the return",
    "start": "965610",
    "end": "971820"
  },
  {
    "text": "value of it is clear text text but it lives within the context of the executed",
    "start": "971820",
    "end": "977010"
  },
  {
    "text": "CloudFormation template executed stack and then the same custom resource was",
    "start": "977010",
    "end": "982320"
  },
  {
    "start": "979000",
    "end": "1048000"
  },
  {
    "text": "slightly different arguments just rain cribs back so that now we have an encrypted value with with the key to so",
    "start": "982320",
    "end": "991200"
  },
  {
    "text": "that the task role can decrypt it now somebody with keen eyes could say why not secret to use secrets manager for",
    "start": "991200",
    "end": "997320"
  },
  {
    "text": "this why you complicated so much we're still working in standardizing secrets",
    "start": "997320",
    "end": "1003650"
  },
  {
    "text": "manager in Vanguard if we were very highly regulated industry so it takes us",
    "start": "1003650",
    "end": "1011720"
  },
  {
    "text": "some time to to ingest products into our portfolio this solution was available",
    "start": "1011720",
    "end": "1018709"
  },
  {
    "text": "for us it's it's a neat trick so that just that that's why I wanted to share it but it's definitely not the most",
    "start": "1018709",
    "end": "1025160"
  },
  {
    "text": "ideal way of getting at secret credentials there are two other ways to do the same using AWS native services I",
    "start": "1025160",
    "end": "1032420"
  },
  {
    "text": "think it's the same protected keys or something like that is one and definitely secrets manager is another",
    "start": "1032420",
    "end": "1038058"
  },
  {
    "text": "which then by attaching a role to the task you will allow a task to get",
    "start": "1038059",
    "end": "1043160"
  },
  {
    "text": "something from an encrypted vault in secrets manager same idea so here is",
    "start": "1043160",
    "end": "1051500"
  },
  {
    "start": "1048000",
    "end": "1073000"
  },
  {
    "text": "another kind of part of code which shows how we parse the environment variables",
    "start": "1051500",
    "end": "1057050"
  },
  {
    "text": "remember it's a key value separated by pipes so select 0 split by pipe and here we get the encrypted value of they",
    "start": "1057050",
    "end": "1065360"
  },
  {
    "text": "encrypt the they encrypted with the key to and pass it as an ICS environment variable to the init task definition",
    "start": "1065360",
    "end": "1073120"
  },
  {
    "start": "1073000",
    "end": "1228000"
  },
  {
    "text": "so let's talk about ACM a little bit so ACM now there is public and private we",
    "start": "1074260",
    "end": "1082760"
  },
  {
    "text": "actually looked at private because everything that we're doing in this stack is internally facing nothing has",
    "start": "1082760",
    "end": "1088130"
  },
  {
    "text": "public IP address there is a a slew of components in a stack that ferries the",
    "start": "1088130",
    "end": "1095150"
  },
  {
    "text": "traffic from the unprotected network into the internal network so we looked",
    "start": "1095150",
    "end": "1100250"
  },
  {
    "text": "at the private certificate ACM offering by AWS it's still lacked in capabilities",
    "start": "1100250",
    "end": "1108110"
  },
  {
    "text": "from where we needed it to be so what we ended up doing is so we have brought the",
    "start": "1108110",
    "end": "1114890"
  },
  {
    "text": "green zone private and public for every domain that we use in order for you to validate a certificate with ACM you need",
    "start": "1114890",
    "end": "1121700"
  },
  {
    "text": "to create a record in a public zone because that's how ACM this service is resolving like using coming from the",
    "start": "1121700",
    "end": "1128450"
  },
  {
    "text": "internet it wants to resolve the validation record that you created it correctly and you actually own the domain but the host names for the load",
    "start": "1128450",
    "end": "1137060"
  },
  {
    "text": "balance or the application load balancers to which those certificates get attached afterwards actually living in a private zone because they are",
    "start": "1137060",
    "end": "1142640"
  },
  {
    "text": "internally facing so we kind of created a split split brain architecture a",
    "start": "1142640",
    "end": "1148400"
  },
  {
    "text": "little bit and we use ACM domain validator which is another custom resource that we wrote which both",
    "start": "1148400",
    "end": "1154490"
  },
  {
    "text": "request the same certificate and then validates their same certificates and",
    "start": "1154490",
    "end": "1159590"
  },
  {
    "text": "then waits for the service to validate that can take a number of minutes again all of this happens happens while the",
    "start": "1159590",
    "end": "1166300"
  },
  {
    "text": "CloudFormation stack is being deployed and you can you can pass alternative",
    "start": "1166300",
    "end": "1171980"
  },
  {
    "text": "names we support blue green with our implementation so we actually pre pre",
    "start": "1171980",
    "end": "1178670"
  },
  {
    "text": "wire the alternative names for the certificates into the certificate that gets issued to the application load",
    "start": "1178670",
    "end": "1184340"
  },
  {
    "text": "balancer so then the elevation of so we",
    "start": "1184340",
    "end": "1190220"
  },
  {
    "text": "have pre current and post the pre is you if blue if you will current is what's running in production",
    "start": "1190220",
    "end": "1195470"
  },
  {
    "text": "and post is something that if you want to roll back all three of those names getting pre-wired then the certificate",
    "start": "1195470",
    "end": "1202250"
  },
  {
    "text": "gets attached to the application load balancer and the elevation is something that you",
    "start": "1202250",
    "end": "1207529"
  },
  {
    "text": "do in a pipeline you promote from free and we just changed the NS records so",
    "start": "1207529",
    "end": "1213970"
  },
  {
    "text": "free becomes Karan Karan becomes post and then pre becomes available for you to deploy a new version all of that",
    "start": "1213970",
    "end": "1220130"
  },
  {
    "text": "happens throughout 53 but the certificate is ready to take anyone of this request ACM and the certificate",
    "start": "1220130",
    "end": "1225380"
  },
  {
    "text": "cell doesn't need to change so once the",
    "start": "1225380",
    "end": "1230450"
  },
  {
    "start": "1228000",
    "end": "1268000"
  },
  {
    "text": "certificate is issued by the custom resource we can then attach it to the application load balancer by the way not",
    "start": "1230450",
    "end": "1235970"
  },
  {
    "text": "only application load balancer I think recently they released a TLS based for",
    "start": "1235970",
    "end": "1242990"
  },
  {
    "text": "NLB and if you worked enough with CloudFormation template you know that",
    "start": "1242990",
    "end": "1248870"
  },
  {
    "text": "from CloudFormation perspective the difference between a lb and n lb is just the the type one of them is application",
    "start": "1248870",
    "end": "1255769"
  },
  {
    "text": "the other one is network it's all falls under under the elastic load balancing",
    "start": "1255769",
    "end": "1261350"
  },
  {
    "text": "v2 cloud formation ap is just something for you to know so what a task rolls if",
    "start": "1261350",
    "end": "1271730"
  },
  {
    "start": "1268000",
    "end": "1321000"
  },
  {
    "text": "you work with ec2 you probably know what the instance profiles are task rolls of very similar things it's something did",
    "start": "1271730",
    "end": "1277340"
  },
  {
    "text": "you attach to individual tasks within the service you do it through the service excuse me because it runs identical",
    "start": "1277340",
    "end": "1283730"
  },
  {
    "text": "tasks just a number of times of them so each task within the ECS service the",
    "start": "1283730",
    "end": "1288980"
  },
  {
    "text": "entity has a task role that allows it to do certain things or access to specific",
    "start": "1288980",
    "end": "1294220"
  },
  {
    "text": "resources you can narrow the scope to to the smallest denominator like just the",
    "start": "1294220",
    "end": "1300260"
  },
  {
    "text": "minimum necessary that you need to run in its application specific so that you",
    "start": "1300260",
    "end": "1305990"
  },
  {
    "text": "know remember the key example each micro service gets a kms key they're a dollar apiece and then whatever is encrypted",
    "start": "1305990",
    "end": "1314240"
  },
  {
    "text": "for that application only the tasks of that micro service so application can decrypt nobody else can",
    "start": "1314240",
    "end": "1321470"
  },
  {
    "start": "1321000",
    "end": "1377000"
  },
  {
    "text": "to attach her Erol to a task it doesn't not every not every CSS gets deployed",
    "start": "1321470",
    "end": "1327570"
  },
  {
    "text": "with a role but it's something that you pass in a parameter we typically think about it you know let's say you have a",
    "start": "1327570",
    "end": "1333450"
  },
  {
    "text": "micro service that uses DynamoDB so you would deploy a dynamo DB and a role for",
    "start": "1333450",
    "end": "1339870"
  },
  {
    "text": "the ECS service that allows it to access that dynamo DB table in a way that this",
    "start": "1339870",
    "end": "1345480"
  },
  {
    "text": "application is supposed to do so role in the policy would be deployed in the same stack the output of that stack is going",
    "start": "1345480",
    "end": "1350850"
  },
  {
    "text": "to be their role aren't then you take that role on actually the pipeline does it's in our use case hopefully in yours",
    "start": "1350850",
    "end": "1356160"
  },
  {
    "text": "as well and then you pass it as a parameter to this stack which deploys the ACS compute and then the role if it",
    "start": "1356160",
    "end": "1362580"
  },
  {
    "text": "has there's a condition if it has the role tasks the parameter it gets attached to their ACS task definition",
    "start": "1362580",
    "end": "1368820"
  },
  {
    "text": "and now the tasks in this VCS service have the role attached to them in the applications inside of them can do",
    "start": "1368820",
    "end": "1375270"
  },
  {
    "text": "whatever that role allows to do so let's talk about infrastructure protection so",
    "start": "1375270",
    "end": "1381090"
  },
  {
    "start": "1377000",
    "end": "1448000"
  },
  {
    "text": "I think there are a lot of toxins in this conference about docker security",
    "start": "1381090",
    "end": "1388040"
  },
  {
    "text": "for us it's important that whatever - we",
    "start": "1388040",
    "end": "1393660"
  },
  {
    "text": "choose obviously can scan docker images for vulnerable 'nor abilities it can",
    "start": "1393660",
    "end": "1399390"
  },
  {
    "text": "then mark them or tag them as approved or unapproved and we have we can define",
    "start": "1399390",
    "end": "1404760"
  },
  {
    "text": "those criterias based on certain policies it can protect the application at runtime everything becomes",
    "start": "1404760",
    "end": "1410910"
  },
  {
    "text": "compromised it's just a matter of time so when a compromised occur there how",
    "start": "1410910",
    "end": "1416520"
  },
  {
    "text": "far the attacker can escalate the attack from a compromised container we want to",
    "start": "1416520",
    "end": "1422130"
  },
  {
    "text": "limit that's that that that blast radius and whatever we chose for this as this",
    "start": "1422130",
    "end": "1427800"
  },
  {
    "text": "tool would do something that would allow us to do that make sure that only has that have that runtime protection",
    "start": "1427800",
    "end": "1434340"
  },
  {
    "text": "enabled can run in our environment alert and block the anomalies when they occur",
    "start": "1434340",
    "end": "1440790"
  },
  {
    "text": "a lock alerted the sock and obviously compro prevent access to come from in a",
    "start": "1440790",
    "end": "1446340"
  },
  {
    "text": "compromise compromised scenario so we looked at a few products on the",
    "start": "1446340",
    "end": "1452629"
  },
  {
    "text": "market actually when we looked it was only one that supported Fargate most of the container security tools even until",
    "start": "1452629",
    "end": "1462440"
  },
  {
    "text": "today that are out there run themselves on a host in a privileged mode and then",
    "start": "1462440",
    "end": "1468859"
  },
  {
    "text": "they are able to interact with the containers from a container in privileged mode and then do all kind of",
    "start": "1468859",
    "end": "1475429"
  },
  {
    "text": "scanning and and blocking in Fargate however that's not an option we don't own the hosts AWS does there is no way",
    "start": "1475429",
    "end": "1482869"
  },
  {
    "text": "for us to deploy anything on a host so then the solution that we chose need to be able to natively to support Fargate",
    "start": "1482869",
    "end": "1489249"
  },
  {
    "text": "we looked at the solution called aqua I think they're here somewhere in the",
    "start": "1489249",
    "end": "1494779"
  },
  {
    "text": "booth I'm pretty sure they're somewhere in the audience as well so we were able",
    "start": "1494779",
    "end": "1499940"
  },
  {
    "text": "to deploy aqua the whole stack in the same architecture as every other micro",
    "start": "1499940",
    "end": "1505879"
  },
  {
    "text": "service that we deploy in acs Fargate even with the same template we have to change a little bit the type of load",
    "start": "1505879",
    "end": "1513619"
  },
  {
    "text": "balancer if you remember I told you from the CloudFormation deployment from cultivation perspective the difference",
    "start": "1513619",
    "end": "1519499"
  },
  {
    "text": "between application load balancer and network load balancer is very small so if you if you choose an option for",
    "start": "1519499",
    "end": "1525710"
  },
  {
    "text": "example we have a protocol as one of the available parameters for the application",
    "start": "1525710",
    "end": "1530869"
  },
  {
    "text": "if you change the protocol of protocol from HTTP to TLS or TCP all of a sudden",
    "start": "1530869",
    "end": "1537229"
  },
  {
    "text": "it becomes a network load balancer we switch everything in the template there are some other minor parameters that are",
    "start": "1537229",
    "end": "1542479"
  },
  {
    "text": "specific to application load balancer for example on the application load downs I can do layer 7 type health",
    "start": "1542479",
    "end": "1549139"
  },
  {
    "text": "checks basically be aware of a yura of the application obviously NLB which is a network type device layer 3 cannot but",
    "start": "1549139",
    "end": "1556700"
  },
  {
    "text": "we deployed a point in this in the same template actually to templates because there are two components one of them is",
    "start": "1556700",
    "end": "1563479"
  },
  {
    "text": "using network load balancer so the micro enforcer which is all the way on the left is actually a component which runs",
    "start": "1563479",
    "end": "1572659"
  },
  {
    "text": "inside each one of our docker containers we pre packaged it in the image that we",
    "start": "1572659",
    "end": "1577820"
  },
  {
    "text": "make available for our developers it's a small binary probably Max and that is the component that makes",
    "start": "1577820",
    "end": "1586269"
  },
  {
    "text": "sure that the image that is from which you're attempting to start a container",
    "start": "1586269",
    "end": "1591399"
  },
  {
    "text": "is an approved one using that policies remember and also it protects the",
    "start": "1591399",
    "end": "1597250"
  },
  {
    "text": "application runtime so if there is any compromise or any kind of escalation the application is trying to do the micro",
    "start": "1597250",
    "end": "1603639"
  },
  {
    "text": "enforcer will protect it it will block it from you know going any further the micro enforcer and I think this",
    "start": "1603639",
    "end": "1610779"
  },
  {
    "text": "architecture is changing in a current version but in the versions we still have deployed it communicates with the",
    "start": "1610779",
    "end": "1616210"
  },
  {
    "text": "aqua gateways aqua gateways are deployed also can take also containers deployed NCS Fargate and its using SSH of our",
    "start": "1616210",
    "end": "1624720"
  },
  {
    "text": "unspecified port again it's running any CCS service and then Postgres is the",
    "start": "1624720",
    "end": "1632409"
  },
  {
    "text": "only place where is where our quad stack maintains state it also has a UI",
    "start": "1632409",
    "end": "1638110"
  },
  {
    "text": "component which is also an API component uses the same gateway so it's deployed on the lower part of the stack using a",
    "start": "1638110",
    "end": "1645549"
  },
  {
    "text": "will be this time obviously with a cm and the communication between the",
    "start": "1645549",
    "end": "1650559"
  },
  {
    "text": "gateways and aqua console doesn't happen directly it happens through the database so the moment the console updates",
    "start": "1650559",
    "end": "1656860"
  },
  {
    "text": "something in gateway in a database the gateways will get it as well so for example you want to change a policy you",
    "start": "1656860",
    "end": "1662700"
  },
  {
    "text": "once you commit it changes the state and in in Postgres running in RDS obviously",
    "start": "1662700",
    "end": "1669970"
  },
  {
    "text": "and then the gateways get it as well and the micro enforcers get it from the gateways all of it is deployed in auto",
    "start": "1669970",
    "end": "1677139"
  },
  {
    "text": "scaling images are stored in EC are just with any other micro service in our ecosystem and then EGR is accessible",
    "start": "1677139",
    "end": "1684340"
  },
  {
    "text": "through V PC endpoint one component here that you can see on the bottom which is the only component which is not a",
    "start": "1684340",
    "end": "1690460"
  },
  {
    "text": "container in our in our environment is the fleet of ec2 instances that perform the scanning remember in our in order",
    "start": "1690460",
    "end": "1696940"
  },
  {
    "text": "for you to perform a scanning of an image you need to be in privileged mode Fargate doesn't allow you to do this or",
    "start": "1696940",
    "end": "1702730"
  },
  {
    "text": "at least not yet so we have a fleet of ec2 instances which are disconnected from you cannot",
    "start": "1702730",
    "end": "1709179"
  },
  {
    "text": "connect to them there is no SSH available to those instances those instances of an instance profile which allows them",
    "start": "1709179",
    "end": "1716540"
  },
  {
    "text": "an interaction with ECR they pull new images and actually images that already",
    "start": "1716540",
    "end": "1721610"
  },
  {
    "text": "exist they reach cannon periodically I believe it's once a day but as soon as new image appears in in the ECR",
    "start": "1721610",
    "end": "1728840"
  },
  {
    "text": "repository which is pushed there by the pipeline they will scan it within minutes and then they communicate",
    "start": "1728840",
    "end": "1734390"
  },
  {
    "text": "through the application load balancer through API to the console using a secure talking token in order to tag an",
    "start": "1734390",
    "end": "1742850"
  },
  {
    "text": "image as approved or unapproved in a database so that then micro enforcer will know whether you can spin",
    "start": "1742850",
    "end": "1749120"
  },
  {
    "text": "that image from this serve in a container from this image or you should not so this is some of the examples of",
    "start": "1749120",
    "end": "1758210"
  },
  {
    "text": "scans that are available from the aqua console actually you can notice that the",
    "start": "1758210",
    "end": "1764150"
  },
  {
    "text": "smaller the base image type the less vulnerabilities it has which kind of",
    "start": "1764150",
    "end": "1769190"
  },
  {
    "text": "makes sense and there is a lot more advantages to having your image as small as possible but you know the more moving",
    "start": "1769190",
    "end": "1777800"
  },
  {
    "text": "parts the less complicated the architecture so here as well the less packages it has the less vulnerabilities",
    "start": "1777800",
    "end": "1784460"
  },
  {
    "text": "most likely to have so it's using a role based kind of you know repeating what",
    "start": "1784460",
    "end": "1790429"
  },
  {
    "text": "I've said previously it's using a role based access to docker image repositories in ECR it pulls the images",
    "start": "1790429",
    "end": "1795590"
  },
  {
    "text": "onto those ec2 instances that are the scanners and they're kind of ephemeral as well in a scaling group this can",
    "start": "1795590",
    "end": "1801440"
  },
  {
    "text": "dream it scan the instances scan the images and mark them within the system of aqua as approved and unapproved from",
    "start": "1801440",
    "end": "1808520"
  },
  {
    "text": "which the micro enforcer then knows whether it can start the application or it shouldn't they're periodically risk",
    "start": "1808520",
    "end": "1815690"
  },
  {
    "text": "and and to make sure that whatever latest signatures aqua adds actually",
    "start": "1815690",
    "end": "1820820"
  },
  {
    "text": "they use some third-party database that I think everybody else is using as well there are a couple of those so whenever",
    "start": "1820820",
    "end": "1827480"
  },
  {
    "text": "this database gets updates with newer vulnerabilities it's important to rescan your images to make sure that you know",
    "start": "1827480",
    "end": "1833990"
  },
  {
    "text": "you're still compliant so then the protection of the",
    "start": "1833990",
    "end": "1839220"
  },
  {
    "text": "application at runtime the micro enforcer is going to be already deployed in the image because we prepackaged them",
    "start": "1839220",
    "end": "1845669"
  },
  {
    "text": "in our army images and you can see here in the from this is our internal images we don't download images from the",
    "start": "1845669",
    "end": "1850860"
  },
  {
    "text": "internet with Adam vadym make sure they're sanitized them and make sure they're secure before we make them available we also deploy micro enforcer",
    "start": "1850860",
    "end": "1857640"
  },
  {
    "text": "and we make sure we control the entry point so at the entry point it's important to make sure that micro",
    "start": "1857640",
    "end": "1863340"
  },
  {
    "text": "enforcer is the first argument before you launch anything else and what it does it creates a sort of envelope",
    "start": "1863340",
    "end": "1868350"
  },
  {
    "text": "around the runtime within the container and if you know when something happens",
    "start": "1868350",
    "end": "1873679"
  },
  {
    "text": "which is the next slide you know compromises will happen we all know it we're here in this conference",
    "start": "1873679",
    "end": "1880649"
  },
  {
    "text": "because we note when the micro enforcer is running in block mode it actually can",
    "start": "1880649",
    "end": "1886590"
  },
  {
    "text": "run in read-only or audit mode so it will only notify you that a compromise occur but will not block it obviously",
    "start": "1886590",
    "end": "1893429"
  },
  {
    "text": "when you become comfortable with it you want to switch it to block mode and when it is in block mode it will prevent the",
    "start": "1893429",
    "end": "1900390"
  },
  {
    "text": "escalation so here in this example somebody is trying to run beam PS from a compromised code which is probably",
    "start": "1900390",
    "end": "1906360"
  },
  {
    "text": "running in Python or Java or something like that inside your container and micro enforcer blocked that execution so",
    "start": "1906360",
    "end": "1912899"
  },
  {
    "text": "even though they contain the code inside the container is compromised it wasn't able to escalate further now that being",
    "start": "1912899",
    "end": "1919890"
  },
  {
    "text": "said running in foggy do you really care it's not your host anyway what you should write so circles alerted when",
    "start": "1919890",
    "end": "1929330"
  },
  {
    "text": "malicious behavior is occurring and we are blocking the compromised event let's",
    "start": "1929330",
    "end": "1937710"
  },
  {
    "text": "talk about reliability again within the context to VC as far get in our stack",
    "start": "1937710",
    "end": "1943900"
  },
  {
    "text": "there are three types of parameters for the number of tasks in acs one is the",
    "start": "1943900",
    "end": "1949420"
  },
  {
    "text": "minimum the other one is the maximum and the one which you care about the most is",
    "start": "1949420",
    "end": "1955390"
  },
  {
    "text": "the desired that's actually the term Amazon ECS service will always keep the",
    "start": "1955390",
    "end": "1963700"
  },
  {
    "text": "desired number of tasks running so whatever happens the desired number of",
    "start": "1963700",
    "end": "1969880"
  },
  {
    "text": "tasks will be running the desired number of tasks will change based on auto-scaling criteria but I see a",
    "start": "1969880",
    "end": "1976900"
  },
  {
    "text": "service will make sure the desired number of tasks is running now if something happens inside the application",
    "start": "1976900",
    "end": "1982650"
  },
  {
    "text": "inside a container application dies for example because that application obviously runs in foreground inside the",
    "start": "1982650",
    "end": "1988570"
  },
  {
    "text": "container the container exits with it II see a service kinda like kubernetes runs those loops it checks that there is",
    "start": "1988570",
    "end": "1994660"
  },
  {
    "text": "always desired number of tasks and then it was soon as it detects that it's no longer running it will spin him up the",
    "start": "1994660",
    "end": "2001500"
  },
  {
    "text": "health check from the your eye perspective or other application layer several perspective is actually done by",
    "start": "2001500",
    "end": "2006960"
  },
  {
    "text": "application load balancer or rather that the task group within the application load load balancer remember and network",
    "start": "2006960",
    "end": "2013440"
  },
  {
    "text": "a load balancer cannot do layer 7 health check but it can check if the container",
    "start": "2013440",
    "end": "2018510"
  },
  {
    "text": "is listening in a specific port so that also is done by the target group within a lb or Nov and by default in this",
    "start": "2018510",
    "end": "2026460"
  },
  {
    "text": "template that we created we use Amazon CloudWatch metrics just the CPU one for now to make sure that we scale up the",
    "start": "2026460",
    "end": "2033450"
  },
  {
    "text": "number of desired tasks within the acs service so then in this screenshot you",
    "start": "2033450",
    "end": "2039870"
  },
  {
    "text": "can see the easier service DKR service something CCT cloud construction team in",
    "start": "2039870",
    "end": "2045570"
  },
  {
    "text": "CTO in bangor I killed this task on",
    "start": "2045570",
    "end": "2051090"
  },
  {
    "text": "purpose just to make sure what happened you that the service spins it up and you can see that desired count is one but",
    "start": "2051090",
    "end": "2058080"
  },
  {
    "text": "the running count sorry desired count is two but the running count is one so the service spins up another instance or another",
    "start": "2058080",
    "end": "2064980"
  },
  {
    "text": "task in this example the mapping between EC a service and",
    "start": "2064980",
    "end": "2072870"
  },
  {
    "text": "target group is happening within the service so you will create a",
    "start": "2072870",
    "end": "2078060"
  },
  {
    "text": "relationship between the target group and they see us the service in order for",
    "start": "2078060",
    "end": "2085220"
  },
  {
    "text": "application the load answer or rather the target group has two types of targets one of them is instance ID",
    "start": "2085220",
    "end": "2090840"
  },
  {
    "text": "the other one is IP when you run in Fargate mode obviously instance ID is not the option not an option",
    "start": "2090840",
    "end": "2097050"
  },
  {
    "text": "the only option is available to use ap but your tasks are ephemeral they come and go when they do whether we're",
    "start": "2097050",
    "end": "2102840"
  },
  {
    "text": "running in a V PC networking mode when they do they get a different IP address from within the APC DHCP range how does",
    "start": "2102840",
    "end": "2109200"
  },
  {
    "text": "the application load balancer knows what the target is you create this relationship and that's",
    "start": "2109200",
    "end": "2114600"
  },
  {
    "text": "how ECS service actually lets the target group know what the IP address of the",
    "start": "2114600",
    "end": "2121260"
  },
  {
    "text": "task so that it can begin doing its health check against it and then the",
    "start": "2121260",
    "end": "2127830"
  },
  {
    "text": "health check itself is specified in the target group of the application load",
    "start": "2127830",
    "end": "2133230"
  },
  {
    "text": "balancer in this case because the protocol is HTTPS you specify the path of the URI the port and those other",
    "start": "2133230",
    "end": "2141030"
  },
  {
    "text": "things that are like the healthy threshold and healthy threshold the timeout in the interval are the minimum",
    "start": "2141030",
    "end": "2147240"
  },
  {
    "text": "ones that a the target group would allow you to do for the health check success",
    "start": "2147240",
    "end": "2152580"
  },
  {
    "text": "code is always also configurable but in our case and I hope in everybody else is 200 this success I don't know of any",
    "start": "2152580",
    "end": "2159150"
  },
  {
    "text": "other use case but if you do that's would be interesting to hear and that's",
    "start": "2159150",
    "end": "2164850"
  },
  {
    "text": "how application load balancer does health checking against is here's the service the auto scaling is done within",
    "start": "2164850",
    "end": "2174240"
  },
  {
    "text": "the service as well so we still look in the screen of the service in SES console and we created again smoke again most",
    "start": "2174240",
    "end": "2181230"
  },
  {
    "text": "aggressive most aggressive scaling up and scaling down that AWS allows you by",
    "start": "2181230",
    "end": "2186540"
  },
  {
    "text": "default so as soon as CPU utilization of the service and this is everything is",
    "start": "2186540",
    "end": "2192270"
  },
  {
    "text": "deployed for service these here serves within the stack gets above 35% we'll",
    "start": "2192270",
    "end": "2198780"
  },
  {
    "text": "add another task into the service and it's it gets below 5% we will remove will",
    "start": "2198780",
    "end": "2206190"
  },
  {
    "text": "remove the task from service now remember there is minimum and maximum there are three numbers of tasks it will",
    "start": "2206190",
    "end": "2212460"
  },
  {
    "text": "never scale down below minimum and it will never scale up above maximum there",
    "start": "2212460",
    "end": "2219690"
  },
  {
    "text": "are other metrics that are available I think memory is one and you can create with your come up with your own custom metrics for your use case for our use",
    "start": "2219690",
    "end": "2226770"
  },
  {
    "text": "case CPU is good enough and we haven't seen any issues but if we do we'll",
    "start": "2226770",
    "end": "2232080"
  },
  {
    "text": "probably look at editing some custom metrics for this so then it brings me to",
    "start": "2232080",
    "end": "2240270"
  },
  {
    "start": "2236000",
    "end": "2704000"
  },
  {
    "text": "one before last slight of mine what's next so remember I didn't mention this",
    "start": "2240270",
    "end": "2249210"
  },
  {
    "text": "but Vanguard is a low cost investment provider so for us to get the best",
    "start": "2249210",
    "end": "2255030"
  },
  {
    "text": "optimized expenditure for compute is extremely important because right now",
    "start": "2255030",
    "end": "2261210"
  },
  {
    "text": "we're deploying a lb for each one of our stacks each one of our micro services lb is the biggest contributor to the cost",
    "start": "2261210",
    "end": "2267990"
  },
  {
    "text": "it is necessary for us right now because that's the thing that terminates the TLS",
    "start": "2267990",
    "end": "2273180"
  },
  {
    "text": "coming from outside it also the one that has integration with ACM and therefore we can't really forego it at this point",
    "start": "2273180",
    "end": "2280200"
  },
  {
    "text": "of time but it's something that you should always keep in your mind if that's the path that you take there are",
    "start": "2280200",
    "end": "2285270"
  },
  {
    "text": "some alternatives that are available to alb from routing traffic to the tasks",
    "start": "2285270",
    "end": "2290790"
  },
  {
    "text": "perspective remember tasks are ephemeral and by themselves they only have an IP so you need a way to pass traffic to",
    "start": "2290790",
    "end": "2298080"
  },
  {
    "text": "them anyways cloud map is one such thing it uses DNS and integration with this",
    "start": "2298080",
    "end": "2304830"
  },
  {
    "text": "here service also available and it creates this record with you know whatever DNS goodies that are available",
    "start": "2304830",
    "end": "2310590"
  },
  {
    "text": "with TTL up to one second or as little as one second and it will",
    "start": "2310590",
    "end": "2316350"
  },
  {
    "text": "send traffic with some load balancing capability directly to the task but it cannot tell or terminate ACM Turk cannot",
    "start": "2316350",
    "end": "2323700"
  },
  {
    "text": "terminate TOS so unless you want to inject certificates directly into your containers and do this operational",
    "start": "2323700",
    "end": "2330330"
  },
  {
    "text": "overhead having Al be at least at this point of time is is essential for us sizing the tasks in",
    "start": "2330330",
    "end": "2338749"
  },
  {
    "text": "the memory in the Fargate is extremely important when you're running an AC to mode for ACS you decide what they see",
    "start": "2338749",
    "end": "2345049"
  },
  {
    "text": "two instances what are their sizes and you then can pack you know your ECS",
    "start": "2345049",
    "end": "2351470"
  },
  {
    "text": "tasks as tightly as possible that's what you want that's how you get the best bang for your buck in Fargate you need",
    "start": "2351470",
    "end": "2357470"
  },
  {
    "text": "to size your each of your tasks individually so you need to be extremely sensitive like I think you need to default to the very little very minimal",
    "start": "2357470",
    "end": "2364279"
  },
  {
    "text": "and then depending on the workload or the application increase it",
    "start": "2364279",
    "end": "2369859"
  },
  {
    "text": "incrementally just to understand what's the baseline of that application of microservice another important thing",
    "start": "2369859",
    "end": "2375619"
  },
  {
    "text": "that I haven't mentioned before but I think you guys should know is that it is",
    "start": "2375619",
    "end": "2380869"
  },
  {
    "text": "very important not always possible to run in the container applications that",
    "start": "2380869",
    "end": "2387440"
  },
  {
    "text": "as soon as the container starts the application immediately goes into service so something written and go something",
    "start": "2387440",
    "end": "2393619"
  },
  {
    "text": "written ogia something written python there are other languages out there there are probably more popular than the",
    "start": "2393619",
    "end": "2399410"
  },
  {
    "text": "ones that I just mentioned such as Java they have a long instantiation time time",
    "start": "2399410",
    "end": "2405109"
  },
  {
    "text": "and when I'm saying long it's probably seconds but tens of seconds up to a",
    "start": "2405109",
    "end": "2410630"
  },
  {
    "text": "minute depending how much things you need to do what happens is the application load balancer as soon as the",
    "start": "2410630",
    "end": "2417410"
  },
  {
    "text": "task comes up the docking container is up it starts hitting it with health checks and because we want to be as",
    "start": "2417410",
    "end": "2422989"
  },
  {
    "text": "aggressive as possible so that we can be the most resilient if Java or any other",
    "start": "2422989",
    "end": "2430579"
  },
  {
    "text": "language which requires long initialization is not yet operational it will not return to 100 and the",
    "start": "2430579",
    "end": "2436940"
  },
  {
    "text": "application load balancer will mark this container as unhealthy and you will go into endless cycle there is something",
    "start": "2436940",
    "end": "2443630"
  },
  {
    "text": "called a grace period so for those things that require long initialization time you need to figure out what your",
    "start": "2443630",
    "end": "2450559"
  },
  {
    "text": "grace period is we default to 60 because we have a lot of Java sometimes it's nothing that you're not enough we need to change it to 180 seconds sometimes to",
    "start": "2450559",
    "end": "2458239"
  },
  {
    "text": "240 but again my recommendation is you know the smaller the docker image the",
    "start": "2458239",
    "end": "2464269"
  },
  {
    "text": "more the faster the application with inside Cantara can go into service and start",
    "start": "2464269",
    "end": "2469530"
  },
  {
    "text": "responding to requests the more available your entire system is so I'm",
    "start": "2469530",
    "end": "2475780"
  },
  {
    "text": "saying here smaller darker image is going to reduce the cost it will because",
    "start": "2475780",
    "end": "2481360"
  },
  {
    "text": "the footprint in a CR is less and your pain by butBut by size there but we will",
    "start": "2481360",
    "end": "2487840"
  },
  {
    "text": "do more is make your holster is more scalable every event of auto scaling and",
    "start": "2487840",
    "end": "2493480"
  },
  {
    "text": "self-healing which is built into our stack is going going to happen so much that much faster with a smaller",
    "start": "2493480",
    "end": "2499470"
  },
  {
    "text": "container footprint so we want to experiment with application app AWS app",
    "start": "2499470",
    "end": "2505630"
  },
  {
    "text": "mash it was announced lust reinvent no yes but became G a couple of months ago",
    "start": "2505630",
    "end": "2512440"
  },
  {
    "text": "maybe two or three I don't think it's yet ready for enterprise great great",
    "start": "2512440",
    "end": "2518530"
  },
  {
    "text": "deployment but when it does when it is and we're doing an active POC with it",
    "start": "2518530",
    "end": "2524910"
  },
  {
    "text": "together with cloud map it eliminates application load balancer now your ccs service can talk to another easier",
    "start": "2524910",
    "end": "2531580"
  },
  {
    "text": "service entirely over mesh and hopefully you have m TLS done with ACM which is",
    "start": "2531580",
    "end": "2538330"
  },
  {
    "text": "not supported yet but it's like a laundry wish list of the things that you need in order to get to this next general picture and there is encryption",
    "start": "2538330",
    "end": "2545230"
  },
  {
    "text": "in motion within the mesh itself as well and you can and and you can ingest",
    "start": "2545230",
    "end": "2553510"
  },
  {
    "text": "traffic from outside the mesh using ingress and egress gateways again all of those things are on AWS public roadmap",
    "start": "2553510",
    "end": "2559300"
  },
  {
    "text": "for app mesh not available yet but it's something that we want to experiment with and I think you should as well and",
    "start": "2559300",
    "end": "2565050"
  },
  {
    "text": "then when you have all those things and al bees are gone there is no way for you",
    "start": "2565050",
    "end": "2571570"
  },
  {
    "text": "to do a health check against the container so docker released API version 135 I don't know what timeframe but",
    "start": "2571570",
    "end": "2580359"
  },
  {
    "text": "recently I mean like months maybe eight six months that allows you to invoke a",
    "start": "2580359",
    "end": "2586090"
  },
  {
    "text": "shell from outside orchestration inside the con terian to curl something will run a script like it's it's I think it's",
    "start": "2586090",
    "end": "2592780"
  },
  {
    "text": "shell of shell CMD those are the two available API invocations so then this",
    "start": "2592780",
    "end": "2598260"
  },
  {
    "text": "health check that she would run all the way through alb you would run directly from the API now the advantages of this",
    "start": "2598260",
    "end": "2605070"
  },
  {
    "text": "is you can be a lot more aggressive the time the timer's there with with",
    "start": "2605070",
    "end": "2610530"
  },
  {
    "text": "milliseconds not seconds anymore so you can do 10 milliseconds and you know when you do this your entire system is a lot",
    "start": "2610530",
    "end": "2617790"
  },
  {
    "text": "more elastic you again the self-healing or scaling events happen a lot faster",
    "start": "2617790",
    "end": "2623130"
  },
  {
    "text": "but you need to remember that now you're you're paying for this with CPU the more you feed your container the more CPU",
    "start": "2623130",
    "end": "2629610"
  },
  {
    "text": "consumed from the application perspective so you need to be extremely sensitive of that another thing about health changing that I would point out",
    "start": "2629610",
    "end": "2636390"
  },
  {
    "text": "and it's not on my slide is that you know we always want to create a health",
    "start": "2636390",
    "end": "2641700"
  },
  {
    "text": "check which is extremely elaborate it goes you know to dependent services and",
    "start": "2641700",
    "end": "2647280"
  },
  {
    "text": "make sure they're up order the database make sure it is up when you do it within the context we see as far gate Oh ACS",
    "start": "2647280",
    "end": "2654540"
  },
  {
    "text": "rather you need to remember what is this health check gonna do for you if the",
    "start": "2654540",
    "end": "2659850"
  },
  {
    "text": "container is not healthy which is what that health check is going to tell you the only thing that they see as far gate will do sorry for touching the",
    "start": "2659850",
    "end": "2665340"
  },
  {
    "text": "microphone is restart that task if your back-end is not working we're starting",
    "start": "2665340",
    "end": "2670530"
  },
  {
    "text": "the task is not gonna help it's not going to remediate the problem so create health checks that are simpler than",
    "start": "2670530",
    "end": "2677370"
  },
  {
    "text": "checking everything throughout the entire back-end infrastructure restricted to what's working or not",
    "start": "2677370",
    "end": "2683160"
  },
  {
    "text": "working within the tasks within the container that is running within your task so with this I'm 15 minutes earlier",
    "start": "2683160",
    "end": "2691140"
  },
  {
    "text": "so giving you the beer time back thank you very much for attending and don't",
    "start": "2691140",
    "end": "2696900"
  },
  {
    "text": "forget to fill your questionnaire thank you so much [Applause]",
    "start": "2696900",
    "end": "2706060"
  }
]