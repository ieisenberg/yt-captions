[
  {
    "text": "hey everybody my name is Alan Garver I'm a professional services consultant with Amazon and here we talk about DevOps",
    "start": "30",
    "end": "7350"
  },
  {
    "text": "pipelines security so we got a bunch of stuff to get through or kind of go through it quick",
    "start": "7350",
    "end": "13019"
  },
  {
    "text": "but we're gonna give you in the session today some tidbits about ways that we",
    "start": "13019",
    "end": "18840"
  },
  {
    "text": "work with different customers in the enterprise services space to secure pipelines so we're gonna talk about a",
    "start": "18840",
    "end": "23939"
  },
  {
    "text": "bunch of that detail but first we want to talk a little bit about the motivation for the talk today we work a lot at AWS and professional",
    "start": "23939",
    "end": "30390"
  },
  {
    "text": "services we work a lot with financial services customers customers in the enterprise space in different areas",
    "start": "30390",
    "end": "35600"
  },
  {
    "text": "doing continuous delivery and and DevOps and security and micro services",
    "start": "35600",
    "end": "41579"
  },
  {
    "text": "decomposition and things like this and so we wanted to talk a little bit about how DevOps develops pipelines and things",
    "start": "41579",
    "end": "47910"
  },
  {
    "text": "like this are typically part of a more holistic project and give you some tidbits on what that looks like so",
    "start": "47910",
    "end": "54140"
  },
  {
    "text": "today we're gonna talk a little bit about financial services customers specifically and the specific challenges",
    "start": "54140",
    "end": "59699"
  },
  {
    "text": "that we have there we're working with several different customers in this space along with Stella Jin a business partner it's specifically the one",
    "start": "59699",
    "end": "66330"
  },
  {
    "text": "customer who's here to talk a little bit about what they're doing here in the space Before we jump into the tidbits a city and so at Citi they're doing some",
    "start": "66330",
    "end": "73830"
  },
  {
    "text": "interesting work in the space and we have Jamie Greco here she's a senior vice-president city just talk a little bit about what they're doing and and",
    "start": "73830",
    "end": "81210"
  },
  {
    "text": "then we'll jump into it so here's Jamie thanks how's everyone doing today",
    "start": "81210",
    "end": "89000"
  },
  {
    "text": "good good okay that's better this is a lot less intimidating than what the",
    "start": "89000",
    "end": "95250"
  },
  {
    "text": "1,500 people in the big hall on Monday so we can be a little bit more casual I",
    "start": "95250",
    "end": "100290"
  },
  {
    "text": "think I'm just gonna take a few minutes and talk through all of the initiatives that we have going on at Citi and then",
    "start": "100290",
    "end": "106350"
  },
  {
    "text": "turn it back over to Alan and Chuck to really get into the meat of what we're doing and really get into the things",
    "start": "106350",
    "end": "112950"
  },
  {
    "text": "that you guys want to see which is all the code happening on the screen so I won't take up too much of your time before I turn it back over to them but I",
    "start": "112950",
    "end": "119820"
  },
  {
    "text": "wanted to give you a preface of the entire initiative and the holistic approach that we're taking and how even",
    "start": "119820",
    "end": "126270"
  },
  {
    "text": "something and how what Chuck and Alan are doing for us ties in to that entire",
    "start": "126270",
    "end": "131579"
  },
  {
    "text": "holistic approach okay so how many of you work in financial",
    "start": "131579",
    "end": "137680"
  },
  {
    "text": "services industry anybody how many of you have huge monolithic mainframe applications to deal with yeah yes the",
    "start": "137680",
    "end": "146109"
  },
  {
    "text": "challenge isn't it yep so at Citi we kicked off an entire initiative this year to really focus on decomposing our",
    "start": "146109",
    "end": "153430"
  },
  {
    "text": "monoliths building out Micra services in leveraging the services that AWS has to",
    "start": "153430",
    "end": "159939"
  },
  {
    "text": "offer to release features to our customers faster so what Alan and Chuck are going to go through is that pipeline",
    "start": "159939",
    "end": "166269"
  },
  {
    "text": "on how we're focusing on the DevOps piece of it to release customers to our",
    "start": "166269",
    "end": "171790"
  },
  {
    "text": "features to our customers back faster but I wanted to touch on the entire initiative because it's important to",
    "start": "171790",
    "end": "178510"
  },
  {
    "text": "understand everything in the transformation that we're going through to implement what Alan and Chuck are",
    "start": "178510",
    "end": "184239"
  },
  {
    "text": "helping us with so we're focusing on decomposing those",
    "start": "184239",
    "end": "189280"
  },
  {
    "text": "monoliths building Micra services our goal sit-ins our goal is to automate the entire pipeline",
    "start": "189280",
    "end": "196290"
  },
  {
    "text": "including the data protection piece of it to make us more efficient and more secure and we're doing this by tackling",
    "start": "196290",
    "end": "202569"
  },
  {
    "text": "three different things first the decomposition of the monoliths second",
    "start": "202569",
    "end": "207609"
  },
  {
    "text": "we're setting up agile teams that are truly agile autonomous teams to work through the decomp and the refactor and",
    "start": "207609",
    "end": "215199"
  },
  {
    "text": "owning their own products and then the third piece is by using the tools that",
    "start": "215199",
    "end": "220269"
  },
  {
    "text": "AWS brings us to automate the entire pipeline to help our teams move faster",
    "start": "220269",
    "end": "225579"
  },
  {
    "text": "so the first slide that here we're gonna go through here is just the decomp of the mainframe anybody else dealing with this",
    "start": "225579",
    "end": "232359"
  },
  {
    "text": "right now building out micro services yep new buzzword it's all micro services",
    "start": "232359",
    "end": "237849"
  },
  {
    "text": "around the office perfect yep so we're going down the same journey and we're focusing on",
    "start": "237849",
    "end": "243599"
  },
  {
    "text": "decoupling the presentation layer from the business logic right now and then decoupling the business logic out of the",
    "start": "243599",
    "end": "250359"
  },
  {
    "text": "ESP layer and the mainframe layer to build those atomic services that each of our agile teams that we're going to talk",
    "start": "250359",
    "end": "256030"
  },
  {
    "text": "about here in a minute will own and own in two ends so they'll own everything from deploying the tech stack to",
    "start": "256030",
    "end": "263260"
  },
  {
    "text": "building the code testing the code and deploying pote and owning post-launch",
    "start": "263260",
    "end": "269290"
  },
  {
    "text": "so the other inertia that we're going through right now is just building out those autonomous scrum teams I don't",
    "start": "269290",
    "end": "274850"
  },
  {
    "text": "know if any of you are making the move to agile we're doing kind of water dial right now water dial yeah heard it call",
    "start": "274850",
    "end": "282440"
  },
  {
    "text": "many things we're really pushing to get to that true agile model where our teams",
    "start": "282440",
    "end": "287570"
  },
  {
    "text": "can do it all we want our teams to stand up their tech stacks own their code test their code deploy their code and we want",
    "start": "287570",
    "end": "294260"
  },
  {
    "text": "them to be secure in the process of doing all of this and mr. Allen and Chuck are really going to talk you through that security piece of it and",
    "start": "294260",
    "end": "300710"
  },
  {
    "text": "that compliance piece of it to make sure what our teams are building is secure so that when we deploy it we don't have",
    "start": "300710",
    "end": "306380"
  },
  {
    "text": "issues in our production environment and the features that we can release to our customers faster are available all the",
    "start": "306380",
    "end": "313160"
  },
  {
    "text": "time so by doing this by D compa√±era",
    "start": "313160",
    "end": "318920"
  },
  {
    "text": "monoliths by building out the scrum teams by building the micro services and really empowering our teams through the",
    "start": "318920",
    "end": "324770"
  },
  {
    "text": "pipeline we're able to move faster we're able to keep our costs down and we're able to get a higher quality out",
    "start": "324770",
    "end": "330830"
  },
  {
    "text": "of it so I'll turn it over to Alan and Chuck and really go through that pipeline piece of it they'll show you what we're working on to make sure that",
    "start": "330830",
    "end": "337010"
  },
  {
    "text": "we're secure in that entire process all right so let's jump into some good",
    "start": "337010",
    "end": "342800"
  },
  {
    "text": "stuff so before we get into some of the tips tricks techniques for we're implementing in different places that we",
    "start": "342800",
    "end": "349700"
  },
  {
    "text": "take a minute mmm even though this is a more technical level course we thought",
    "start": "349700",
    "end": "355040"
  },
  {
    "text": "we'd level set a little bit on what a pipeline is talk a little bit about the components of it before we sort of jump into some of the techniques so I assume",
    "start": "355040",
    "end": "362060"
  },
  {
    "text": "many of you are familiar with cope with pipelines in general as a as a capability but essentially a continuous",
    "start": "362060",
    "end": "367520"
  },
  {
    "text": "delivery pipeline or a table Skype line is a set of automation it's a secure transport that we use to take code from",
    "start": "367520",
    "end": "374570"
  },
  {
    "text": "some source code repository out to a set of running infrastructure and so this",
    "start": "374570",
    "end": "380060"
  },
  {
    "text": "transport can be sort of customized divided into stages you know built around your own software",
    "start": "380060",
    "end": "385850"
  },
  {
    "text": "development lifecycle but it's designed to provide the automation platform and",
    "start": "385850",
    "end": "391160"
  },
  {
    "text": "the things that you need to do from an automation perspective to deliver - running infrastructure but also catch",
    "start": "391160",
    "end": "397809"
  },
  {
    "text": "failures right to test things that are happening not just from an infrastructure perspective but from an application perspective as well and it's",
    "start": "397809",
    "end": "405249"
  },
  {
    "text": "a mission or one of the missions that it has is to provide fast feedback to the developer right so we want the developer",
    "start": "405249",
    "end": "410289"
  },
  {
    "text": "to get as close to the time of commit on that code feedback about about whatever",
    "start": "410289",
    "end": "415869"
  },
  {
    "text": "the the bug or the error is that caused the failure and so the continuous of pipeline serves serves well in this",
    "start": "415869",
    "end": "423249"
  },
  {
    "text": "space at AWS we have a service called a SS Code pipeline it is used to you you can",
    "start": "423249",
    "end": "430719"
  },
  {
    "text": "log into it and basically very quickly model and set up your own release stages you get to view at a glance so the",
    "start": "430719",
    "end": "437259"
  },
  {
    "text": "progress of things that are flowing through this pipeline but in each stage we kind of do things like deploy a",
    "start": "437259",
    "end": "442569"
  },
  {
    "text": "server or compile code or do different things and then we might do static code analysis on a piece of code we might do",
    "start": "442569",
    "end": "449199"
  },
  {
    "text": "a spec testing against some infrastructure code and we might even do performance and capacity testing in",
    "start": "449199",
    "end": "454989"
  },
  {
    "text": "certain stages aw code pipeline integrates with your favorite tools today so there's a lot of",
    "start": "454989",
    "end": "461229"
  },
  {
    "text": "integrations with things like it and various other services that that it seamlessly integrates with but it also",
    "start": "461229",
    "end": "466659"
  },
  {
    "text": "integrates well with other AWS services like code commit and code deploy",
    "start": "466659",
    "end": "471809"
  },
  {
    "text": "so one of the first things we wanted to",
    "start": "471809",
    "end": "476889"
  },
  {
    "text": "sort of one of the first tips that we want to kind of jump into is about building a secure build artifact",
    "start": "476889",
    "end": "482259"
  },
  {
    "text": "repository so a build artifact repository is every every time you're sort of pipeline is running in a lot of",
    "start": "482259",
    "end": "487629"
  },
  {
    "text": "cases the pipeline will need to do things with code turn them into some sort of modified artifact and then consume that code or that a modified",
    "start": "487629",
    "end": "494679"
  },
  {
    "text": "binary file or whatever it is later in the pipeline and so the build artifact repository becomes a place where if in",
    "start": "494679",
    "end": "501039"
  },
  {
    "text": "the build stage we're compiling some maven doing a maven deploy of some Java",
    "start": "501039",
    "end": "506409"
  },
  {
    "text": "code we compile some class files this is a place where we can sort of store those class files and then reference them",
    "start": "506409",
    "end": "512589"
  },
  {
    "text": "later when we're doing convergence in our pipeline so we do lots of things with the build artifact repository",
    "start": "512589",
    "end": "518818"
  },
  {
    "text": "the reason we do them is because we build once deploy many times so this is",
    "start": "518819",
    "end": "524410"
  },
  {
    "text": "a notion of taking that Java set of Java files that you've compiled putting them in the build repository and then calling",
    "start": "524410",
    "end": "531770"
  },
  {
    "text": "them across the fleet of ec2 instances say in an auto scaling scenario we get to do version control in the space much",
    "start": "531770",
    "end": "537020"
  },
  {
    "text": "like we do in our source version control system and it also frees us from having to have our build server talk to the the",
    "start": "537020",
    "end": "543020"
  },
  {
    "text": "instances that are being converged all right so there's no there's no need for those things to talk to each other if we're using a sort of an independent",
    "start": "543020",
    "end": "549170"
  },
  {
    "text": "third party to pass artifacts through some examples of artifacts there's one here that I'll give you a scenario that",
    "start": "549170",
    "end": "556250"
  },
  {
    "text": "we see sometimes used is taking Chef cookbooks and writing up maybe a wrapper cookbook or someone having some sort of",
    "start": "556250",
    "end": "561649"
  },
  {
    "text": "cookbook that we commit into a source code repository we can use on our build server Burke's Burke shelf it's a vendor",
    "start": "561649",
    "end": "568670"
  },
  {
    "text": "that cookbook which means it will go out to chef it will go out and assemble all the chef dependencies in that cookbook",
    "start": "568670",
    "end": "574670"
  },
  {
    "text": "into a single package and we can create a tar file that we can now treat as sort of a build artifact we converging it and",
    "start": "574670",
    "end": "580160"
  },
  {
    "text": "shove it into our artifact repository and then later we consume it by when the instance is launching it will call that",
    "start": "580160",
    "end": "585800"
  },
  {
    "text": "that tar file onto the system it'll unpack it and we can run chef client in local mode or chef zero to deploy it on",
    "start": "585800",
    "end": "591980"
  },
  {
    "text": "the instance so this is an example of something you might store into a an artifact repository lots of other things",
    "start": "591980",
    "end": "598880"
  },
  {
    "text": "we do with build artifacts config management platforms like chef puppet ansible easy apple I just gave",
    "start": "598880",
    "end": "605300"
  },
  {
    "text": "you Java Ruby you know you might have Ruby gems stored on that we that we have",
    "start": "605300",
    "end": "611270"
  },
  {
    "text": "to build the ruby gem during some sort of CI process and we consume it later when we're installing in places and even rpms and other things that we might use",
    "start": "611270",
    "end": "618080"
  },
  {
    "text": "more classically in a Linux environment where we would pass packages install packages through to a converting system",
    "start": "618080",
    "end": "624339"
  },
  {
    "text": "so let's take a quick look let's build a simple artifact repository on AWS we",
    "start": "624339",
    "end": "630080"
  },
  {
    "text": "have a Amazon simple storage service AWS three that we can sort of leverage as a very simple way to do artifact hosting",
    "start": "630080",
    "end": "637250"
  },
  {
    "text": "on AWS it's a common pattern that we see in the example I'm gonna share with you here we have a build system sort of down",
    "start": "637250",
    "end": "643190"
  },
  {
    "text": "on the lower left side of the picture the build system is going to be running Java maven and get so it's a very simple",
    "start": "643190",
    "end": "648829"
  },
  {
    "text": "example that we're going to run through and we've created an s3 bucket in AWS in our account and so in our Jenkins server",
    "start": "648829",
    "end": "656420"
  },
  {
    "text": "we're gonna have a bunch of jobs set up we're gonna be connected to it get repository somewhere that's gonna how's some Java code that we want to see",
    "start": "656420",
    "end": "662960"
  },
  {
    "text": "brokered into an environment once it detects that commit our build process will then kick off another job that will",
    "start": "662960",
    "end": "668900"
  },
  {
    "text": "do a maven package the maven package will assemble a compiled version of our",
    "start": "668900",
    "end": "674660"
  },
  {
    "text": "Java and then we can publish it to s3 with a simple s3 API call and in this case we're calling just the put object",
    "start": "674660",
    "end": "681080"
  },
  {
    "text": "API and so we now have this sort of compiled Java code that we've just taken",
    "start": "681080",
    "end": "687110"
  },
  {
    "text": "off of our get repo and it's out in our artifact repository and then our build server can then turn around and do an ec2 run instances which is again the ec2",
    "start": "687110",
    "end": "694130"
  },
  {
    "text": "API to launch a set of ec2 instances and our virtual machines will come up and when we pass the call we make the API",
    "start": "694130",
    "end": "700460"
  },
  {
    "text": "call we can pass in user data to that call and in the user data we can give",
    "start": "700460",
    "end": "705680"
  },
  {
    "text": "instructions or maybe an artefact ID or something that indicates to the building system how to go find the artifact that",
    "start": "705680",
    "end": "711800"
  },
  {
    "text": "we've just stashed in our artifact repository so we could even put bash code in there that could just make a simple call to the s3 API and call the",
    "start": "711800",
    "end": "719030"
  },
  {
    "text": "object out of it or we could use CF an init or some other capability to",
    "start": "719030",
    "end": "724070"
  },
  {
    "text": "reference that that artifact from the s3 bucket so once we've made the easy to",
    "start": "724070",
    "end": "729650"
  },
  {
    "text": "run instance a call or ec2 instances will launch and the ec2 instances will then connect to the s3 bucket by making",
    "start": "729650",
    "end": "735500"
  },
  {
    "text": "an s3 get object call retrieve whatever the artifact is and then finish the build process so very simple scenario we",
    "start": "735500",
    "end": "743780"
  },
  {
    "text": "all we really did here was created an s3 bucket and we have sort of an artifact",
    "start": "743780",
    "end": "749390"
  },
  {
    "text": "repository capability so let's take a look at this and see if",
    "start": "749390",
    "end": "755660"
  },
  {
    "text": "we can we're here to talk about techniques that you can implement you know artifact we'll do our build",
    "start": "755660",
    "end": "761270"
  },
  {
    "text": "artifacts more like a bank and so in this case we're look at three different things real quick that we can do to make this artifact repository",
    "start": "761270",
    "end": "767440"
  },
  {
    "text": "stronger and a little bit more secure so we're first going to look at implementing some data protection here",
    "start": "767440",
    "end": "773720"
  },
  {
    "text": "so we're going to do some encryption with our artifact repository we're in added an entitlement system so that we can ensure that only certain",
    "start": "773720",
    "end": "780410"
  },
  {
    "text": "people have access to the artifacts or certain resources can access those artifacts when we we want them and we'll",
    "start": "780410",
    "end": "785480"
  },
  {
    "text": "even add some integrity validation into the system and so let's look at some of the ways we can do this so first is encryption in the ink in the",
    "start": "785480",
    "end": "794240"
  },
  {
    "text": "encryption space we have a service the AWS kms service the key management service that provides",
    "start": "794240",
    "end": "800030"
  },
  {
    "text": "a very seamless way for you to encrypt and decrypt objects using keys even your own keys the keys are typically created",
    "start": "800030",
    "end": "805790"
  },
  {
    "text": "it's called custom customer manage keys and you can call AB you can call against",
    "start": "805790",
    "end": "811610"
  },
  {
    "text": "the API and ask the API to encrypt or decrypt something if you have permission to it and so in this particular scenario",
    "start": "811610",
    "end": "818030"
  },
  {
    "text": "we talk we will pass in simple things like small strings of stuff into the into a key management service like kms",
    "start": "818030",
    "end": "824090"
  },
  {
    "text": "but large binary objects typically don't do well in this space they take a long time to transport and you'd have to",
    "start": "824090",
    "end": "829220"
  },
  {
    "text": "transport it up wait for it to do some operation and transport a big large object back so because of this we're",
    "start": "829220",
    "end": "835250"
  },
  {
    "text": "talking about a build artifact repository one of the techniques that we would do to do client-side encryption in this case would it be the implant more",
    "start": "835250",
    "end": "842150"
  },
  {
    "text": "of an envelope encryption scenario in an envelope connect in envelope encryption",
    "start": "842150",
    "end": "847420"
  },
  {
    "text": "what we classically do is we'll generate a key on the client we will encrypt the object with the key and then we will",
    "start": "847420",
    "end": "853430"
  },
  {
    "text": "then encrypt the key itself and turn the key into ciphertext that we store with the encrypted object so in this case",
    "start": "853430",
    "end": "860000"
  },
  {
    "text": "we're going to use the oedipus kms service to do this we'll make an AWS kms generate data key call and that will",
    "start": "860000",
    "end": "865460"
  },
  {
    "text": "return two key things there's a bunch of things to get returned from that API but the two elements that we're focused on here are the plaintext and the",
    "start": "865460",
    "end": "871070"
  },
  {
    "text": "ciphertext of that key so the plaintext is just the open text of the key that we're going to use to turn around and",
    "start": "871070",
    "end": "876080"
  },
  {
    "text": "encrypt the object in this example that I'm showing you we're going to use open SSL so we're gonna make an open SSL call",
    "start": "876080",
    "end": "881810"
  },
  {
    "text": "with AES 256 encryption and we're gonna pass it in as the key the plaintext that we got back from kms the cipher text",
    "start": "881810",
    "end": "888950"
  },
  {
    "text": "we're going to turn around and store into a tar file with the encrypted version that we just got back from the open SSL command into our envelope so we",
    "start": "888950",
    "end": "896450"
  },
  {
    "text": "can't are these up into a single file and now instead of passing the unencrypted object in test3 we have a",
    "start": "896450",
    "end": "901850"
  },
  {
    "text": "client-side encrypted object that we can pass in to s3 and it's and it's encrypted so in our going back to our build",
    "start": "901850",
    "end": "909200"
  },
  {
    "text": "artifact repository picture you can see now we've really inject a third step right after we do the maven package",
    "start": "909200",
    "end": "914510"
  },
  {
    "text": "we'll inject the third step of kms generate data key and we will encrypt",
    "start": "914510",
    "end": "919700"
  },
  {
    "text": "that object with our plain text create the envelope and just before the publish we will encrypt it and then the other",
    "start": "919700",
    "end": "927800"
  },
  {
    "text": "thing I've added here is that you can see whoops in the in the yesterday put object call we've added a flag s to see",
    "start": "927800",
    "end": "934940"
  },
  {
    "text": "or server-side encrypt encryption is a flag that you can make that you can call when you're passing objects into s3 and",
    "start": "934940",
    "end": "941029"
  },
  {
    "text": "what s3 will do is it'll turn around and also use kms it will use a service based customer manage key that you can see in",
    "start": "941029",
    "end": "947899"
  },
  {
    "text": "your kms console to encrypt that encrypt data that you put into s3 our objects that you're passing in s3 just before",
    "start": "947899",
    "end": "953389"
  },
  {
    "text": "they're put into the bucket at rest and so we call this server-side encryption so this is something very easy to",
    "start": "953389",
    "end": "958940"
  },
  {
    "text": "implement with a simple simple flag in your s3 calls so now we've done both",
    "start": "958940",
    "end": "964250"
  },
  {
    "text": "client-side and server-side encryption for our for our artifacts into our system so two layers of encryption",
    "start": "964250",
    "end": "970959"
  },
  {
    "text": "the next thing the next technique we'll talk about a little bit is entitlement so let's add a little bit of entitlement",
    "start": "970959",
    "end": "976579"
  },
  {
    "text": "system to our simple artifact repository we've now introduced the new element here so in the picture I'm showing you",
    "start": "976579",
    "end": "982490"
  },
  {
    "text": "the s3 budget bucket but we also have the cmk that we've that we've created with KMS on the right side and so these",
    "start": "982490",
    "end": "989990"
  },
  {
    "text": "are things that when we create them like when you create an s3 bucket for example only the ID that was used to create the bucket is something that can the owner",
    "start": "989990",
    "end": "998029"
  },
  {
    "text": "is the only person that can access that object but we want to do is we want to create a scenario where we want to",
    "start": "998029",
    "end": "1003579"
  },
  {
    "text": "entitle ec2 instances at launch only specifically ec2 instances at launch to be able to talk to or pull objects from",
    "start": "1003579",
    "end": "1009970"
  },
  {
    "text": "our s3 bucket and so we're going to add to these some resource policies so",
    "start": "1009970",
    "end": "1016420"
  },
  {
    "text": "resource policies like I am policies are our policies that we can associate to particular resources",
    "start": "1016420",
    "end": "1023429"
  },
  {
    "text": "s3 and kms happened to be to the services that support resource policies",
    "start": "1023429",
    "end": "1028600"
  },
  {
    "text": "what you're looking at here on the left side of the picture is actually cloud formation this is the new gamal format",
    "start": "1028600",
    "end": "1035048"
  },
  {
    "text": "for cloud formation which we released a couple months ago but this yamo CloudFormation template actually creates",
    "start": "1035049",
    "end": "1041069"
  },
  {
    "text": "it creates a bucket policy and it associates it to our s3 bucket in this particular case our statement has two",
    "start": "1041069",
    "end": "1046720"
  },
  {
    "text": "elements to it that I'll call to your attention the first one is its granting s3 get object an s3 get object ACL to a",
    "start": "1046720",
    "end": "1053380"
  },
  {
    "text": "particular principle and the the principle that's referenced there is actually the narn for another",
    "start": "1053380",
    "end": "1059880"
  },
  {
    "text": "for another client role that we've created but we're basically creating this role we expect that this role is created called artifact client role and",
    "start": "1059880",
    "end": "1067110"
  },
  {
    "text": "we're gonna give that role permission to get objects and get object ACLs from our s3 bucket we're also gonna give it the",
    "start": "1067110",
    "end": "1072900"
  },
  {
    "text": "ability to list buckets so that they can see the objects in the bucket so in this particular policy",
    "start": "1072900",
    "end": "1078930"
  },
  {
    "text": "we've actually granted permission to get objects from the bucket to a role called artifact client role somehow similarly",
    "start": "1078930",
    "end": "1086310"
  },
  {
    "text": "on the key side we will create a resource policy for our key that will allow decrypt and describe key",
    "start": "1086310",
    "end": "1093840"
  },
  {
    "text": "so these are the two actions that we're allowing at the bottom of this policy and again we're using the same principle",
    "start": "1093840",
    "end": "1100170"
  },
  {
    "text": "here the artifact client role so we're giving yard for client role the ability to pull objects from arrest through bucket and to decrypt objects decrypt",
    "start": "1100170",
    "end": "1107670"
  },
  {
    "text": "things with our kms key so now we go and launch an ec2 server",
    "start": "1107670",
    "end": "1112860"
  },
  {
    "text": "and we ask it to converge so it's going to call objects from s3 and it's not to decrypt them and in this case it's gonna",
    "start": "1112860",
    "end": "1118200"
  },
  {
    "text": "be denied because we forgot to put we forgot to launch this instance with an instance profile that was our artifact",
    "start": "1118200",
    "end": "1125250"
  },
  {
    "text": "client role so let's create that real quick so here now we have later in our",
    "start": "1125250",
    "end": "1130260"
  },
  {
    "text": "same CloudFormation template we're creating an I am role called artifact",
    "start": "1130260",
    "end": "1137270"
  },
  {
    "text": "artifact consumer is the actual policy name here but it's get bucket location and get in list all my buckets we're",
    "start": "1137270",
    "end": "1144000"
  },
  {
    "text": "also giving it the ability to SDS assume role so this is a very simple thing we're not actually giving this role any",
    "start": "1144000",
    "end": "1149280"
  },
  {
    "text": "permission to do really anything we're just referencing this role which at the very top is called artifact client role",
    "start": "1149280",
    "end": "1154380"
  },
  {
    "text": "so because it's called artifact client role and referring to that role in the policies that we've created anything",
    "start": "1154380",
    "end": "1159810"
  },
  {
    "text": "that's associated this role will be allowed to get objects from the buckets and decrypt with the key so now that",
    "start": "1159810",
    "end": "1165150"
  },
  {
    "text": "we've associated that to our instance that launched with our instance profile we've given it the role of artifact client role it now has the ability to",
    "start": "1165150",
    "end": "1171390"
  },
  {
    "text": "pull objects from bucket and decrypt with the key so those are the first two techniques",
    "start": "1171390",
    "end": "1178550"
  },
  {
    "text": "where we're gonna harden that very simple artifact repository let's look at a third one real quick this one is about",
    "start": "1178550",
    "end": "1185250"
  },
  {
    "text": "verifying the integrity of our artifacts so this particular one is something that",
    "start": "1185250",
    "end": "1190680"
  },
  {
    "text": "we commonly see in space which is around jostling so but what we essentially will do here is we'll use sha sum to generate",
    "start": "1190680",
    "end": "1196960"
  },
  {
    "text": "the sum of an object just to make sure that by the way the the summing of an object is some mathematical equation",
    "start": "1196960",
    "end": "1203710"
  },
  {
    "text": "that essentially takes the bits and bytes of a of a file it will pass it through that through this algorithm of",
    "start": "1203710",
    "end": "1210250"
  },
  {
    "text": "this equation and it will always produce it will always produce the same set of stream of characters at the end",
    "start": "1210250",
    "end": "1216760"
  },
  {
    "text": "and so the stream of characters can then be stashed into our envelope at the beginning of the project process so when",
    "start": "1216760",
    "end": "1222070"
  },
  {
    "text": "we're building the artifact just before we encrypt it or just before we stash it over us into our s3 artifact repository",
    "start": "1222070",
    "end": "1227260"
  },
  {
    "text": "we can grab the shot of some of the object and snatch that into the envelope and then later when we're running on the",
    "start": "1227260",
    "end": "1234510"
  },
  {
    "text": "when we're running through our convergence on the system it will retrieve and unpack the object it will",
    "start": "1234510",
    "end": "1239560"
  },
  {
    "text": "decrypt it for KMS and then we can add a step to verify the integrity of this artifact before we act on it and the",
    "start": "1239560",
    "end": "1245980"
  },
  {
    "text": "verification of the integrity is simply let's compare the SHA sum that was in the envelope with the actual sha some of the object and if that passes though we",
    "start": "1245980",
    "end": "1253330"
  },
  {
    "text": "can continue our build process we can also use a service like dynamodb which",
    "start": "1253330",
    "end": "1259510"
  },
  {
    "text": "is a database service that we provided amazon to create a very simple dynamodb table where we might create an",
    "start": "1259510",
    "end": "1265780"
  },
  {
    "text": "authorization system for our artifacts and in this particular case maybe we have a team who's kind of responsible",
    "start": "1265780",
    "end": "1271180"
  },
  {
    "text": "for integrity of things and looking at the security of packages and you know verifying the things are maybe we have",
    "start": "1271180",
    "end": "1277210"
  },
  {
    "text": "some automation in our pipeline somewhere that gives us the ability to maintain this in an automated way but we could we could keep a basically a",
    "start": "1277210",
    "end": "1284410"
  },
  {
    "text": "database of known good artifacts right and so we could add into our system here",
    "start": "1284410",
    "end": "1289870"
  },
  {
    "text": "some some automation that would essentially reach out to the system and say is this artifact node good before I",
    "start": "1289870",
    "end": "1295300"
  },
  {
    "text": "react to it and if the system says yes then great we install if it says no then it's been it's blocked so",
    "start": "1295300",
    "end": "1302970"
  },
  {
    "text": "that's that's motive for the artifact repository we're going to go deeper a little bit deeper into the the",
    "start": "1302970",
    "end": "1309280"
  },
  {
    "text": "continuous fluid pipeline so we're gonna share a little bit some some more examples of how where the pipeline goes we're talking about customizing the",
    "start": "1309280",
    "end": "1315370"
  },
  {
    "text": "pipeline and a couple more tips and tricks here but to do that I'm gonna bring up truck from Stella junk truck deadly is the director of financial",
    "start": "1315370",
    "end": "1321880"
  },
  {
    "text": "services accounts at elegent he's a rebus Elgin is our business partner of AWS as we work with them a lot in the",
    "start": "1321880",
    "end": "1329190"
  },
  {
    "text": "financial services space but in a lot of different areas in the enterprise customer space and so Chuck is gonna share a little bit more about what we're",
    "start": "1329190",
    "end": "1335940"
  },
  {
    "text": "doing okay so",
    "start": "1335940",
    "end": "1341929"
  },
  {
    "text": "build test deploy pipeline is a pretty simple concept with",
    "start": "1341929",
    "end": "1347940"
  },
  {
    "text": "a very powerful construct what this process gives us is that it gives us the",
    "start": "1347940",
    "end": "1354299"
  },
  {
    "text": "ability to ensure that we have consistent repeatable testing every time",
    "start": "1354299",
    "end": "1359370"
  },
  {
    "text": "there's a code change it also gives us the ability to have automated deployment that guarantees us",
    "start": "1359370",
    "end": "1366539"
  },
  {
    "text": "that our code is deployed the same way every time we're no longer concerned",
    "start": "1366539",
    "end": "1371700"
  },
  {
    "text": "with the possibility of human error in the process of deploying now Allen talked about fast feedback in",
    "start": "1371700",
    "end": "1380279"
  },
  {
    "text": "the pipeline the way that we achieve that is that our pipeline isn't that simple build tests deploy in",
    "start": "1380279",
    "end": "1387269"
  },
  {
    "text": "implementation but it's usually comprised of more stages",
    "start": "1387269",
    "end": "1392720"
  },
  {
    "text": "in our in our pipeline we typically create a five stage pipeline which is",
    "start": "1392720",
    "end": "1399210"
  },
  {
    "text": "commit acceptance capacity pre prod and production commit we test the code we",
    "start": "1399210",
    "end": "1405960"
  },
  {
    "text": "analyze the code acceptance we analyze the application",
    "start": "1405960",
    "end": "1411409"
  },
  {
    "text": "capacity we test or analyze the environment pre prod we build a candidate environment to go into",
    "start": "1411409",
    "end": "1417990"
  },
  {
    "text": "production do some smoke tests and then production stage is the process of actually moving that candidate",
    "start": "1417990",
    "end": "1424230"
  },
  {
    "text": "environment into production and automation around the ability to be able to rollback in case there are some",
    "start": "1424230",
    "end": "1429510"
  },
  {
    "text": "issues so let's talk a little bit about the commit stage the the goal for the commit stage is to",
    "start": "1429510",
    "end": "1436350"
  },
  {
    "text": "give fast feedback to the developers now in a typical continuous delivery pipeline we accomplish this through unit",
    "start": "1436350",
    "end": "1442529"
  },
  {
    "text": "tests through static code analysis and those those kind of processes but we",
    "start": "1442529",
    "end": "1449309"
  },
  {
    "text": "can go a little further as Jamie mentioned one of the important things in our in our project is to make",
    "start": "1449309",
    "end": "1457380"
  },
  {
    "text": "sure that security isn't something that's bolted at the end but it's something that's integrated into the development process at every step and so",
    "start": "1457380",
    "end": "1465290"
  },
  {
    "text": "we're gonna build security into each stage of the pipeline so one way you can do that is by security static analysis",
    "start": "1465290",
    "end": "1473210"
  },
  {
    "text": "of application code that might be done with something like flaw finder break man lapse or there's a whole bunch of",
    "start": "1473210",
    "end": "1479840"
  },
  {
    "text": "tools as many as there are languages out there that you might write application coded as important as that is to be able",
    "start": "1479840",
    "end": "1487910"
  },
  {
    "text": "to do security static analysis of our infrastructure code the ability to know",
    "start": "1487910",
    "end": "1493070"
  },
  {
    "text": "what is going to happen ahead of time or at least get a good idea of it by",
    "start": "1493070",
    "end": "1498500"
  },
  {
    "text": "looking at the code and and not relying on actually spinning up resources and",
    "start": "1498500",
    "end": "1504230"
  },
  {
    "text": "and then subsequently analyzing we're gonna do that too but first we want to be able to essentially ensure that we",
    "start": "1504230",
    "end": "1510679"
  },
  {
    "text": "are not going to expose ourselves unnecessarily",
    "start": "1510679",
    "end": "1516400"
  },
  {
    "text": "with resources that are poorly configured",
    "start": "1516400",
    "end": "1523240"
  },
  {
    "text": "so what we need to do then is have the ability to do security static analysis",
    "start": "1525700",
    "end": "1532400"
  },
  {
    "text": "of CloudFormation so in order to do this we we need to be",
    "start": "1532400",
    "end": "1539059"
  },
  {
    "text": "able to build a model of what the template is going to produce and then analyze that model this can be a",
    "start": "1539059",
    "end": "1545179"
  },
  {
    "text": "powerful tool it helps us to be able to stop bad things before they happen I'm unlike with application code you you",
    "start": "1545179",
    "end": "1553790"
  },
  {
    "text": "build your application and then you go run it in a sandbox environment if there's a security flaw there you're",
    "start": "1553790",
    "end": "1559520"
  },
  {
    "text": "pretty well sandbox but when you're working the public cloud and you're spitting up resources you have the",
    "start": "1559520",
    "end": "1565160"
  },
  {
    "text": "ability to accidentally spin up a resource that is going to put you at risk you know even though you're in even",
    "start": "1565160",
    "end": "1571700"
  },
  {
    "text": "though you're in what you consider a sandbox environment so very important if they're at all possible to be able to prevent those bad things by identifying",
    "start": "1571700",
    "end": "1579230"
  },
  {
    "text": "them before you actually do a create stack another very powerful capability of that is produced by following this",
    "start": "1579230",
    "end": "1586940"
  },
  {
    "text": "pattern is that it gives your security organization the ability to state their",
    "start": "1586940",
    "end": "1592700"
  },
  {
    "text": "policy as code and therefore very unambiguously and also for that policy to be consumed",
    "start": "1592700",
    "end": "1601009"
  },
  {
    "text": "essentially by the entire enterprise without depending upon the intervention",
    "start": "1601009",
    "end": "1607080"
  },
  {
    "text": "of a security organization each and every time there needs to be an analysis of the security posture that code",
    "start": "1607080",
    "end": "1613950"
  },
  {
    "text": "generates so",
    "start": "1613950",
    "end": "1619759"
  },
  {
    "text": "we looked around to find a tool that would help us do this and we couldn't find a tool out in the marketplace that",
    "start": "1619789",
    "end": "1626070"
  },
  {
    "text": "would allow us to do static analysis of CloudFormation templates and be able to",
    "start": "1626070",
    "end": "1632789"
  },
  {
    "text": "easily consume it in the continuous delivery pipeline so we went out and wrote a tool it's called CFN nag it's",
    "start": "1632789",
    "end": "1639179"
  },
  {
    "text": "open source that could be found on our github repo and it does exactly what we've been talking about it inspects the",
    "start": "1639179",
    "end": "1645720"
  },
  {
    "text": "JSON of a CloudFormation template before convergence before during the create sack and identifies potential security",
    "start": "1645720",
    "end": "1652679"
  },
  {
    "text": "problems the kinds of things that it might find are overly permissive i.m policies or security groups",
    "start": "1652679",
    "end": "1659059"
  },
  {
    "text": "disabled access logs or disabled server-side encryption there's a number of rules it's also extensible so that if",
    "start": "1659059",
    "end": "1665999"
  },
  {
    "text": "your security organization has some specific rules that are important to you they can be built into",
    "start": "1665999",
    "end": "1672529"
  },
  {
    "text": "so now I'm gonna do what no rational person should ever do and that's to do a live demo in front of a few hundred",
    "start": "1672529",
    "end": "1678389"
  },
  {
    "text": "people though so what",
    "start": "1678389",
    "end": "1683509"
  },
  {
    "text": "okay so okay what we're actually gonna do is go",
    "start": "1686160",
    "end": "1693720"
  },
  {
    "text": "through CF then using CF n AG on CloudFormation templates and kind of go through the workflow this is not built into a",
    "start": "1693720",
    "end": "1700710"
  },
  {
    "text": "pipeline but as it's a command-line tool that returns error codes it easily can",
    "start": "1700710",
    "end": "1707250"
  },
  {
    "text": "we've done it in a number of situations",
    "start": "1707250",
    "end": "1710420"
  },
  {
    "text": "so we have a developer who's who's written that need it's written as a",
    "start": "1712520",
    "end": "1718580"
  },
  {
    "text": "CloudFormation template that creates a security group and so at first",
    "start": "1718580",
    "end": "1724080"
  },
  {
    "text": "inspection this looks like a a reasonable security group right it's got its locked down to a single port that's",
    "start": "1724080",
    "end": "1730860"
  },
  {
    "text": "locked that port is locked down to a single address you know rather than trusting instinct",
    "start": "1730860",
    "end": "1736560"
  },
  {
    "text": "what we can do is run see if they nag on that template and",
    "start": "1736560",
    "end": "1742440"
  },
  {
    "text": "what we find is that this is a failure this is uh so in the context of the pipeline we stop right here stop the",
    "start": "1742440",
    "end": "1749760"
  },
  {
    "text": "line send notification back to the developer your code your code doesn't pass the smell test we're not going any",
    "start": "1749760",
    "end": "1755430"
  },
  {
    "text": "further with it and what we find about this is that there is no egress rule on",
    "start": "1755430",
    "end": "1760560"
  },
  {
    "text": "this security group now unlike ingress where the default if no-one specifies",
    "start": "1760560",
    "end": "1766170"
  },
  {
    "text": "anything is to be completely locked down and nothing is open it's quite the opposite with egress rules if you don't",
    "start": "1766170",
    "end": "1772140"
  },
  {
    "text": "specify an egress rule all ports are open to all IPs and can be a potentially",
    "start": "1772140",
    "end": "1777300"
  },
  {
    "text": "fatal flaw if you're concerned about data exfiltration so we're gonna go",
    "start": "1777300",
    "end": "1782790"
  },
  {
    "text": "ahead and we're gonna modify this template and we're gonna add we're going to add",
    "start": "1782790",
    "end": "1788820"
  },
  {
    "text": "an egress rule so we're going to this is some kind of a webserver most likely because we're opening port 80 to the",
    "start": "1788820",
    "end": "1794910"
  },
  {
    "text": "world and and now because we specified this all other ports are are locked down",
    "start": "1794910",
    "end": "1801200"
  },
  {
    "text": "we're going to go back and we're gonna do CF n AG on this again and now our",
    "start": "1801200",
    "end": "1808020"
  },
  {
    "text": "failure is gone but we do have a warning and what that warning is telling us is that this is a very wide open cider on",
    "start": "1808020",
    "end": "1815990"
  },
  {
    "text": "the egress rule port 80 open to the now we don't fail on this because there are",
    "start": "1815990",
    "end": "1822929"
  },
  {
    "text": "perfectly valid reasons you don't want the open port 80 to the world you're writing you're creating a web server",
    "start": "1822929",
    "end": "1828320"
  },
  {
    "text": "that you want to be open to the world but there's also in many situations where maybe this isn't really what you",
    "start": "1828320",
    "end": "1834450"
  },
  {
    "text": "intended if you've got a internally facing service so the develop the",
    "start": "1834450",
    "end": "1840330"
  },
  {
    "text": "developer looks at this and says yeah that's not really what I was hoping to do modifies it",
    "start": "1840330",
    "end": "1845570"
  },
  {
    "text": "and locks port 80 down to a slash 16 cider",
    "start": "1845570",
    "end": "1852299"
  },
  {
    "text": "block an internal cider block and now when we run CFN AG again we end up",
    "start": "1852299",
    "end": "1859379"
  },
  {
    "text": "with no failures and no warnings similarly we might write a cloud",
    "start": "1859379",
    "end": "1865590"
  },
  {
    "text": "formation template that deals with creating an EBS volume",
    "start": "1865590",
    "end": "1871700"
  },
  {
    "text": "again very simple CloudFormation template you know we specify we want to create a value and we specify the the",
    "start": "1872989",
    "end": "1880649"
  },
  {
    "text": "size the type the I ops where we want it created what we're not going to trust",
    "start": "1880649",
    "end": "1886139"
  },
  {
    "text": "ourselves that this is a secure template and instead we're going to go ahead and we're going to run it through c FN nag",
    "start": "1886139",
    "end": "1893879"
  },
  {
    "text": "and again we find a failure and the failure is that this isn't and in we",
    "start": "1893879",
    "end": "1899100"
  },
  {
    "text": "haven't specified encryption in this volume in in AWS you know encryption is is really",
    "start": "1899100",
    "end": "1906509"
  },
  {
    "text": "something that comes for free on EBS volumes there's really no performance here it's you know there are I have a",
    "start": "1906509",
    "end": "1913440"
  },
  {
    "text": "difficult time thinking of any reason why you wouldn't encrypt the volume so we're going to go",
    "start": "1913440",
    "end": "1921659"
  },
  {
    "text": "ahead and we're going to modify this template we're going to add encrypted",
    "start": "1921659",
    "end": "1926999"
  },
  {
    "text": "true and run through see if in nag again and",
    "start": "1926999",
    "end": "1932299"
  },
  {
    "text": "we've got no failures so as I said now I'm showing it to you through the command line here it works just exactly",
    "start": "1932299",
    "end": "1939239"
  },
  {
    "text": "the same way in your pipeline if none of you have created pipelines with Jenkins or other tools you you typically have",
    "start": "1939239",
    "end": "1945499"
  },
  {
    "text": "different different test software that runs that analyzes it you know return 0",
    "start": "1945499",
    "end": "1952169"
  },
  {
    "text": "if you're good turns non-0 if you're bad we do the same thing and based based on the",
    "start": "1952169",
    "end": "1957440"
  },
  {
    "text": "results of the execution of CFN nag we decide whether the pipeline continues on",
    "start": "1957440",
    "end": "1963840"
  },
  {
    "text": "and we go to the next stage of the pipeline or we fail and send notification back to the user and as you",
    "start": "1963840",
    "end": "1970049"
  },
  {
    "text": "can see this all happens in a second or two so it's very rapid feedback that the developer gets",
    "start": "1970049",
    "end": "1976460"
  },
  {
    "text": "we're gonna go back to the slide for a minute we can go to the next stage of the pipeline and that's the acceptance",
    "start": "1979700",
    "end": "1985889"
  },
  {
    "text": "stage if you remember what I said before commit you you test the code acceptance",
    "start": "1985889",
    "end": "1991350"
  },
  {
    "text": "you test the application so in a in a typical continuous delivery pipeline",
    "start": "1991350",
    "end": "1996769"
  },
  {
    "text": "you're going to do things like integration tests and acceptance tests in in this stage now in order to do that",
    "start": "1996769",
    "end": "2003080"
  },
  {
    "text": "you've compiled some code and you probably need to build some you know certainly an AW I need to build some",
    "start": "2003080",
    "end": "2009620"
  },
  {
    "text": "infrastructure in which you execute that code in order to be able to test it but additionally if we're focused on",
    "start": "2009620",
    "end": "2015440"
  },
  {
    "text": "security in the pipeline we might want to do something like infrastructure analysis and actually",
    "start": "2015440",
    "end": "2021970"
  },
  {
    "text": "understand what the implications of the resources that we spin up are on our",
    "start": "2021970",
    "end": "2027710"
  },
  {
    "text": "security posture so the problem to solve here is to prevent",
    "start": "2027710",
    "end": "2035059"
  },
  {
    "text": "infrastructure changes that violate our security policies and in order to do that we need to codify our security",
    "start": "2035059",
    "end": "2042289"
  },
  {
    "text": "rules we also need to get notifications when the violations occur with with",
    "start": "2042289",
    "end": "2048349"
  },
  {
    "text": "infrastructure as code there's two different ways that a problem can present itself to us one is that as we",
    "start": "2048349",
    "end": "2054138"
  },
  {
    "text": "go into the acceptance stage and we spin up resources those resources can actually degrade our security posture",
    "start": "2054139",
    "end": "2060200"
  },
  {
    "text": "the other thing that's important for us to know in the context of our pipeline is that",
    "start": "2060200",
    "end": "2066940"
  },
  {
    "text": "out-of-band changes essentially changes through the console changes through the CLI might also degrade our security",
    "start": "2066940",
    "end": "2073849"
  },
  {
    "text": "posture and even though that it wasn't created by our code we still need to know we still need to know right away",
    "start": "2073849",
    "end": "2079128"
  },
  {
    "text": "because it makes the rest of the results that we get back suspect if our",
    "start": "2079129",
    "end": "2084280"
  },
  {
    "text": "environment has changed significantly in an out-of-band way so and then",
    "start": "2084280",
    "end": "2089600"
  },
  {
    "text": "finally the other important thing is that this needs to be able to be something that can be consumed easily",
    "start": "2089600",
    "end": "2095470"
  },
  {
    "text": "within the pipeline so Amazon has a product called AWS config",
    "start": "2095470",
    "end": "2102800"
  },
  {
    "text": "very powerful tool that gives us the ability to to analyze our infrastructure and look",
    "start": "2102800",
    "end": "2110030"
  },
  {
    "text": "for security violations to set up rules that essentially state what our requirements are and to be able to test",
    "start": "2110030",
    "end": "2117950"
  },
  {
    "text": "against those rules but enable none of that in the pipeline can",
    "start": "2117950",
    "end": "2123620"
  },
  {
    "text": "be somewhat challenging and it tends to be a somewhat console centric tool particularly in terms of getting the",
    "start": "2123620",
    "end": "2129860"
  },
  {
    "text": "results back and analyzing the results so we wrote another tool called configural status again an open-source",
    "start": "2129860",
    "end": "2135590"
  },
  {
    "text": "tool you can get it off of our github repo and it really it enables us to",
    "start": "2135590",
    "end": "2140980"
  },
  {
    "text": "utilize AWS config in the continuous delivery pipeline and how does it do",
    "start": "2140980",
    "end": "2146810"
  },
  {
    "text": "that well one it essentially bootstraps the setting up of AWS config makes it",
    "start": "2146810",
    "end": "2152060"
  },
  {
    "text": "very easy if you if you don't have it it just it builds a drop the other thing that it does is it creates config rules",
    "start": "2152060",
    "end": "2158930"
  },
  {
    "text": "and lambda functions to evaluate security appliance and creates a test or lambda function in order to be able to",
    "start": "2158930",
    "end": "2165290"
  },
  {
    "text": "consume the results of that infrastructure analysis from within the",
    "start": "2165290",
    "end": "2171260"
  },
  {
    "text": "pipeline so it has a bundled CLI that allows us",
    "start": "2171260",
    "end": "2176900"
  },
  {
    "text": "to be able to execute this easily tester function built automatically for you and",
    "start": "2176900",
    "end": "2182210"
  },
  {
    "text": "it's easy it's really easy to invoke from the pipeline so it utilizes certain",
    "start": "2182210",
    "end": "2188450"
  },
  {
    "text": "core technologies obviously it uses AWS config it uses lambda sense a is the",
    "start": "2188450",
    "end": "2194360"
  },
  {
    "text": "platform for the config rules implementation CloudFormation to spin up the supporting resources and the",
    "start": "2194360",
    "end": "2200150"
  },
  {
    "text": "serverless framework for orchestrating the deployment of lambdas so",
    "start": "2200150",
    "end": "2205930"
  },
  {
    "text": "this diagram here kind of shows the the components to utilizing this in your",
    "start": "2205930",
    "end": "2212650"
  },
  {
    "text": "in your continuous delivery pipeline at the top you see there we have our deployment pipeline and the results of",
    "start": "2212650",
    "end": "2218829"
  },
  {
    "text": "utilizing AWS config and analyzing our environment are going to occur in the",
    "start": "2218829",
    "end": "2223959"
  },
  {
    "text": "acceptance stage of the pipeline this the the blue layer there is actually the",
    "start": "2223959",
    "end": "2229359"
  },
  {
    "text": "the config service and where the rules are defined and maintained",
    "start": "2229359",
    "end": "2234539"
  },
  {
    "text": "the land the service the green layer of the environment is",
    "start": "2234539",
    "end": "2241650"
  },
  {
    "text": "the lambda functions that implement the rule logic and implement the tester",
    "start": "2241650",
    "end": "2247630"
  },
  {
    "text": "function and then finally we have the resources down at the bottom which are",
    "start": "2247630",
    "end": "2253150"
  },
  {
    "text": "the environment that's spun up for the purposes of our acceptance stage",
    "start": "2253150",
    "end": "2259380"
  },
  {
    "text": "so",
    "start": "2259380",
    "end": "2262380"
  },
  {
    "text": "I'm going to not do another live demo but",
    "start": "2264660",
    "end": "2271619"
  },
  {
    "text": "that's primarily because the actual process of invoking this takes a little",
    "start": "2272519",
    "end": "2278769"
  },
  {
    "text": "longer than I have for this session so I'm going to do is show you a screencast",
    "start": "2278769",
    "end": "2283989"
  },
  {
    "text": "of actually utilizing the AWS config service I mean AWS config and the config",
    "start": "2283989",
    "end": "2291009"
  },
  {
    "text": "rule status so built into the repo that I talked about has the ability for us to",
    "start": "2291009",
    "end": "2296650"
  },
  {
    "text": "be able to spin up the environment for could for AWS config",
    "start": "2296650",
    "end": "2304839"
  },
  {
    "text": "and what's happening now is that we are creating all the resources necessary the next stage is the actual deploying of",
    "start": "2304839",
    "end": "2313239"
  },
  {
    "text": "lambda functions for rural object and you can see the command there that actually does that and so right now",
    "start": "2313239",
    "end": "2318940"
  },
  {
    "text": "we're actually creating the resources necessary a notification topic bucket",
    "start": "2318940",
    "end": "2327059"
  },
  {
    "text": "policies and roles in order to be able to utilize this again all automatically",
    "start": "2327059",
    "end": "2332170"
  },
  {
    "text": "performed for us",
    "start": "2332170",
    "end": "2335068"
  },
  {
    "text": "so so now what we're actually doing is deploying config so that we will start",
    "start": "2343430",
    "end": "2350510"
  },
  {
    "text": "analyzing the environment for us and it's it's populating the rules you can",
    "start": "2350510",
    "end": "2357079"
  },
  {
    "text": "see there the MFA rule for instance is being created here",
    "start": "2357079",
    "end": "2363970"
  },
  {
    "text": "and here we're going to see some examples of actually utilizing the tool this first example here is is running a",
    "start": "2364180",
    "end": "2372289"
  },
  {
    "text": "mocha test on on a particular on a particular",
    "start": "2372289",
    "end": "2379010"
  },
  {
    "text": "environment and that code there that you just saw flash by is the code that you",
    "start": "2379010",
    "end": "2384589"
  },
  {
    "text": "might actually write to consume it from within a pipeline and if you look at the results here",
    "start": "2384589",
    "end": "2390279"
  },
  {
    "text": "we failed on our initial infrastructure analysis and when we look",
    "start": "2390279",
    "end": "2396020"
  },
  {
    "text": "at the output of but we find that we failed because we violated the multi-factor authentication rule and we",
    "start": "2396020",
    "end": "2402410"
  },
  {
    "text": "look out in the console sure enough someone has created a user ID out-of-band that didn't have",
    "start": "2402410",
    "end": "2408140"
  },
  {
    "text": "multi-factor authentication we go in and we make that change force them to have",
    "start": "2408140",
    "end": "2413450"
  },
  {
    "text": "multi-factor authentication run through the test again and",
    "start": "2413450",
    "end": "2419170"
  },
  {
    "text": "we'll see that we passed",
    "start": "2421390",
    "end": "2425048"
  },
  {
    "text": "now I don't have time to go into into the rest of the pipeline in detail",
    "start": "2435299",
    "end": "2441779"
  },
  {
    "text": "but I will talk very briefly about it the capacity stage as I mentioned before capacity stage is where we test the",
    "start": "2441779",
    "end": "2448380"
  },
  {
    "text": "environment in other words we want an environment that looks like what we're gonna go into production so that we can",
    "start": "2448380",
    "end": "2454049"
  },
  {
    "text": "make sure for instance that it's performant you know so we might run performance tests load tests really you",
    "start": "2454049",
    "end": "2459809"
  },
  {
    "text": "know real-world testing of the environment that we're gonna create now in terms of adding security to that",
    "start": "2459809",
    "end": "2466739"
  },
  {
    "text": "stage of the pipeline there's a couple of different things we might want to do we might want to for instance do automated penetration testing using",
    "start": "2466739",
    "end": "2473489"
  },
  {
    "text": "something like the wasp jet attack proxy we might want to go into detail and",
    "start": "2473489",
    "end": "2478799"
  },
  {
    "text": "analyze the configuration of any instance we create from a point of view",
    "start": "2478799",
    "end": "2484319"
  },
  {
    "text": "of the OS and software configurations the production stage as I mentioned is",
    "start": "2484319",
    "end": "2490979"
  },
  {
    "text": "actually there's two phases to the production stage one is pre prod where we build we build the in candidate",
    "start": "2490979",
    "end": "2497909"
  },
  {
    "text": "environment that we expect to go into production this assumes that everything else is passed and in the pipeline",
    "start": "2497909",
    "end": "2503419"
  },
  {
    "text": "once we build it we'll do some smoke tests to make sure that everything is working as expected essentially a repeat",
    "start": "2503419",
    "end": "2509369"
  },
  {
    "text": "of a lot of the testing that's happened before and then we're really making a go/no-go decision about whether to go to",
    "start": "2509369",
    "end": "2515339"
  },
  {
    "text": "production if we go to production then the second phase of the stage is to",
    "start": "2515339",
    "end": "2520559"
  },
  {
    "text": "actually take the candidate environment make it production and to hold the previous",
    "start": "2520559",
    "end": "2529259"
  },
  {
    "text": "production environments in abeyance in case there are some problems that are noticed when we first go up so that we",
    "start": "2529259",
    "end": "2534839"
  },
  {
    "text": "can switch back rapidly so another important concept here is",
    "start": "2534839",
    "end": "2541919"
  },
  {
    "text": "that as I mentioned earlier in addition to changes that we invoke through our code we also have to be concerned",
    "start": "2541919",
    "end": "2549119"
  },
  {
    "text": "without a band changes that might that might affect our security posture so the",
    "start": "2549119",
    "end": "2556169"
  },
  {
    "text": "same kind of testing that we do in the acceptance phase in the capacity phase",
    "start": "2556169",
    "end": "2561209"
  },
  {
    "text": "if you're doing this securely should become your monitoring or part of your monitoring in the production phase",
    "start": "2561209",
    "end": "2566699"
  },
  {
    "text": "essentially you want to make sure your security posture is maintained",
    "start": "2566699",
    "end": "2572450"
  },
  {
    "text": "the other important thing is that the information that we're collected by continuing to do this testing or",
    "start": "2572450",
    "end": "2578430"
  },
  {
    "text": "monitoring results in valuable metrics that can actually feedback and allow us",
    "start": "2578430",
    "end": "2585539"
  },
  {
    "text": "to even further tighten down our security requirements or otherwise influence the tests and requirements",
    "start": "2585539",
    "end": "2593700"
  },
  {
    "text": "that we have for security so all the tools that I've talked about",
    "start": "2593700",
    "end": "2599579"
  },
  {
    "text": "here the code that I've talked about and a number of blog articles are all referenced on this page tell Jim calm",
    "start": "2599579",
    "end": "2605940"
  },
  {
    "text": "slash pin 303 and so you know I encourage you to take a look and you",
    "start": "2605940",
    "end": "2611489"
  },
  {
    "text": "know utilize them and contact us I'm going to now give it back to Allen",
    "start": "2611489",
    "end": "2616910"
  },
  {
    "text": "so thanks everybody and so we we just went through a few quick tips and tricks",
    "start": "2622170",
    "end": "2628980"
  },
  {
    "text": "but just wanted to sort of close out a little bit you know these are some of the things that we're sort of doing a",
    "start": "2628980",
    "end": "2634210"
  },
  {
    "text": "combination in collaboration with Citigroup as they're working through sort of modernizing their continuous",
    "start": "2634210",
    "end": "2640030"
  },
  {
    "text": "delivery capabilities right these are techniques that hopefully you can take home and leverage in your own systems",
    "start": "2640030",
    "end": "2645520"
  },
  {
    "text": "and we hope you enjoyed it Jamie Chuck and I will hang out here a little bit for questions so feel free to come on up",
    "start": "2645520",
    "end": "2651700"
  },
  {
    "text": "and see us Thanks",
    "start": "2651700",
    "end": "2655680"
  }
]