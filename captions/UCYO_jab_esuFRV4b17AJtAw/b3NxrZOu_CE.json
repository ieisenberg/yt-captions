[
  {
    "text": "I'm assuming that everybody here is coming from part 1.",
    "start": "0",
    "end": "2560"
  },
  {
    "text": "We were talking about Hamming codes, a way to create a block of data ",
    "start": "3060",
    "end": "6506"
  },
  {
    "text": "where most of the bits carry a meaningful message, ",
    "start": "6506",
    "end": "9052"
  },
  {
    "text": "while a few others act as a kind of redundancy, ",
    "start": "9053",
    "end": "11450"
  },
  {
    "text": "in such a way that if any bit gets flipped, either a message bit or a redundancy bit, ",
    "start": "11450",
    "end": "15746"
  },
  {
    "text": "anything in this block, a receiver is going to be able to identify that ",
    "start": "15746",
    "end": "19342"
  },
  {
    "text": "there was an error, and how to fix it.",
    "start": "19342",
    "end": "21240"
  },
  {
    "text": "The basic idea presented there was how to use multiple ",
    "start": "21880",
    "end": "24449"
  },
  {
    "text": "parity checks to binary search your way down to the error.",
    "start": "24449",
    "end": "27160"
  },
  {
    "text": "In that video the goal was to make Hamming codes ",
    "start": "28980",
    "end": "31817"
  },
  {
    "text": "feel as hands-on and rediscoverable as possible.",
    "start": "31818",
    "end": "34600"
  },
  {
    "text": "But as you start to think about actually implementing this, ",
    "start": "35180",
    "end": "38227"
  },
  {
    "text": "either in software or hardware, that framing may actually undersell how elegant ",
    "start": "38227",
    "end": "42291"
  },
  {
    "text": "these codes really are.",
    "start": "42291",
    "end": "43460"
  },
  {
    "text": "You might think that you need to write an algorithm that keeps ",
    "start": "43920",
    "end": "47008"
  },
  {
    "text": "track of all the possible error locations and cuts that group in half with each check, ",
    "start": "47008",
    "end": "51273"
  },
  {
    "text": "but it's actually way, way simpler than that.",
    "start": "51273",
    "end": "53480"
  },
  {
    "text": "If you read out the answers to the four parity checks we did in the last video, ",
    "start": "53940",
    "end": "58371"
  },
  {
    "text": "all as 1s and 0s instead of yeses and nos, it literally spells ",
    "start": "58372",
    "end": "61863"
  },
  {
    "text": "out the position of the error in binary.",
    "start": "61863",
    "end": "64080"
  },
  {
    "text": "For example, the number 7 in binary looks like 0111, ",
    "start": "64780",
    "end": "68284"
  },
  {
    "text": "essentially saying that it's 4 plus 2 plus 1.",
    "start": "68284",
    "end": "71259"
  },
  {
    "text": "And notice where the position 7 sits, it does affect the first of our parity groups, ",
    "start": "72540",
    "end": "78419"
  },
  {
    "text": "and the second, and the third, but not the last.",
    "start": "78419",
    "end": "81740"
  },
  {
    "text": "So reading the results of those four checks from bottom ",
    "start": "82220",
    "end": "84903"
  },
  {
    "text": "to top indeed does spell out the position of the error.",
    "start": "84903",
    "end": "87540"
  },
  {
    "text": "There's nothing special about the example 7, this works in general, ",
    "start": "88320",
    "end": "91568"
  },
  {
    "text": "and this makes the logic for implementing the whole scheme in hardware shockingly simple.",
    "start": "91568",
    "end": "95820"
  },
  {
    "text": "Now if you want to see why this magic happens, ",
    "start": "97240",
    "end": "100301"
  },
  {
    "text": "take these 16 index labels for our positions, but instead of writing them in base 10, ",
    "start": "100302",
    "end": "105905"
  },
  {
    "text": "let's write them all in binary, running from 0000 up to 1111.",
    "start": "105905",
    "end": "109880"
  },
  {
    "text": "As we put these binary labels back into their boxes, ",
    "start": "110560",
    "end": "113423"
  },
  {
    "text": "let me emphasize that they are distinct from the data that's actually being sent.",
    "start": "113423",
    "end": "117799"
  },
  {
    "text": "They're nothing more than a conceptual label to help you ",
    "start": "118320",
    "end": "120909"
  },
  {
    "text": "and me understand where the four parity groups came from.",
    "start": "120910",
    "end": "123500"
  },
  {
    "text": "The elegance of having everything we're looking at be described in binary is maybe ",
    "start": "124140",
    "end": "128082"
  },
  {
    "text": "undercut by the confusion of having everything we're looking at being described in binary.",
    "start": "128083",
    "end": "132359"
  },
  {
    "text": "It's worth it, though.",
    "start": "133020",
    "end": "134120"
  },
  {
    "text": "Focus your attention just on that last bit of all of these labels, ",
    "start": "134800",
    "end": "139207"
  },
  {
    "text": "and then highlight the positions where that final bit is a 1.",
    "start": "139207",
    "end": "143220"
  },
  {
    "text": "What we get is the first of our four parity groups, ",
    "start": "144240",
    "end": "147437"
  },
  {
    "text": "which means you can interpret that first check as asking, hey, ",
    "start": "147437",
    "end": "151312"
  },
  {
    "text": "if there's an error, is the final bit in the position of that error a 1?",
    "start": "151312",
    "end": "155739"
  },
  {
    "text": "Similarly, if you focus on the second to last bit, ",
    "start": "158200",
    "end": "160924"
  },
  {
    "text": "and highlight all the positions where that's a 1, ",
    "start": "160924",
    "end": "163595"
  },
  {
    "text": "you get the second parity group from our scheme.",
    "start": "163595",
    "end": "166160"
  },
  {
    "text": "In other words, that second check is asking, hey, me again, ",
    "start": "166740",
    "end": "170377"
  },
  {
    "text": "if there's an error, is the second to last bit of that position a 1?",
    "start": "170377",
    "end": "174500"
  },
  {
    "text": "And so on.",
    "start": "175760",
    "end": "176900"
  },
  {
    "text": "The third parity check covers every position whose third to last bit is turned on, ",
    "start": "177220",
    "end": "182683"
  },
  {
    "text": "and the last one covers the last eight positions, ",
    "start": "182683",
    "end": "185975"
  },
  {
    "text": "those ones whose highest order bit is a 1.",
    "start": "185975",
    "end": "188740"
  },
  {
    "text": "Everything we did earlier is the same as answering these four questions, ",
    "start": "189740",
    "end": "194034"
  },
  {
    "text": "which in turn is the same as spelling out a position in binary.",
    "start": "194034",
    "end": "197739"
  },
  {
    "text": "I hope this makes two things clearer.",
    "start": "199620",
    "end": "201480"
  },
  {
    "text": "The first is how to systematically generalize ",
    "start": "202040",
    "end": "204273"
  },
  {
    "text": "to block sizes that are bigger powers of two.",
    "start": "204274",
    "end": "206460"
  },
  {
    "text": "If it takes more bits to describe each position, like six bits to describe 64 spots, ",
    "start": "206960",
    "end": "211937"
  },
  {
    "text": "then each of those bits gives you one of the parity groups that we need to check.",
    "start": "211937",
    "end": "216680"
  },
  {
    "text": "Those of you who watched the chessboard puzzle I did ",
    "start": "218400",
    "end": "220681"
  },
  {
    "text": "with Matt Parker might find all this exceedingly familiar.",
    "start": "220682",
    "end": "223180"
  },
  {
    "text": "It's the same core logic, but solving a different problem, ",
    "start": "223660",
    "end": "226742"
  },
  {
    "text": "and applied to a 64-squared chessboard.",
    "start": "226742",
    "end": "228780"
  },
  {
    "text": "The second thing I hope this makes clear is why our parity bits are ",
    "start": "229880",
    "end": "233393"
  },
  {
    "text": "sitting in the positions that are powers of two, for example 1, 2, 4, and 8.",
    "start": "233393",
    "end": "237320"
  },
  {
    "text": "These are the positions whose binary representation has just a single bit turned on.",
    "start": "238000",
    "end": "243000"
  },
  {
    "text": "What that means is each of those parity bits sits ",
    "start": "243600",
    "end": "246530"
  },
  {
    "text": "inside one and only one of the four parity groups.",
    "start": "246530",
    "end": "249459"
  },
  {
    "text": "You can also see this in larger examples, where no matter how big you get, ",
    "start": "252040",
    "end": "256095"
  },
  {
    "text": "each parity bit conveniently touches only one of the groups.",
    "start": "256095",
    "end": "259338"
  },
  {
    "text": "Once you understand that these parity checks that we've focused so much of ",
    "start": "265600",
    "end": "269156"
  },
  {
    "text": "our time on are nothing more than a clever way to spell out the position ",
    "start": "269156",
    "end": "272618"
  },
  {
    "text": "of an error in binary, then we can draw a connection with a different way ",
    "start": "272618",
    "end": "276127"
  },
  {
    "text": "to think about hamming codes, one that is arguably a lot simpler and more elegant, ",
    "start": "276127",
    "end": "280062"
  },
  {
    "text": "and which can basically be written down with a single line of code.",
    "start": "280062",
    "end": "283240"
  },
  {
    "text": "It's based on the XOR function.",
    "start": "283660",
    "end": "285500"
  },
  {
    "text": "XOR, for those of you who don't know, stands for exclusive or.",
    "start": "286940",
    "end": "290220"
  },
  {
    "text": "When you take the XOR of two bits, it's going to return a 1 if either ",
    "start": "290780",
    "end": "295100"
  },
  {
    "text": "one of those bits is turned on, but not if both are turned on or off.",
    "start": "295100",
    "end": "299360"
  },
  {
    "text": "Phrased differently, it's the parity of these two bits.",
    "start": "300100",
    "end": "302980"
  },
  {
    "text": "As a math person, I prefer to think about it as addition mod 2.",
    "start": "303540",
    "end": "306760"
  },
  {
    "text": "We also commonly talk about the XOR of two different bit strings, ",
    "start": "307360",
    "end": "310849"
  },
  {
    "text": "which basically does this component by component.",
    "start": "310849",
    "end": "313440"
  },
  {
    "text": "It's like addition, but where you never carry.",
    "start": "313680",
    "end": "315720"
  },
  {
    "text": "Again, the more mathematically inclined might prefer to ",
    "start": "316500",
    "end": "319516"
  },
  {
    "text": "think of this as adding two vectors and reducing mod 2.",
    "start": "319516",
    "end": "322479"
  },
  {
    "text": "If you open up some Python right now and apply the caret operation between two integers, ",
    "start": "323500",
    "end": "328273"
  },
  {
    "text": "this is what it's doing but to the bit representations of those numbers under the hood.",
    "start": "328273",
    "end": "332940"
  },
  {
    "text": "The key point for you and me is that taking the XOR of many different ",
    "start": "334960",
    "end": "339098"
  },
  {
    "text": "bit strings is effectively a way to compute the parodies of a bunch of separate groups, ",
    "start": "339098",
    "end": "344301"
  },
  {
    "text": "like so with the columns, all in one fell swoop.",
    "start": "344301",
    "end": "347139"
  },
  {
    "text": "This gives us a rather snazzy way to think about the multiple parity checks from ",
    "start": "351260",
    "end": "354951"
  },
  {
    "text": "our Hamming code algorithm as all being packaged together into one single operation.",
    "start": "354951",
    "end": "358780"
  },
  {
    "text": "Though at first glance it does look very different.",
    "start": "359480",
    "end": "362180"
  },
  {
    "text": "Specifically write down the 16 positions in binary, like we had before, ",
    "start": "362820",
    "end": "367558"
  },
  {
    "text": "and now highlight the positions where the message bit is turned on to a 1, ",
    "start": "367558",
    "end": "372493"
  },
  {
    "text": "and then collect these positions into one big column and take the XOR.",
    "start": "372493",
    "end": "377100"
  },
  {
    "text": "You can probably guess that the 4 bits sitting at the bottom as ",
    "start": "379260",
    "end": "382573"
  },
  {
    "text": "a result are the same as the 4 parity checks we've come to know and love, ",
    "start": "382573",
    "end": "386404"
  },
  {
    "text": "but take a moment to actually think about why exactly.",
    "start": "386404",
    "end": "389199"
  },
  {
    "text": "This last column, for example, is counting all of the positions whose last bit is a 1, ",
    "start": "392220",
    "end": "397107"
  },
  {
    "text": "but we're already limited only to the highlighted positions, ",
    "start": "397107",
    "end": "400535"
  },
  {
    "text": "so it's effectively counting how many highlighted positions came from the first ",
    "start": "400535",
    "end": "405029"
  },
  {
    "text": "parity group.",
    "start": "405029",
    "end": "405759"
  },
  {
    "text": "Does that make sense?",
    "start": "406240",
    "end": "406800"
  },
  {
    "text": "Likewise, the next column counts how many positions are in the second parity group, ",
    "start": "409080",
    "end": "414382"
  },
  {
    "text": "the positions whose second to last bit is a 1, and which are also highlighted, and so on.",
    "start": "414382",
    "end": "420000"
  },
  {
    "text": "It's really just a small shift in perspective on the same thing we've been doing.",
    "start": "420260",
    "end": "423960"
  },
  {
    "text": "And so you know where it goes from here.",
    "start": "427760",
    "end": "429600"
  },
  {
    "text": "The sender is responsible for toggling some of the special ",
    "start": "430000",
    "end": "433425"
  },
  {
    "text": "parity bits to make sure the sum works out to be 0000.",
    "start": "433425",
    "end": "436560"
  },
  {
    "text": "Now once we have it like this, this gives us a really nice way to think about why ",
    "start": "439040",
    "end": "443258"
  },
  {
    "text": "these four resulting bits at the bottom directly spell out the position of an error.",
    "start": "443258",
    "end": "447580"
  },
  {
    "text": "Let's say some bit in this block gets toggled from a 0 to a 1.",
    "start": "448460",
    "end": "451860"
  },
  {
    "text": "What that means is that the position of that bit is now going to ",
    "start": "452600",
    "end": "456246"
  },
  {
    "text": "be included in the total XOR, which changes the sum from being 0 ",
    "start": "456246",
    "end": "459893"
  },
  {
    "text": "to instead being this newly included value, the position of the error.",
    "start": "459893",
    "end": "463820"
  },
  {
    "text": "Slightly less obviously, the same is true if there's an error that changes a 1 to a 0.",
    "start": "464460",
    "end": "469360"
  },
  {
    "text": "You see, if you add a bit string together twice, ",
    "start": "470180",
    "end": "472820"
  },
  {
    "text": "it's the same as not having it there at all, basically because in this ",
    "start": "472820",
    "end": "476646"
  },
  {
    "text": "world 1 plus 1 equals 0.",
    "start": "476646",
    "end": "477940"
  },
  {
    "text": "So adding a copy of this position to the total sum has the same effect as we're moving it.",
    "start": "478920",
    "end": "484300"
  },
  {
    "text": "And that effect, again, is that the total result at ",
    "start": "485160",
    "end": "487903"
  },
  {
    "text": "the bottom here spells out the position of the error.",
    "start": "487903",
    "end": "490700"
  },
  {
    "text": "To illustrate how elegant this is, let me show that one line of Python code I ",
    "start": "493040",
    "end": "497084"
  },
  {
    "text": "referenced before, which will capture almost all of the logic on the receiver's end.",
    "start": "497084",
    "end": "501440"
  },
  {
    "text": "We'll start by creating a random array of 16 1s and 0s to simulate the data block, ",
    "start": "502080",
    "end": "506526"
  },
  {
    "text": "and I'll give it the name bits, but of course in practice this would be ",
    "start": "506526",
    "end": "510382"
  },
  {
    "text": "something we're receiving from a sender, and instead of being random it ",
    "start": "510382",
    "end": "514239"
  },
  {
    "text": "would be carrying 11 data bits together with 5 parity bits.",
    "start": "514239",
    "end": "517400"
  },
  {
    "text": "If I call the function enumerateBits, what it does is pair together each of ",
    "start": "518120",
    "end": "522559"
  },
  {
    "text": "those bits with a corresponding index, in this case running from 0 up to 15.",
    "start": "522559",
    "end": "527000"
  },
  {
    "text": "So if we then create a list that loops over all of these pairs, ",
    "start": "528180",
    "end": "532079"
  },
  {
    "text": "pairs that look like i, and then we pull out just the i value, just the index, ",
    "start": "532079",
    "end": "536891"
  },
  {
    "text": "well it's not that exciting, we just get back those indices 0 through 15.",
    "start": "536892",
    "end": "541340"
  },
  {
    "text": "But if we add on the condition to only do this if bit, ",
    "start": "541680",
    "end": "545072"
  },
  {
    "text": "meaning if that bit is a 1 and not a 0, well then it pulls out only the positions where ",
    "start": "545072",
    "end": "550501"
  },
  {
    "text": "the corresponding bit is turned on.",
    "start": "550501",
    "end": "552660"
  },
  {
    "text": "In this case it looks like those positions are 0, 4, 6, 9, etc.",
    "start": "553380",
    "end": "557960"
  },
  {
    "text": "What we want is to collect together all of those positions, ",
    "start": "559980",
    "end": "563255"
  },
  {
    "text": "the positions of the bits that are turned on, and then XOR them together.",
    "start": "563255",
    "end": "567240"
  },
  {
    "text": "To do this in Python, let me first import a couple helpful functions.",
    "start": "569180",
    "end": "573220"
  },
  {
    "text": "That way we can call reduce() on this list, and use the XOR function to reduce it.",
    "start": "573900",
    "end": "578700"
  },
  {
    "text": "This basically eats its way through the list, taking XORs along the way.",
    "start": "579100",
    "end": "582680"
  },
  {
    "text": "If you prefer, you can explicitly write out that XOR ",
    "start": "584800",
    "end": "587164"
  },
  {
    "text": "function without having to import it from anywhere.",
    "start": "587164",
    "end": "589440"
  },
  {
    "text": "So at the moment it looks like if we do this on our random block of 16 bits, ",
    "start": "591940",
    "end": "597388"
  },
  {
    "text": "it returns 9, which has the binary representation 1001.",
    "start": "597388",
    "end": "601280"
  },
  {
    "text": "We won't do it here, but you could write a function where the sender uses that binary ",
    "start": "601980",
    "end": "606617"
  },
  {
    "text": "representation to set the four parity bits as needed, ",
    "start": "606617",
    "end": "609528"
  },
  {
    "text": "ultimately getting this block to a state where running this line of code on the full ",
    "start": "609528",
    "end": "614112"
  },
  {
    "text": "list of bits returns a 0.",
    "start": "614112",
    "end": "615460"
  },
  {
    "text": "This would be considered a well-prepared block.",
    "start": "616080",
    "end": "618200"
  },
  {
    "text": "What's cool is that if we toggle any one of the bits in this list, ",
    "start": "619880",
    "end": "623955"
  },
  {
    "text": "simulating a random error from noise, then if you run this same line of code, ",
    "start": "623955",
    "end": "628699"
  },
  {
    "text": "it prints out that error.",
    "start": "628699",
    "end": "630220"
  },
  {
    "text": "Isn't that neat?",
    "start": "630960",
    "end": "631520"
  },
  {
    "text": "You could get this block from out of the blue, run this single line on it, ",
    "start": "631820",
    "end": "636124"
  },
  {
    "text": "and it'll automatically spit out the position of an error, or a 0 if there wasn't any.",
    "start": "636124",
    "end": "641060"
  },
  {
    "text": "And there's nothing special about the size 16 here.",
    "start": "642500",
    "end": "645200"
  },
  {
    "text": "The same line of code would work if you had a list of, say, 256 bits.",
    "start": "645400",
    "end": "649860"
  },
  {
    "text": "Needless to say, there is more code to write here, ",
    "start": "651880",
    "end": "654751"
  },
  {
    "text": "like doing the meta parity check to detect 2-bit errors, ",
    "start": "654751",
    "end": "657959"
  },
  {
    "text": "but the idea is that almost all of the core logic from our scheme comes ",
    "start": "657960",
    "end": "662014"
  },
  {
    "text": "down to a single XOR reduction.",
    "start": "662014",
    "end": "663759"
  },
  {
    "text": "Now, depending on your comfort with binary and XORs and software in general, ",
    "start": "666120",
    "end": "670001"
  },
  {
    "text": "you may either find this perspective a little bit confusing, ",
    "start": "670001",
    "end": "673076"
  },
  {
    "text": "or so much more elegant and simple that you're wondering why we didn't just start ",
    "start": "673076",
    "end": "677209"
  },
  {
    "text": "with it from the get-go.",
    "start": "677210",
    "end": "678420"
  },
  {
    "text": "Loosely speaking, the multiple parity check perspective is easier to think about ",
    "start": "679140",
    "end": "682895"
  },
  {
    "text": "when implementing Hamming codes in hardware very directly, ",
    "start": "682895",
    "end": "685631"
  },
  {
    "text": "and the XOR perspective is easiest to think about when doing it in software, ",
    "start": "685631",
    "end": "689201"
  },
  {
    "text": "from kind of a higher level.",
    "start": "689201",
    "end": "690500"
  },
  {
    "text": "The first one is easiest to actually do by hand, ",
    "start": "691360",
    "end": "694214"
  },
  {
    "text": "and I think it does a better job instilling the core intuition underlying all of this, ",
    "start": "694214",
    "end": "699281"
  },
  {
    "text": "which is that the information required to locate a single error is related to ",
    "start": "699281",
    "end": "703825"
  },
  {
    "text": "the log of the size of the block, or in other words, ",
    "start": "703825",
    "end": "706912"
  },
  {
    "text": "it grows one bit at a time as the block size doubles.",
    "start": "706912",
    "end": "710000"
  },
  {
    "text": "The relevant fact here is that that information ",
    "start": "711020",
    "end": "713439"
  },
  {
    "text": "directly corresponds to how much redundancy we need.",
    "start": "713439",
    "end": "716060"
  },
  {
    "text": "That's really what runs against most people's knee-jerk reaction when ",
    "start": "716660",
    "end": "719922"
  },
  {
    "text": "they first think about making a message resilient to errors, ",
    "start": "719922",
    "end": "722765"
  },
  {
    "text": "where usually copying the whole message is the first instinct that comes to mind.",
    "start": "722765",
    "end": "726540"
  },
  {
    "text": "And then, by the way, there is this whole other way that you sometimes see ",
    "start": "727500",
    "end": "730771"
  },
  {
    "text": "Hamming codes presented, where you multiply the message by one big matrix.",
    "start": "730771",
    "end": "734000"
  },
  {
    "text": "It's kind of nice because it relates it to the broader family of linear codes, ",
    "start": "734670",
    "end": "738735"
  },
  {
    "text": "but I think that gives almost no intuition for where it comes from or how it scales.",
    "start": "738736",
    "end": "743060"
  },
  {
    "text": "And speaking of scaling, you might notice that the efficiency ",
    "start": "745200",
    "end": "748180"
  },
  {
    "text": "of this scheme only gets better as we increase the block size.",
    "start": "748180",
    "end": "751160"
  },
  {
    "text": "For example, we saw that with 256 bits, you're using only 3% of that ",
    "start": "755000",
    "end": "758915"
  },
  {
    "text": "space for redundancy, and it just keeps getting better from there.",
    "start": "758915",
    "end": "762660"
  },
  {
    "text": "As the number of parity bits grows one by one, the block size keeps doubling.",
    "start": "763300",
    "end": "767339"
  },
  {
    "text": "And if you take that to an extreme, you could have a block with, ",
    "start": "769000",
    "end": "772599"
  },
  {
    "text": "say, a million bits, where you would quite literally be playing 20 ",
    "start": "772599",
    "end": "776309"
  },
  {
    "text": "questions with your parity checks, and it uses only 21 parity bits.",
    "start": "776309",
    "end": "780020"
  },
  {
    "text": "And if you step back to think about looking at a million ",
    "start": "780740",
    "end": "783792"
  },
  {
    "text": "bits and locating a single error, that genuinely feels crazy.",
    "start": "783792",
    "end": "787060"
  },
  {
    "text": "The problem, of course, is that with a larger block, ",
    "start": "788200",
    "end": "791098"
  },
  {
    "text": "the probability of seeing more than one or two bit errors goes up, ",
    "start": "791098",
    "end": "794761"
  },
  {
    "text": "and Hamming codes do not handle anything beyond that.",
    "start": "794761",
    "end": "797660"
  },
  {
    "text": "So in practice, what you'd want is to find the right size ",
    "start": "798320",
    "end": "801234"
  },
  {
    "text": "so that the probability of too many bit flips isn't too high.",
    "start": "801234",
    "end": "804300"
  },
  {
    "text": "Also, in practice, errors tend to come in little bursts, ",
    "start": "806600",
    "end": "809751"
  },
  {
    "text": "which would totally ruin a single block, so one common tactic to help spread out a ",
    "start": "809752",
    "end": "814343"
  },
  {
    "text": "burst of errors across many different blocks is to interlace those blocks, like this, ",
    "start": "814343",
    "end": "819099"
  },
  {
    "text": "before they're sent out or stored.",
    "start": "819099",
    "end": "820980"
  },
  {
    "text": "Then again, a lot of this is rendered completely moot by more modern codes, ",
    "start": "825580",
    "end": "829541"
  },
  {
    "text": "like the much more commonly used Reed-Solomon algorithm, ",
    "start": "829541",
    "end": "832512"
  },
  {
    "text": "which handles burst errors particularly well, and it can be tuned to be resilient to ",
    "start": "832512",
    "end": "836943"
  },
  {
    "text": "a larger number of errors per block.",
    "start": "836943",
    "end": "838820"
  },
  {
    "text": "But that's a topic for another time.",
    "start": "839360",
    "end": "841339"
  },
  {
    "text": "In his book The Art of Doing Science and Engineering, ",
    "start": "842500",
    "end": "845349"
  },
  {
    "text": "Hamming is wonderfully candid about just how meandering his discovery of this code was.",
    "start": "845349",
    "end": "849940"
  },
  {
    "text": "He first tried all sorts of different schemes involving organizing the bits ",
    "start": "850620",
    "end": "854296"
  },
  {
    "text": "into parts of a higher dimensional lattice and strange things like this.",
    "start": "854296",
    "end": "857780"
  },
  {
    "text": "The idea that it might be possible to get parity checks to conspire in a way that spells ",
    "start": "858300",
    "end": "862657"
  },
  {
    "text": "out the position of an error only came to Hamming when he stepped back after a bunch of ",
    "start": "862657",
    "end": "866966"
  },
  {
    "text": "other analysis and asked, okay, what is the most efficient I could conceivably be about ",
    "start": "866966",
    "end": "871275"
  },
  {
    "text": "this?",
    "start": "871275",
    "end": "871520"
  },
  {
    "text": "He was also candid about how important it was that parity checks were already on ",
    "start": "872620",
    "end": "876867"
  },
  {
    "text": "his mind, which would have been way less common back in the 1940s than it is today.",
    "start": "876867",
    "end": "881220"
  },
  {
    "text": "There are like half a dozen times throughout this book that he ",
    "start": "881920",
    "end": "885045"
  },
  {
    "text": "references the Louis Pasteur quote, luck favors a prepared mind.",
    "start": "885045",
    "end": "888220"
  },
  {
    "text": "Clever ideas often look deceptively simple in hindsight, ",
    "start": "889320",
    "end": "892216"
  },
  {
    "text": "which makes them easy to underappreciate.",
    "start": "892216",
    "end": "894300"
  },
  {
    "text": "Right now my honest hope is that Hamming codes, ",
    "start": "894960",
    "end": "897517"
  },
  {
    "text": "or at least the possibility of such codes, feels almost obvious to you.",
    "start": "897517",
    "end": "901300"
  },
  {
    "text": "But you shouldn't fool yourself into thinking that they actually are obvious, ",
    "start": "901660",
    "end": "905352"
  },
  {
    "text": "because they definitely aren't.",
    "start": "905352",
    "end": "906820"
  },
  {
    "text": "Part of the reason that clever ideas look deceptively easy is that we only ",
    "start": "907880",
    "end": "911701"
  },
  {
    "text": "ever see the final result, cleaning up what was messy, ",
    "start": "911701",
    "end": "914503"
  },
  {
    "text": "never mentioning all of the wrong turns, underselling just how vast the ",
    "start": "914503",
    "end": "918172"
  },
  {
    "text": "space of explorable possibilities is at the start of a problem solving process, ",
    "start": "918172",
    "end": "922248"
  },
  {
    "text": "all of that.",
    "start": "922248",
    "end": "922860"
  },
  {
    "text": "But this is true in general.",
    "start": "923820",
    "end": "924900"
  },
  {
    "text": "I think for some special inventions, there's a second, ",
    "start": "924900",
    "end": "927784"
  },
  {
    "text": "deeper reason that we underappreciate them.",
    "start": "927784",
    "end": "930040"
  },
  {
    "text": "Thinking of information in terms of bits had only really coalesced into a ",
    "start": "930840",
    "end": "934612"
  },
  {
    "text": "full theory by 1948, with Claude Shannon's seminal paper on information theory.",
    "start": "934612",
    "end": "938640"
  },
  {
    "text": "This was essentially concurrent with when Hamming developed his algorithm.",
    "start": "939280",
    "end": "942540"
  },
  {
    "text": "This was the same foundational paper that showed, in a certain sense, ",
    "start": "943300",
    "end": "946836"
  },
  {
    "text": "that efficient error correction is always possible, ",
    "start": "946836",
    "end": "949464"
  },
  {
    "text": "no matter how high the probability of bit flips, at least in theory.",
    "start": "949464",
    "end": "952899"
  },
  {
    "text": "Shannon and Hamming, by the way, shared an office in Bell Labs, ",
    "start": "953700",
    "end": "957038"
  },
  {
    "text": "despite working on very different things, which hardly seems coincidental here.",
    "start": "957038",
    "end": "961160"
  },
  {
    "text": "Fast forward several decades, and these days, many of us are ",
    "start": "962380",
    "end": "965718"
  },
  {
    "text": "so immersed in thinking about bits and information that it's ",
    "start": "965718",
    "end": "969056"
  },
  {
    "text": "easy to overlook just how distinct this way of thinking was.",
    "start": "969056",
    "end": "972340"
  },
  {
    "text": "Ironically, the ideas that most profoundly shape the ways that a future generation ",
    "start": "973100",
    "end": "977707"
  },
  {
    "text": "thinks will end up looking to that future generation simpler than they really are.",
    "start": "977707",
    "end": "982259"
  }
]