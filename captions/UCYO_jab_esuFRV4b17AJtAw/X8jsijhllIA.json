[
  {
    "text": "Have you ever wondered how it's possible to scratch a CD ",
    "start": "3620",
    "end": "6804"
  },
  {
    "text": "or a DVD and still have it play back whatever it's storing?",
    "start": "6804",
    "end": "10100"
  },
  {
    "text": "The scratch really does affect the 1s and 0s on the disk, ",
    "start": "10900",
    "end": "14301"
  },
  {
    "text": "so it reads off different data from what was stored, ",
    "start": "14301",
    "end": "17410"
  },
  {
    "text": "but unless it's really scratched up, the bits it reads off are decoded ",
    "start": "17410",
    "end": "21574"
  },
  {
    "text": "into precisely the same file that was encoded onto it, a bit for bit copy, ",
    "start": "21574",
    "end": "25973"
  },
  {
    "text": "despite all those errors.",
    "start": "25973",
    "end": "27439"
  },
  {
    "text": "There is a whole pile of mathematical cleverness that allows us to store data, ",
    "start": "27440",
    "end": "32078"
  },
  {
    "text": "and just as importantly to transmit data, in a way that's resilient to errors.",
    "start": "32079",
    "end": "36660"
  },
  {
    "text": "Well, okay, actually it doesn't take that much ",
    "start": "37520",
    "end": "39627"
  },
  {
    "text": "cleverness to come up with a way to do this.",
    "start": "39627",
    "end": "41600"
  },
  {
    "text": "Any file, whether it's a video or sound or text, some code, ",
    "start": "42060",
    "end": "46185"
  },
  {
    "text": "an image, whatever, is ultimately some sequence of 1s and 0s.",
    "start": "46185",
    "end": "50380"
  },
  {
    "text": "And a simple strategy to correct any bit that gets ",
    "start": "50680",
    "end": "53340"
  },
  {
    "text": "flipped would be to store three copies of each bit.",
    "start": "53340",
    "end": "56000"
  },
  {
    "text": "Then the machine reading this file could compare these three copies ",
    "start": "57580",
    "end": "60843"
  },
  {
    "text": "and always take the best 2 out of 3 whenever there's a discrepancy.",
    "start": "60843",
    "end": "64059"
  },
  {
    "text": "But what that means is using two thirds of your space for redundancy.",
    "start": "67160",
    "end": "70860"
  },
  {
    "text": "And even then, for all of that space given up, ",
    "start": "71480",
    "end": "73595"
  },
  {
    "text": "there's no strong guarantee about what happens if more than one bit gets flipped.",
    "start": "73595",
    "end": "77240"
  },
  {
    "text": "The much more interesting question is how to make it so that ",
    "start": "77980",
    "end": "80836"
  },
  {
    "text": "errors can be corrected while giving up as little space as possible.",
    "start": "80836",
    "end": "84020"
  },
  {
    "text": "For example, using the method you'll learn about this video, ",
    "start": "84520",
    "end": "88222"
  },
  {
    "text": "you could store your data in 256-bit blocks, where each block uses 9 bits, 9(!), ",
    "start": "88222",
    "end": "93138"
  },
  {
    "text": "to act as a kind of redundancy, and the other 247 bits are free to carry whatever ",
    "start": "93138",
    "end": "98115"
  },
  {
    "text": "meaningful message or data you want.",
    "start": "98115",
    "end": "100299"
  },
  {
    "text": "And it will still be the case that if any bit gets flipped here, ",
    "start": "100900",
    "end": "104166"
  },
  {
    "text": "just by looking at this block and nothing more, ",
    "start": "104166",
    "end": "106578"
  },
  {
    "text": "a machine will be able to identify that there was an error and precisely where ",
    "start": "106578",
    "end": "110549"
  },
  {
    "text": "it was so that it knows how to correct it.",
    "start": "110549",
    "end": "112660"
  },
  {
    "text": "And honestly, that feels like magic.",
    "start": "112660",
    "end": "114620"
  },
  {
    "text": "And for this particular scheme, if two bits get flipped, ",
    "start": "115440",
    "end": "117987"
  },
  {
    "text": "the machine will at least be able to detect that there were two errors, ",
    "start": "117987",
    "end": "121206"
  },
  {
    "text": "though it won't know how to fix them.",
    "start": "121206",
    "end": "122860"
  },
  {
    "text": "We'll talk a little bit later about how this scales for blocks with different sizes.",
    "start": "123520",
    "end": "126899"
  },
  {
    "text": "Methods that let you correct errors like this are known, ",
    "start": "127860",
    "end": "130675"
  },
  {
    "text": "reasonably enough, as error correction codes.",
    "start": "130676",
    "end": "132900"
  },
  {
    "text": "For the better part of the last century, this field has been a really rich source ",
    "start": "133660",
    "end": "137877"
  },
  {
    "text": "of surprisingly deep math that gets incorporated into devices we use every day.",
    "start": "137877",
    "end": "141940"
  },
  {
    "text": "The goal here is to give you a very thorough understanding ",
    "start": "142840",
    "end": "145800"
  },
  {
    "text": "of one of the earliest examples, known as a Hamming code.",
    "start": "145800",
    "end": "148660"
  },
  {
    "text": "And by the way, the way I'm thinking about the structure of this video is less ",
    "start": "149520",
    "end": "153042"
  },
  {
    "text": "about explaining it as directly as possible, and more a matter of prompting ",
    "start": "153042",
    "end": "156431"
  },
  {
    "text": "you to invent it for yourself, with a little gentle guidance here and there.",
    "start": "156431",
    "end": "159820"
  },
  {
    "text": "So when you feel like you see where it's going at some point, take that moment to pause, ",
    "start": "160120",
    "end": "163909"
  },
  {
    "text": "actively predict what the scheme is going to be before I tell you.",
    "start": "163909",
    "end": "166720"
  },
  {
    "text": "Also, if you want your understanding to get down to the hardware level, ",
    "start": "167240",
    "end": "170744"
  },
  {
    "text": "Ben Eater has made a video in conjunction with this one showing you how to ",
    "start": "170744",
    "end": "174394"
  },
  {
    "text": "actually implement Hamming codes on breadboards, which is extremely satisfying.",
    "start": "174394",
    "end": "178239"
  },
  {
    "text": "You should know, Hamming codes are not as widely used as more modern codes, ",
    "start": "179300",
    "end": "183058"
  },
  {
    "text": "like the Reed-Solomon algorithm, but there is a certain magic to the ",
    "start": "183058",
    "end": "186471"
  },
  {
    "text": "contrast between just how impossible this task feels at the start, ",
    "start": "186471",
    "end": "189784"
  },
  {
    "text": "and how utterly reasonable it seems once you learn about Hamming.",
    "start": "189785",
    "end": "193000"
  },
  {
    "text": "The basic principle of error correction is that in a vast space of all possible messages, ",
    "start": "193720",
    "end": "198830"
  },
  {
    "text": "only some subset are going to be considered valid messages.",
    "start": "198830",
    "end": "202180"
  },
  {
    "text": "As an analogy, think about correctly spelled words vs incorrectly spelled words.",
    "start": "202800",
    "end": "206940"
  },
  {
    "text": "Whenever a valid message gets altered, the receiver is responsible for correcting ",
    "start": "208900",
    "end": "213224"
  },
  {
    "text": "what they see back to the nearest valid neighbor, as you might do with a typo.",
    "start": "213225",
    "end": "217340"
  },
  {
    "text": "Coming up with a concrete algorithm to efficiently categorize messages like this, ",
    "start": "218220",
    "end": "222312"
  },
  {
    "text": "though, takes a certain cleverness.",
    "start": "222312",
    "end": "224060"
  },
  {
    "text": "The story begins in the 1940s, when a young Richard Hamming was working for Bell Labs, ",
    "start": "226780",
    "end": "231431"
  },
  {
    "text": "and some of his work involved using a very big expensive punch card ",
    "start": "231431",
    "end": "235067"
  },
  {
    "text": "computer that he had only limited access to.",
    "start": "235067",
    "end": "237420"
  },
  {
    "text": "And the programs he kept putting through it kept failing, ",
    "start": "237800",
    "end": "240247"
  },
  {
    "text": "because every now and then a bit would get misread.",
    "start": "240247",
    "end": "242400"
  },
  {
    "text": "Frustration being the crucible of invention, he got so fed ",
    "start": "243120",
    "end": "245747"
  },
  {
    "text": "up that he invented the world's first error correction code.",
    "start": "245747",
    "end": "248420"
  },
  {
    "text": "There are many different ways to frame Hamming codes, ",
    "start": "249060",
    "end": "251397"
  },
  {
    "text": "but as a first pass we're going to go through it the way Hamming himself ",
    "start": "251397",
    "end": "254557"
  },
  {
    "text": "thought about them.",
    "start": "254557",
    "end": "255380"
  },
  {
    "text": "Let's use an example that's simple, but not too simple, a block of 16 bits.",
    "start": "256519",
    "end": "260940"
  },
  {
    "text": "We'll number the positions of these bits from 0 up to 15.",
    "start": "261820",
    "end": "264740"
  },
  {
    "text": "The actual data we want to store is only going to make up 12 of these bits, ",
    "start": "265620",
    "end": "269684"
  },
  {
    "text": "while 4 of the positions are reserved as a kind of redundancy.",
    "start": "269684",
    "end": "273000"
  },
  {
    "text": "The word redundant here doesn't simply mean copy, after all, ",
    "start": "273900",
    "end": "276896"
  },
  {
    "text": "those 4 bits don't give us enough room to blindly copy the data.",
    "start": "276896",
    "end": "280040"
  },
  {
    "text": "Instead, they'll need to be a much more nuanced and clever kind of redundancy, ",
    "start": "280720",
    "end": "284616"
  },
  {
    "text": "not adding any new information, but adding resilience.",
    "start": "284616",
    "end": "287280"
  },
  {
    "text": "You might expect these 4 special bits to come nicely packaged together, ",
    "start": "288600",
    "end": "291947"
  },
  {
    "text": "maybe at the end or something like that, but as you'll see, ",
    "start": "291947",
    "end": "294737"
  },
  {
    "text": "having them sit in positions which are powers of 2 allows for something that's ",
    "start": "294737",
    "end": "298411"
  },
  {
    "text": "really elegant by the end.",
    "start": "298411",
    "end": "299620"
  },
  {
    "text": "It also might give you a little hint about how this scales for larger blocks.",
    "start": "300200",
    "end": "303540"
  },
  {
    "text": "Also technically it ends up being only 11 bits of data, ",
    "start": "304900",
    "end": "307880"
  },
  {
    "text": "you'll find there's a mild nuance for what goes on at position 0, ",
    "start": "307881",
    "end": "311396"
  },
  {
    "text": "but don't worry about that for now.",
    "start": "311396",
    "end": "313260"
  },
  {
    "text": "Like any error correction algorithm, this will involve two players, ",
    "start": "314140",
    "end": "317631"
  },
  {
    "text": "a sender who's responsible for setting these 4 special bits, ",
    "start": "317631",
    "end": "320764"
  },
  {
    "text": "and a receiver who's responsible for performing some kind of check and ",
    "start": "320764",
    "end": "324410"
  },
  {
    "text": "correcting the errors.",
    "start": "324410",
    "end": "325540"
  },
  {
    "text": "Of course, the words sender and receiver really refer to machines ",
    "start": "326300",
    "end": "329246"
  },
  {
    "text": "or software that's doing all the checks, and the idea of a ",
    "start": "329247",
    "end": "331882"
  },
  {
    "text": "message is meant really broadly, to include things like storage.",
    "start": "331882",
    "end": "334740"
  },
  {
    "text": "After all, storing data is the same thing as sending a message just ",
    "start": "335340",
    "end": "338581"
  },
  {
    "text": "from the past to the future instead of from one place to another.",
    "start": "338581",
    "end": "341680"
  },
  {
    "text": "So that's the setup, but before we can dive in we need to talk about a related idea which ",
    "start": "342560",
    "end": "347191"
  },
  {
    "text": "was fresh on Hamming's mind in the time of his discovery, ",
    "start": "347191",
    "end": "350176"
  },
  {
    "text": "a method which lets you detect any single bit errors, but not to correct them, ",
    "start": "350176",
    "end": "354241"
  },
  {
    "text": "known in the business as a parity check.",
    "start": "354241",
    "end": "356300"
  },
  {
    "text": "For a parity check, we separate out only one single bit that the sender ",
    "start": "356880",
    "end": "360449"
  },
  {
    "text": "is responsible for tuning, and the rest are free to carry a message.",
    "start": "360449",
    "end": "363820"
  },
  {
    "text": "The only job of this special bit is to make sure that ",
    "start": "364880",
    "end": "368021"
  },
  {
    "text": "the total number of 1s in the message is an even number.",
    "start": "368021",
    "end": "371280"
  },
  {
    "text": "So for example right now, that total number of 1s is 7, that's odd, ",
    "start": "372080",
    "end": "375750"
  },
  {
    "text": "so the sender needs to flip that special bit to be a 1, making the count even.",
    "start": "375750",
    "end": "379960"
  },
  {
    "text": "But if the block had already started off with an even number of 1s, ",
    "start": "380800",
    "end": "384038"
  },
  {
    "text": "then this special bit would have been kept at a 0.",
    "start": "384038",
    "end": "386419"
  },
  {
    "text": "This is pretty simple, deceptively simple, but it's an incredibly elegant way to distill ",
    "start": "387340",
    "end": "392086"
  },
  {
    "text": "the idea of change anywhere in a message to be reflected in a single bit of information.",
    "start": "392086",
    "end": "396780"
  },
  {
    "text": "Notice if any bit of this message gets flipped, either from 0 to 1 or 1 to 0, ",
    "start": "397500",
    "end": "402536"
  },
  {
    "text": "it changes the total count of 1s from being even to being odd.",
    "start": "402536",
    "end": "406540"
  },
  {
    "text": "So if you're the receiver, you look at this message, ",
    "start": "407980",
    "end": "410681"
  },
  {
    "text": "and you see an odd number of 1s, you can know for sure that some error has occurred, ",
    "start": "410681",
    "end": "415013"
  },
  {
    "text": "even though you might have no idea where it was.",
    "start": "415013",
    "end": "417460"
  },
  {
    "text": "In the jargon, whether a group of bits has an ",
    "start": "418500",
    "end": "420868"
  },
  {
    "text": "even or odd number of 1s is known as its parity.",
    "start": "420868",
    "end": "423340"
  },
  {
    "text": "You could also use numbers and say the parity is 0 or 1, ",
    "start": "424860",
    "end": "427448"
  },
  {
    "text": "which is typically more helpful once you start doing math with the idea.",
    "start": "427449",
    "end": "430720"
  },
  {
    "text": "And this special bit that the sender uses to control the parity is called the parity bit.",
    "start": "431220",
    "end": "435520"
  },
  {
    "text": "And actually, we should be clear, if the receiver sees an odd parity, ",
    "start": "437560",
    "end": "441105"
  },
  {
    "text": "it doesn't necessarily mean there was just one error, there might have been 3 errors, ",
    "start": "441105",
    "end": "445461"
  },
  {
    "text": "or 5, or any other odd number, but they can know for sure that it wasn't 0.",
    "start": "445461",
    "end": "449260"
  },
  {
    "text": "On the other hand, if there had been 2 errors, or any even number of errors, ",
    "start": "449980",
    "end": "454159"
  },
  {
    "text": "that final count of 1s would still be even, so the receiver can't have full ",
    "start": "454159",
    "end": "458283"
  },
  {
    "text": "confidence that an even count necessarily means the message is error-free.",
    "start": "458283",
    "end": "462300"
  },
  {
    "text": "You might complain that a message which gets messed up by only ",
    "start": "462840",
    "end": "465984"
  },
  {
    "text": "2 bit flips is pretty weak, and you would be absolutely right.",
    "start": "465984",
    "end": "469080"
  },
  {
    "text": "Keep in mind, though, there is no method for error detection or correction that could ",
    "start": "469700",
    "end": "474326"
  },
  {
    "text": "give you 100% confidence that the message you receive is the one the sender intended.",
    "start": "474326",
    "end": "478900"
  },
  {
    "text": "After all, enough random noise could always change one ",
    "start": "479580",
    "end": "482358"
  },
  {
    "text": "valid message into another valid message just by pure chance.",
    "start": "482358",
    "end": "485440"
  },
  {
    "text": "Instead, the goal is to come up with a scheme that's robust up to a certain maximum ",
    "start": "486240",
    "end": "490836"
  },
  {
    "text": "number of errors, or maybe to reduce the probability of a false positive like this.",
    "start": "490837",
    "end": "495380"
  },
  {
    "text": "Parity checks on their own are pretty weak, but by distilling the ",
    "start": "496260",
    "end": "499803"
  },
  {
    "text": "idea of change across a full message down to a single bit, ",
    "start": "499803",
    "end": "502971"
  },
  {
    "text": "what they give us is a powerful building block for more sophisticated schemes.",
    "start": "502971",
    "end": "507160"
  },
  {
    "text": "For example, as Hamming was searching for a way to identify where an error happened, ",
    "start": "507940",
    "end": "512507"
  },
  {
    "text": "not just that it happened, his key insight was that if you apply some parity checks ",
    "start": "512507",
    "end": "517020"
  },
  {
    "text": "not to the full message, but to certain carefully selected subsets, ",
    "start": "517020",
    "end": "520674"
  },
  {
    "text": "you can ask a more refined series of questions that pin down the location of any ",
    "start": "520674",
    "end": "525026"
  },
  {
    "text": "single bit error.",
    "start": "525026",
    "end": "525940"
  },
  {
    "text": "The overall feeling is a bit like playing a game of 20 questions, ",
    "start": "526680",
    "end": "529931"
  },
  {
    "text": "asking yes or no queries that chop the space of possibilities in half.",
    "start": "529931",
    "end": "533380"
  },
  {
    "text": "For example, let's say we do a parity check just on these 8 bits, ",
    "start": "534160",
    "end": "537605"
  },
  {
    "text": "all of the odd numbered positions.",
    "start": "537605",
    "end": "539380"
  },
  {
    "text": "Then if an error is detected, it gives the receiver a little more information ",
    "start": "540100",
    "end": "544248"
  },
  {
    "text": "about where specifically the error is, namely that it's in an odd position.",
    "start": "544249",
    "end": "548240"
  },
  {
    "text": "If no error is detected among those 8 bits, it either means there's no error at all, ",
    "start": "548940",
    "end": "553787"
  },
  {
    "text": "or it sits somewhere in the even positions.",
    "start": "553787",
    "end": "556240"
  },
  {
    "text": "You might think that limiting a parity check to half the bits makes it less effective, ",
    "start": "557180",
    "end": "561272"
  },
  {
    "text": "but when it's done in conjunction with other well-chosen checks, ",
    "start": "561272",
    "end": "564329"
  },
  {
    "text": "it counterintuitively gives us something a lot more powerful.",
    "start": "564330",
    "end": "567200"
  },
  {
    "text": "To actually set up that parity check, remember, ",
    "start": "569240",
    "end": "571787"
  },
  {
    "text": "it requires earmarking some special bit that has control for the parity ",
    "start": "571788",
    "end": "575611"
  },
  {
    "text": "of that full group.",
    "start": "575611",
    "end": "576620"
  },
  {
    "text": "Here let's just choose position 1.",
    "start": "577480",
    "end": "579180"
  },
  {
    "text": "For the example shown, the parity of these 8 bits is currently odd, ",
    "start": "579720",
    "end": "583123"
  },
  {
    "text": "so the sender is responsible for toggling that parity bit, and now it's even.",
    "start": "583124",
    "end": "586980"
  },
  {
    "text": "This is only 1 out of 4 parity checks that we'll do.",
    "start": "587940",
    "end": "590680"
  },
  {
    "text": "The second check is among the 8 bits on the right half of the grid, ",
    "start": "590920",
    "end": "594578"
  },
  {
    "text": "at least as we've drawn it here.",
    "start": "594578",
    "end": "596300"
  },
  {
    "text": "This time we might use position 2 as a parity bit, ",
    "start": "596680",
    "end": "599651"
  },
  {
    "text": "so these 8 bits already have an even parity, and the sender can feel good leaving ",
    "start": "599651",
    "end": "604428"
  },
  {
    "text": "that bit number 2 unchanged.",
    "start": "604428",
    "end": "606060"
  },
  {
    "text": "Then on the other end, if the receiver checks the parity of this group and they find ",
    "start": "607020",
    "end": "611127"
  },
  {
    "text": "that it's odd, they'll know that the error is somewhere among these 8 bits on the right.",
    "start": "611127",
    "end": "615380"
  },
  {
    "text": "Otherwise it means either there's no error, or the error is somewhere on the left half.",
    "start": "615820",
    "end": "620580"
  },
  {
    "text": "Or I guess there could have been two errors, but for right now we're ",
    "start": "621120",
    "end": "623849"
  },
  {
    "text": "going to assume that there's at most one error in the entire block.",
    "start": "623849",
    "end": "626500"
  },
  {
    "text": "Things break down completely for more than that.",
    "start": "626940",
    "end": "628740"
  },
  {
    "text": "Here, before we look at the next two checks, take a moment to think ",
    "start": "629160",
    "end": "632003"
  },
  {
    "text": "about what these first two allow us to do when you consider them together.",
    "start": "632004",
    "end": "635100"
  },
  {
    "text": "Let's say you detect an error among the odd columns, and among the right half.",
    "start": "635800",
    "end": "639660"
  },
  {
    "text": "It necessarily means the error is somewhere in the last column.",
    "start": "640200",
    "end": "643040"
  },
  {
    "text": "If there was no error in the odd column but there was one in the right half, ",
    "start": "643820",
    "end": "647413"
  },
  {
    "text": "that tells you it's in the second to last column.",
    "start": "647413",
    "end": "649700"
  },
  {
    "text": "Likewise if there is an error in the odd columns but not in the right half, ",
    "start": "650440",
    "end": "653944"
  },
  {
    "text": "you know it's somewhere in the second column.",
    "start": "653944",
    "end": "656019"
  },
  {
    "text": "And if neither of those two parity checks detects anything, ",
    "start": "656020",
    "end": "659199"
  },
  {
    "text": "it means the only place that an error could be is in that leftmost column.",
    "start": "659199",
    "end": "663120"
  },
  {
    "text": "But it also might simply mean there's no error at all.",
    "start": "663340",
    "end": "666120"
  },
  {
    "text": "Which is all a rather belabored way to say that ",
    "start": "666300",
    "end": "668643"
  },
  {
    "text": "two parity checks let us pin down the column.",
    "start": "668643",
    "end": "670840"
  },
  {
    "text": "From here, you can probably guess what follows.",
    "start": "671480",
    "end": "673639"
  },
  {
    "text": "We do basically the same thing but for the rows.",
    "start": "673800",
    "end": "676140"
  },
  {
    "text": "There's going to be a parity check on the odd rows, using position 4 as a parity bit.",
    "start": "676440",
    "end": "680900"
  },
  {
    "text": "So in this example that group already has an even parity, so bit 4 would be set to a 0.",
    "start": "681380",
    "end": "685820"
  },
  {
    "text": "And finally there's a parity check on the bottom two rows, ",
    "start": "686560",
    "end": "689779"
  },
  {
    "text": "using position 8 as a parity bit.",
    "start": "689779",
    "end": "691580"
  },
  {
    "text": "In this case, it looks like the sender needs to turn ",
    "start": "692120",
    "end": "694470"
  },
  {
    "text": "that bit 8 on in order to give the group even parity.",
    "start": "694470",
    "end": "696819"
  },
  {
    "text": "Just as the first two checks let us pin down the column, ",
    "start": "697700",
    "end": "700132"
  },
  {
    "text": "these next two let you pin down the row.",
    "start": "700132",
    "end": "701840"
  },
  {
    "text": "As an example, imagine that during the transmission there's an error at, say, position 3.",
    "start": "702880",
    "end": "707540"
  },
  {
    "text": "Well this affects the first parity group, and it also affects the second parity group, ",
    "start": "708180",
    "end": "712143"
  },
  {
    "text": "so the receiver knows that there's an error somewhere in that right column.",
    "start": "712143",
    "end": "715560"
  },
  {
    "text": "But it doesn't affect the third group, and it doesn't affect the fourth group.",
    "start": "716100",
    "end": "720540"
  },
  {
    "text": "And that lets the receiver pinpoint the error up to the first row, ",
    "start": "721240",
    "end": "724501"
  },
  {
    "text": "which necessarily means position 3, so they can fix the error.",
    "start": "724501",
    "end": "727519"
  },
  {
    "text": "You might enjoy taking a moment to convince yourself that the ",
    "start": "728580",
    "end": "731404"
  },
  {
    "text": "answers to these four questions really will always let you pin down a specific location, ",
    "start": "731404",
    "end": "735459"
  },
  {
    "text": "no matter where they turn out to be.",
    "start": "735459",
    "end": "737100"
  },
  {
    "text": "In fact, the astute among you might even notice a ",
    "start": "737720",
    "end": "740261"
  },
  {
    "text": "connection between these questions and binary counting.",
    "start": "740262",
    "end": "743060"
  },
  {
    "text": "And if you do, again let me emphasize, pause, try ",
    "start": "743500",
    "end": "746105"
  },
  {
    "text": "for yourself to draw the connection before I spoil it.",
    "start": "746105",
    "end": "748920"
  },
  {
    "text": "If you're wondering what happens if a parity bit itself gets affected, ",
    "start": "750500",
    "end": "754569"
  },
  {
    "text": "well, you can just try it.",
    "start": "754569",
    "end": "756060"
  },
  {
    "text": "Take a moment to think about how any error among these four special bits is going ",
    "start": "756440",
    "end": "760406"
  },
  {
    "text": "to be tracked down just like any other, with the same group of four questions.",
    "start": "760406",
    "end": "764180"
  },
  {
    "text": "It doesn't really matter, since at the end of the day what we want is to ",
    "start": "767060",
    "end": "770059"
  },
  {
    "text": "protect the message bits, the error correction bits are just riding along.",
    "start": "770059",
    "end": "773100"
  },
  {
    "text": "But protecting those bits as well is something that ",
    "start": "773600",
    "end": "775772"
  },
  {
    "text": "naturally falls out of the scheme as a byproduct.",
    "start": "775772",
    "end": "777819"
  },
  {
    "text": "You might also enjoy anticipating how this scales.",
    "start": "779200",
    "end": "781760"
  },
  {
    "text": "If we used a block of size 256 bits, for example, in order to pin down a location, ",
    "start": "782300",
    "end": "787242"
  },
  {
    "text": "you need only eight yes or no questions to binary search your way down to some specific ",
    "start": "787242",
    "end": "792482"
  },
  {
    "text": "spot.",
    "start": "792482",
    "end": "792779"
  },
  {
    "text": "And remember, each question requires giving up only ",
    "start": "795640",
    "end": "798142"
  },
  {
    "text": "a single bit to set the appropriate parity check.",
    "start": "798142",
    "end": "800500"
  },
  {
    "text": "Some of you may already see it, but we'll talk later about the ",
    "start": "803160",
    "end": "806053"
  },
  {
    "text": "systematic way to find what these questions are in just a minute or two.",
    "start": "806053",
    "end": "809360"
  },
  {
    "text": "Hopefully this sketch is enough to appreciate ",
    "start": "809880",
    "end": "811790"
  },
  {
    "text": "the efficiency of what we're developing here.",
    "start": "811790",
    "end": "813660"
  },
  {
    "text": "The first thing, except for those eight highlighted parity bits, ",
    "start": "813660",
    "end": "816996"
  },
  {
    "text": "can be whatever you want it to be, carrying whatever message or data you want.",
    "start": "816996",
    "end": "821000"
  },
  {
    "text": "The 8 bits are redundant in the sense that they're completely determined by the rest of ",
    "start": "821720",
    "end": "825892"
  },
  {
    "text": "the message, but it's in a much smarter way than simply copying the message as a whole.",
    "start": "825893",
    "end": "830020"
  },
  {
    "text": "And still, for so little given up, you would be ",
    "start": "833600",
    "end": "836040"
  },
  {
    "text": "able to identify and fix any single bit error.",
    "start": "836040",
    "end": "838380"
  },
  {
    "text": "Well, almost.",
    "start": "839200",
    "end": "840400"
  },
  {
    "text": "Okay, so the one problem here is that if none of the four parity checks detect an error, ",
    "start": "840960",
    "end": "845942"
  },
  {
    "text": "meaning that the specially selected subsets of 8 bits all have even parities, ",
    "start": "845942",
    "end": "850309"
  },
  {
    "text": "just like the sender intended, then it either means there was no error at all, ",
    "start": "850309",
    "end": "854732"
  },
  {
    "text": "or it narrows us down into position 0.",
    "start": "854732",
    "end": "856860"
  },
  {
    "text": "You see, with four yes or no questions, we have 16 possible outcomes for our parity ",
    "start": "857740",
    "end": "862536"
  },
  {
    "text": "checks, and at first that feels perfect for pinpointing 1 out of 16 positions in ",
    "start": "862536",
    "end": "867160"
  },
  {
    "text": "the block, but you also need to communicate a 17th outcome, the no error condition.",
    "start": "867160",
    "end": "871899"
  },
  {
    "text": "The solution here is actually pretty simple, just forget about that 0th bit entirely.",
    "start": "873020",
    "end": "877300"
  },
  {
    "text": "So when we do our four parity checks and we see that they're all even, ",
    "start": "877840",
    "end": "881250"
  },
  {
    "text": "it unambiguously means that there is no error.",
    "start": "881250",
    "end": "883460"
  },
  {
    "text": "What that means is rather than working with a 16-bit block, we work with a 15-bit block, ",
    "start": "884240",
    "end": "888755"
  },
  {
    "text": "where 11 of the bits are free to carry a message and 4 of them are there for redundancy.",
    "start": "888755",
    "end": "893220"
  },
  {
    "text": "And with that, we now have what people in the ",
    "start": "893780",
    "end": "896236"
  },
  {
    "text": "business would refer to as a 15-11 Hamming code.",
    "start": "896236",
    "end": "898800"
  },
  {
    "text": "That said, it's nice to have a block size that's a clean power of 2, ",
    "start": "899860",
    "end": "903220"
  },
  {
    "text": "and there's a clever way we can keep that 0th bit around and get it to do a little ",
    "start": "903220",
    "end": "907263"
  },
  {
    "text": "extra work for us.",
    "start": "907263",
    "end": "908140"
  },
  {
    "text": "If we use it as a parity bit across the whole block, ",
    "start": "908700",
    "end": "911623"
  },
  {
    "text": "it lets us actually detect, even though we can't correct, 2-bit errors.",
    "start": "911623",
    "end": "915540"
  },
  {
    "text": "Here's how it works.",
    "start": "916160",
    "end": "916819"
  },
  {
    "text": "After setting those four special error-correcting bits, ",
    "start": "917180",
    "end": "920001"
  },
  {
    "text": "we set that 0th one so that the parity of the full block is even, ",
    "start": "920001",
    "end": "923326"
  },
  {
    "text": "just like a normal parity check.",
    "start": "923327",
    "end": "924940"
  },
  {
    "text": "Now, if there's a single bit error, then the parity of the full block toggles to be odd, ",
    "start": "925700",
    "end": "930013"
  },
  {
    "text": "but we would catch that anyway thanks to the four error-correcting checks.",
    "start": "930013",
    "end": "933600"
  },
  {
    "text": "However, if there's two errors, then the overall parity is going to toggle ",
    "start": "934160",
    "end": "937865"
  },
  {
    "text": "back to being even, but the receiver would still see that there's been at ",
    "start": "937866",
    "end": "941523"
  },
  {
    "text": "least some error because of what's going on with those four parity checks.",
    "start": "941523",
    "end": "945180"
  },
  {
    "text": "So if they notice an even parity overall, but something non-zero happening ",
    "start": "945180",
    "end": "949123"
  },
  {
    "text": "with the other checks, it tells them there were at least two errors.",
    "start": "949124",
    "end": "952700"
  },
  {
    "text": "Isn't that clever?",
    "start": "953520",
    "end": "954000"
  },
  {
    "text": "Even though we can't correct those 2-bit errors, ",
    "start": "954300",
    "end": "956789"
  },
  {
    "text": "just by putting that one little bothersome 0th bit back to work, it lets us detect them.",
    "start": "956789",
    "end": "961260"
  },
  {
    "text": "This is pretty standard, it's known as an extended Hamming code.",
    "start": "962260",
    "end": "965220"
  },
  {
    "text": "Technically speaking, you now have a full description of what a Hamming code does, ",
    "start": "966540",
    "end": "970716"
  },
  {
    "text": "at least for the example of a 16-bit block.",
    "start": "970716",
    "end": "972880"
  },
  {
    "text": "But I think you'll find it more satisfying to check your understanding and solidify ",
    "start": "972880",
    "end": "977100"
  },
  {
    "text": "everything up to this point by doing one full example from start to finish yourself.",
    "start": "977100",
    "end": "981319"
  },
  {
    "text": "I'll step through it with you though so you can check yourself.",
    "start": "982080",
    "end": "984300"
  },
  {
    "text": "To set up a message, whether that's a literal message you're translating over space or ",
    "start": "985120",
    "end": "989756"
  },
  {
    "text": "some data you want to store over time, the first step is to divide it up into 11-bit ",
    "start": "989756",
    "end": "994286"
  },
  {
    "text": "chunks.",
    "start": "994286",
    "end": "994660"
  },
  {
    "text": "Each chunk is going to get packaged into an error-resistant 16-bit block.",
    "start": "995580",
    "end": "999760"
  },
  {
    "text": "So let's take this one as an example and actually work it out.",
    "start": "999760",
    "end": "1003220"
  },
  {
    "text": "Go ahead, actually do it!",
    "start": "1003740",
    "end": "1004940"
  },
  {
    "text": "Let's pause and try putting together this block.",
    "start": "1005220",
    "end": "1007019"
  },
  {
    "text": "Okay, you ready?",
    "start": "1012720",
    "end": "1013680"
  },
  {
    "text": "Remember, position 0 along with the other powers of 2 are reserved for error correction ",
    "start": "1014240",
    "end": "1018805"
  },
  {
    "text": "duty, so you start by placing the message bits in all of the remaining spots, in order.",
    "start": "1018805",
    "end": "1023320"
  },
  {
    "text": "You need this group to have an even parity, which it already does, ",
    "start": "1025339",
    "end": "1028947"
  },
  {
    "text": "so you should have set that parity bit in position 1 to be a 0.",
    "start": "1028947",
    "end": "1032339"
  },
  {
    "text": "The next group starts off with an odd parity, ",
    "start": "1033020",
    "end": "1035449"
  },
  {
    "text": "so you should have set its parity bit to be 1.",
    "start": "1035450",
    "end": "1037880"
  },
  {
    "text": "The group after that starts with an odd parity, ",
    "start": "1039160",
    "end": "1041673"
  },
  {
    "text": "so again you should have set its parity bit to 1.",
    "start": "1041673",
    "end": "1044240"
  },
  {
    "text": "And the final group also has an odd parity, meaning ",
    "start": "1044780",
    "end": "1047764"
  },
  {
    "text": "we set that bit in position 8 to be a 1.",
    "start": "1047764",
    "end": "1050060"
  },
  {
    "text": "And then as the final step, the full block now has an even parity, ",
    "start": "1051300",
    "end": "1055555"
  },
  {
    "text": "meaning you can set that bit number 0, the overarching parity bit, to be 0.",
    "start": "1055555",
    "end": "1060320"
  },
  {
    "text": "So as this block is sent off, the parity of the four special ",
    "start": "1061340",
    "end": "1064885"
  },
  {
    "text": "subsets and the block as a whole will all be even, or 0.",
    "start": "1064885",
    "end": "1068140"
  },
  {
    "text": "As the second part of the exercise, let's have you play the role of the receiver.",
    "start": "1068820",
    "end": "1072179"
  },
  {
    "text": "Of course, that would mean you don't already know what this message is, ",
    "start": "1073480",
    "end": "1076766"
  },
  {
    "text": "maybe some of you memorized it, but let's assume that you haven't.",
    "start": "1076766",
    "end": "1079780"
  },
  {
    "text": "What I'm going to do is change either 0, 1, or 2 of the bits in that block, ",
    "start": "1080020",
    "end": "1084568"
  },
  {
    "text": "and then ask you to figure out what it is that I did.",
    "start": "1084568",
    "end": "1087740"
  },
  {
    "text": "So again, pause and try working it out.",
    "start": "1088260",
    "end": "1090810"
  },
  {
    "text": "Okay, so you as the receiver now check the first parity group and you can see ",
    "start": "1098790",
    "end": "1103409"
  },
  {
    "text": "that it's even, so any error that exists would have to be in an even column.",
    "start": "1103409",
    "end": "1107910"
  },
  {
    "text": "The next check gives us an odd number, telling us both that there's at least one error, ",
    "start": "1109690",
    "end": "1114439"
  },
  {
    "text": "and narrowing us down into this specific column.",
    "start": "1114439",
    "end": "1117029"
  },
  {
    "text": "The third check is even, chopping down the possibilities even further.",
    "start": "1118550",
    "end": "1121790"
  },
  {
    "text": "And the last parity check is odd, telling us there's an error somewhere in the bottom, ",
    "start": "1122650",
    "end": "1126969"
  },
  {
    "text": "which by now we can see must be in position number 10.",
    "start": "1126969",
    "end": "1129650"
  },
  {
    "text": "What's more, the parity of the whole block is odd, ",
    "start": "1131490",
    "end": "1134342"
  },
  {
    "text": "giving us confidence that there was one flip and not two.",
    "start": "1134342",
    "end": "1137530"
  },
  {
    "text": "If it's three or more, all bets are off.",
    "start": "1138070",
    "end": "1139970"
  },
  {
    "text": "After correcting that bit number 10, pulling out the 11 bits that were not ",
    "start": "1141310",
    "end": "1145520"
  },
  {
    "text": "used for correction gives us the relevant segment of the original message, ",
    "start": "1145520",
    "end": "1149730"
  },
  {
    "text": "which if you rewind and compare is indeed exactly what we started the example with.",
    "start": "1149730",
    "end": "1154390"
  },
  {
    "text": "And now that you know how to do all this by hand, ",
    "start": "1155710",
    "end": "1158012"
  },
  {
    "text": "I'd like to show you how you can carry out the core part of all of this logic with ",
    "start": "1158012",
    "end": "1161834"
  },
  {
    "text": "a single line of Python code.",
    "start": "1161834",
    "end": "1163170"
  },
  {
    "text": "You see, what I haven't told you yet is just how elegant this algorithm really is, ",
    "start": "1163870",
    "end": "1168158"
  },
  {
    "text": "how simple it is to get a machine to point to the position of an error, ",
    "start": "1168158",
    "end": "1171877"
  },
  {
    "text": "how to systematically scale it, and how we can frame all of this as one ",
    "start": "1171878",
    "end": "1175598"
  },
  {
    "text": "single operation rather than multiple separate parity checks.",
    "start": "1175598",
    "end": "1178750"
  },
  {
    "text": "To see what I mean, come join me in part 2.",
    "start": "1179430",
    "end": "1181310"
  }
]