[
  {
    "start": "0",
    "end": "36000"
  },
  {
    "text": "[Music]",
    "start": "0",
    "end": "5040"
  },
  {
    "text": "[Applause]",
    "start": "5040",
    "end": "8200"
  },
  {
    "text": "all right everybody hear me great well uh welcome to paint by",
    "start": "10719",
    "end": "17840"
  },
  {
    "text": "numbers high performance drawing in wum my name is Sean isum I'm the CEO and founder of a company called render uh",
    "start": "17840",
    "end": "24599"
  },
  {
    "text": "and today we're here to talk about wander which is a crossplatform rendering framework for web assembly",
    "start": "24599",
    "end": "30039"
  },
  {
    "text": "more generally how do you draw data using web assembly let's Dive Right",
    "start": "30039",
    "end": "36120"
  },
  {
    "start": "36000",
    "end": "103000"
  },
  {
    "text": "In My might not working is that better I will talk",
    "start": "36120",
    "end": "42039"
  },
  {
    "text": "louder how about that so okay so drawing in web assembly what do we mean by this",
    "start": "42039",
    "end": "47600"
  },
  {
    "text": "uh a lot of people might think this is kind of a solved problem so uh obviously web ass simply kind of had its roots in",
    "start": "47600",
    "end": "53600"
  },
  {
    "text": "a browser and so there's applications that draw things in a browser uh in production and this has been one of the",
    "start": "53600",
    "end": "59280"
  },
  {
    "text": "more successful applications of web assembly over time and some examples of that are Adobe Photoshop AutoCAD has a",
    "start": "59280",
    "end": "66000"
  },
  {
    "text": "web version Google Maps I think is like the quential use case for taking a C++ codebase putting in a browser during",
    "start": "66000",
    "end": "72439"
  },
  {
    "text": "rendering via webgl I think the fact that gets hidden from a lot of these success stories of web assembly is uh",
    "start": "72439",
    "end": "81000"
  },
  {
    "text": "the web is a very different platform from native applications so although it you know all these are success stories",
    "start": "81000",
    "end": "87360"
  },
  {
    "text": "what you don't see are the War Stories along the way and yes I I love the power I worked at Adobe before this I love the",
    "start": "87360",
    "end": "93119"
  },
  {
    "text": "power of things like Photoshop and web browser because it means without down louing software to my computer I can",
    "start": "93119",
    "end": "98720"
  },
  {
    "text": "deface the Mona Lisa without ending up in jail uh and and this is kind of my",
    "start": "98720",
    "end": "105079"
  },
  {
    "start": "103000",
    "end": "187000"
  },
  {
    "text": "central point behind this talk and behind what I'm building uh crossplatform is not really",
    "start": "105079",
    "end": "111079"
  },
  {
    "text": "crossplatform in the way that we like to think it is and that's the thing all of those apps were like 10e Journeys to get these native code bases to work in a web",
    "start": "111079",
    "end": "117600"
  },
  {
    "text": "browser and you know you have Technologies like canvas uh you know web browsers if you're not familiar with how",
    "start": "117600",
    "end": "123439"
  },
  {
    "text": "they work uh accelerate things like canvas and SBG apis by transferring that on the GPU process back to a GPU and",
    "start": "123439",
    "end": "131120"
  },
  {
    "text": "rasterizing it uh you've got Technologies like webgl which is how most of those apps I just mentioned were written um webg is uh a very old",
    "start": "131120",
    "end": "141000"
  },
  {
    "text": "Graphics API it does the job but it is another platform uh web GPU likewise a",
    "start": "141000",
    "end": "146800"
  },
  {
    "text": "much more modern Graphics API it's like a 2014 Maybe snapshot of GPU apis but it",
    "start": "146800",
    "end": "152319"
  },
  {
    "text": "is another platform all of these are tooled on top of JavaScript so if you are a native app developer and there's",
    "start": "152319",
    "end": "158319"
  },
  {
    "text": "tools within rust there's tools within C++ like can scripton to basically access these browser side apis but you",
    "start": "158319",
    "end": "164920"
  },
  {
    "text": "have to go over these JavaScript shims to access it and so you know when you're writing C++ code and you think you're",
    "start": "164920",
    "end": "170920"
  },
  {
    "text": "accessing a GPU you kind have to change your mental model a little bit to say well I'm writing webg code which looks a",
    "start": "170920",
    "end": "177360"
  },
  {
    "text": "little different from my Graphics code on different platforms and I'm going over these automatically generated JavaScript bindings it works I want to",
    "start": "177360",
    "end": "183879"
  },
  {
    "text": "be clear it works it doesn't work super well",
    "start": "183879",
    "end": "189480"
  },
  {
    "start": "187000",
    "end": "287000"
  },
  {
    "text": "so raw web assembly now so we talked about web assemblying a browser uh but what about actual drawing and web",
    "start": "189480",
    "end": "196360"
  },
  {
    "text": "assembly and the short answer is you can't that's it you can't you can't do",
    "start": "196360",
    "end": "201799"
  },
  {
    "text": "it uh and I mean that's because web assembly in itself what you get i32 I64",
    "start": "201799",
    "end": "207120"
  },
  {
    "text": "F32 f64 right those are the basic types exposed by web assembly and so other people have tried you know different",
    "start": "207120",
    "end": "213879"
  },
  {
    "text": "approaches to solving this problem before um there are like frame buffer style apis that",
    "start": "213879",
    "end": "220239"
  },
  {
    "text": "expose uh you know essentially a rendering Target a pixel buffer to web",
    "start": "220239",
    "end": "225640"
  },
  {
    "text": "assembly guess modules uh there are some successful I'm drawing a blank on the",
    "start": "225640",
    "end": "230720"
  },
  {
    "text": "main one I think it was from wer uh there there are some approaches that have been taken to expose this through IO devices to apps problem is that does",
    "start": "230720",
    "end": "237680"
  },
  {
    "text": "not use a GPU uh that means you are compositing client side on the CPU into",
    "start": "237680",
    "end": "243400"
  },
  {
    "text": "a buffer and so that's not very high performance um ml you just saw Ru and everyone up here talking about you know",
    "start": "243400",
    "end": "249920"
  },
  {
    "text": "uh accelerated machine learning likewise that is copying model data into a host",
    "start": "249920",
    "end": "254959"
  },
  {
    "text": "API so it's not you know exactly exposing like bespoke functions to do",
    "start": "254959",
    "end": "261000"
  },
  {
    "text": "things with gpus explicitly to web assembly guest but that kind of gets us",
    "start": "261000",
    "end": "266160"
  },
  {
    "text": "on the path of things like Wy and the component model and everything else that you've heard about at this conference",
    "start": "266160",
    "end": "271240"
  },
  {
    "text": "you know hopefully over the last two days and so an idea is is okay G giving kind of this progression towards the",
    "start": "271240",
    "end": "277960"
  },
  {
    "text": "component model and towards uh you know giving web assembly more features um can",
    "start": "277960",
    "end": "283800"
  },
  {
    "text": "we add rendering capabilities the answer is yes we can but it is a long journey to get there so",
    "start": "283800",
    "end": "291080"
  },
  {
    "start": "287000",
    "end": "365000"
  },
  {
    "text": "I want to talk about wander wander which stands for web assembly renderer very uh Advanced name there uh was my attempt to",
    "start": "291080",
    "end": "299240"
  },
  {
    "text": "build a library that was a crossplatform rendering engine based off a web assembly it's there on GitHub scan the",
    "start": "299240",
    "end": "306360"
  },
  {
    "text": "QR code start the repo I would appreciate it um the idea behind wonder",
    "start": "306360",
    "end": "311400"
  },
  {
    "text": "is you take the entire Graphics pipeline you compile it to web assembly modules you take your graphics code you take",
    "start": "311400",
    "end": "317160"
  },
  {
    "text": "your graphics data you take everything and you compile it down to a single file that effectively oh well or a stream of",
    "start": "317160",
    "end": "323440"
  },
  {
    "text": "files that effectively can be embedded inside any application uh and run by a",
    "start": "323440",
    "end": "329120"
  },
  {
    "text": "wasum runtime and so you can kind of think of this as like in a browser you're going over this JavaScript shim",
    "start": "329120",
    "end": "334800"
  },
  {
    "text": "and you're talking to these browser side host apis outside of a browser this gives you the ability to take those",
    "start": "334800",
    "end": "341080"
  },
  {
    "text": "Graphics run them on GPU um so it's a crossplatform runtime basically it provides a host level layer that talks",
    "start": "341080",
    "end": "348520"
  },
  {
    "text": "to the underlying platform's GPU API right now it supports openg DirectX and",
    "start": "348520",
    "end": "354000"
  },
  {
    "text": "kind of web GPU as of last night um confence striven development uh but the",
    "start": "354000",
    "end": "359800"
  },
  {
    "text": "basic idea is uh you've got this host interface that exposes the GPU to",
    "start": "359800",
    "end": "364960"
  },
  {
    "text": "Wasa and uh before I I go too deep down more of the like actual lawm path like",
    "start": "364960",
    "end": "371199"
  },
  {
    "start": "365000",
    "end": "479000"
  },
  {
    "text": "let's talk about designing a renderer because this might be a you know kind of uh Opa topic to lots of folks uh first",
    "start": "371199",
    "end": "378160"
  },
  {
    "text": "working from first principles there is an there's no shortage of libraries that exist to put pixels on a screen today uh",
    "start": "378160",
    "end": "385479"
  },
  {
    "text": "so we do not want to reinvent the wheel we do not want to reinvent Graphics programming paradigm we want to expose things to developers",
    "start": "385479",
    "end": "392120"
  },
  {
    "text": "in terms and ways that they are familiar with so this means like we are not going to reimplement web GPU for example uh",
    "start": "392120",
    "end": "398840"
  },
  {
    "text": "we're not going to build tons of different apis that do all these different things it's a huge API footprint um a renderer must be",
    "start": "398840",
    "end": "405039"
  },
  {
    "text": "extremely high performance uh this is most obvious when you're doing like 3D games for example something where you",
    "start": "405039",
    "end": "411599"
  },
  {
    "text": "need 60 FPS something where you're rendering massive amounts of data in parallel and so like if you think about",
    "start": "411599",
    "end": "417759"
  },
  {
    "text": "how a lot of web simply systems designed designed to be pretty say CPU heavy right like you got a uh core that's",
    "start": "417759",
    "end": "424639"
  },
  {
    "text": "doing a thing or it's designed to be kind of broad like let's say you you've got request handlers you're running um",
    "start": "424639",
    "end": "431120"
  },
  {
    "text": "the serverless platform and you're responding to 20,000 requests per second uh renderers are kind of unique in that",
    "start": "431120",
    "end": "437199"
  },
  {
    "text": "they they share characteristics of both uh you need extremely high single core performance for like main Loops but you",
    "start": "437199",
    "end": "443599"
  },
  {
    "text": "also need to be able to render these massive amounts of things like large pixel buffers uh to be able to to take",
    "start": "443599",
    "end": "450039"
  },
  {
    "text": "advantage of the parallelism of gpus and so the approach we took was to kind of",
    "start": "450039",
    "end": "455440"
  },
  {
    "text": "be like incremental with lawm and and that's like I do not necessarily want to expose every single function to the wasm",
    "start": "455440",
    "end": "462240"
  },
  {
    "text": "guest uh we want to be able to talk to a platform's GPU API on the host side not",
    "start": "462240",
    "end": "468319"
  },
  {
    "text": "poke a bunch of holes in the security sandbox basically take wasum uh linear memory copy data out of it and talk to",
    "start": "468319",
    "end": "475000"
  },
  {
    "text": "the host via a wire format and this allows it to be fairly decoupled",
    "start": "475000",
    "end": "480280"
  },
  {
    "start": "479000",
    "end": "592000"
  },
  {
    "text": "okay so now we get to the fun technical details of how all this is implemented so first is kind of the uh node and the",
    "start": "480280",
    "end": "488199"
  },
  {
    "text": "Dom tree so over there is an example of what a nodes sandbox would be like so",
    "start": "488199",
    "end": "493879"
  },
  {
    "text": "you can think of the sandbox is just it's a web assembly sandbox right so it's like a and it's actually a Wasa",
    "start": "493879",
    "end": "499280"
  },
  {
    "text": "module and So within that you've got uh nodes um which which is the gray box",
    "start": "499280",
    "end": "505599"
  },
  {
    "text": "which corresponds one to one with an object that ultimately gets uploaded to the GPU uh inside that you have steps so",
    "start": "505599",
    "end": "511360"
  },
  {
    "text": "you see there's a series of libraries over there that do rendering um we've got libraries for 2D 3D procedural",
    "start": "511360",
    "end": "516839"
  },
  {
    "text": "content generation and color operations right now uh I'm working towards an open source model for contributing libraries",
    "start": "516839",
    "end": "523440"
  },
  {
    "text": "to this so right now that is not part of the core runtime but we want to get there uh but the idea is like these",
    "start": "523440",
    "end": "528839"
  },
  {
    "text": "functions are exposed to guest code and web assembly the guest code uses them it puts data in memory and then the host",
    "start": "528839",
    "end": "536720"
  },
  {
    "text": "copies that data out of memory uh onto the the hardware um there's kind of some design",
    "start": "536720",
    "end": "543560"
  },
  {
    "text": "trade-offs uh I don't want to get too deep with between like what is a node",
    "start": "543560",
    "end": "549000"
  },
  {
    "text": "and what is a step because like when you're running a like a Dom like a node tree a render tree um you can basically",
    "start": "549000",
    "end": "557079"
  },
  {
    "text": "have every individual step within that tree be backed by a GPU object or you",
    "start": "557079",
    "end": "562360"
  },
  {
    "text": "can run all of that CPU side and actually end up with just the end result being backed by GPU memory uh with this",
    "start": "562360",
    "end": "569120"
  },
  {
    "text": "we decided to take the uh former approach and that's because uh if you",
    "start": "569120",
    "end": "575560"
  },
  {
    "text": "have to copy data out of wasm linear memory to the GPU every single step every single geometry operation every",
    "start": "575560",
    "end": "581600"
  },
  {
    "text": "single fill for pixels that's very expensive because it basically stops interrupt it causes you to interrupt the",
    "start": "581600",
    "end": "587399"
  },
  {
    "text": "entire uh rendering pipeline just to copy these small bits of data so we don't do",
    "start": "587399",
    "end": "592560"
  },
  {
    "start": "592000",
    "end": "736000"
  },
  {
    "text": "that um okay so that is the overall model the memory model um and this has",
    "start": "592560",
    "end": "598440"
  },
  {
    "text": "actually been probably the hardest thing about building this right now is there does not exist a there's not a high",
    "start": "598440",
    "end": "605399"
  },
  {
    "text": "performance way to copy large chunks of web assembly memory across multi and",
    "start": "605399",
    "end": "610880"
  },
  {
    "text": "share them across multiple guests or copy them from host to guest guest to host boundaries um when you have a",
    "start": "610880",
    "end": "617480"
  },
  {
    "text": "throughput that's measured in gigabytes of data per second this is actually a really hard problem to solve and like",
    "start": "617480",
    "end": "624040"
  },
  {
    "text": "you nothing against the component model or anything but this is a this is kind of more of a core memory problem of how",
    "start": "624040",
    "end": "630079"
  },
  {
    "text": "do we give these multiple guests access to memory that is then backed by GPU",
    "start": "630079",
    "end": "635639"
  },
  {
    "text": "buffers ultimately on the host side but do it without having to do a million MIM copies and a million interrupts along",
    "start": "635639",
    "end": "641399"
  },
  {
    "text": "the way so um given that background there's a few different approaches to this so individual buffers per node in a",
    "start": "641399",
    "end": "648279"
  },
  {
    "text": "render tree uh that's kind of the naive approach too many MIM copies you can iterate the the render tree and you can",
    "start": "648279",
    "end": "654200"
  },
  {
    "text": "create a GPU buffer using the host API and you can upload in real time and then basically just see your your pipeline",
    "start": "654200",
    "end": "660279"
  },
  {
    "text": "throughput slowing down uh a better approach which is the current approach is pulled host buffers so with this",
    "start": "660279",
    "end": "666839"
  },
  {
    "text": "there's a single GPU buffer uh that is managed by the host runtime uh per wasm",
    "start": "666839",
    "end": "672920"
  },
  {
    "text": "module and with this all these different things that run inside It ultimately end up in slots in that buffer but we wait",
    "start": "672920",
    "end": "678800"
  },
  {
    "text": "for the execution of the entire render tree to copy the data once out of all so",
    "start": "678800",
    "end": "684800"
  },
  {
    "text": "so sorry let me take a step back we copy the data out of each wasm as it",
    "start": "684800",
    "end": "689839"
  },
  {
    "text": "completes but then we upload to the GPU once because that single upload to the GPU is much more efficient than a bunch",
    "start": "689839",
    "end": "695040"
  },
  {
    "text": "of small calls to the GPU long story short uh if Wasa",
    "start": "695040",
    "end": "700480"
  },
  {
    "text": "multi-memory actually becomes a thing that will solve a lot of problems here uh I think we're ways off from that last",
    "start": "700480",
    "end": "706279"
  },
  {
    "text": "time I checked uh although technically the proposal is level three or graduating level four uh guest language",
    "start": "706279",
    "end": "713040"
  },
  {
    "text": "support is very very spotty for this because it requires an llvm patch so uh but if we can get to a model where I can",
    "start": "713040",
    "end": "719320"
  },
  {
    "text": "effectively build a single memory that thousands of nodes within a render tree can share and Slot into and render in",
    "start": "719320",
    "end": "725760"
  },
  {
    "text": "real time in parallel their data into then there's not all these different MIM copies I run the execution of the tree",
    "start": "725760",
    "end": "732399"
  },
  {
    "text": "upload the GPU once it's extremely efficient and that gets us to",
    "start": "732399",
    "end": "738279"
  },
  {
    "start": "736000",
    "end": "823000"
  },
  {
    "text": "Performance um see over here on the right we might need to wait for that gift to re reload here this this is a",
    "start": "738279",
    "end": "745079"
  },
  {
    "text": "performance test I did in a Maps app can I get this to reload yeah there we",
    "start": "745079",
    "end": "752079"
  },
  {
    "text": "go okay so watch it's going fast fast fast fast fast filling all these 3D buildings and it kind of slows to a",
    "start": "752079",
    "end": "758000"
  },
  {
    "text": "crawl and why does it randomly slow to a crawl at a certain place and that comes",
    "start": "758000",
    "end": "763680"
  },
  {
    "text": "down to how we manage these core wasm time constructs and I don't know maybe I'm maybe I just don't know but uh in in",
    "start": "763680",
    "end": "771480"
  },
  {
    "text": "writing code against the raw wasm time cap API uh there's not a lot of documentation or tribal knowledge out",
    "start": "771480",
    "end": "777399"
  },
  {
    "text": "there on things like how do you size your store how do you size the memories of these individual Wasa modules and how",
    "start": "777399",
    "end": "783720"
  },
  {
    "text": "do you predict and how do you Shard all of these things um I found uh that the",
    "start": "783720",
    "end": "789639"
  },
  {
    "text": "and yeah by the way this is all using wasm time that wasn't apparent um which which is a great runtime but the Linker",
    "start": "789639",
    "end": "795240"
  },
  {
    "text": "from it is pretty slow so if every single one of those buildings there represents a web assembly function and I",
    "start": "795240",
    "end": "800800"
  },
  {
    "text": "am relinking all of those every single time that that is called the throughput slows to a crawl and so ultimately we",
    "start": "800800",
    "end": "808040"
  },
  {
    "text": "group like objects objects and have to reuse their web assembly stacks and that's fine because they're still",
    "start": "808040",
    "end": "813120"
  },
  {
    "text": "sandbox they're still stfe it's a known set of inputs and known set of outputs but effectively we do not want to",
    "start": "813120",
    "end": "818600"
  },
  {
    "text": "reinvoke the Linker every time we need to reuse a",
    "start": "818600",
    "end": "823720"
  },
  {
    "start": "823000",
    "end": "943000"
  },
  {
    "text": "function okay last bit hopefully of the technical material parallelism so uh",
    "start": "823959",
    "end": "832320"
  },
  {
    "text": "when we talk about parallel rendering there is both data level and task level parallelism so uh when we talk about",
    "start": "832320",
    "end": "839800"
  },
  {
    "text": "data level parallelism if you think of uh you know like what is a massively parallel operation like a lot of um",
    "start": "839800",
    "end": "846880"
  },
  {
    "text": "machine learning stuff you're running large amounts of Matrix operations effectively on these giant size",
    "start": "846880",
    "end": "853800"
  },
  {
    "text": "vectors uh the problem when you implement this CPU side is you can build these task",
    "start": "853800",
    "end": "860519"
  },
  {
    "text": "graphs that are incredibly complex and you can say okay like I'm going to schedule this graph where I've like if I",
    "start": "860519",
    "end": "867320"
  },
  {
    "text": "have an operation that does I don't know like uh what's a good",
    "start": "867320",
    "end": "872880"
  },
  {
    "text": "example of this like rasterization for example right like I know I need 1,000 rasterization Ops per second I know I",
    "start": "872880",
    "end": "880279"
  },
  {
    "text": "need uh I need to render vectors I know I need to be able to transform like do a",
    "start": "880279",
    "end": "885680"
  },
  {
    "text": "matrix multiplication you can build thread pools for each of these operations uh that's really painful like",
    "start": "885680",
    "end": "893360"
  },
  {
    "text": "it's like it's not a general purpose solution so my take on data level parallelism is this is best left to the Shader code like if you're",
    "start": "893360",
    "end": "900959"
  },
  {
    "text": "um if you're doing like large Vector size processing So within this we Implement task level parallelism which",
    "start": "900959",
    "end": "907440"
  },
  {
    "text": "is where we say we're drawing a certain number of objects onto the screen we're going to split our scene up by",
    "start": "907440",
    "end": "914560"
  },
  {
    "text": "effectively how many CPU cores we have access to and so we are going to create a Linker a store all of these different",
    "start": "914560",
    "end": "920600"
  },
  {
    "text": "constructs per core and then basically we're just going to divide the scene up and render them all through that so that",
    "start": "920600",
    "end": "926000"
  },
  {
    "text": "way we can effectively use all the CPUs you don't have to build fine graen parallelism I mean there is an overhead",
    "start": "926000",
    "end": "931759"
  },
  {
    "text": "to uh instead of doing you know like a thousand of the same thing in a row to",
    "start": "931759",
    "end": "937199"
  },
  {
    "text": "to hopping from one thing to something else to something else to something else but ultimately this gets us the best",
    "start": "937199",
    "end": "943000"
  },
  {
    "start": "943000",
    "end": "996000"
  },
  {
    "text": "throughput so this takes me to the V1 architecture I apologize this is a complicated slide but uh overall where",
    "start": "943000",
    "end": "950360"
  },
  {
    "text": "wonder is right now is the Wonder SDK can effectively create this node sandbox",
    "start": "950360",
    "end": "956360"
  },
  {
    "text": "create these web assembly modules run these modules of Graphics code generate",
    "start": "956360",
    "end": "961399"
  },
  {
    "text": "data and upload them to the GPU if you're familiar with how Graphics are rendered there's kind of two parts to",
    "start": "961399",
    "end": "967639"
  },
  {
    "text": "the overall Graphics pipeline there is content upload which is usually multi-threaded process and then there is the actual rendering of the data there's",
    "start": "967639",
    "end": "973959"
  },
  {
    "text": "the draw call there's attaching a Shader and telling the GPU to put it into a buffer and so right now we just handle",
    "start": "973959",
    "end": "979959"
  },
  {
    "text": "the former we just handle the upload to the GPU because uh it gets very tricky once you try to figure out like oh if we",
    "start": "979959",
    "end": "986480"
  },
  {
    "text": "go back to those first principles I do not want to build a new Shader system and new Shader generation API we do not",
    "start": "986480",
    "end": "992319"
  },
  {
    "text": "want to reinvent the wheel there um so here's here's here's some paths we took",
    "start": "992319",
    "end": "999720"
  },
  {
    "text": "there uh the the naive path is we talk about support exposing a frame buffer to",
    "start": "999720",
    "end": "1005079"
  },
  {
    "text": "was raw wasm code that's not actually GPU accelerated uh there's an",
    "start": "1005079",
    "end": "1010600"
  },
  {
    "text": "interesting approach this get repo here uh not not my code that I tried that",
    "start": "1010600",
    "end": "1015920"
  },
  {
    "text": "allows you to uh basically take web assembly code and through spear V compile it to Shader um it's kind of",
    "start": "1015920",
    "end": "1023720"
  },
  {
    "text": "quirky because like if you have a written code for massively parallel processors doesn't look a whole lot like",
    "start": "1023720",
    "end": "1029640"
  },
  {
    "text": "code that you run on the CPU side so like it's a it's a subset of both sets of instructions because there's a lot of",
    "start": "1029640",
    "end": "1034880"
  },
  {
    "text": "quirks it's an interesting idea so the real answer is the wasm guest needs to be able to programmatically build",
    "start": "1034880",
    "end": "1041438"
  },
  {
    "text": "shaders um and let's take a slight detour to talk about like what you need",
    "start": "1041439",
    "end": "1046959"
  },
  {
    "text": "to do to invoke shaders uh you have to be able to compile them and actually",
    "start": "1046959",
    "end": "1052080"
  },
  {
    "text": "here graphical example here can I if I click this link is this going to ah it opens on this screen hold up can",
    "start": "1052080",
    "end": "1060120"
  },
  {
    "text": "I uh does that oh right right side there we go cool okay so this is Shader toy if",
    "start": "1060120",
    "end": "1066480"
  },
  {
    "text": "anybody has seen this before this is uh credit to fabr who puts together a bunch of these awesome Shader demos it's like",
    "start": "1066480",
    "end": "1073360"
  },
  {
    "text": "this is this is a Shader um you've got code this has to be dynamically compiled",
    "start": "1073360",
    "end": "1079000"
  },
  {
    "text": "and you don't just compile it once you compile it to a specific format for a graphics API uh but the problem is it's",
    "start": "1079000",
    "end": "1084159"
  },
  {
    "text": "not just the Shader you see there's inputs and outputs to those shaders right and that's where you have to look at the entire Graphics pipeline you've",
    "start": "1084159",
    "end": "1090679"
  },
  {
    "text": "got uniforms that are getting passed in you've got attachment to these different buffers you've got a scene state that",
    "start": "1090679",
    "end": "1096640"
  },
  {
    "text": "defines camera position you got all these different building blocks that come together to give you an actual",
    "start": "1096640",
    "end": "1101919"
  },
  {
    "text": "Graphics Pipeline and so like going down the path of um just dynamically",
    "start": "1101919",
    "end": "1107480"
  },
  {
    "text": "compiling shaders is interesting but there's a lot more here let me kill this now cool we're back there's",
    "start": "1107480",
    "end": "1115640"
  },
  {
    "text": "a lot more other other things that are necessary to actually get that pipeline state to say if I've got a rock canvas and I've got data I've uploaded the GPU",
    "start": "1115640",
    "end": "1122200"
  },
  {
    "text": "how do I actually take it from GPU buffer two pixels on the",
    "start": "1122200",
    "end": "1127240"
  },
  {
    "text": "screen sorry I lost my mouse there we go we're back okay so how",
    "start": "1127240",
    "end": "1134320"
  },
  {
    "text": "do we solve this architecture V2 um this is where wonder is headed this is probably going to be a one-year Journey",
    "start": "1134320",
    "end": "1140559"
  },
  {
    "text": "follow these beautiful magenta lines here the idea is host app gives wander configuration on what is my scene State",
    "start": "1140559",
    "end": "1147480"
  },
  {
    "text": "like what does my frame buffer look like like what does my depth buffer look like do I have weird output formats like",
    "start": "1147480",
    "end": "1153400"
  },
  {
    "text": "motion vectors if you're doing txa for example uh give me a declarative specification for what the render Target",
    "start": "1153400",
    "end": "1160120"
  },
  {
    "text": "looks like and all of the things I need to know to be able to draw into this arbitrary render Target give me into web",
    "start": "1160120",
    "end": "1166120"
  },
  {
    "text": "assembly functions to draw into that render Target and the beauty of this is this means now the GPU is exposed to web",
    "start": "1166120",
    "end": "1173480"
  },
  {
    "text": "assembly and web assembly can actually render anything as a guess module onto",
    "start": "1173480",
    "end": "1179799"
  },
  {
    "text": "any canvas just let the Gear start turning about how powerful that might be",
    "start": "1179799",
    "end": "1184919"
  },
  {
    "text": "um but I didn't actually say how we expose the GPU so here's a couple different approaches uh for example some",
    "start": "1184919",
    "end": "1190880"
  },
  {
    "start": "1185000",
    "end": "1346000"
  },
  {
    "text": "people have tried to do this before a friends at aobo Studio who build Microsoft flight simulator have like uh",
    "start": "1190880",
    "end": "1197559"
  },
  {
    "text": "interesting API here for doing 2D Graphics where effectively uh you can pass things in",
    "start": "1197559",
    "end": "1203000"
  },
  {
    "text": "from wasm guest to wasm host that are copied into their engine and then is composite into into their overall",
    "start": "1203000",
    "end": "1209440"
  },
  {
    "text": "rendering pipeline uh I started going down this path I realized very quickly",
    "start": "1209440",
    "end": "1215080"
  },
  {
    "text": "that like this is a lot easier for 2D than it is for 3D for one and secondly again back to First principles I do not",
    "start": "1215080",
    "end": "1221200"
  },
  {
    "text": "want to wrap every single function from a graphics API um likewise look at it just exposing",
    "start": "1221200",
    "end": "1227440"
  },
  {
    "text": "a platform's graphics API uh can we wrap that and expose that to wasm it's at",
    "start": "1227440",
    "end": "1232559"
  },
  {
    "text": "least a much more complete feature set like like for example like let's take open like let's take openg and rewrite",
    "start": "1232559",
    "end": "1239360"
  },
  {
    "text": "it where every single function is linked in wasm time to be exported uh as a wasm guest",
    "start": "1239360",
    "end": "1245039"
  },
  {
    "text": "function not a great idea either oh and then oh flutter sorry I missed that one so link down there uh flutter is doing",
    "start": "1245039",
    "end": "1251880"
  },
  {
    "text": "some I don't know if Kevin's in here flutter is doing some very interesting stuff uh with impeller in their GPU framework which is not just swen based",
    "start": "1251880",
    "end": "1259080"
  },
  {
    "text": "it's a general GPU framework but it's it's the same kind of idea where you're building these abstractions over um the",
    "start": "1259080",
    "end": "1266200"
  },
  {
    "text": "raw underlying platform in order to give the guest a higher level API that still",
    "start": "1266200",
    "end": "1271400"
  },
  {
    "text": "gives them raw GPU access but in a safe crossplatform way so the the problem with building",
    "start": "1271400",
    "end": "1278840"
  },
  {
    "text": "these layers yourself is you have to do some really hard things like balance checking manually and like okay",
    "start": "1278840",
    "end": "1285279"
  },
  {
    "text": "everybody's written if statement say like if less than one or greater than whatever blah blah blah right but you",
    "start": "1285279",
    "end": "1290400"
  },
  {
    "text": "know getting that right and getting that right across such a massive API footprint and not having security vulnerabilities is actually a",
    "start": "1290400",
    "end": "1295720"
  },
  {
    "text": "challenging problem as as resource ownership validation so you know if anybody in here has done web dev you're",
    "start": "1295720",
    "end": "1301480"
  },
  {
    "text": "probably familiar with cores uh and so likewise in a browser uh the way we keep",
    "start": "1301480",
    "end": "1307720"
  },
  {
    "text": "things safe is uh from content process to GPU process ensuring that only uh",
    "start": "1307720",
    "end": "1315240"
  },
  {
    "text": "resources which is like basically effectively things that are backed by vring can be accessed by the uh origin that",
    "start": "1315240",
    "end": "1321840"
  },
  {
    "text": "owns that data and not let anybody just basically write arbitrary data into vram and take over anything else and this is",
    "start": "1321840",
    "end": "1328760"
  },
  {
    "text": "important concept because like a lot of people think like oh security for graphics maybe that doesn't matter",
    "start": "1328760",
    "end": "1333880"
  },
  {
    "text": "you're just putting pixels on a screen but realistically vram is just like Ram you know you can be running very intense",
    "start": "1333880",
    "end": "1339960"
  },
  {
    "text": "calculations on that and there is you know there potentially data that can be extracted from that that is a security",
    "start": "1339960",
    "end": "1345400"
  },
  {
    "text": "problem so what is the solution to this Wy web GPU uh Mindy sitting back there",
    "start": "1345400",
    "end": "1352200"
  },
  {
    "start": "1346000",
    "end": "1399000"
  },
  {
    "text": "in the back uh put together this awesome library that is now uh the foundation of",
    "start": "1352200",
    "end": "1357760"
  },
  {
    "text": "a level one Wy proposal uh that is Wy web GPU and the idea behind this was to",
    "start": "1357760",
    "end": "1364279"
  },
  {
    "text": "take web IDL convert to wit expose it through the component model and then uh",
    "start": "1364279",
    "end": "1370640"
  },
  {
    "text": "basically on the back end you it effectively could run any uh web GPU",
    "start": "1370640",
    "end": "1375720"
  },
  {
    "text": "back in but uh with this it's through wgpu and so mapping that front end specification which is the component",
    "start": "1375720",
    "end": "1382200"
  },
  {
    "text": "model uh W generated code to wgpu functions on the back end uh this is already a part of firefox's rendering",
    "start": "1382200",
    "end": "1388799"
  },
  {
    "text": "engine and like this solves a lot of those problems we just talked about with running arbitrary content and",
    "start": "1388799",
    "end": "1394760"
  },
  {
    "text": "security so Wy web GPU is the ultimate solution to this and that kind of takes",
    "start": "1394760",
    "end": "1401039"
  },
  {
    "start": "1399000",
    "end": "1457000"
  },
  {
    "text": "me to like is that solve everything does Wy web GPU negate the benefits of",
    "start": "1401039",
    "end": "1406919"
  },
  {
    "text": "Wanderer um and I don't think so uh because wasi web GPU I all that V2 stuff",
    "start": "1406919",
    "end": "1412720"
  },
  {
    "text": "is going to be tooled on top of it hopefully within the next year uh wonder will be a higher level API that",
    "start": "1412720",
    "end": "1417840"
  },
  {
    "text": "effectively lets you write functions that compile down to web GPU uh functions that can then be embedded",
    "start": "1417840",
    "end": "1423799"
  },
  {
    "text": "inside any device but the web GPU is is the how not the why and the why I think you should be able to do drawing in a",
    "start": "1423799",
    "end": "1431440"
  },
  {
    "text": "web assembly app that not hosted in a browser is you should be able to write user interfaces or write 3D Graphics or anything that can run anywhere",
    "start": "1431440",
    "end": "1437960"
  },
  {
    "text": "independent of the platform it should not just be limited to the web you should be able to embed this code inside",
    "start": "1437960",
    "end": "1444159"
  },
  {
    "text": "any device like your UI doesn't necessarily have to be completely attached to the state of the application",
    "start": "1444159",
    "end": "1449320"
  },
  {
    "text": "and if we can keep these apis higher level we can effectively like let people be Graphics programmers without being a",
    "start": "1449320",
    "end": "1454679"
  },
  {
    "text": "web GPU expert yourself uh I don't know why that went",
    "start": "1454679",
    "end": "1460720"
  },
  {
    "start": "1457000",
    "end": "1686000"
  },
  {
    "text": "so fast okay live demo time uh I got this demo working last",
    "start": "1460720",
    "end": "1465919"
  },
  {
    "text": "night so let's go and hope it still is",
    "start": "1465919",
    "end": "1472039"
  },
  {
    "text": "um okay so first things first so I have",
    "start": "1472039",
    "end": "1477120"
  },
  {
    "text": "Wonder here as an opengl based Mac application so uh the",
    "start": "1477120",
    "end": "1484080"
  },
  {
    "text": "code for this is all in GitHub you'll see the link at the end but basically uh we have embedded a web assembly module",
    "start": "1484080",
    "end": "1489919"
  },
  {
    "text": "using Wonder to draw arbitrary data using opengl yeah cool okay so not not very",
    "start": "1489919",
    "end": "1497399"
  },
  {
    "text": "exciting demo but basically like the the quintessential uh hello world uh open G",
    "start": "1497399",
    "end": "1503039"
  },
  {
    "text": "demo there is the spinning red box and we've taken this model of a 3D building that was generated programmatically",
    "start": "1503039",
    "end": "1508799"
  },
  {
    "text": "using wonder and embedded it into that same campus so that's cool uh okay",
    "start": "1508799",
    "end": "1515640"
  },
  {
    "text": "now the real fun starts now I have a Windows app I'm",
    "start": "1515640",
    "end": "1520760"
  },
  {
    "text": "running in a VM um direct X11 based and if my computer does does not",
    "start": "1520760",
    "end": "1528640"
  },
  {
    "text": "call it quits here I don't know what's going on with",
    "start": "1528640",
    "end": "1533720"
  },
  {
    "text": "that well wouldn't be a demo without Windows deciding to do something weird",
    "start": "1539600",
    "end": "1547679"
  },
  {
    "text": "huh oh okay some something happened I don't know if it something good but oh",
    "start": "1548720",
    "end": "1555279"
  },
  {
    "text": "hold up is it rendering off oh there okay it's cuz it's full screen there there we go cool so this is that exact same wasm module uh embedded inside a",
    "start": "1555279",
    "end": "1563440"
  },
  {
    "text": "direct X1 application on Windows running in VM and uh different app different",
    "start": "1563440",
    "end": "1569080"
  },
  {
    "text": "other data but you see the model looks basically the same okay that's",
    "start": "1569080",
    "end": "1576080"
  },
  {
    "text": "interesting what about on the web yeah we can do that too so here let's make that full screen and",
    "start": "1577000",
    "end": "1584760"
  },
  {
    "text": "reload fingers crossed here yeah cool okay there's that same thing backed by web GPU on the web now where this gets",
    "start": "1587240",
    "end": "1593880"
  },
  {
    "text": "interesting is using this whole render system that I'm building here's the source code effectively to generate that",
    "start": "1593880",
    "end": "1599039"
  },
  {
    "text": "data um and so for the sake of time I'm going to say I want to uh do something",
    "start": "1599039",
    "end": "1607039"
  },
  {
    "text": "different and I want to take uh this yaml I want",
    "start": "1607039",
    "end": "1613279"
  },
  {
    "text": "to do some things like all right I don't like the colors I want to change some expression I want to be clear this is not just attributes this is like",
    "start": "1613279",
    "end": "1619279"
  },
  {
    "text": "interesting right like before like I had a static awning height like okay like maybe we want to make this even bigger",
    "start": "1619279",
    "end": "1624520"
  },
  {
    "text": "like cool we want to make this awning at the top of the building like even larger so this is going to basically build a",
    "start": "1624520",
    "end": "1631159"
  },
  {
    "text": "entire geometry pipeline that spits this out and this should have finished",
    "start": "1631159",
    "end": "1636679"
  },
  {
    "text": "already sorry conference Wi-Fi and there we go it looks different because I've changed different code and yeah now see",
    "start": "1636679",
    "end": "1642279"
  },
  {
    "text": "like wow that building's got a huge thing on top of it right cool uh but where the gets even more",
    "start": "1642279",
    "end": "1649840"
  },
  {
    "text": "interesting let's go back over this Windows app now let's see if I can actually yeah",
    "start": "1649840",
    "end": "1656840"
  },
  {
    "text": "there we go whoa that is that new building in that Windows app and see I didn't change any code I didn't",
    "start": "1656840",
    "end": "1662440"
  },
  {
    "text": "recompile anything it was just a web assembly module that's being streamed from the internet effectively is",
    "start": "1662440",
    "end": "1667919"
  },
  {
    "text": "generating this data in real time so yeah it",
    "start": "1667919",
    "end": "1673840"
  },
  {
    "text": "works awesome okay so",
    "start": "1677120",
    "end": "1682279"
  },
  {
    "text": "uh takes us to the end cool and uh yeah so uh links to more",
    "start": "1682279",
    "end": "1690640"
  },
  {
    "start": "1686000",
    "end": "1986000"
  },
  {
    "text": "info including the AMU and and some stuff about uh Wander there if you want to scan the QR code um this is still",
    "start": "1690640",
    "end": "1697600"
  },
  {
    "text": "super early right so this is an open source project uh you know PR is welcome and and wanted we need to support more",
    "start": "1697600",
    "end": "1703840"
  },
  {
    "text": "platforms we need to do more because right now uh the API footprint is very f focused on Geometry but we want to be",
    "start": "1703840",
    "end": "1710799"
  },
  {
    "text": "able to do well even 3D geometry we want to be able to do 2D like if you want to do lines gradients Etc uh we want to be",
    "start": "1710799",
    "end": "1717080"
  },
  {
    "text": "able to do Dynamic Shader compilation we want to be able to put together everything that's part of the entire",
    "start": "1717080",
    "end": "1722720"
  },
  {
    "text": "Graphics pipeline to make it portable um I building a company called render so if you want to talk more about hosting",
    "start": "1722720",
    "end": "1728760"
  },
  {
    "text": "portable Graphics please come find me and I think that's it",
    "start": "1728760",
    "end": "1735399"
  },
  {
    "text": "questions",
    "start": "1737039",
    "end": "1740039"
  },
  {
    "text": "thank you yes so hi hi um you mentioned the",
    "start": "1748000",
    "end": "1757080"
  },
  {
    "text": "um Wy web GPU MH piece can you talk a bit more about what the plan is over the",
    "start": "1757080",
    "end": "1765039"
  },
  {
    "text": "next like for for for the V2 API and what you're actually building as opposed",
    "start": "1765039",
    "end": "1770640"
  },
  {
    "text": "to what's in that level two level one level two web GPU proposal thing that's",
    "start": "1770640",
    "end": "1776080"
  },
  {
    "text": "going through Wy at the moment yes yes that's a that's a very good question so like what is what is",
    "start": "1776080",
    "end": "1781159"
  },
  {
    "text": "the difference between this and what is being built with Wy web GPU I think ultimately uh Wy web GPU functions will",
    "start": "1781159",
    "end": "1788120"
  },
  {
    "text": "be exposed like as web GPU API code into the web assembly guest so if you want to",
    "start": "1788120",
    "end": "1795159"
  },
  {
    "text": "write uh code or you have existing codes that is written against the web GPU API",
    "start": "1795159",
    "end": "1801440"
  },
  {
    "text": "that will work out of the box and that will work in Wander or that will work in any other post as well I think uh the",
    "start": "1801440",
    "end": "1808760"
  },
  {
    "text": "direction to go with something like Wonder is building a higher level rendering framework so you don't necessarily have to write all of that",
    "start": "1808760",
    "end": "1816240"
  },
  {
    "text": "raw web GPU code you can write uh you know you can write a more higher level",
    "start": "1816240",
    "end": "1821519"
  },
  {
    "text": "you can write a higher level API and a higher level abstraction uh that then ultimately can generate code that is",
    "start": "1821519",
    "end": "1827600"
  },
  {
    "text": "then run against the Wy web GPU API so like like like a good example of this would",
    "start": "1827600",
    "end": "1833000"
  },
  {
    "text": "be SVG like like canvas apis for example right like you as an application",
    "start": "1833000",
    "end": "1838799"
  },
  {
    "text": "developer shouldn't have to write all of the code to take a vector and rasterize",
    "start": "1838799",
    "end": "1845720"
  },
  {
    "text": "that yourself there is a platform layer to do that and likewise IU wonderand is like that higher level API that wraps",
    "start": "1845720",
    "end": "1853519"
  },
  {
    "text": "the underlying GPU apis like web GG in that case web GPU in the new case so I",
    "start": "1853519",
    "end": "1859639"
  },
  {
    "text": "does that answer the question yeah yes right",
    "start": "1859639",
    "end": "1865600"
  },
  {
    "text": "there so uh basically if in your case how where is all of the platform based",
    "start": "1866880",
    "end": "1873039"
  },
  {
    "text": "specifically so basically I want to run on Vulcan for example where is DEF where defin and where is compiled where is",
    "start": "1873039",
    "end": "1880639"
  },
  {
    "text": "physically all the shaders and all the platform GPU specific code is is compiled inside the wasm or inside of",
    "start": "1880639",
    "end": "1887600"
  },
  {
    "text": "the cost platform different answer for V1 and V2 so for V1 it is in the host",
    "start": "1887600",
    "end": "1893200"
  },
  {
    "text": "platform and so the host SDK which is which is open source so like I don't support Vulcan if you'd like to",
    "start": "1893200",
    "end": "1898320"
  },
  {
    "text": "contribute Vulcan support I'd appreciate it um uh basically that is that is the drive like you will have the drivers for",
    "start": "1898320",
    "end": "1904559"
  },
  {
    "text": "the different platforms there so that's where we take data in a specific format out of w linear memory copy it and build",
    "start": "1904559",
    "end": "1909919"
  },
  {
    "text": "GPU buffers textures Etc off of that um for Shader code we don't do that yet uh",
    "start": "1909919",
    "end": "1915559"
  },
  {
    "text": "but given the direction this is going right now the shad code would be exposed through web GPU in V2 to the guest so",
    "start": "1915559",
    "end": "1922919"
  },
  {
    "text": "with that the wasm guest could programmatically generate Shader code that then goes over Shader compilation",
    "start": "1922919",
    "end": "1929320"
  },
  {
    "text": "apis which are exposed by web GPU uh from the host into the wasm guest if if",
    "start": "1929320",
    "end": "1936519"
  },
  {
    "text": "it has um if you have a Shader you already want to use you can embed that in the was and",
    "start": "1936519",
    "end": "1942279"
  },
  {
    "text": "payload just as data right uh if you have shaders you already use on the host side like let's say using this like a",
    "start": "1942279",
    "end": "1948399"
  },
  {
    "text": "plugin system like you're a cad application and all your data looks the same and you want to give people an API that like lets them embed third party",
    "start": "1948399",
    "end": "1956720"
  },
  {
    "text": "objects in it but you still want to shade it the same way you can still use the host side Shader too that's fine um",
    "start": "1956720",
    "end": "1963080"
  },
  {
    "text": "so I don't know sorry kind of nuance answer but but but right now the Shader",
    "start": "1963080",
    "end": "1968720"
  },
  {
    "text": "like like like the platform specific code is in the host with V2 through Wy web GPU all that will be exposed to the",
    "start": "1968720",
    "end": "1974880"
  },
  {
    "text": "guest if that's what the guest wants to do oh okay get",
    "start": "1974880",
    "end": "1979840"
  },
  {
    "text": "any more questions awesome thank",
    "start": "1980440",
    "end": "1985799"
  },
  {
    "text": "you",
    "start": "1985799",
    "end": "1988799"
  }
]