[
  {
    "text": "[Music]",
    "start": "0",
    "end": "5040"
  },
  {
    "text": "[Applause]",
    "start": "5040",
    "end": "8200"
  },
  {
    "text": "yeah thanks to Serge for the introduction and it's so great to be back in Barcelona for the second",
    "start": "10200",
    "end": "15719"
  },
  {
    "text": "iteration of wasmo and today I want to talk to all of you about the web",
    "start": "15719",
    "end": "20720"
  },
  {
    "text": "assembly component model to give you a high level overview of what it is why",
    "start": "20720",
    "end": "26279"
  },
  {
    "text": "you should not ignore it and then spark some ideas of what you can build with",
    "start": "26279",
    "end": "31480"
  },
  {
    "text": "the component model as of today so that being said my name is Tolen I work as a cloud Advocate with",
    "start": "31480",
    "end": "39079"
  },
  {
    "text": "firan um if you want to talk to me about the web assembly component model or server side web assembly and a whole",
    "start": "39079",
    "end": "46160"
  },
  {
    "text": "then find me at the booth or shoot me a mail or reach out on X so that being",
    "start": "46160",
    "end": "52719"
  },
  {
    "text": "said let's jump right into the topic so the web assembly component model what is",
    "start": "52719",
    "end": "58640"
  },
  {
    "text": "it if we look at it from a very high point of view um the web assembly",
    "start": "58640",
    "end": "64600"
  },
  {
    "text": "component model is just the addition to core web assembly that addresses some",
    "start": "64600",
    "end": "70680"
  },
  {
    "text": "shortcomings that we have when we work with web assembly modules and it dramatically streamlines how we can",
    "start": "70680",
    "end": "78000"
  },
  {
    "text": "interact with web assemply modules no matter in which language they have been",
    "start": "78000",
    "end": "83640"
  },
  {
    "text": "written in so you can think of it basically as a",
    "start": "83640",
    "end": "89040"
  },
  {
    "text": "proxy or wrapper around your web assembly module and that proxy takes",
    "start": "89040",
    "end": "95360"
  },
  {
    "text": "care of defining a so-called canonical ABI which takes care",
    "start": "95360",
    "end": "101560"
  },
  {
    "text": "of um specifying and standardizing how data is laid out in memory in a unified",
    "start": "101560",
    "end": "109640"
  },
  {
    "text": "way that all languages adopting the component model agree on and this",
    "start": "109640",
    "end": "115439"
  },
  {
    "text": "ultimatives gives us the a richer type system so we can use use strings objects",
    "start": "115439",
    "end": "122079"
  },
  {
    "text": "or you may call them structs uh lists or vectors and it does not matter anymore",
    "start": "122079",
    "end": "128319"
  },
  {
    "text": "how the original language is laying out that structure in memory that's all done",
    "start": "128319",
    "end": "134480"
  },
  {
    "text": "by the component model and it's taking care about the conversion so that we all can agree on a unified interface of",
    "start": "134480",
    "end": "142400"
  },
  {
    "text": "those components So speaking about the interface of components we can use web",
    "start": "142400",
    "end": "151560"
  },
  {
    "text": "ass simply interface type language or short width to Define richer contracts",
    "start": "151560",
    "end": "157959"
  },
  {
    "text": "making use of those types that we can now use to you know communicate between",
    "start": "157959",
    "end": "163920"
  },
  {
    "text": "different components so ultimately ultimately the",
    "start": "163920",
    "end": "169040"
  },
  {
    "text": "web assemply component model simplifies using components WR written",
    "start": "169040",
    "end": "175599"
  },
  {
    "text": "in different languages so we don't have to agree on how now component a laid out",
    "start": "175599",
    "end": "182000"
  },
  {
    "text": "string in memory in contrast to another component written in a different",
    "start": "182000",
    "end": "187680"
  },
  {
    "text": "language so if we for example take a look at the application written in spin",
    "start": "187680",
    "end": "193720"
  },
  {
    "text": "we have the spin runtime you know in the case of building an HTTP API the runtime Imports wasi",
    "start": "193720",
    "end": "202040"
  },
  {
    "text": "HTTP incoming Handler and as every spin app is a web assembly",
    "start": "202040",
    "end": "208200"
  },
  {
    "text": "component it is also able to export capabilities and in the case again of an",
    "start": "208200",
    "end": "213599"
  },
  {
    "text": "HTTP API the spin application component",
    "start": "213599",
    "end": "219000"
  },
  {
    "text": "exports exactly that incoming Handler function but we can take that one step",
    "start": "219000",
    "end": "226319"
  },
  {
    "text": "further right we can add additional Imports to our spin application",
    "start": "226319",
    "end": "232120"
  },
  {
    "text": "component or to our web assembly component and bring in third party or",
    "start": "232120",
    "end": "237760"
  },
  {
    "text": "custom components fulfilling those Imports by providing implementations for",
    "start": "237760",
    "end": "244799"
  },
  {
    "text": "the contract at the end we have language agnostic tooling that we use to compose",
    "start": "244799",
    "end": "252519"
  },
  {
    "text": "both components together into I refer it as an composed web assembly component so",
    "start": "252519",
    "end": "259040"
  },
  {
    "text": "that is ultimative the final application that we are able to",
    "start": "259040",
    "end": "264919"
  },
  {
    "text": "run so having a rough idea of what the component model is I want to um talk to",
    "start": "264919",
    "end": "273360"
  },
  {
    "text": "you why or I want to tell you why you should not ignore it and this morning Chris already did a history lesson right",
    "start": "273360",
    "end": "281240"
  },
  {
    "text": "um but we share one reference so the first mention of components was in 1968 by Douglas",
    "start": "281240",
    "end": "288880"
  },
  {
    "text": "McIlroy and if all of you have been to the session then you know the the details of that but from that point in",
    "start": "288880",
    "end": "295960"
  },
  {
    "text": "time we were undergoing several areas or iteration of specification and",
    "start": "295960",
    "end": "303160"
  },
  {
    "text": "implementations of component stories or component",
    "start": "303160",
    "end": "308240"
  },
  {
    "text": "models so over the years developers gained productivity because they were",
    "start": "308240",
    "end": "314680"
  },
  {
    "text": "able to build apps faster by taking uh existing components and",
    "start": "314680",
    "end": "321000"
  },
  {
    "text": "composing them together to become an application and there were numerous",
    "start": "321000",
    "end": "327520"
  },
  {
    "text": "Technologies being really suc Successful by providing a component story or having",
    "start": "327520",
    "end": "333520"
  },
  {
    "text": "something in place similar to what the web assembly component model offers us",
    "start": "333520",
    "end": "340280"
  },
  {
    "text": "in the world of web assembly so the list of Technologies is really long that came",
    "start": "340280",
    "end": "346479"
  },
  {
    "text": "up with a component story so I choose a few to put on that slide so don't judge",
    "start": "346479",
    "end": "352520"
  },
  {
    "text": "me for that uh back in the '90s you know we were all using Windows desktops I",
    "start": "352520",
    "end": "358160"
  },
  {
    "text": "think Linux for desktop was already a thing there um but basically what",
    "start": "358160",
    "end": "363919"
  },
  {
    "text": "Microsoft came up with was Comm in 19933 and in 1996 it was active X right",
    "start": "363919",
    "end": "371919"
  },
  {
    "text": "active X had that idea of bringing components to different platforms however 90 98% of the",
    "start": "371919",
    "end": "379840"
  },
  {
    "text": "components were only available for the windows platform so couple of years",
    "start": "379840",
    "end": "386319"
  },
  {
    "text": "later um the aspet team took that idea of components and baked it into",
    "start": "386319",
    "end": "392280"
  },
  {
    "text": "something that's called the open web interface for.net or short oen which was",
    "start": "392280",
    "end": "397560"
  },
  {
    "text": "basically a mechanism of plugging in different components um like middlewares",
    "start": "397560",
    "end": "404080"
  },
  {
    "text": "to construct HTTP responses but I bet most of you have",
    "start": "404080",
    "end": "411280"
  },
  {
    "text": "heard of web components taking that idea of composition and components to the",
    "start": "411280",
    "end": "417759"
  },
  {
    "text": "native web so leveraging only native web technologies that allowed frontend",
    "start": "417759",
    "end": "424039"
  },
  {
    "text": "Engineers to compose Rich user interfaces um so you may have heard the",
    "start": "424039",
    "end": "430639"
  },
  {
    "text": "term microfrance which are basically those components we don't care at that point",
    "start": "430639",
    "end": "436680"
  },
  {
    "text": "of view um which single page application framework or which JavaScript framework",
    "start": "436680",
    "end": "443280"
  },
  {
    "text": "was used to craft that particular component they all agree on a Model how",
    "start": "443280",
    "end": "449360"
  },
  {
    "text": "they they can talk to each other and interact with each other so it is kind of impossible to",
    "start": "449360",
    "end": "458000"
  },
  {
    "text": "talk about components and not showing some components",
    "start": "458000",
    "end": "463159"
  },
  {
    "text": "right so let's start in the '90s we had Rich user controls and components that",
    "start": "463159",
    "end": "469800"
  },
  {
    "text": "made us able to build shiny uis but it",
    "start": "469800",
    "end": "475280"
  },
  {
    "text": "the idea of components is not limited to UI components right we were able to take",
    "start": "475280",
    "end": "482280"
  },
  {
    "text": "logical components and extend the capabilities of applications and if you look at that",
    "start": "482280",
    "end": "488639"
  },
  {
    "text": "diagram that's again uh illustrating how asp.net worked once they got o uh once",
    "start": "488639",
    "end": "496759"
  },
  {
    "text": "they shipped Owen so we could bring in components or middlewares written by Third parties Maybe by",
    "start": "496759",
    "end": "505080"
  },
  {
    "text": "component vendors and compose our a HTTP",
    "start": "505080",
    "end": "510400"
  },
  {
    "text": "apis to react on certain things when they look at HTTP requests hitting the",
    "start": "510400",
    "end": "519760"
  },
  {
    "text": "server okay so that's all about history so let's talk about the present right so",
    "start": "519760",
    "end": "526920"
  },
  {
    "text": "I think we all agree that web assembly itself makes apps portable AC across",
    "start": "526920",
    "end": "534160"
  },
  {
    "text": "platforms and architectures right so I really want to emphasize that",
    "start": "534160",
    "end": "539839"
  },
  {
    "text": "the web assembly component model takes that portability to a whole new level so",
    "start": "539839",
    "end": "545640"
  },
  {
    "text": "with the by adopting the component model we were able to make components portable",
    "start": "545640",
    "end": "552360"
  },
  {
    "text": "across programming languages without caring about the nitty-gritty details in",
    "start": "552360",
    "end": "558399"
  },
  {
    "text": "terms of how things are laid out in memory when one is using rust and the",
    "start": "558399",
    "end": "563440"
  },
  {
    "text": "other one is using noj to build components all right so that being said",
    "start": "563440",
    "end": "572000"
  },
  {
    "text": "let's have a look at what you can build with the component model as of today before we dive into the",
    "start": "572000",
    "end": "578360"
  },
  {
    "text": "demos um we want to quickly um rush through tooling so I looked at the",
    "start": "578360",
    "end": "585360"
  },
  {
    "text": "tooling space and I try to distinguish uh the tooling space in two different",
    "start": "585360",
    "end": "591240"
  },
  {
    "text": "ways so first we need language specific tooling so that's the tooling that helps",
    "start": "591240",
    "end": "596959"
  },
  {
    "text": "us as developers you know going from our source code to web assembly and then",
    "start": "596959",
    "end": "602360"
  },
  {
    "text": "wrapping that into a component um in order to make it usable or consumable by",
    "start": "602360",
    "end": "610519"
  },
  {
    "text": "other components and we have like for python there's componentized Pi for",
    "start": "610519",
    "end": "615680"
  },
  {
    "text": "JavaScript we have for example jco and componentized JS and in Rust when when",
    "start": "615680",
    "end": "621480"
  },
  {
    "text": "you're building web assembly components with rust you can use cargo component to",
    "start": "621480",
    "end": "627000"
  },
  {
    "text": "compile your rust code to web assembly and then package it as a web assembly",
    "start": "627000",
    "end": "635120"
  },
  {
    "text": "component so at some point we end up with a web assembly component",
    "start": "635120",
    "end": "641320"
  },
  {
    "text": "right so we need some kind of language agnostic tooling to poke around with web",
    "start": "641320",
    "end": "647600"
  },
  {
    "text": "assembly components and there's for example wasm tools uh we give which give",
    "start": "647600",
    "end": "653200"
  },
  {
    "text": "us the capability of composing richer applications by you",
    "start": "653200",
    "end": "659480"
  },
  {
    "text": "know merging together different components um and forming an",
    "start": "659480",
    "end": "665600"
  },
  {
    "text": "application we can also use for example the wasm tools component with command to",
    "start": "665600",
    "end": "671880"
  },
  {
    "text": "inspect which particular contract a certain component actually",
    "start": "671880",
    "end": "679040"
  },
  {
    "text": "implements but besides Wim tools there's also web ass simply composition or short",
    "start": "679040",
    "end": "685000"
  },
  {
    "text": "whack uh which is another CLI that not just takes care of about composing um",
    "start": "685000",
    "end": "691240"
  },
  {
    "text": "applications from multiple components it also provide a domain specific language",
    "start": "691240",
    "end": "696600"
  },
  {
    "text": "that you can use to specify the composition in a declarative way um and",
    "start": "696600",
    "end": "704000"
  },
  {
    "text": "and approach it of yeah in a different manner right so there is an ongoing",
    "start": "704000",
    "end": "709720"
  },
  {
    "text": "discussion about if and how wack would be in could be integrated into wasm",
    "start": "709720",
    "end": "716440"
  },
  {
    "text": "tools so if you're interested in that one you should definitely um take a look",
    "start": "716440",
    "end": "721560"
  },
  {
    "text": "at that GitHub issue mentioned over here all right so I think that's most of the",
    "start": "721560",
    "end": "730600"
  },
  {
    "text": "slides let's move into uh two sample applications so first we were looking at",
    "start": "730800",
    "end": "737360"
  },
  {
    "text": "a host application that one is written in Rust and the idea of that application",
    "start": "737360",
    "end": "743199"
  },
  {
    "text": "is to trans to take a user input and apply some transformations to it however",
    "start": "743199",
    "end": "750399"
  },
  {
    "text": "um the developer decided not to place the transformations in the host",
    "start": "750399",
    "end": "756240"
  },
  {
    "text": "application itself instead he came or she came up with an extensibility world",
    "start": "756240",
    "end": "764800"
  },
  {
    "text": "so this is a wit contract right importing a transform function that",
    "start": "764800",
    "end": "769920"
  },
  {
    "text": "takes an input as string does some Computing and returns back a string",
    "start": "769920",
    "end": "775720"
  },
  {
    "text": "again so then with that in place we can come up with plugins using the web",
    "start": "775720",
    "end": "783320"
  },
  {
    "text": "assembly component model implemented in different languages all we have to do is all of",
    "start": "783320",
    "end": "790240"
  },
  {
    "text": "those components have to implement the plug-in World which exports exactly that",
    "start": "790240",
    "end": "798040"
  },
  {
    "text": "function that the host is importing so ultimatives the host can",
    "start": "798040",
    "end": "805399"
  },
  {
    "text": "load load all the web assembly components iterate through them you know",
    "start": "805399",
    "end": "811800"
  },
  {
    "text": "put them in a chain and call the transform method after uh one after",
    "start": "811800",
    "end": "818760"
  },
  {
    "text": "another okay so let's have a look at that one and you know to um let me",
    "start": "818760",
    "end": "825279"
  },
  {
    "text": "quickly bring up this code over here to emphasize which language we're looking at so first we start with rust right so",
    "start": "825279",
    "end": "832519"
  },
  {
    "text": "let's write the host application let's have a look at the host application all right so this is a",
    "start": "832519",
    "end": "840920"
  },
  {
    "text": "regular rust a binary crate um and it has a dependency to wasn't time with the",
    "start": "840920",
    "end": "847959"
  },
  {
    "text": "component model feature activated right um we have the",
    "start": "847959",
    "end": "853199"
  },
  {
    "text": "world of extensibility over here importing the transform",
    "start": "853199",
    "end": "858959"
  },
  {
    "text": "function from implementation point of view wasn't time with the component model feature makes it pretty",
    "start": "858959",
    "end": "866519"
  },
  {
    "text": "straightforward to iterate over plugins we will load them from a from a folder",
    "start": "866519",
    "end": "871720"
  },
  {
    "text": "on my disk right so we iterate over all those files",
    "start": "871720",
    "end": "877240"
  },
  {
    "text": "we create a component from every file we instantiate the component over here we",
    "start": "877240",
    "end": "884720"
  },
  {
    "text": "check if the component actually provides that transform function and if",
    "start": "884720",
    "end": "891839"
  },
  {
    "text": "so we invoke that function over here",
    "start": "891839",
    "end": "896959"
  },
  {
    "text": "finally when the web assembly comp component returns back the result we",
    "start": "896959",
    "end": "902639"
  },
  {
    "text": "take the result and hand it over to the next component in",
    "start": "902639",
    "end": "907800"
  },
  {
    "text": "line all right so speaking about plugins um we will look at two plugins",
    "start": "907800",
    "end": "915480"
  },
  {
    "text": "so now let me do the plug-in developer was also uh using rust so um I was using",
    "start": "915480",
    "end": "923800"
  },
  {
    "text": "cargo component tooling to create a new rust crate a library crate in that case",
    "start": "923800",
    "end": "931240"
  },
  {
    "text": "which gave me you know uh some dependencies preconfigured in my",
    "start": "931240",
    "end": "936319"
  },
  {
    "text": "manifest and also provide some package specification over",
    "start": "936319",
    "end": "941560"
  },
  {
    "text": "there from a contract point of view I grabbed that plug-in world and I just",
    "start": "941560",
    "end": "950040"
  },
  {
    "text": "implemented the transform function so implementing the transform function is",
    "start": "950040",
    "end": "956800"
  },
  {
    "text": "pretty straightforward right we have a component struct over here and we",
    "start": "956800",
    "end": "962120"
  },
  {
    "text": "implement the guest trade and the guest trade is basically taking the input as a",
    "start": "962120",
    "end": "968000"
  },
  {
    "text": "string applying the two uppercase method over here and implicitly returning the",
    "start": "968000",
    "end": "973759"
  },
  {
    "text": "result back as string so we can use Rich types when",
    "start": "973759",
    "end": "979120"
  },
  {
    "text": "implementing uh contracts and you know packaging our modules using the web",
    "start": "979120",
    "end": "985279"
  },
  {
    "text": "assembly component model all right so oh I need that in a",
    "start": "985279",
    "end": "991000"
  },
  {
    "text": "second let's have a look at a different one um so green some people may guess",
    "start": "991000",
    "end": "997720"
  },
  {
    "text": "green is the color of not JS so let's have a look at the reverse",
    "start": "997720",
    "end": "1002880"
  },
  {
    "text": "plugin so I'm now impersonating into a JavaScript developer and I'm used to the",
    "start": "1002880",
    "end": "1008279"
  },
  {
    "text": "acur system uh that JavaScript provides however reversing a string does not need",
    "start": "1008279",
    "end": "1015120"
  },
  {
    "text": "any kind of npm module hopefully right um um so what I",
    "start": "1015120",
    "end": "1021639"
  },
  {
    "text": "got I got again the world the plug-in world that I have to",
    "start": "1021639",
    "end": "1027880"
  },
  {
    "text": "implement and then from that point I would just write no Jaz or JavaScript as",
    "start": "1027880",
    "end": "1033760"
  },
  {
    "text": "I would normally do it so I check if the input is true fre so in the case of null",
    "start": "1033760",
    "end": "1039000"
  },
  {
    "text": "I just or an empty string I simply return it back if there is if the value is truthy then I split it reverse it",
    "start": "1039000",
    "end": "1047280"
  },
  {
    "text": "join it and I return back the result however for JavaScript we will",
    "start": "1047280",
    "end": "1055679"
  },
  {
    "text": "have a look at oops not to read me sorry we will have a look at what happens at",
    "start": "1055679",
    "end": "1061080"
  },
  {
    "text": "build time so first in line seven over here we use language specific tooling to",
    "start": "1061080",
    "end": "1068559"
  },
  {
    "text": "take our source control compile it to web ass simply and package it again as",
    "start": "1068559",
    "end": "1075440"
  },
  {
    "text": "web assembly component I then use um language agnostic tooling to you know",
    "start": "1075440",
    "end": "1081760"
  },
  {
    "text": "shrink that component a little bit um but that's you know language dependent",
    "start": "1081760",
    "end": "1086799"
  },
  {
    "text": "in that case because JavaScript components or modules try to um yeah they are a little bit bigger because we",
    "start": "1086799",
    "end": "1092480"
  },
  {
    "text": "have to ship uh a more than just our uh Javascript",
    "start": "1092480",
    "end": "1097600"
  },
  {
    "text": "file all right so let's have a look at that in action so and I have to take off",
    "start": "1097600",
    "end": "1103960"
  },
  {
    "text": "the head again um all right so on the left hand side let's do a make",
    "start": "1103960",
    "end": "1111440"
  },
  {
    "text": "run so this starts the host and you know the the task is to",
    "start": "1111440",
    "end": "1117960"
  },
  {
    "text": "transform the input so let's provide an input and as you can see hey I did not",
    "start": "1117960",
    "end": "1125240"
  },
  {
    "text": "found any Transformers so I'm returning the string as is right so on the right",
    "start": "1125240",
    "end": "1131720"
  },
  {
    "text": "hand side let's now use a make build all plugins that iterates over all the",
    "start": "1131720",
    "end": "1137320"
  },
  {
    "text": "plugins creates web assembly components from the",
    "start": "1137320",
    "end": "1142559"
  },
  {
    "text": "source and then I can you know activate plugins activating plugins is as simple",
    "start": "1142559",
    "end": "1149799"
  },
  {
    "text": "as copying the desired plugin into the active",
    "start": "1149799",
    "end": "1155640"
  },
  {
    "text": "folder moving back to the host application and again transforming",
    "start": "1155640",
    "end": "1162080"
  },
  {
    "text": "Fu and we get back in O okay now let's",
    "start": "1162080",
    "end": "1167280"
  },
  {
    "text": "take another Plugin or component copy that over and again let's",
    "start": "1167280",
    "end": "1174880"
  },
  {
    "text": "invoke that one and finally we get back at Big oof right cool so that demo",
    "start": "1174880",
    "end": "1181679"
  },
  {
    "text": "basically illustrates how you could build components to roll or use web",
    "start": "1181679",
    "end": "1187919"
  },
  {
    "text": "assembly component model to roll your own extensibility story and load those",
    "start": "1187919",
    "end": "1194360"
  },
  {
    "text": "components dynamically at runtime all right so let's go back to",
    "start": "1194360",
    "end": "1200919"
  },
  {
    "text": "the slides because I want to show another demo where we were looking at a",
    "start": "1200919",
    "end": "1207679"
  },
  {
    "text": "slightly different scenario so consider having two apps right there's the Acme",
    "start": "1207679",
    "end": "1214039"
  },
  {
    "text": "service so that's an HTTP API or a product providing thirdparty",
    "start": "1214039",
    "end": "1220400"
  },
  {
    "text": "Integrations via web hooks so third parties can register and express their",
    "start": "1220400",
    "end": "1226760"
  },
  {
    "text": "intent in being informed if interesting or when interesting things happen in",
    "start": "1226760",
    "end": "1231919"
  },
  {
    "text": "Acme so as you can see Wonker is a python service that gets notified every",
    "start": "1231919",
    "end": "1238200"
  },
  {
    "text": "time something interesting happen happened in Acme at some point in time uh Folks at",
    "start": "1238200",
    "end": "1246159"
  },
  {
    "text": "Acme decided hey you know what we want to be a little bit smarter so we want to",
    "start": "1246159",
    "end": "1252679"
  },
  {
    "text": "sign every outgoing payload with a customer specificy key data or key",
    "start": "1252679",
    "end": "1259640"
  },
  {
    "text": "material right so that the consumer or the customer is able to verify Integrity",
    "start": "1259640",
    "end": "1266320"
  },
  {
    "text": "of the payload sent or received from Acme so taking that requirement and",
    "start": "1266320",
    "end": "1273799"
  },
  {
    "text": "coming up with the corresponding WID contracts is fairly simple right so at Acme they have somehow to to sign",
    "start": "1273799",
    "end": "1282559"
  },
  {
    "text": "arbitary payloads on the flip side every consumer of a web hook must somehow be",
    "start": "1282559",
    "end": "1291120"
  },
  {
    "text": "able to verify the Integrity of a payload to ensure he or she is not",
    "start": "1291120",
    "end": "1298480"
  },
  {
    "text": "facing a man in the middle attack for example so where someone modifies data",
    "start": "1298480",
    "end": "1303760"
  },
  {
    "text": "while data is in transit all right but you know product",
    "start": "1303760",
    "end": "1309279"
  },
  {
    "text": "managers at Acme were a little bit smarter they said hey instead of just",
    "start": "1309279",
    "end": "1314600"
  },
  {
    "text": "coming up with the wit words we buil a single component and yeah we Implement",
    "start": "1314600",
    "end": "1321559"
  },
  {
    "text": "that one in Rust but with that we can you you know we can hand over the WID",
    "start": "1321559",
    "end": "1328000"
  },
  {
    "text": "contract and the implementation to all our web hook consumers so no one has to",
    "start": "1328000",
    "end": "1336000"
  },
  {
    "text": "implement hmax signature verification on their own because we provide a default",
    "start": "1336000",
    "end": "1344240"
  },
  {
    "text": "implementation all right so let's jump back to uh the",
    "start": "1344240",
    "end": "1349720"
  },
  {
    "text": "demo and let me think yeah we start again with rust all righty um that's",
    "start": "1349720",
    "end": "1358640"
  },
  {
    "text": "this and let me hit play over here so now we can have a look at the hmac",
    "start": "1358640",
    "end": "1366400"
  },
  {
    "text": "component you know that thing in the bottom at bottom of the slides first so we Define a world the world of",
    "start": "1366400",
    "end": "1374760"
  },
  {
    "text": "signing and in the realm of signing we have both cap abilities so we we have to",
    "start": "1374760",
    "end": "1380320"
  },
  {
    "text": "sign and we have to verify functionality that we export so our component",
    "start": "1380320",
    "end": "1386120"
  },
  {
    "text": "implements that and exposes that functionality to the OU",
    "start": "1386120",
    "end": "1392120"
  },
  {
    "text": "world we obviously have to instruct our programming language in that case rust",
    "start": "1392120",
    "end": "1398600"
  },
  {
    "text": "so we update uh the cargo CHL and provide some fundamental metadata about",
    "start": "1398600",
    "end": "1404080"
  },
  {
    "text": "the package itself from implementation point of view it is again the same right we have that",
    "start": "1404080",
    "end": "1411880"
  },
  {
    "text": "struct that simply has to fulfill that contract and we do so by implementing",
    "start": "1411880",
    "end": "1418159"
  },
  {
    "text": "both trades so we have the um the sign",
    "start": "1418159",
    "end": "1423320"
  },
  {
    "text": "trade which we use to sign a payload and we have",
    "start": "1423320",
    "end": "1429120"
  },
  {
    "text": "verification uh trade that we use to verify the Integrity of uh of of",
    "start": "1429120",
    "end": "1436320"
  },
  {
    "text": "bytes all right um speaking about how to build that application again we use uh",
    "start": "1436320",
    "end": "1443960"
  },
  {
    "text": "language specific tooling over here to take that source code and come up with a",
    "start": "1443960",
    "end": "1449960"
  },
  {
    "text": "web assembly component all right now",
    "start": "1449960",
    "end": "1455880"
  },
  {
    "text": "let's flip the head again now let me act as the application developer at AC me so",
    "start": "1455880",
    "end": "1462919"
  },
  {
    "text": "again um we also use rust so we uh build our web uh web assly applications using",
    "start": "1462919",
    "end": "1469640"
  },
  {
    "text": "spin basically our um our product exposes HTTP apis so for example there's",
    "start": "1469640",
    "end": "1476679"
  },
  {
    "text": "a registration endpoint which thirdparty uh application providers can invoke and",
    "start": "1476679",
    "end": "1484520"
  },
  {
    "text": "express their intent on being called if something happens right upon",
    "start": "1484520",
    "end": "1489559"
  },
  {
    "text": "registration we Generate random key material and send that back to the colie",
    "start": "1489559",
    "end": "1495840"
  },
  {
    "text": "so that that particular entity could St that key material in their data storage",
    "start": "1495840",
    "end": "1501679"
  },
  {
    "text": "of choice and use that from that point in time to veryify Integrity of the",
    "start": "1501679",
    "end": "1507480"
  },
  {
    "text": "payloads they receive from us on top of that there is that fire end point that",
    "start": "1507480",
    "end": "1513600"
  },
  {
    "text": "we will invoke in a couple of seconds right to simulate something interesting",
    "start": "1513600",
    "end": "1518640"
  },
  {
    "text": "happening in our application so again this component the",
    "start": "1518640",
    "end": "1524840"
  },
  {
    "text": "Acy service i i as the developer of the Acy service I'm only interested in",
    "start": "1524840",
    "end": "1530520"
  },
  {
    "text": "signing payloads I don't care at this point in time of verifying the the",
    "start": "1530520",
    "end": "1536200"
  },
  {
    "text": "Integrity right so I import the sign capability from the hemac component",
    "start": "1536200",
    "end": "1543440"
  },
  {
    "text": "obviously I have to tell where um where tooling could find the hemac",
    "start": "1543440",
    "end": "1552880"
  },
  {
    "text": "world and from there when something interesting happens",
    "start": "1552880",
    "end": "1558000"
  },
  {
    "text": "I come up with a payload and then I simply call the sign",
    "start": "1558000",
    "end": "1565159"
  },
  {
    "text": "function and from that point in time you know we send the TX or the signature for",
    "start": "1565159",
    "end": "1570600"
  },
  {
    "text": "that payload along with the payload as an HTTP header to the",
    "start": "1570600",
    "end": "1576640"
  },
  {
    "text": "Callie this time the build instructions are a little bit more interesting right because we have the hmac component is",
    "start": "1576640",
    "end": "1584120"
  },
  {
    "text": "already built so we have that so we use cargo component build to build our spin",
    "start": "1584120",
    "end": "1591960"
  },
  {
    "text": "application and then we use language agnostic tooling to compose the final",
    "start": "1591960",
    "end": "1597679"
  },
  {
    "text": "application by merging together the hmac component and the application",
    "start": "1597679",
    "end": "1605080"
  },
  {
    "text": "component all right um that said I have to switch",
    "start": "1605080",
    "end": "1610200"
  },
  {
    "text": "heads so there's a blue one now let's have a look at",
    "start": "1610200",
    "end": "1615720"
  },
  {
    "text": "Wonka right so at Wonka we we are used to uh do everything with python right",
    "start": "1615720",
    "end": "1622240"
  },
  {
    "text": "and at some point Folks at a me gave us this great WID file uh which acts as a",
    "start": "1622240",
    "end": "1629360"
  },
  {
    "text": "contract for us to how we can verify data Integrity along with that WID file",
    "start": "1629360",
    "end": "1636960"
  },
  {
    "text": "we also got a web a WM file which used to be a web assembly",
    "start": "1636960",
    "end": "1642360"
  },
  {
    "text": "component so we took that WID file throw that in our project",
    "start": "1642360",
    "end": "1648840"
  },
  {
    "text": "then we import the verify function and upon receiving a web",
    "start": "1648840",
    "end": "1656640"
  },
  {
    "text": "hook we look at the signature so we take the tag of that um of the so we take the",
    "start": "1656640",
    "end": "1664320"
  },
  {
    "text": "tag from the HTTP request so with the given header then we go to our data store we",
    "start": "1664320",
    "end": "1671799"
  },
  {
    "text": "grab the key material that we received upon registration at",
    "start": "1671799",
    "end": "1677120"
  },
  {
    "text": "Acme and finally we invoke the verify method if the payload is valid then we return",
    "start": "1677120",
    "end": "1685720"
  },
  {
    "text": "an hddp 200 if the payload has been modified in transit we return a",
    "start": "1685720",
    "end": "1693039"
  },
  {
    "text": "400 again let's have a final look at what happens at build time so we use again language specific tooling",
    "start": "1693039",
    "end": "1700640"
  },
  {
    "text": "component High Pi um to come up with a web assembly component from our source",
    "start": "1700640",
    "end": "1707399"
  },
  {
    "text": "and then we compose together the hmac component and the application component",
    "start": "1707399",
    "end": "1713919"
  },
  {
    "text": "to form the final application all right so now I have switched enough heads so let's move to",
    "start": "1713919",
    "end": "1721240"
  },
  {
    "text": "the terminal one more time so on the upper left side let's do a make start no",
    "start": "1721240",
    "end": "1727320"
  },
  {
    "text": "start Acme Acme service is running on 3,000 right in the bottom area let's do a make",
    "start": "1727320",
    "end": "1735000"
  },
  {
    "text": "start wonka wonka is now running on 3002 so we're using the upper right",
    "start": "1735000",
    "end": "1742960"
  },
  {
    "text": "terminal to make regista Wonka which basically calls in to act me says Hey",
    "start": "1742960",
    "end": "1749120"
  },
  {
    "text": "Wonka runs on 3002 and is interested interested in certain events okay let's",
    "start": "1749120",
    "end": "1755679"
  },
  {
    "text": "fire this thing and as you can see at the bottom of the screen Wonka at some",
    "start": "1755679",
    "end": "1761200"
  },
  {
    "text": "point received random key material right and we Al the team at Wonka decided to",
    "start": "1761200",
    "end": "1768279"
  },
  {
    "text": "store that key material in their data storage of choice so what happens when a web hook",
    "start": "1768279",
    "end": "1776080"
  },
  {
    "text": "fires so let's clean this thing up and let's make a fire web hook so right now",
    "start": "1776080",
    "end": "1781600"
  },
  {
    "text": "we are hitting that fire end point at Acme on Local Host 3000 right that",
    "start": "1781600",
    "end": "1788720"
  },
  {
    "text": "iterates over all the registration pulls key material for that and then invokes",
    "start": "1788720",
    "end": "1796559"
  },
  {
    "text": "that provided http the end point and as you can see at the bottom of the screen",
    "start": "1796559",
    "end": "1802480"
  },
  {
    "text": "in Wonka we take the tag we take the random key material we verify integrity",
    "start": "1802480",
    "end": "1808240"
  },
  {
    "text": "and ultimatives return HTP 200 and with",
    "start": "1808240",
    "end": "1813960"
  },
  {
    "text": "that let's quickly jump back there are two more slides so there are some key takeaways",
    "start": "1813960",
    "end": "1821159"
  },
  {
    "text": "that I hope all of you got from that talk that's basically web assembly components are self-contained and they",
    "start": "1821159",
    "end": "1828200"
  },
  {
    "text": "allow interaction or using or composing um apps by agreeing on Rich",
    "start": "1828200",
    "end": "1835760"
  },
  {
    "text": "contracts that are defined in width so we saw in the extensibility",
    "start": "1835760",
    "end": "1841399"
  },
  {
    "text": "example we saw that we can dynamically load components at",
    "start": "1841399",
    "end": "1846480"
  },
  {
    "text": "runtime and in the second example we had a look we took a look at how we can",
    "start": "1846480",
    "end": "1852360"
  },
  {
    "text": "compose bigger applications using components no matter of which language",
    "start": "1852360",
    "end": "1857720"
  },
  {
    "text": "we are we used to write them and the component model takes care about you",
    "start": "1857720",
    "end": "1863360"
  },
  {
    "text": "know translating how data is laid out in memory with that there's only one more",
    "start": "1863360",
    "end": "1869480"
  },
  {
    "text": "thing if you want to dive deeper on the component model then I highly recommend",
    "start": "1869480",
    "end": "1874760"
  },
  {
    "text": "Ryan's talk happening tomorrow at 12:40 so where he guides you through",
    "start": "1874760",
    "end": "1879880"
  },
  {
    "text": "deconstructing web assembly components and with that there's the link for the",
    "start": "1879880",
    "end": "1885080"
  },
  {
    "text": "sample thanks for your attention and enjoy rest of was [Applause]",
    "start": "1885080",
    "end": "1898880"
  },
  {
    "text": "Mayo [Laughter]",
    "start": "1898880",
    "end": "1904250"
  },
  {
    "text": "questions questions no questions anyways if there are questions ah there is a question yes do we have a",
    "start": "1904960",
    "end": "1913159"
  },
  {
    "text": "mic yeah that was great thanks uh I now vaguely understand what's going on",
    "start": "1915279",
    "end": "1920840"
  },
  {
    "text": "um I great this kind of encapsulation of uh components into like reasonable",
    "start": "1920840",
    "end": "1925880"
  },
  {
    "text": "things that you could then have across different Services consuming is there kind of a best practice that you",
    "start": "1925880",
    "end": "1931039"
  },
  {
    "text": "recommend around some sort of like component registry or like centralized storage of these these",
    "start": "1931039",
    "end": "1936720"
  },
  {
    "text": "components oh yeah um the let's let's phrase it that way um there is room for",
    "start": "1936720",
    "end": "1942919"
  },
  {
    "text": "improvement when it comes to the DX in order to make things discoverable",
    "start": "1942919",
    "end": "1948639"
  },
  {
    "text": "right I mean that there's ongoing work in bite code Alliance and in the throughout the entire community of how",
    "start": "1948639",
    "end": "1955120"
  },
  {
    "text": "we can up with a story to smooth you know that experience of com of",
    "start": "1955120",
    "end": "1960440"
  },
  {
    "text": "developers you know recognizing the web assembly component model and being able",
    "start": "1960440",
    "end": "1965799"
  },
  {
    "text": "for example to discover like you said components or with contracts maybe from",
    "start": "1965799",
    "end": "1971559"
  },
  {
    "text": "at at a at a central place so yeah there are ideas there are let's say say",
    "start": "1971559",
    "end": "1978080"
  },
  {
    "text": "prototypes there is work for example so there are already ideas but there's",
    "start": "1978080",
    "end": "1984279"
  },
  {
    "text": "definitely room for improvement when it comes to discoverability yes more questions over there over",
    "start": "1984279",
    "end": "1994039"
  },
  {
    "text": "here other [Laughter] side ah okay",
    "start": "1994039",
    "end": "2000559"
  },
  {
    "text": "sorry so what I found uh when playing around a bit with the generated bindings",
    "start": "2000559",
    "end": "2006760"
  },
  {
    "text": "is that bindings often end up being quite unidiomatic to use in the target",
    "start": "2006760",
    "end": "2012039"
  },
  {
    "text": "language so do you expect uh that rapper libraries that rep the autogenerated",
    "start": "2012039",
    "end": "2019519"
  },
  {
    "text": "bindings will be common well so so if I understood your question or your your",
    "start": "2019519",
    "end": "2028039"
  },
  {
    "text": "um sentence correctly then you found the generated bindings being not that idiom",
    "start": "2028039",
    "end": "2033639"
  },
  {
    "text": "depending on the not idiomatic for target language because you know you",
    "start": "2033639",
    "end": "2038840"
  },
  {
    "text": "write your uh definitions functions and types coming from the language where you",
    "start": "2038840",
    "end": "2045120"
  },
  {
    "text": "implemented often like rust uh bindings will look quite different typings will",
    "start": "2045120",
    "end": "2050560"
  },
  {
    "text": "look quite different from python for example how do you express uh some types",
    "start": "2050560",
    "end": "2056200"
  },
  {
    "text": "enum rust enums in Python and so on so what I found is that it often ends up",
    "start": "2056200",
    "end": "2061919"
  },
  {
    "text": "feeling very unnatural for the language which would be solvable by writing a",
    "start": "2061919",
    "end": "2067440"
  },
  {
    "text": "repli Library around the autogenerated bindings um but I'm just curious about your",
    "start": "2067440",
    "end": "2074240"
  },
  {
    "text": "thoughts there yeah I mean that that's a good point as so you know obviously we have to agree on um on a on contract on",
    "start": "2074240",
    "end": "2083440"
  },
  {
    "text": "or an set on capabilities that are that we could use in as many languages as",
    "start": "2083440",
    "end": "2089919"
  },
  {
    "text": "possible um although this may not be the idiomatic way how you would treat or build an API in that particular language",
    "start": "2089919",
    "end": "2097160"
  },
  {
    "text": "I think that's an opportunity for maybe the community to bring you know",
    "start": "2097160",
    "end": "2102560"
  },
  {
    "text": "additional let's say glue code to um take or maybe make those um make the",
    "start": "2102560",
    "end": "2110160"
  },
  {
    "text": "generated code be more idiomatic in a way of hey this feels like python code",
    "start": "2110160",
    "end": "2117079"
  },
  {
    "text": "I'm used to use it in a particular way but so far I mean obviously uh it's all",
    "start": "2117079",
    "end": "2123240"
  },
  {
    "text": "you know moving targets and um yeah it is what it is as of today uh because we",
    "start": "2123240",
    "end": "2129520"
  },
  {
    "text": "have to agree on a certain level of complexity and um to integrate or to to",
    "start": "2129520",
    "end": "2135000"
  },
  {
    "text": "come up with bindings um that work on either",
    "start": "2135000",
    "end": "2140119"
  },
  {
    "text": "side more questions I think there was one over there I have a closely related question actually um the syntax in Rust",
    "start": "2140119",
    "end": "2147920"
  },
  {
    "text": "is very beautiful but what about like more mundane stuff like C++ how do you see that when is it coming and what's",
    "start": "2147920",
    "end": "2154520"
  },
  {
    "text": "the what's the state of affairs oh um so that's a great question but to be honest",
    "start": "2154520",
    "end": "2159560"
  },
  {
    "text": "I don't know I haven't touched C++ guess question for everyone yeah but but I think till has a take on that",
    "start": "2159560",
    "end": "2166520"
  },
  {
    "text": "one it's",
    "start": "2166520",
    "end": "2169760"
  },
  {
    "text": "coming so in C exists C++ will come soon that's right that's right thank you all",
    "start": "2172280",
    "end": "2181760"
  },
  {
    "text": "right okay uh yeah sorry",
    "start": "2181760",
    "end": "2188920"
  },
  {
    "text": "sorry I I thought there would be next speaker already laning up that's why I pulled the uh pulled the",
    "start": "2188920",
    "end": "2195800"
  },
  {
    "text": "HDMI um so yeah the code for both examples is on GitHub um so you can find",
    "start": "2195800",
    "end": "2202280"
  },
  {
    "text": "it over there all right you're",
    "start": "2202280",
    "end": "2208640"
  },
  {
    "text": "welcome so thank you once again and enjoy rest of",
    "start": "2208640",
    "end": "2214200"
  },
  {
    "text": "conference",
    "start": "2214200",
    "end": "2217200"
  }
]