[
  {
    "start": "0",
    "end": "122000"
  },
  {
    "text": "[Music]",
    "start": "0",
    "end": "5040"
  },
  {
    "text": "[Applause]",
    "start": "5040",
    "end": "8200"
  },
  {
    "text": "okay so welcome everybody um today we're going to be talking about web assembly",
    "start": "10320",
    "end": "15360"
  },
  {
    "text": "components um this is not the first components talk uh of the day um and",
    "start": "15360",
    "end": "20840"
  },
  {
    "text": "hopefully this will give you kind of a more lower level kind of intimate understanding of what components uh are",
    "start": "20840",
    "end": "27800"
  },
  {
    "text": "but before we begin real quick a little bit about who I am um I'm Ryan levik I'm",
    "start": "27800",
    "end": "32960"
  },
  {
    "text": "an engineer at firon um the best place to find me is on the B code Alliance zulip I have kind of completely",
    "start": "32960",
    "end": "39160"
  },
  {
    "text": "abandoned the Social Web um so find me there um why are we here though what do",
    "start": "39160",
    "end": "46280"
  },
  {
    "text": "we want to actually talk about well my main goal for today is to give you a little bit of confidence um to come away",
    "start": "46280",
    "end": "52399"
  },
  {
    "text": "from this talk feeling like you're not completely lost if you've seen some of our other uh talks about components",
    "start": "52399",
    "end": "57920"
  },
  {
    "text": "depending on how deep they've gone you may have felt okay in my in over my head a little bit so we're going to dive",
    "start": "57920",
    "end": "64000"
  },
  {
    "text": "pretty deep and much lower level than you probably practically ever will have to go um but my hope with that is that",
    "start": "64000",
    "end": "71680"
  },
  {
    "text": "when things are going right you're feeling confident and when things go wrong you're not feeling too unconfident",
    "start": "71680",
    "end": "77640"
  },
  {
    "text": "because you've seen some of this before so in general how this relates to sort of other talks that we've had at",
    "start": "77640",
    "end": "84960"
  },
  {
    "text": "the conference so far we had Ton's talk on the component model yesterday from a very high level as a user of of",
    "start": "84960",
    "end": "91119"
  },
  {
    "text": "components um that's really wonderful and hopefully most of your usage of components will be at that level you'll",
    "start": "91119",
    "end": "97119"
  },
  {
    "text": "just be able to use components they will work the way that you expect them to work um and everything will be fine and",
    "start": "97119",
    "end": "102840"
  },
  {
    "text": "then we had Luke earlier today talking a little bit about a Subs slice of components the future of components",
    "start": "102840",
    "end": "108000"
  },
  {
    "text": "particularly around async very lowlevel talking about abis and how memory is",
    "start": "108000",
    "end": "113240"
  },
  {
    "text": "used um we'll be touching on a little bit of that today as well but my hope is to kind of sit between the two of those",
    "start": "113240",
    "end": "119360"
  },
  {
    "text": "um help bridge the gap between those two worlds so the central question for today",
    "start": "119360",
    "end": "125759"
  },
  {
    "start": "122000",
    "end": "200000"
  },
  {
    "text": "is what are components that's really what we're going to get at and we've already had this question at the",
    "start": "125759",
    "end": "130800"
  },
  {
    "text": "conference quite a bit hopefully you have an idea of what components are as kind of reusable um and pluggable um",
    "start": "130800",
    "end": "136840"
  },
  {
    "text": "system for sharing web assembly code um and building larger pieces of software out of smaller uh smaller units um but",
    "start": "136840",
    "end": "144800"
  },
  {
    "text": "the talk today is more like what are components really kind of on disk in the binary",
    "start": "144800",
    "end": "151840"
  },
  {
    "text": "so the first thing that we're going to answer with this is that web uh components are an extension of core web",
    "start": "152160",
    "end": "158400"
  },
  {
    "text": "assembly and this kind of begs the question then okay what is core web assembly maybe you've never heard the",
    "start": "158400",
    "end": "164680"
  },
  {
    "text": "term core web assembly you just know what web assembly is um and the answer to that is that",
    "start": "164680",
    "end": "170360"
  },
  {
    "text": "core web assembly is what web assembly has been since it's Inception so if you've not dealt with components before",
    "start": "170360",
    "end": "177239"
  },
  {
    "text": "then just substitute core web assembly with web assembly CU that's what it's been and it this is",
    "start": "177239",
    "end": "182920"
  },
  {
    "text": "really meant as a way to differentiate between this core the core web assembly",
    "start": "182920",
    "end": "188760"
  },
  {
    "text": "modules plain old WM that we've been using since the Inception uh of web assembly and web assembly components",
    "start": "188760",
    "end": "195440"
  },
  {
    "text": "which is sort of an extension on uh core web assembly modules so now I'm going to attempt um",
    "start": "195440",
    "end": "203400"
  },
  {
    "start": "200000",
    "end": "329000"
  },
  {
    "text": "against my better judgment to actually do some live live coding or building of uh of core components and core modules",
    "start": "203400",
    "end": "210560"
  },
  {
    "text": "um so I'm going to pop over pop over here um and then let's clear the screen",
    "start": "210560",
    "end": "219760"
  },
  {
    "text": "here and go into module here I'm just going to open this up in vs code because",
    "start": "219760",
    "end": "225120"
  },
  {
    "text": "that's probably a bit easier um and hopefully this is hopefully this is fine",
    "start": "225120",
    "end": "231120"
  },
  {
    "text": "to see so here's some R code I'll be using rust today but um you know if you don't like rust that's fine that",
    "start": "231120",
    "end": "237200"
  },
  {
    "text": "hopefully it shouldn't be too much of a distraction this can happen in any language uh that can compile to web",
    "start": "237200",
    "end": "242319"
  },
  {
    "text": "assembly and we have a rust function here it's very simple it's called add takes a and b as U sizes which are",
    "start": "242319",
    "end": "249560"
  },
  {
    "text": "pointer sized integers and it returns um that uiz integer as well so this is basically as simple as it gets and if",
    "start": "249560",
    "end": "256160"
  },
  {
    "text": "you're not familiar with rust then this extern C here is basically saying treat this as a c function instead of a rust",
    "start": "256160",
    "end": "262600"
  },
  {
    "text": "function um and no mangle here just means really I want to call this thing add so when I compile it don't kind of",
    "start": "262600",
    "end": "270080"
  },
  {
    "text": "change its name don't change any symbols and and things like that and and really the only difference between this and a",
    "start": "270080",
    "end": "276520"
  },
  {
    "text": "regular um kind of Straight Out of the Box hello world is we're we're doing a different crate type here so um if",
    "start": "276520",
    "end": "284039"
  },
  {
    "text": "you've done if you've done rest before this probably looks very familiar and if you've not done R before then it probably doesn't look too scary to you",
    "start": "284039",
    "end": "291000"
  },
  {
    "text": "um and we can go ahead and build this oops by doing WM",
    "start": "291000",
    "end": "297280"
  },
  {
    "text": "32 unknown unknown here um and we can build it um",
    "start": "297280",
    "end": "304600"
  },
  {
    "text": "and I'll go ahead and uh bring it over to this folder here so that it's a bit",
    "start": "304600",
    "end": "310800"
  },
  {
    "text": "easier to work with um so now we have web assembly and this is a core web assembly module this",
    "start": "310800",
    "end": "317240"
  },
  {
    "text": "is nothing we've been you know there's nothing special we've been doing this for a very very long time now so we're",
    "start": "317240",
    "end": "323160"
  },
  {
    "text": "all on the same page hopefully we've got core web assembly let's let's come back here real",
    "start": "323160",
    "end": "328639"
  },
  {
    "text": "quick so now is where we start to dive deep in we're going to inspect our core module a",
    "start": "328639",
    "end": "334639"
  },
  {
    "start": "329000",
    "end": "519000"
  },
  {
    "text": "little bit and kind of poke and prod at the at the binary in order to to do this we're going to be using a a bode",
    "start": "334639",
    "end": "340280"
  },
  {
    "text": "Alliance tool called wasm tools and this is a whole Suite of tools for inspecting web assembly modules as well as uh",
    "start": "340280",
    "end": "348800"
  },
  {
    "text": "components um so let's head back over here um and I've got WM tools already",
    "start": "348800",
    "end": "356560"
  },
  {
    "text": "installed and if we take a look at you know you can read through what uh what this does there's a whole bunch of things here um like validating that your",
    "start": "356560",
    "end": "364280"
  },
  {
    "text": "module is is is a valid module but the one that we're going to be dealing with today is print here so I'm going to do",
    "start": "364280",
    "end": "372840"
  },
  {
    "text": "wasm tools print and then I'm going to use",
    "start": "372840",
    "end": "378639"
  },
  {
    "text": "this skeleton option here and what the skeleton option does is gets rid of all of the actual code from our web assembly",
    "start": "378639",
    "end": "385560"
  },
  {
    "text": "module when we print it out um and instead just look at sort of all of the scaffold the skeleton of the web",
    "start": "385560",
    "end": "391520"
  },
  {
    "text": "assembly module so that we can kind of look at the stuff because we don't want to actually read just raw web assembly",
    "start": "391520",
    "end": "396720"
  },
  {
    "text": "code that's not super interesting for our purposes right now um and we'll take a look at what that looks like um oops",
    "start": "396720",
    "end": "404800"
  },
  {
    "text": "oops I got to spell it correctly WM twos is not a tool apparently so here we go",
    "start": "404800",
    "end": "410120"
  },
  {
    "text": "we have a module um and if you've never looked at w before with a web assembly",
    "start": "410120",
    "end": "415199"
  },
  {
    "text": "text representation then um this might look a little bit confusing to you I'll talk about in just in second but",
    "start": "415199",
    "end": "420639"
  },
  {
    "text": "hopefully it's not tooo overwhelming there's not a ton here at the very end um down here you can see kind of the the",
    "start": "420639",
    "end": "427400"
  },
  {
    "text": "the kind of core of what's going on um and really what we have is we're",
    "start": "427400",
    "end": "432800"
  },
  {
    "text": "exporting um some memory and we're exporting our function here ad and if we",
    "start": "432800",
    "end": "437840"
  },
  {
    "text": "look at what ad actually is by going up here we can see that it is a function um",
    "start": "437840",
    "end": "445960"
  },
  {
    "text": "and you know it's looks how we would expect it to look it takes an i32 and an i32 That's A and B and returns an i32",
    "start": "445960",
    "end": "452599"
  },
  {
    "text": "that's our result so pretty straightforward okay nothing nothing too big there um I want to give a shout out",
    "start": "452599",
    "end": "460120"
  },
  {
    "text": "also to a wasm analyzer as well as a way to you can drop in a web assembly component and get a a more kind of",
    "start": "460120",
    "end": "466639"
  },
  {
    "text": "visual um representation of what we just saw so if you don't want to be in your terminal and rather just poke around in",
    "start": "466639",
    "end": "472280"
  },
  {
    "text": "a browser then this is a great tool for doing that um as well all right um",
    "start": "472280",
    "end": "478159"
  },
  {
    "text": "here's the QR code if you want quickly snap a picture of that that you can go ahead and access it um also giving a",
    "start": "478159",
    "end": "484759"
  },
  {
    "text": "shout out to uh Mozilla for creating these web assembly text format doc documents as well um to be able to",
    "start": "484759",
    "end": "491360"
  },
  {
    "text": "understand how the text format actually works if this is all very intriguing to you like oh I want to understand how to",
    "start": "491360",
    "end": "497400"
  },
  {
    "text": "read raw web assembly then this is a great resource for doing that where you can learn exactly how um core web",
    "start": "497400",
    "end": "503000"
  },
  {
    "text": "assembly at least uh works at the kind of lowle text representation um by the",
    "start": "503000",
    "end": "508080"
  },
  {
    "text": "way I should mention the text representation and the binary representation are more or less one to one so when you're reading the text",
    "start": "508080",
    "end": "514120"
  },
  {
    "text": "format you are essentially reading binary code than just in a human readable way um so now we're going to",
    "start": "514120",
    "end": "521880"
  },
  {
    "start": "519000",
    "end": "675000"
  },
  {
    "text": "start getting away from core modules and start messing with them in ways that they're not supposed to be messed with",
    "start": "521880",
    "end": "528360"
  },
  {
    "text": "all right um let's pop on over here open this back up and you might be",
    "start": "528360",
    "end": "537040"
  },
  {
    "text": "thinking Okay add is great but that's that's you know I've never written an ad function before what about some like real code what what if we want to take",
    "start": "537040",
    "end": "544360"
  },
  {
    "text": "things like strings or something like that so I I'll change this here to",
    "start": "544360",
    "end": "550560"
  },
  {
    "text": "uppercase um and a will then become string um we're going to return",
    "start": "550560",
    "end": "557200"
  },
  {
    "text": "oops and going to return a string and all we're going to call here",
    "start": "557200",
    "end": "563399"
  },
  {
    "text": "is two uppercase on a so now instead of return adding two numbers together we're",
    "start": "563399",
    "end": "569000"
  },
  {
    "text": "going to take a string and return an uppercase string here and and Russ is already giving us um uh some warnings",
    "start": "569000",
    "end": "574760"
  },
  {
    "text": "here saying string is not ffi safe that's because passing strings from web assembly to the outside world uh or",
    "start": "574760",
    "end": "581279"
  },
  {
    "text": "passing rust strings from web assembly to the outside world is not safe to do because the the in-memory representation",
    "start": "581279",
    "end": "589079"
  },
  {
    "text": "of rust strings is not really stable it can change from compiler version to compiler version you're not supposed to",
    "start": "589079",
    "end": "594600"
  },
  {
    "text": "rely on it and when we're passing from web assembly to the outside world we",
    "start": "594600",
    "end": "599720"
  },
  {
    "text": "need to know exactly how that string is meant to look because the outside world needs to know that to be able to read it",
    "start": "599720",
    "end": "605560"
  },
  {
    "text": "to be able to interact with it so um besides that though if we uh go ahead",
    "start": "605560",
    "end": "611120"
  },
  {
    "text": "and compile it besides getting the warnings everything is working fine um and I can go ahead and copy it over",
    "start": "611120",
    "end": "618640"
  },
  {
    "text": "again um and let's take a look um at what this looks like and we",
    "start": "618640",
    "end": "625519"
  },
  {
    "text": "kind of have the same thing as before we're we're exporting an uppercase function now now so a different name but",
    "start": "625519",
    "end": "631000"
  },
  {
    "text": "the same um and if we look at what uppercase oops if we look at what",
    "start": "631000",
    "end": "636200"
  },
  {
    "text": "uppercase looks like here this is where it starts getting a little bit strange it's like okay I'm taking four perams",
    "start": "636200",
    "end": "643079"
  },
  {
    "text": "here I'm not returning anything what's that about doesn't necessarily make sense um the reason for this is because",
    "start": "643079",
    "end": "650680"
  },
  {
    "text": "the compiler is trying to do its best to do what it would expect to do with the",
    "start": "650680",
    "end": "655880"
  },
  {
    "text": "rust representation of strings that it knows about but of course we as as uh as",
    "start": "655880",
    "end": "661200"
  },
  {
    "text": "web assembly users and components when we want to use them will want to think",
    "start": "661200",
    "end": "666240"
  },
  {
    "text": "about these types at a higher level than just I 32s so can we do better than this",
    "start": "666240",
    "end": "672320"
  },
  {
    "text": "and and spoiler alert yes we can um so the the real problem at the",
    "start": "672320",
    "end": "678639"
  },
  {
    "start": "675000",
    "end": "949000"
  },
  {
    "text": "end of the day is that core module functions only take and return integers and floats they don't have any",
    "start": "678639",
    "end": "684240"
  },
  {
    "text": "understanding of higher level types like strings or lists vectors or um strs or",
    "start": "684240",
    "end": "689560"
  },
  {
    "text": "or enums or anything like that it's really just integers and floats at the end of the day and the the problem that",
    "start": "689560",
    "end": "695720"
  },
  {
    "text": "we want to get at is how do we actually represent complex types in memory how can we make sure that we we talk in",
    "start": "695720",
    "end": "702560"
  },
  {
    "text": "terms of these complex types and you know web assmbly has been around for a while now and of course not",
    "start": "702560",
    "end": "708600"
  },
  {
    "text": "everybody is just writing ad functions there you know we we actually are capable of of handling the situation but",
    "start": "708600",
    "end": "714959"
  },
  {
    "text": "how do we do this well the answer is through sort of what I've termed ad hoc and shared everything abis and okay",
    "start": "714959",
    "end": "722560"
  },
  {
    "text": "that's some mumbo jumbo what does that mean well let's start with abis this is probably something you've heard before",
    "start": "722560",
    "end": "727680"
  },
  {
    "text": "an ABI is an application binary interface so this is really at the lowest level when you want to call a",
    "start": "727680",
    "end": "733760"
  },
  {
    "text": "function how do you pass arguments and how do you get return values where do they end up um and you know if you're",
    "start": "733760",
    "end": "740519"
  },
  {
    "text": "talking about a regular uh instruction set this would really be like which registers do things go into when do",
    "start": "740519",
    "end": "746720"
  },
  {
    "text": "things go on the stack blah blah blah blah blah so this is really what we want to uh to be focusing on is this low-l",
    "start": "746720",
    "end": "752839"
  },
  {
    "text": "detail this is all ad hoc meaning that for every user of a module the author of",
    "start": "752839",
    "end": "759360"
  },
  {
    "text": "the module and the the user of the module who wants to call into the module have to kind of ad hoc come up with an",
    "start": "759360",
    "end": "765279"
  },
  {
    "text": "agreement about how these things will be done um they don't if you want to pass a string around you as the module and you",
    "start": "765279",
    "end": "774079"
  },
  {
    "text": "as the user of the module need to be on the same page about exactly how that",
    "start": "774079",
    "end": "779360"
  },
  {
    "text": "will be done down to where things will be laid out in memory how to read them um how to find things what are the order",
    "start": "779360",
    "end": "785040"
  },
  {
    "text": "of arguments so on and so forth um and shared everything here refers to that",
    "start": "785040",
    "end": "790240"
  },
  {
    "text": "the whole world is open to both sides of this equation the module uh author and the module user both have full access to",
    "start": "790240",
    "end": "797880"
  },
  {
    "text": "the memory that is being used by the module and so if uh you know they have to be on the same page and if they mess",
    "start": "797880",
    "end": "803600"
  },
  {
    "text": "it up there are kind of large consequences there because they both have the same view of everything",
    "start": "803600",
    "end": "810199"
  },
  {
    "text": "um and if you're you're feeling like oh shared everything that seems like it's kind of in contrast to Shared nothing that I heard Luke talking about earlier",
    "start": "810199",
    "end": "816760"
  },
  {
    "text": "that's exactly what we're kind of getting at so um keep that in mind so",
    "start": "816760",
    "end": "822240"
  },
  {
    "text": "what does this look like well just imagine two modules wanting to try and talk to each other um and they want to",
    "start": "822240",
    "end": "828199"
  },
  {
    "text": "module a wants to call a greet function that kind of at a high level just passes a string",
    "start": "828199",
    "end": "834920"
  },
  {
    "text": "um uh and presumably that string then gets printed out well module a thinks",
    "start": "834920",
    "end": "840399"
  },
  {
    "text": "about that string you know maybe it's it's a rust string because it's written in rust or it's a JavaScript string or whatever module a happens to be written",
    "start": "840399",
    "end": "846320"
  },
  {
    "text": "in but when we want to call module B's uh when we want to call that function",
    "start": "846320",
    "end": "851399"
  },
  {
    "text": "the Greet function we can't pass that representation because module B doesn't",
    "start": "851399",
    "end": "856759"
  },
  {
    "text": "understand that or in the case of rust it might not even be a good idea to do because it can change from compiler version to compiler version and so",
    "start": "856759",
    "end": "862759"
  },
  {
    "text": "really the Greet function needs to be end up translated into a kind of lower level core module representation where",
    "start": "862759",
    "end": "868720"
  },
  {
    "text": "we can just pass again either uh integers or floats and so a nice way to",
    "start": "868720",
    "end": "873759"
  },
  {
    "text": "do this probably would be the pointer to your data and the length of your string data and pass that instead so module a",
    "start": "873759",
    "end": "879880"
  },
  {
    "text": "can kind of lower down from that string representation into this lower level uh",
    "start": "879880",
    "end": "885360"
  },
  {
    "text": "representation of pointer and length and that's fine the you know core web assembly understands two I 32s no",
    "start": "885360",
    "end": "892000"
  },
  {
    "text": "problem um and what module a will do is then allocate the string data into",
    "start": "892000",
    "end": "897320"
  },
  {
    "text": "shared memory that module B and maybe other things have access to um and it will Point towards that shared memory",
    "start": "897320",
    "end": "904120"
  },
  {
    "text": "there and then it can pass it over and module B points at the same shared memory and it knows okay I'm on the same",
    "start": "904120",
    "end": "910600"
  },
  {
    "text": "page I know that I'm going to go ahead and kind of collapse that down into a string and I know exactly how that string is laid out and that's all fine",
    "start": "910600",
    "end": "917680"
  },
  {
    "text": "so this is how it kind of works today everybody is on the same page but these two modules have to be really on the",
    "start": "917680",
    "end": "923279"
  },
  {
    "text": "same page here um and if you want an example of how this has been done in the past you have tools like bind genen",
    "start": "923279",
    "end": "929839"
  },
  {
    "text": "which is a rust tool for doing this where web assembly written in Rust and the JavaScript uh you know running in",
    "start": "929839",
    "end": "935800"
  },
  {
    "text": "the browser can interact with one another and basically WM bingen generates a whole bunch of code to to",
    "start": "935800",
    "end": "942560"
  },
  {
    "text": "kind of set both sides up to uh work in ways that both sides expect and",
    "start": "942560",
    "end": "949360"
  },
  {
    "start": "949000",
    "end": "1051000"
  },
  {
    "text": "understand so what are some limitations here well the the ABI here is all a",
    "start": "949360",
    "end": "954639"
  },
  {
    "text": "convention this is not specified anywhere this is just both sides kind of coming to an agement um and if there is",
    "start": "954639",
    "end": "960959"
  },
  {
    "text": "a module that doesn't conform to this it just simply won't work um conventions",
    "start": "960959",
    "end": "966000"
  },
  {
    "text": "are easier to mess up than standards are because standards are a way for us all to get on the exact same page whereas",
    "start": "966000",
    "end": "972000"
  },
  {
    "text": "conventions are like well if you want to it'll work if you don't no big deal um",
    "start": "972000",
    "end": "977199"
  },
  {
    "text": "memory is shared here can be corrupted in certain ways if things go wrong both sides have to kind of trust each other",
    "start": "977199",
    "end": "983399"
  },
  {
    "text": "and be on the same page about each other and and hope that they don't really step on it so the point here isn't that this",
    "start": "983399",
    "end": "989279"
  },
  {
    "text": "can't work it's that it can work but it's kind of brittle and the ABI can change depending",
    "start": "989279",
    "end": "995560"
  },
  {
    "text": "on language as well and really like if you were intrigued by what Luke said uh",
    "start": "995560",
    "end": "1000600"
  },
  {
    "text": "earlier on his talk about async like none of that can work if we're kind of sharing everything and we don't have a a",
    "start": "1000600",
    "end": "1007120"
  },
  {
    "text": "way of kind of specifying these things at a low level and getting on the same page so components we can think about",
    "start": "1007120",
    "end": "1013720"
  },
  {
    "text": "are the opposite of this components are a canonical ABI an ABI that everybody is on the same page about it's specified um",
    "start": "1013720",
    "end": "1021399"
  },
  {
    "text": "and it's built on top of a shared nothing architecture where both sides don't share the same memory they they",
    "start": "1021399",
    "end": "1029160"
  },
  {
    "text": "they have their own memory and then have ways of basically saying if you want to read from something here's how you do",
    "start": "1029160",
    "end": "1036678"
  },
  {
    "text": "it um and I'm not going to go into details about the canonical API because that's basically several talks in of its",
    "start": "1036679",
    "end": "1043000"
  },
  {
    "text": "uh itself but if you want to read about it um in great low-level detail then um there's the conical Abi explainer as",
    "start": "1043000",
    "end": "1049480"
  },
  {
    "text": "well which you can find here okay so enough Theory let's create a",
    "start": "1049480",
    "end": "1055120"
  },
  {
    "start": "1051000",
    "end": "1305000"
  },
  {
    "text": "component um and the first thing that we're going to need uh to do here let me",
    "start": "1055120",
    "end": "1060679"
  },
  {
    "text": "close this and open up first component and because my typing is not going super",
    "start": "1060679",
    "end": "1067039"
  },
  {
    "text": "well I'm just going to read through code as opposed to typing it um so we're",
    "start": "1067039",
    "end": "1072120"
  },
  {
    "text": "going to we're going to create a component here and the component is doing the same thing as before it's just using a bit of tooling um in order to do",
    "start": "1072120",
    "end": "1078559"
  },
  {
    "text": "it and it's going to take a string as input and output uh another string and",
    "start": "1078559",
    "end": "1084600"
  },
  {
    "text": "the way that we start doing this is by specifying wit which is our our",
    "start": "1084600",
    "end": "1090799"
  },
  {
    "text": "interface description language for specifying what our component will look like and here we just have one simple",
    "start": "1090799",
    "end": "1097240"
  },
  {
    "text": "function called two upper that takes string as an input and returns a string um and of course our code here as",
    "start": "1097240",
    "end": "1105000"
  },
  {
    "text": "as well is all very highle taking strings and returning strings and we don't have to worry about this lowlevel",
    "start": "1105000",
    "end": "1110960"
  },
  {
    "text": "ABI uh detail because that's all taken care of the tooling and the tooling knows how to do that because this is all",
    "start": "1110960",
    "end": "1117039"
  },
  {
    "text": "kind of pre-specified ahead of time um and so the way that we're going",
    "start": "1117039",
    "end": "1124159"
  },
  {
    "text": "to do this is just like before we're going to build a core module oh sorry I",
    "start": "1124159",
    "end": "1130520"
  },
  {
    "text": "got to go to First component here so we're going to build a core",
    "start": "1130520",
    "end": "1136480"
  },
  {
    "text": "module here and now we've ended up with a core module just like before so we",
    "start": "1136480",
    "end": "1141520"
  },
  {
    "text": "don't have a component yet we have to take our core module and turn it into a component and the reason for this is",
    "start": "1141520",
    "end": "1146799"
  },
  {
    "text": "simply that most compilers nowadays don't understand components yet um and that will change as time goes on um but",
    "start": "1146799",
    "end": "1154400"
  },
  {
    "text": "for for now comp compilers understand core modules and don't understand",
    "start": "1154400",
    "end": "1159840"
  },
  {
    "text": "components but because components are simply just a wrapper around core modules that's really not a big deal um",
    "start": "1159840",
    "end": "1166080"
  },
  {
    "text": "we can go ahead and copy over our core module here real quick into this folder",
    "start": "1166080",
    "end": "1173440"
  },
  {
    "text": "um and then we can uh run wasm tools component new here let me make this a",
    "start": "1173440",
    "end": "1179760"
  },
  {
    "text": "bit bigger um passing in our core module and then wrap it up and make it into a a",
    "start": "1179760",
    "end": "1184960"
  },
  {
    "text": "component itself so if we go ahead and run that we now have component. WM here and that's an actual component so if we",
    "start": "1184960",
    "end": "1192200"
  },
  {
    "text": "go ahead and inspect it we'll see something a bit different than we saw",
    "start": "1192200",
    "end": "1197440"
  },
  {
    "text": "before let's skeleton um component.",
    "start": "1197440",
    "end": "1203360"
  },
  {
    "text": "WM and pass it to left so this looks similar to what we saw before but you'll",
    "start": "1203360",
    "end": "1208799"
  },
  {
    "text": "notice a few key differences we're talking about a component here we now have core module instead of module",
    "start": "1208799",
    "end": "1214280"
  },
  {
    "text": "before um and if we scroll all the way down here then you can see we're exporting to Upper um which if we look",
    "start": "1214280",
    "end": "1222280"
  },
  {
    "text": "at uh to Upper real quick um we can see",
    "start": "1222280",
    "end": "1229799"
  },
  {
    "text": "uh sorry um we can see the various uh",
    "start": "1229799",
    "end": "1236520"
  },
  {
    "text": "pointing to uh the core the core module function that will be exported and",
    "start": "1236520",
    "end": "1241640"
  },
  {
    "text": "actually implement this um uh on behalf of us so we're good to go here and here",
    "start": "1241640",
    "end": "1248039"
  },
  {
    "text": "is kind of the key to how things um actually work so this is where we have",
    "start": "1248039",
    "end": "1254760"
  },
  {
    "text": "specification of that of that um canonical AB for how to uh lower string",
    "start": "1254760",
    "end": "1261480"
  },
  {
    "text": "data into this lower level representation that core modules understand of uh of you know presumably",
    "start": "1261480",
    "end": "1268200"
  },
  {
    "text": "a pointer and a length um and it includes ways to kind of change that the",
    "start": "1268200",
    "end": "1273480"
  },
  {
    "text": "um the the that translation uh including how the string is encoded here so um the",
    "start": "1273480",
    "end": "1280919"
  },
  {
    "text": "thing to take away from this is this is kind of the the mechanism that Luke was talking about earlier where instead of",
    "start": "1280919",
    "end": "1286400"
  },
  {
    "text": "talking about string encodings he was talking a way to asyn ofy um this",
    "start": "1286400",
    "end": "1291480"
  },
  {
    "text": "lowering and lifting um of components of functions inside of components to their",
    "start": "1291480",
    "end": "1297039"
  },
  {
    "text": "module representations here all",
    "start": "1297039",
    "end": "1302039"
  },
  {
    "text": "right so a quick kind of overview of this canonical ABI we have no shared",
    "start": "1304960",
    "end": "1310840"
  },
  {
    "start": "1305000",
    "end": "1428000"
  },
  {
    "text": "memory as opposed to previously where we were sharing um memory we have flexible",
    "start": "1310840",
    "end": "1316480"
  },
  {
    "text": "conversions through core assembly definitions so we don't have to kind of hardcode exactly how things are",
    "start": "1316480",
    "end": "1322720"
  },
  {
    "text": "converted we're able to um uh customize that in in certain ways um and we're",
    "start": "1322720",
    "end": "1329279"
  },
  {
    "text": "going we're able to do that when we're lowering from higher level types into Li uh linear memory so going from strings",
    "start": "1329279",
    "end": "1336919"
  },
  {
    "text": "into how they're represented um as bytes in linear memory as well as lifting um",
    "start": "1336919",
    "end": "1342400"
  },
  {
    "text": "from linear memory into higher level types so going from that L linear memory to what you know your language of choice",
    "start": "1342400",
    "end": "1349520"
  },
  {
    "text": "whatever it may be uh understands as a string and these op there are options",
    "start": "1349520",
    "end": "1355120"
  },
  {
    "text": "for customizing how this happens through these things called Canon Ops um which allow you to do things like in the case",
    "start": "1355120",
    "end": "1361640"
  },
  {
    "text": "of strings uh specify how the strings are laid out uh in memory through their encoding so we're dealing with utf8 in",
    "start": "1361640",
    "end": "1368840"
  },
  {
    "text": "this case um real quick a a tool that I wrote",
    "start": "1368840",
    "end": "1374840"
  },
  {
    "text": "If if you just want to kind of look at to uh into a component and understand what it kind of looks like is called",
    "start": "1374840",
    "end": "1381120"
  },
  {
    "text": "weel which is the web assembly repple um here um and if we do sorry I have to go",
    "start": "1381120",
    "end": "1387480"
  },
  {
    "text": "to the right folder first component we can open up our our component",
    "start": "1387480",
    "end": "1393480"
  },
  {
    "text": "here um and we can see the exports that we",
    "start": "1393480",
    "end": "1399600"
  },
  {
    "text": "have and the Imports which we have which we have none here and understand um how",
    "start": "1399600",
    "end": "1404960"
  },
  {
    "text": "our component runs uh I me in fact uh hopefully this works we should I've been messing with the parser and I hope it",
    "start": "1404960",
    "end": "1411279"
  },
  {
    "text": "doesn't didn't screw things up we'll see um we can actually go ahead and and call",
    "start": "1411279",
    "end": "1416480"
  },
  {
    "text": "our function as well so if you want a way to kind of mess around with and poke at your component from a high level this",
    "start": "1416480",
    "end": "1422760"
  },
  {
    "text": "is a tool that allows you to do that all",
    "start": "1422760",
    "end": "1428240"
  },
  {
    "start": "1428000",
    "end": "1551000"
  },
  {
    "text": "right um so I think we might have a bit of time to talk about how we actually",
    "start": "1428640",
    "end": "1434240"
  },
  {
    "text": "run these components I'll quickly uh go through that as well",
    "start": "1434240",
    "end": "1439320"
  },
  {
    "text": "well so how how do we actually run them besides using something like weel which is an already kind of built runtime for",
    "start": "1439320",
    "end": "1445520"
  },
  {
    "text": "running um components well let's let's look at how a host is built here um and",
    "start": "1445520",
    "end": "1453039"
  },
  {
    "text": "again sorry if you if you're not used to or don't like to to read rust code but I'll try and make this as uh as simple",
    "start": "1453039",
    "end": "1459200"
  },
  {
    "text": "as possible so we're simply reading our component from uh from dis here and we",
    "start": "1459200",
    "end": "1464440"
  },
  {
    "text": "we kind of set up uh our WM time uh which is the Run time that I'm using in this case engine here we we set an",
    "start": "1464440",
    "end": "1471399"
  },
  {
    "text": "engine which is what actually runs web assembly we set up a store which stores data we set up a Linker which allows us",
    "start": "1471399",
    "end": "1478120"
  },
  {
    "text": "to take in um outside implementations uh for for imports um we created a a component here",
    "start": "1478120",
    "end": "1486320"
  },
  {
    "text": "we instantiate that component through the Linker um as well and then we're able to um get the function the two",
    "start": "1486320",
    "end": "1493760"
  },
  {
    "text": "upper function here um and then call it using these parameters",
    "start": "1493760",
    "end": "1498919"
  },
  {
    "text": "um with Hello uh here and presumably we should get back hello all",
    "start": "1498919",
    "end": "1504399"
  },
  {
    "text": "uppercased um and hopefully that works and we did so that's good so yeah",
    "start": "1504399",
    "end": "1511679"
  },
  {
    "text": "that's um this this code is is very very simple um uh but yet it's still fairly",
    "start": "1511679",
    "end": "1517880"
  },
  {
    "text": "low level when you interact with um with components on your own you probably won't be interacting with them um in",
    "start": "1517880",
    "end": "1524520"
  },
  {
    "text": "exactly this way because because we have this specified tooling and we have things like WID that specify exactly",
    "start": "1524520",
    "end": "1531159"
  },
  {
    "text": "what our interfaces look like we can build higher level and more higher level tooling uh on top of that um and be able",
    "start": "1531159",
    "end": "1537799"
  },
  {
    "text": "to run components without you without you having to actually do the low-level instantiation of a runtime uh Linker and",
    "start": "1537799",
    "end": "1545159"
  },
  {
    "text": "all all that stuff all",
    "start": "1545159",
    "end": "1549360"
  },
  {
    "start": "1551000",
    "end": "1828000"
  },
  {
    "text": "right so I'd like to like sort of shift a little bit for the last thing which is",
    "start": "1552000",
    "end": "1558960"
  },
  {
    "text": "where does wzy fit into this so we've talked about the component Model A whole bunch um and and we know that we have",
    "start": "1558960",
    "end": "1565159"
  },
  {
    "text": "wzy and especially a new version Preview 2 or 0.2 um what what is the difference",
    "start": "1565159",
    "end": "1571120"
  },
  {
    "text": "like where does the component model end and wzy begin if you don't quite understand that um well Wy preview2 and",
    "start": "1571120",
    "end": "1578840"
  },
  {
    "text": "Beyond is built on top of the component model and essentially the takeaway from this is",
    "start": "1578840",
    "end": "1584240"
  },
  {
    "text": "that really wazzy isn't isn't special in that regard Wazi is simply just a usage",
    "start": "1584240",
    "end": "1590840"
  },
  {
    "text": "of the component model so if you want to build your own um competing standard uh",
    "start": "1590840",
    "end": "1596120"
  },
  {
    "text": "which please don't do it because that would be very annoying but if you wanted to you certainly you certainly could",
    "start": "1596120",
    "end": "1601679"
  },
  {
    "text": "because Wazi at the end of the day is simply just a usage of the component model where the wit definitions are all",
    "start": "1601679",
    "end": "1608480"
  },
  {
    "text": "kind of agreed upon as being the right way for doing common things so they're",
    "start": "1608480",
    "end": "1613919"
  },
  {
    "text": "just useful set of wit worlds for doing common useful things like reading from dis or talking to the network or",
    "start": "1613919",
    "end": "1620960"
  },
  {
    "text": "something like that and that's all that wazzy is is just what we've seen here today where everybody says yeah that",
    "start": "1620960",
    "end": "1627159"
  },
  {
    "text": "whip file looks fine we'll call it wzy that's it all right so what have we learned or",
    "start": "1627159",
    "end": "1633760"
  },
  {
    "text": "what have we gotten a little bit hopefully a little bit more comfortable with is that components extend web assembly",
    "start": "1633760",
    "end": "1639440"
  },
  {
    "text": "modules um they provide a way to interact with web assembly code in sort of a standardized way where everybody is",
    "start": "1639440",
    "end": "1645120"
  },
  {
    "text": "on the same page and you don't have to know exactly how um web assembly was",
    "start": "1645120",
    "end": "1650559"
  },
  {
    "text": "compiled or how it expects things to be laid out in memory it all just works it's done in a shared nothing way",
    "start": "1650559",
    "end": "1658159"
  },
  {
    "text": "and it uses these higher level complex types that you would expect to be able to use like strings and lists and",
    "start": "1658159",
    "end": "1665080"
  },
  {
    "text": "strs and we have a growing set of tools for poking at these components which we've seen some of them today like WM",
    "start": "1665080",
    "end": "1670440"
  },
  {
    "text": "tools uh and weel um and and really at the end Wazi is is nothing but a standard set of",
    "start": "1670440",
    "end": "1676440"
  },
  {
    "text": "component interfaces so again if you want to create something that looks like wazzy you you can",
    "start": "1676440",
    "end": "1682240"
  },
  {
    "text": "because really at the end of the day you just need to create um a set of components and that's it thank you very",
    "start": "1682240",
    "end": "1690110"
  },
  {
    "text": "[Applause]",
    "start": "1690110",
    "end": "1699199"
  },
  {
    "text": "much no I can ask you a question Ryan um so",
    "start": "1700120",
    "end": "1707519"
  },
  {
    "text": "one thing that I've never understood about this whole component model thing with the shared nothing memory yeah is in your example we are passing a string",
    "start": "1707519",
    "end": "1714080"
  },
  {
    "text": "between components and there is no shared memory how is that not or is it impacting performance",
    "start": "1714080",
    "end": "1720080"
  },
  {
    "text": "like is it impacting performance um so there are certain optimizations",
    "start": "1720080",
    "end": "1728080"
  },
  {
    "text": "kind of the the simple answer is yes it does it does impact your performance above",
    "start": "1728080",
    "end": "1734360"
  },
  {
    "text": "what you would be able to accomplish if you had shared memory and you were able to pointers around because um there is a",
    "start": "1734360",
    "end": "1741559"
  },
  {
    "text": "case where you might have to copy data um the nice thing is that this the idea",
    "start": "1741559",
    "end": "1747840"
  },
  {
    "text": "of lowering uh going from your your complex string lowering to an ABI and then",
    "start": "1747840",
    "end": "1753720"
  },
  {
    "text": "raising back up into some other language's representation of string is sort of the most naive case and in that",
    "start": "1753720",
    "end": "1759840"
  },
  {
    "text": "case yes cop memory will will be copied and has to be copied but there are certain optimizations because we're",
    "start": "1759840",
    "end": "1765360"
  },
  {
    "text": "dealing with these kind of highle types and a high level understanding of how components interact with each other",
    "start": "1765360",
    "end": "1771200"
  },
  {
    "text": "where copying might not be necessary um and in fact there are some kind of compile time Transformations that can",
    "start": "1771200",
    "end": "1777600"
  },
  {
    "text": "happen that may be able to eliminate uh copies um in the case where you're sure",
    "start": "1777600",
    "end": "1785399"
  },
  {
    "text": "that you need to avoid copying because you have large amounts of data and you know you're going from utfa encoding to",
    "start": "1785399",
    "end": "1791960"
  },
  {
    "text": "utf16 encoding and that's a performance issue there are ways around that by using resources um um but so yes naively",
    "start": "1791960",
    "end": "1801240"
  },
  {
    "text": "there is a performance uh penalty here but sort of practically for most use",
    "start": "1801240",
    "end": "1806360"
  },
  {
    "text": "cases of things that performance uh penalty is negligible and often times can be completely alighted",
    "start": "1806360",
    "end": "1814880"
  },
  {
    "text": "so all right I guess that's it thank you very much",
    "start": "1822000",
    "end": "1829960"
  }
]