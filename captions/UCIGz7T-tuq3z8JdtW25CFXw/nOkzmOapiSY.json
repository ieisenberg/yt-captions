[
  {
    "text": "right thank",
    "start": "6879",
    "end": "9200"
  },
  {
    "text": "you all right so I want to start off with a question what is",
    "start": "14360",
    "end": "20680"
  },
  {
    "text": "wasi so if you've been following the space for a while you've probably heard us to use phrases like non wewm or WM",
    "start": "20680",
    "end": "27640"
  },
  {
    "text": "outside the browser and these start to get talking about but they really aren't very precise at talking about kind of",
    "start": "27640",
    "end": "33719"
  },
  {
    "text": "the wasi that's emerged as people have shown up and talked about the use case they want to do with wasi on one hand non",
    "start": "33719",
    "end": "42000"
  },
  {
    "text": "web the web is actually more than browsers at this point the web is grown Way Beyond just like HTML pages and",
    "start": "42000",
    "end": "47320"
  },
  {
    "text": "hyperlinks the web includes things like activity Pub web of things these are w3c standards part of the web like there's",
    "start": "47320",
    "end": "53960"
  },
  {
    "text": "things like witer CG so the web in a sense has grown Beyond just browsers it really represents like an ecosystem an",
    "start": "53960",
    "end": "60199"
  },
  {
    "text": "interconnect ecosystem of things that share values values about interoperability and and having Open",
    "start": "60199",
    "end": "67520"
  },
  {
    "text": "Standards um and it really seems like Wy can participate in that Wu can fit in that environment very well we want Wy to",
    "start": "67520",
    "end": "73600"
  },
  {
    "text": "interoperate with web standards rather than compete with them we want to have W interoperate with other platforms that integrates to whether they compete with",
    "start": "73600",
    "end": "78720"
  },
  {
    "text": "them so we want to have the same values of inter interoperability and Open",
    "start": "78720",
    "end": "84240"
  },
  {
    "text": "Standards we have another phrase which is why outside the browser but the there",
    "start": "84240",
    "end": "89960"
  },
  {
    "text": "are a lot of people including a lot of people I've talked to like at this conference who actually want to run wiy programs in",
    "start": "89960",
    "end": "95240"
  },
  {
    "text": "browsers so why wi why them outside the browser doesn't really describe that use case",
    "start": "95240",
    "end": "100360"
  },
  {
    "text": "either so I'm going to put forward a phrase I think makes a lot of sense see if people like",
    "start": "100360",
    "end": "106320"
  },
  {
    "text": "it I think wasm wasi wants to be a wasm native API",
    "start": "106320",
    "end": "111798"
  },
  {
    "text": "ecosystem so what do we mean by wasm native and so we have wasm that's",
    "start": "113560",
    "end": "119360"
  },
  {
    "text": "running into context where there's JavaScript Bas in browsers and other things and we have wasm running in places we call Standalone where it's",
    "start": "119360",
    "end": "125560"
  },
  {
    "text": "just wasm and so wasm AP ecosystem refers to having apis that will work",
    "start": "125560",
    "end": "130959"
  },
  {
    "text": "anywhere you have wasm which might have JavaScript it might not have JavaScript it might have other things in the",
    "start": "130959",
    "end": "138080"
  },
  {
    "text": "host and wasm Native also refers to really embracing the values that make",
    "start": "138080",
    "end": "143440"
  },
  {
    "text": "wasm itself special things like portability sandboxing and supporting multiple Source languages we want those",
    "start": "143440",
    "end": "148640"
  },
  {
    "text": "things to be reflected in the em as well there's a lot of diversity in the",
    "start": "148640",
    "end": "154879"
  },
  {
    "text": "AP system right now if you look at the wasm world and especially like what people are doing at this Con conference people are doing a lot of great things and experimenting in different",
    "start": "154879",
    "end": "160280"
  },
  {
    "text": "directions um and that's really great at the same time we also have a kind of growing need for like we need some more",
    "start": "160280",
    "end": "166440"
  },
  {
    "text": "commonality we have a lot of diversity it's also starting to have a risk of fragmentation about people are going a lot of different directions um we want",
    "start": "166440",
    "end": "173120"
  },
  {
    "text": "to have keep experiments going we also want to start building up a Commons of things that can work together and not just apis but also the convention and",
    "start": "173120",
    "end": "180159"
  },
  {
    "text": "tooling around apis we can have some commonality across the",
    "start": "180159",
    "end": "186519"
  },
  {
    "text": "ecosystem and so the wasi vision for an API ecosystem has kind of two parts one of them is a standards Forum so",
    "start": "188400",
    "end": "196040"
  },
  {
    "text": "standards Forum you have multiple stakeholders coming together um and so this part exists",
    "start": "196040",
    "end": "201360"
  },
  {
    "text": "today we have the wasi subgroup Wy subgroup is a subgroup of the W",
    "start": "201360",
    "end": "206640"
  },
  {
    "text": "community group which the group that develops the web assembly standard itself um which is itself part of the",
    "start": "206640",
    "end": "212080"
  },
  {
    "text": "w3c so we're working here we have quite a lot of people attend the meetings on a regular basis um they're open meetings people are welcome to come to them you",
    "start": "212080",
    "end": "218000"
  },
  {
    "text": "just need to sign up for the w3c and you're welcome to attend these meetings at the same time not every API",
    "start": "218000",
    "end": "225319"
  },
  {
    "text": "needs to be standardized developed in community in the committee process um it's a lot of work to go through the",
    "start": "225319",
    "end": "230920"
  },
  {
    "text": "committee process um doesn't always make sense and I think as bying matures I think we're we're not going to do as",
    "start": "230920",
    "end": "236560"
  },
  {
    "text": "many things sort of like committee first it's going to be more like people develop their own apis and then when they gain traction they're going to",
    "start": "236560",
    "end": "242280"
  },
  {
    "text": "start standardizing those things retroactively as opposed to a lot of what's happening right now where we're doing standards up front um I think",
    "start": "242280",
    "end": "248159"
  },
  {
    "text": "there's reasons for it because part of the work we're doing right now in sing things up front is to start building up",
    "start": "248159",
    "end": "253360"
  },
  {
    "text": "this common set of vocabulary in conventions for how you make an API what does it mean to design an API for w",
    "start": "253360",
    "end": "259600"
  },
  {
    "text": "what's what language you write the description in you know what are the conventions how can we have things that even if they aren't standard can still",
    "start": "259600",
    "end": "265600"
  },
  {
    "text": "fit with a coherent API ecosystem for WM",
    "start": "265600",
    "end": "271720"
  },
  {
    "text": "and so all this raises a big question what do we want and when I say we here I mean like everyone in this room and",
    "start": "276880",
    "end": "282240"
  },
  {
    "text": "everyone in the broader WM Community what do we want of our common ecosystem this is the time to ask this question",
    "start": "282240",
    "end": "288639"
  },
  {
    "text": "right we have to get this question and think about like what do we want this to look like what does the commons look like",
    "start": "288639",
    "end": "296240"
  },
  {
    "text": "to talk about this question I'm going to talk about a mystery this mystery is the case of the",
    "start": "299960",
    "end": "306000"
  },
  {
    "text": "missing",
    "start": "306000",
    "end": "308320"
  },
  {
    "text": "WM it was a dark and stormy night and you're sitting in your room and you're reason the was course spec and you finally get the mthj vendor and you like",
    "start": "311320",
    "end": "318000"
  },
  {
    "text": "okay this WIS module thing is pretty cool right to get these WIS modules this is a neat construct inside this corison",
    "start": "318000",
    "end": "324319"
  },
  {
    "text": "thing it's like these modules and they have these imports and exports uh and",
    "start": "324319",
    "end": "330120"
  },
  {
    "text": "the Really remarkable thing about these W modules is that there's no implicit sharing all the sharing that happens",
    "start": "330120",
    "end": "336759"
  },
  {
    "text": "between the W module and stuff on the outside goes through these imports and exports and the imports and exports have",
    "start": "336759",
    "end": "342120"
  },
  {
    "text": "types so they say exactly what's being shared you know what the import is doing what the export is doing and there's",
    "start": "342120",
    "end": "347759"
  },
  {
    "text": "nothing else going in it out there's no shared name space there's no shared context there's no shared registry",
    "start": "347759",
    "end": "352880"
  },
  {
    "text": "there's no shared like address space it's just like you get Imports you exports",
    "start": "352880",
    "end": "360560"
  },
  {
    "text": "and this promises to be really powerful this looks like the thing you could like all you have to do is wire up Imports to",
    "start": "360560",
    "end": "366560"
  },
  {
    "text": "the exports of another module you could St these things together it looks kind of like the system you could build a pretty powerful modular like Lego break",
    "start": "366560",
    "end": "373400"
  },
  {
    "text": "experience of like wiring up exports Imports and you know that there's no kind of like worry about okay is this going to conflict with that thing is",
    "start": "373400",
    "end": "379520"
  },
  {
    "text": "there going to be some kind of implicit conflict between these two pieces you know is this going to work you can largely ignore that stuff we have this",
    "start": "379520",
    "end": "385759"
  },
  {
    "text": "kind of system with no shared State you can say we up your Imports your export the type system will make sure the type",
    "start": "385759",
    "end": "391360"
  },
  {
    "text": "match um and we can have pretty good confidence that this will actually",
    "start": "391360",
    "end": "396199"
  },
  {
    "text": "work so we're going to have one Ms module put link to another module",
    "start": "400120",
    "end": "405199"
  },
  {
    "text": "Imports exports but then we start looking at okay now we' we've read the course spec and we're pretty excited",
    "start": "405199",
    "end": "410919"
  },
  {
    "text": "about the was thing it's really great um and now we start looking at what compilers do in practice how do compilers work so one of the things that",
    "start": "410919",
    "end": "416800"
  },
  {
    "text": "compilers do is they have to represent complex data structures and wum type system gives you uh numbers um and and",
    "start": "416800",
    "end": "424840"
  },
  {
    "text": "more numbers and and and just like four numbers uh and that's all you get so like what do I do with all my other data",
    "start": "424840",
    "end": "430160"
  },
  {
    "text": "structures in and so so far the answer that WM has is we have this thing called",
    "start": "430160",
    "end": "435639"
  },
  {
    "text": "linear memory so linear memory is this big array of byes that we've specially",
    "start": "435639",
    "end": "440879"
  },
  {
    "text": "optimized to work like an address space be pretty efficient at it um and so we know what to do with L memories right",
    "start": "440879",
    "end": "447240"
  },
  {
    "text": "like this is basically an address space you can basically treat it like like you would in like a c language or anything",
    "start": "447240",
    "end": "452440"
  },
  {
    "text": "based on the C abstract Machine model um we can lower all our data structures into these serialized bite forms and we",
    "start": "452440",
    "end": "458240"
  },
  {
    "text": "can have pointers into them we can have structs we can have arrays we can do all the things in the",
    "start": "458240",
    "end": "464360"
  },
  {
    "text": "memory but then when it comes time to link things together what do you do if",
    "start": "464879",
    "end": "470680"
  },
  {
    "text": "you're going to pass a data structure off to someone else and it has pointers in it they need to have your same memory be able to resolve your pointers you",
    "start": "470680",
    "end": "477680"
  },
  {
    "text": "have your pointers into your memory they you can't resolve that without Hing your memory so you have to export your entire line memory this is how a lot of WM tool",
    "start": "477680",
    "end": "483919"
  },
  {
    "text": "chains work today is you just export your entire line memory and then someone else you're being linked to um which",
    "start": "483919",
    "end": "489080"
  },
  {
    "text": "could be the host or it could be another wise module in order to work has to import your L",
    "start": "489080",
    "end": "494840"
  },
  {
    "text": "memory this is really tricky to do because either the other thing has its",
    "start": "494840",
    "end": "500280"
  },
  {
    "text": "own memory which means it also has to import your memory and now it has two memories um and wiom could do that now",
    "start": "500280",
    "end": "505319"
  },
  {
    "text": "we have multi memories so we can have two memories in the same module but it's still tricky to do most tool trains aren't really set up to",
    "start": "505319",
    "end": "511280"
  },
  {
    "text": "think about multiple add spaces very effectively most Source languages don't really have the mechanisms to think",
    "start": "511280",
    "end": "516560"
  },
  {
    "text": "about this kind of stuff so it's really CH to do that with multiple memories and if you don't have your own memory the other option is to say I'm going to",
    "start": "516560",
    "end": "522039"
  },
  {
    "text": "import the memory in the other module and it doesn't have its own memory it's just going to live in existing mod memory that's going to share with the",
    "start": "522039",
    "end": "527959"
  },
  {
    "text": "first module that means they need to share everything they need to share the malic space they need to share the stack",
    "start": "527959",
    "end": "533519"
  },
  {
    "text": "space they need to somehow have some kind of carefully coordinated thing to make sure they don't stomp on each other's memory um and and that appes a very very",
    "start": "533519",
    "end": "540640"
  },
  {
    "text": "tight level of coupling between these things they have to have a very very close relationship to coordinate you know who's going to use what memory wear how are we going to coordinate what",
    "start": "540640",
    "end": "546560"
  },
  {
    "text": "what's being used and what's not being used so this linear memory gets shared",
    "start": "546560",
    "end": "553120"
  },
  {
    "text": "from one B module to another W module that's how a lot of things work today and once we build that which is",
    "start": "553120",
    "end": "560440"
  },
  {
    "text": "sort of the natural path we're on the rest of this path kind of unfolds before us we say Okay um we've been here before",
    "start": "560440",
    "end": "567160"
  },
  {
    "text": "anyone who's worked on compilers or run times or or dlls or Os kernels like",
    "start": "567160",
    "end": "572959"
  },
  {
    "text": "we've seen this store before we know how this goes because this is what we do this is how we connect things together in the systems programming world we",
    "start": "572959",
    "end": "579000"
  },
  {
    "text": "build abis and so abis are this thing that that Unix taught us long ago to do you",
    "start": "579000",
    "end": "584200"
  },
  {
    "text": "have your CER file it defines an ABI and the ABI becomes the interconnection point between all the things the ABI is",
    "start": "584200",
    "end": "590519"
  },
  {
    "text": "like the ground Truth for interoperability the ABI is what really matters if you want to have a dll talk",
    "start": "590519",
    "end": "596040"
  },
  {
    "text": "to another dll the ABI is what matters for you executable caner run on this platform or not and so we're all used to this we're all",
    "start": "596040",
    "end": "601920"
  },
  {
    "text": "kind of like we just accept it because this is how we've been doing things for literally 50 years or more we build abis",
    "start": "601920",
    "end": "607640"
  },
  {
    "text": "and the Eis determine what we can and can't do and how we can evolve systems and the ebis kind of govern our our",
    "start": "607640",
    "end": "612880"
  },
  {
    "text": "intuitions for even how you Design Systems they have a very very deep influence or how we do",
    "start": "612880",
    "end": "619120"
  },
  {
    "text": "things but we also know in the back of our minds that Eis have some dragons some monsters are scary they're",
    "start": "619959",
    "end": "626560"
  },
  {
    "text": "hiding out there and wasm adds some of its own monsters",
    "start": "626560",
    "end": "631320"
  },
  {
    "text": "apis are error prone raw pointers in these apis right so we're passing these",
    "start": "632360",
    "end": "637680"
  },
  {
    "text": "things around um and it's one thing to have ra pointers in the context of like a c program where you can sort of Blame A C programmer if they get it wrong but",
    "start": "637680",
    "end": "644600"
  },
  {
    "text": "if we're talking about linking together modules that might be written by different people in different programming languages and try to make",
    "start": "644600",
    "end": "650800"
  },
  {
    "text": "sure that everyone gets like okay make sure you don't use that pointer after it's been freed gets very",
    "start": "650800",
    "end": "655959"
  },
  {
    "text": "complicated and this is not a good situation to be in if we care about security",
    "start": "655959",
    "end": "661240"
  },
  {
    "text": "abis come with no isolation right we're exporting our entire linear memory when",
    "start": "665120",
    "end": "670279"
  },
  {
    "text": "you do that you're basically giving up everything else too because once someone has control over your linear memory they have control over everything you're doing",
    "start": "670279",
    "end": "675760"
  },
  {
    "text": "essentially so there's basically no isolation in these API systems we don't have this kind of nice property of",
    "start": "675760",
    "end": "681320"
  },
  {
    "text": "there's just one thing being shared by imports and exports we're exporting everything ABI is making hard this",
    "start": "681320",
    "end": "689360"
  },
  {
    "text": "problem with like I'm exporting my memory you have to import it somehow and and and deal with that um there are ways",
    "start": "689360",
    "end": "694880"
  },
  {
    "text": "to make it work in fact we've been talking to some people here at the the conference that that uh managed to do this um but is pretty tricky to get it",
    "start": "694880",
    "end": "703040"
  },
  {
    "text": "right abis make Evolution hard right abis are notorious we've seen this play",
    "start": "703279",
    "end": "709160"
  },
  {
    "text": "out on all the places we've seen abis happen that abis get baked into things so we have like the the Y 2038 problem",
    "start": "709160",
    "end": "714560"
  },
  {
    "text": "where all these 32bit Unix systems are stuck with a 32bit time stamp that's going to overflow in the year 2038 um",
    "start": "714560",
    "end": "721079"
  },
  {
    "text": "and it's taken them decades that we've known about this problem to fix it because the abis are baked in so hard",
    "start": "721079",
    "end": "726279"
  },
  {
    "text": "it's hard to just you can't just overnight change everything because you need to change everything at once the way abis work is that you bake in all",
    "start": "726279",
    "end": "732279"
  },
  {
    "text": "the low Lev details into all the implementations and all the tool chains so it's baked in all these places um",
    "start": "732279",
    "end": "738680"
  },
  {
    "text": "it's possible to evolve abis and there's kind of this an art form that's been rising up over the years um in this",
    "start": "738680",
    "end": "744320"
  },
  {
    "text": "space of like how you can evolve abis over time but you're kind of limited by the flexibility that you have to have",
    "start": "744320",
    "end": "749399"
  },
  {
    "text": "given yourself when you designed the API in the first place so if you happen to have given yourself padding pites you happen to give yourself you know a",
    "start": "749399",
    "end": "754440"
  },
  {
    "text": "struct length field or a version field somewhere then you can you can have space to do certain things but it takes",
    "start": "754440",
    "end": "759519"
  },
  {
    "text": "a lot of foresight um and apis have a a tendency to",
    "start": "759519",
    "end": "765040"
  },
  {
    "text": "calcify even just adding new functions this is like one of the things you're supposed to in this in this art form of how you evolve API is adding a new",
    "start": "766480",
    "end": "772519"
  },
  {
    "text": "function is one of the things you can do uh but it's still hard to do to add a new function you need to first of all be",
    "start": "772519",
    "end": "779240"
  },
  {
    "text": "really careful you're going to get it right because you're going to have to live with this thing forever and second of all you have to make sure that you really get it right that of like a all",
    "start": "779240",
    "end": "786079"
  },
  {
    "text": "the all the WM engines are going to have to implement the same ebi and then all the tool chains are going to implement too and they're all going to bake in all",
    "start": "786079",
    "end": "791639"
  },
  {
    "text": "these details and none of us going to want to change it once it gets set up so it's really difficult there's a lot of overhead even adding a single do",
    "start": "791639",
    "end": "797279"
  },
  {
    "text": "function takes a lot of work virtualization is hard right this",
    "start": "797279",
    "end": "804440"
  },
  {
    "text": "is one of the really cool things with WM we're talking about is that we can virtualize apis but when we have an AI",
    "start": "804440",
    "end": "809600"
  },
  {
    "text": "it's not self-describing it's just like here's some pointers and it's impossible to have tools that can automatically",
    "start": "809600",
    "end": "814800"
  },
  {
    "text": "wrap these things and know what the semantics are because we don't know what things like the memory sematics are we just have to like it's a pointer",
    "start": "814800",
    "end": "820079"
  },
  {
    "text": "pointing to something uh I can't wrap that very easily unless I'm doing wrapping by hand and fr by hand I have to know how the",
    "start": "820079",
    "end": "826079"
  },
  {
    "text": "API Works um and then there's some really",
    "start": "826079",
    "end": "831920"
  },
  {
    "text": "big points I should make these bullet points bigger but wasm GC is coming and wasm GC and wasm this is",
    "start": "831920",
    "end": "838079"
  },
  {
    "text": "where wasm kind of throws in some new twists that these are dragons we haven't seen before in WM GC it's not like GC in",
    "start": "838079",
    "end": "844639"
  },
  {
    "text": "the native platforms where GC is sort of running inside the Ed space here we have a GC that's outside the Ed space the GC",
    "start": "844639",
    "end": "851079"
  },
  {
    "text": "systems fundamentally don't have the linear memory so when we have language like",
    "start": "851079",
    "end": "857320"
  },
  {
    "text": "like cotland and other languages that are coming along using from GC if we all bake in abis is that we all talk to each",
    "start": "857320",
    "end": "862360"
  },
  {
    "text": "other what are those languages going to do um and you could say well maybe they could have like a linear memory that exists for the entire reason of talking",
    "start": "862360",
    "end": "868279"
  },
  {
    "text": "to the ebi and they have to like copy data into the memory and copy back out and then like it gets pretty complicated",
    "start": "868279",
    "end": "874079"
  },
  {
    "text": "for them and so there's a real risk that we don't think of watch GC and think about how are we going to unify the ecosystem we're going to end up with a",
    "start": "874079",
    "end": "880880"
  },
  {
    "text": "split ecosystem uh but the GC languages could all kind of do their own thing have their own conventions and the ABI",
    "start": "880880",
    "end": "886440"
  },
  {
    "text": "languages like do their own thing we can end up with with a fairly distinctly split",
    "start": "886440",
    "end": "892160"
  },
  {
    "text": "ecosystem I think that'll be a bad a bad outcome I think it's worth thinking about the spirit of wism thinking about",
    "start": "892160",
    "end": "897959"
  },
  {
    "text": "interoperability and how um even as we add things like memory 64 um which in the tool train side be",
    "start": "897959",
    "end": "904880"
  },
  {
    "text": "sometimes call WM 64 but in at the WM spec level WM 64 is not a separate",
    "start": "904880",
    "end": "910199"
  },
  {
    "text": "architecture we just have WM 64 as a separate feature but there's still just one WM right we don't have a separate W",
    "start": "910199",
    "end": "917120"
  },
  {
    "text": "32 W 64 the only reason why W 32 W 64 terms exist is because we're using tool chains that are kind of very obsessed",
    "start": "917120",
    "end": "924199"
  },
  {
    "text": "with abis and very obsessed with the fact that 32bit versus 64bit means your pointer sizes are different which means your abis are different which for",
    "start": "924199",
    "end": "930600"
  },
  {
    "text": "compilers like C compilers it's a really big deal and so we talk about this as being part of the architecture so we have WM 32 and WM 64 but outside of that",
    "start": "930600",
    "end": "937600"
  },
  {
    "text": "kind of context of of C compilers there's no such thing as WM 32 there's no such thing as WM 34 uh and even WM GC",
    "start": "937600",
    "end": "944600"
  },
  {
    "text": "is just they're all this like different features within the same platform so when we talk about what do",
    "start": "944600",
    "end": "950720"
  },
  {
    "text": "we want in a shared API ecosystem I think what we want is a shared across all the languages API ecosystem where",
    "start": "950720",
    "end": "956680"
  },
  {
    "text": "everyone can participate equally",
    "start": "956680",
    "end": "960440"
  },
  {
    "text": "so what happened where did a Wim go this Wim we had originally that was composable and and you could link things",
    "start": "963240",
    "end": "969560"
  },
  {
    "text": "together without having wor about the shared State we have export linear memory we don't have any of this stuff anymore it all went away so where can we",
    "start": "969560",
    "end": "975720"
  },
  {
    "text": "find it where can we get this bom back so we have some Usual Suspects we",
    "start": "975720",
    "end": "981399"
  },
  {
    "text": "have places we can go ideas that a come first time memory views get suggested a bunch of places I've even suggested myself at various points along the way",
    "start": "981399",
    "end": "987480"
  },
  {
    "text": "to get to where we are today um and so the idea of a memory view is like okay so instead of exporting the",
    "start": "987480",
    "end": "993160"
  },
  {
    "text": "entire L memory what if we just export parts of it what if we have some kind of way of like a first class value you can pass around which is like a pointer in a",
    "start": "993160",
    "end": "999560"
  },
  {
    "text": "length or something and you can pass it to other people so they can get just a slice of your memory rather than giving the entire memory um and it does solve some of the",
    "start": "999560",
    "end": "1006800"
  },
  {
    "text": "problems it does get to the point where we're not exporting the entire line memory anymore and we don't have to worry about what if you run off the",
    "start": "1006800",
    "end": "1012240"
  },
  {
    "text": "bounds of what I meant to give you and you go into something that I didn't mean to give you um so it fixes those problems but memory views don't solve",
    "start": "1012240",
    "end": "1018279"
  },
  {
    "text": "all the problems one of the problems is that within memory views it's still you're talking about bites you still have to have",
    "start": "1018279",
    "end": "1024480"
  },
  {
    "text": "things like struck layouts and struct offsets still apply within these memory views um but there's also uh a problem",
    "start": "1024480",
    "end": "1031120"
  },
  {
    "text": "with lifetimes how do we make sure that the memory view is thing that we passed out as a pointer length doesn't outlive",
    "start": "1031120",
    "end": "1037640"
  },
  {
    "text": "the allocation in the memory right wasm semantics don't understand malikan free because those are just things that like",
    "start": "1037640",
    "end": "1043038"
  },
  {
    "text": "conventions you can do within your Lear memory so there's kind of no built and knowedge of of when you actually called free or or realic or or anything else",
    "start": "1043039",
    "end": "1049360"
  },
  {
    "text": "these memor so how do we make sure that that memory view we passed out doesn't outlive the allocation that it's pointing to um and similarly how do we",
    "start": "1049360",
    "end": "1055919"
  },
  {
    "text": "make sure that when the alloc when the memory view is done how do we notify the the won program that like okay the memory is not being used anymore you can",
    "start": "1055919",
    "end": "1061880"
  },
  {
    "text": "go ahead and free it instead of just like pinning it forever so these are some complicated",
    "start": "1061880",
    "end": "1066919"
  },
  {
    "text": "questions and and maybe it's possible to find answers to these things but the mws have another problem they're not",
    "start": "1066919",
    "end": "1073600"
  },
  {
    "text": "virtual so with memory views the idea is you interact with these things by doing loads and stores right because it's just",
    "start": "1073600",
    "end": "1078880"
  },
  {
    "text": "just literally a view and memory those and stores can't be intercepted if you want to have virtualization it means we",
    "start": "1078880",
    "end": "1084840"
  },
  {
    "text": "want to be able to intercept all the operations you can do that's sort of a key property of how virtualization works and I think virtualization is worth it",
    "start": "1084840",
    "end": "1091240"
  },
  {
    "text": "it's a big thing but be able to say across the ecosystem that every API is virtualize is a superpower that we can",
    "start": "1091240",
    "end": "1097039"
  },
  {
    "text": "have and if we go on the path of memory views we weaken that superpower because we'll have these things that can't be",
    "start": "1097039",
    "end": "1102080"
  },
  {
    "text": "intercepted we can have Lo and stores if you pass a view around and a message can get sent through that can't be",
    "start": "1102080",
    "end": "1107960"
  },
  {
    "text": "virtualized that can't be intercepted that can't be translated that can't be",
    "start": "1107960",
    "end": "1112320"
  },
  {
    "text": "monitored all right so when our like lineup of suspects here miss marble calls anness and it's protocols",
    "start": "1115480",
    "end": "1122960"
  },
  {
    "text": "so abis have the tendency to calcify and they're hard to work with and so this",
    "start": "1122960",
    "end": "1128640"
  },
  {
    "text": "this's kind of a common thing that comes out people figure a way to solve this is like what if we said we'll just let the API calcify and we're going to Route new",
    "start": "1128640",
    "end": "1136080"
  },
  {
    "text": "apis as like a protocol on top of fixed API so you can imagine even in the",
    "start": "1136080",
    "end": "1141280"
  },
  {
    "text": "simplest case you have like an API which is like a b stream you have a way to read bytes and write bytes we say we're going to encode like every time you want",
    "start": "1141280",
    "end": "1147400"
  },
  {
    "text": "to add a new function instead of going out doing all the hard work adding a new function to the ebii we're just going to",
    "start": "1147400",
    "end": "1152640"
  },
  {
    "text": "have a protocol by which you can like encode a function name or some other",
    "start": "1152640",
    "end": "1157720"
  },
  {
    "text": "identifier and then arguments you want to pass to it in the by stream and and send that out and have it come back in",
    "start": "1157720",
    "end": "1162880"
  },
  {
    "text": "this could be encoded with like Json or prot Buffs or flat buffers there's lots of different like particular schemes you can use but we can like pick one",
    "start": "1162880",
    "end": "1169320"
  },
  {
    "text": "and say like we're going to have a protocol but this doesn't get back to",
    "start": "1169320",
    "end": "1174840"
  },
  {
    "text": "the masing WM we had doesn't back to the WM where you could directly link things together this is saying like the imports and exports no longer describe the apis",
    "start": "1174840",
    "end": "1182400"
  },
  {
    "text": "that a module uses Because the actual apis you're using are these sort of dynamic values that only only exist at",
    "start": "1182400",
    "end": "1187440"
  },
  {
    "text": "runtime that can't be detected statically one of wm's big strengths people talk about a lot one of the reasons why a lot of people are here is",
    "start": "1187440",
    "end": "1193840"
  },
  {
    "text": "the startup times and one of the ways that W achieves these startup times is by having a static startup a static PPE checking system a static validation we",
    "start": "1193840",
    "end": "1200600"
  },
  {
    "text": "can do a lot of work up front not just the validation but we can also do optimization up front kind of like pre-bake in a lot of work so that in",
    "start": "1200600",
    "end": "1207600"
  },
  {
    "text": "deployment time we can start up these things very very quickly moving things back to runtime",
    "start": "1207600",
    "end": "1213320"
  },
  {
    "text": "takes away from that like the more Dynamic run time we have to do Dynamic encoding Dynamic typechecking to make",
    "start": "1213320",
    "end": "1218440"
  },
  {
    "text": "these protocols work Dynamic dispatch to make these protocols work we weaken that that advantage and we step away from the",
    "start": "1218440",
    "end": "1225480"
  },
  {
    "text": "spirit of wasm which is like one of the big characteristics of WM is we have of this static ahead of time linear",
    "start": "1225480",
    "end": "1230880"
  },
  {
    "text": "validation step the next suspect is kind of a",
    "start": "1230880",
    "end": "1237720"
  },
  {
    "text": "variation of the F the previous suspect um what about everything is a file um and I should be clear to to talk",
    "start": "1237720",
    "end": "1244120"
  },
  {
    "text": "about here what I'm talking about is there's there's different senses of everything as a file what I'm talking about here is like if you have some kind",
    "start": "1244120",
    "end": "1249799"
  },
  {
    "text": "of new device like even even like traditionally in Unix when they started saying like Okay what what we what the first thing we do with everything as a",
    "start": "1249799",
    "end": "1255559"
  },
  {
    "text": "file is we look at something very simple like a Serial port uh so a Serial Port",
    "start": "1255559",
    "end": "1260640"
  },
  {
    "text": "is not a file but Unix was able to say serial Port can act like a file in some ways now that's a little tricky because",
    "start": "1260640",
    "end": "1268039"
  },
  {
    "text": "some file operations don't make sense for serial parts right you can resize a file you can fsync a file can't resize a",
    "start": "1268039",
    "end": "1274320"
  },
  {
    "text": "Serial Port that just doesn't make sense you can't fsync a Serial Port these are things that don't make sense to the serial port and the serial Port have",
    "start": "1274320",
    "end": "1279640"
  },
  {
    "text": "operations that don't make sense for files like you can set the speed or you can set hand shaking uh parameters and other things like that material parts",
    "start": "1279640",
    "end": "1286039"
  },
  {
    "text": "and so like they both have operations you can't do the other so if we coer serial ports to actually like files what",
    "start": "1286039",
    "end": "1292520"
  },
  {
    "text": "we're essentially doing is saying like there has to be some kind of protocol or some kind of like convention for how",
    "start": "1292520",
    "end": "1297720"
  },
  {
    "text": "we're going to encode the serial Port things on top of the file API and send it",
    "start": "1297720",
    "end": "1302880"
  },
  {
    "text": "through and then as we take this further people add more kinds of devices and just becomes like we're have more and more protocols and literally if you look",
    "start": "1302880",
    "end": "1308400"
  },
  {
    "text": "at systems like plan n some what they're doing is like literally just having device files that you write string",
    "start": "1308400",
    "end": "1313720"
  },
  {
    "text": "commands into asky string commands into that then the OS will then or the other side of it Whatever It Is then parse and",
    "start": "1313720",
    "end": "1319679"
  },
  {
    "text": "then dispatch into the actual function so we're essentially like bypassing the static function mechanism using a",
    "start": "1319679",
    "end": "1325039"
  },
  {
    "text": "dynamic function dispatch mechanism so we're like layering an extra layer on top with the dynamic dispatch",
    "start": "1325039",
    "end": "1331200"
  },
  {
    "text": "system and if we really step back and think about this what are we really solving with these systems and we're",
    "start": "1332159",
    "end": "1337400"
  },
  {
    "text": "solving the problem that adding new functions is hard but that was the thing that came",
    "start": "1337400",
    "end": "1343039"
  },
  {
    "text": "from abis abis are the where you got this problem abis are the reason why we're doing this because we think that adding",
    "start": "1343039",
    "end": "1348880"
  },
  {
    "text": "new functions is hard so we think that we can't add new functions so we think that we'll have a fixed set of functions and then build a new layer on top of",
    "start": "1348880",
    "end": "1355799"
  },
  {
    "text": "that we can run over at one time we follow this path through its logical conclusion we end up with a dynamic system that's much more Dynamic and",
    "start": "1355799",
    "end": "1362000"
  },
  {
    "text": "harder to optimize ahead of",
    "start": "1362000",
    "end": "1365120"
  },
  {
    "text": "time here's where the component model enters the story the component model gives us some",
    "start": "1368919",
    "end": "1374520"
  },
  {
    "text": "new tools for thinking with these problems one of these new tools it's not really a new tool in fact it's been used quite widely in a lot of spaces like",
    "start": "1374520",
    "end": "1380520"
  },
  {
    "text": "open API um and other places using in like prots and stuff like that is the IDL interface description language uh",
    "start": "1380520",
    "end": "1388640"
  },
  {
    "text": "and and thinking about this in the context of basm it really stands in pretty sharp contrast to the ABI oriented approach we have pretty dis",
    "start": "1388640",
    "end": "1394200"
  },
  {
    "text": "approaches so ebis always talking about things like pointers memory layouts struct offsets life",
    "start": "1394200",
    "end": "1400080"
  },
  {
    "text": "times bake details into allot of the engines and all the tool chains everyone has to bre in the same details and it works if you have different details and",
    "start": "1400080",
    "end": "1406240"
  },
  {
    "text": "make things break and Demon value your nodes and it's bad adding functions is hard in abis that's",
    "start": "1406240",
    "end": "1412679"
  },
  {
    "text": "this this core intuition that we have built up on top of this thing that comes from abis um and it makes tunneling protocols on top of ABI based protocols",
    "start": "1412679",
    "end": "1419799"
  },
  {
    "text": "look really attractive because like this gives us all the flexibility that we're missing from the abis but the contrasting",
    "start": "1419799",
    "end": "1427480"
  },
  {
    "text": "approach is idls um and in particular the wit IDL in",
    "start": "1427480",
    "end": "1432760"
  },
  {
    "text": "the component model so what does this give us it gives us a different way of approaching the problem instead of saying we're going to sit down and the first thing we do with AB is we're going",
    "start": "1432760",
    "end": "1438960"
  },
  {
    "text": "to write a huge M of code that's going to do the ABI and big all in all details um in the IDL world the first thing we",
    "start": "1438960",
    "end": "1444520"
  },
  {
    "text": "do is we sit down we write finding generators so we say we're not going to write ebii code by hand for every single",
    "start": "1444520",
    "end": "1451480"
  },
  {
    "text": "API because if you look at Wy it's getting pretty big there's a lot of things in there we don't want to have to spend a lot of time every time someone",
    "start": "1451480",
    "end": "1457279"
  },
  {
    "text": "propos a new API and someone wants to implement it someone wants to play with it we don't want to spend all the time adding AI code to do all this stuff we",
    "start": "1457279",
    "end": "1464760"
  },
  {
    "text": "want to be able to autogenerate these things from a high Lev description so the wit IDL that comes with that gives us the ability to do that finding",
    "start": "1464760",
    "end": "1470720"
  },
  {
    "text": "generators we have today protocol generators are coming idls give us ergonomic API design",
    "start": "1470720",
    "end": "1478960"
  },
  {
    "text": "they give us high level types to describe the intention of the API right charar doesn't tell you what",
    "start": "1478960",
    "end": "1484279"
  },
  {
    "text": "it's doing but string says this is a string right in C you can sort of use to like oh charar just usually means a",
    "start": "1484279",
    "end": "1490559"
  },
  {
    "text": "string or we have like a charar and a u size size T whatever you want to call it um pair like people that are kind of",
    "start": "1490559",
    "end": "1497039"
  },
  {
    "text": "used to Avis kind of recognize that means this is probably the length of the array um but in in the IDL we have a",
    "start": "1497039",
    "end": "1502520"
  },
  {
    "text": "type like list it's liter like list of of a type of thing you want to have a list of and the details of exactly how",
    "start": "1502520",
    "end": "1508600"
  },
  {
    "text": "we're going to transfer those things around how we're going to represent them in different Source languages would have different ways of representing things um",
    "start": "1508600",
    "end": "1514039"
  },
  {
    "text": "can be hand all the tools so we don't bake in the AI we bake in this highle type system and the high L type system",
    "start": "1514039",
    "end": "1520120"
  },
  {
    "text": "becomes the source of Truth for interoperability not the ebii so we're still going to have Eis but Eis kind of",
    "start": "1520120",
    "end": "1526399"
  },
  {
    "text": "shift becoming instead of the extern internal source of tooth the internal interface to the type system and then",
    "start": "1526399",
    "end": "1534240"
  },
  {
    "text": "when we l things together it's we don't have to say that the connection point between one piece of software and another piece of software is like a",
    "start": "1534240",
    "end": "1539760"
  },
  {
    "text": "machine jump instruction you have to set everything up in memory just right so that when you jump across the boundary the other thing can like start running",
    "start": "1539760",
    "end": "1545399"
  },
  {
    "text": "and it all kind of like lines up we're expected to be that's kind of like the calling convention way of doing things um we can say like I'm going to call you",
    "start": "1545399",
    "end": "1552279"
  },
  {
    "text": "and I have this level high level types set of types and you have that high level set of things inside and the WM",
    "start": "1552279",
    "end": "1558880"
  },
  {
    "text": "runtime can understand that it can look at your AI and it can say okay we want to pass a string well maybe one side has",
    "start": "1558880",
    "end": "1564240"
  },
  {
    "text": "a utf8 string other has a uf6 string the one time can see that and say you know the way I link you is not going to be a",
    "start": "1564240",
    "end": "1570159"
  },
  {
    "text": "simple jump it's going to be there's going to be a bit of sub code that's going to do some transcoding trans code from utfa to16 um and so we can",
    "start": "1570159",
    "end": "1577240"
  },
  {
    "text": "transparently link things even if they have different string representations and this generalizes to",
    "start": "1577240",
    "end": "1582279"
  },
  {
    "text": "all kinds of different data structures you have different list representations you have different ways of doing um result types how do you do error",
    "start": "1582279",
    "end": "1589159"
  },
  {
    "text": "handling we can have high level types that can handle this so this all this this also gives us a path to sorting",
    "start": "1589159",
    "end": "1594240"
  },
  {
    "text": "more Source languages because we're also not baking in the representation for things like oh it's a pointer length what if it's GC then we don't have a",
    "start": "1594240",
    "end": "1600200"
  },
  {
    "text": "pointer it's like a GC array right or or the result type is another thing like if you have a result type which captures",
    "start": "1600200",
    "end": "1606279"
  },
  {
    "text": "the semantics of success and failure in a result type in wit which if you have JavaScript the failure type can match to",
    "start": "1606279",
    "end": "1612760"
  },
  {
    "text": "a JavaScript exception uh and the success type can be the return value if you have C we can use like the",
    "start": "1612760",
    "end": "1617919"
  },
  {
    "text": "convention C for error handling is you have a return value that indicates success or failure we can map to that if you have rust rust has result types you",
    "start": "1617919",
    "end": "1623720"
  },
  {
    "text": "can map result type to result type but any language you know has has a way of like idiomatic way of handling errors",
    "start": "1623720",
    "end": "1629559"
  },
  {
    "text": "and having a high level result type in the IDL lets us map to every single Source language is idiomatic way of handling errors so we can get this kind",
    "start": "1629559",
    "end": "1635440"
  },
  {
    "text": "of interoperability with this kind of intent of saying this isn't just any L return value this isn't just an INT",
    "start": "1635440",
    "end": "1641120"
  },
  {
    "text": "which just happens to have a no codes in it this is a result which in the type system level declares I have two things",
    "start": "1641120",
    "end": "1648279"
  },
  {
    "text": "I have a success value and a failure value and so tools can be generated to generate droppers around that and",
    "start": "1648279",
    "end": "1654279"
  },
  {
    "text": "bindings for that that can automatically handle those in automatic ways this is one of the big ways that we",
    "start": "1654279",
    "end": "1660240"
  },
  {
    "text": "can take Wazi Beyond just being like this se- level ABI thing Bel those system calls and really make it more",
    "start": "1660240",
    "end": "1666080"
  },
  {
    "text": "accessible directly accessible to a lot more Source languages this also gives us better",
    "start": "1666080",
    "end": "1671600"
  },
  {
    "text": "virtualization and composition um as we have tools that can generate droppers that know what's going on they can",
    "start": "1671600",
    "end": "1676760"
  },
  {
    "text": "generate smarter bindings and more B to do things automatically this is one of the big ways we can get out of the",
    "start": "1676760",
    "end": "1682279"
  },
  {
    "text": "the rigidity of abis because if if something is wrong even if you get your API your Whit IDL if we decide later on",
    "start": "1682279",
    "end": "1689200"
  },
  {
    "text": "we want to add a parameter to something or or even take away a parameter or or change the change the order of things",
    "start": "1689200",
    "end": "1694679"
  },
  {
    "text": "like we can do things and if there is a mismatch between different things we'll have enough high level type information",
    "start": "1694679",
    "end": "1700880"
  },
  {
    "text": "that we can autogenerate most of the work of adapting from one thing to another thing so we actually have a pretty clear path to evolving",
    "start": "1700880",
    "end": "1708919"
  },
  {
    "text": "and when we have this particular path to evolving things like we can add functions we can change functions and we have enough self-describing things",
    "start": "1710120",
    "end": "1716960"
  },
  {
    "text": "adding functions becomes easy if you want to have a Serial Port API we can just like talk about serial ports we",
    "start": "1716960",
    "end": "1722519"
  },
  {
    "text": "don't have to talk about how do I encode serial Port operations within file apis or within ioctl parameters or whatever",
    "start": "1722519",
    "end": "1728440"
  },
  {
    "text": "we can say like let's just talk about the serialport functions we have things like set speed and that kind of thing for Z parts we just add new functions we",
    "start": "1728440",
    "end": "1734600"
  },
  {
    "text": "don't have to worry about like oh my goodness it's going to be so much work to go to all the source languages and and I manually add a function to call",
    "start": "1734600",
    "end": "1740480"
  },
  {
    "text": "the set serial function set the speed function in you know here's one for rust here's one for go here's one for typescript to like it's all these tool",
    "start": "1740480",
    "end": "1746480"
  },
  {
    "text": "chains going to be so much work but in an IDL world what does this look like looks like you write an IDL you write",
    "start": "1746480",
    "end": "1752480"
  },
  {
    "text": "your WID that has a function in it and then you distribute that and all the source languages can then run the generator to generate their bindings and",
    "start": "1752480",
    "end": "1759880"
  },
  {
    "text": "you're done they get the bindings in their idiomatic Source languages um and",
    "start": "1759880",
    "end": "1765679"
  },
  {
    "text": "you don't have to do this sort of per like implement the ebi everywhere work this radically changes kind of our",
    "start": "1765679",
    "end": "1771919"
  },
  {
    "text": "perspective and it it really makes us look differently at these kind of solutions about let's tunnel API or tonic protocols over apis what if we",
    "start": "1771919",
    "end": "1778960"
  },
  {
    "text": "just make it easy to evolve apis",
    "start": "1778960",
    "end": "1782640"
  },
  {
    "text": "themselves all right do engines have to implement all W interfaces a question I get a lot um and the answer is no",
    "start": "1784120",
    "end": "1792000"
  },
  {
    "text": "um W has a lot of apis these days but uh we have this mechanism in the CL model called worlds and so worlds really Ser",
    "start": "1792000",
    "end": "1799000"
  },
  {
    "text": "as the the meeting point between engines what they Implement and what developers can Target the worlds can determine like here's a subset of all the apis that Mak",
    "start": "1799000",
    "end": "1805240"
  },
  {
    "text": "sense for a particular use case and engines can Target those worlds and then developers can Target those worlds and know what's available in those",
    "start": "1805240",
    "end": "1812159"
  },
  {
    "text": "worlds all right I'm almost done I'm the demo um so here's a quick view of the ro",
    "start": "1812159",
    "end": "1817919"
  },
  {
    "text": "road map um this isn't absolutely set in stone anywhere but this is a thing that I've presented to the wasi subgroup um",
    "start": "1817919",
    "end": "1824519"
  },
  {
    "text": "and gotten pretty good consensus there that this is a good path forward so particular what's happening here so pv1",
    "start": "1824519",
    "end": "1830120"
  },
  {
    "text": "is this the version of Wy that's kind of out there right now it's being used in a lot of different tool Chains It's implemented in a lot of engines um it's",
    "start": "1830120",
    "end": "1836120"
  },
  {
    "text": "pretty posx like comes from cloud AB one of the no notable features in it is it does have director capabilities which is",
    "start": "1836120",
    "end": "1841679"
  },
  {
    "text": "a little bit different than posx kind of taking a step towards the direction that Wy as a whole is heading in um and so",
    "start": "1841679",
    "end": "1847480"
  },
  {
    "text": "the focus right now for prev one it's not based on the wi IDL and so the focus right now is like we really want to like it's being used in all places we want to",
    "start": "1847480",
    "end": "1853600"
  },
  {
    "text": "support those existing use cases so there's not a lot of documentation for B1 right now so okay we're working on",
    "start": "1853600",
    "end": "1858679"
  },
  {
    "text": "adding documation in the places where people have confusion um there's not a lot of tests we're working on adding tests and we're really just working on",
    "start": "1858679",
    "end": "1863720"
  },
  {
    "text": "supporting those existing use cases rather than like adding new features to it because the new feature work is going to preview two at this point so preview",
    "start": "1863720",
    "end": "1870000"
  },
  {
    "text": "two the big headline is we're going to rebase on the wi IDL and the component model U for the reasons we just talked",
    "start": "1870000",
    "end": "1876320"
  },
  {
    "text": "about and we're also taking this opportunity to fix various bugs if you ever had to do FD V dur in wasi preview",
    "start": "1876320",
    "end": "1881519"
  },
  {
    "text": "one um you have my condolences um we're fixing it preview too it's going to be",
    "start": "1881519",
    "end": "1886760"
  },
  {
    "text": "much simpler to do Direct apis in pv2 um so various things like that we're we're fixing based on experience for pv1 uh",
    "start": "1886760",
    "end": "1892679"
  },
  {
    "text": "and the big headline feature as far as adding things is is going to be sockets and I'll show a demo of that in just a minute um Beyond preview two we think",
    "start": "1892679",
    "end": "1900320"
  },
  {
    "text": "this this makes sense to have one more preview uh preview 3 is when we added the integrated async uh coming in the",
    "start": "1900320",
    "end": "1906559"
  },
  {
    "text": "component model so if you saw Tyler's talk from yesterday where this like the there's this design for how async can",
    "start": "1906559",
    "end": "1912320"
  },
  {
    "text": "work and we can combine async in multiple languages together on a single event Loop uh it's pretty exciting stuff",
    "start": "1912320",
    "end": "1918039"
  },
  {
    "text": "and I think that makes sense for preview 3 to make sure we can integrate that kind of async into the Wy as a whole and beyond that it seems like that we're",
    "start": "1918039",
    "end": "1924600"
  },
  {
    "text": "kind of done with previews at the point we can start talking about W 1.0 when we get there we'll start some",
    "start": "1924600",
    "end": "1929639"
  },
  {
    "text": "conversations with a wasm CG those conversations haven't happened yet we don't exactly know what that looked like yet but POS 1.0 is like that's feels",
    "start": "1929639",
    "end": "1936000"
  },
  {
    "text": "like the time when we can start talking about a real standard that could live for a long time and at each of these steps these",
    "start": "1936000",
    "end": "1941720"
  },
  {
    "text": "are chances for us to incorporate feedback from implanters right as body grows we'll get more feedback in more places more use cases and we'll get vle",
    "start": "1941720",
    "end": "1948399"
  },
  {
    "text": "incorporate them into prev3 Incorporated 1.0 and even beyond. we have W 2.0 and",
    "start": "1948399",
    "end": "1953840"
  },
  {
    "text": "this property of being able to virtualize apis implement an older version of an API in terms of a newer version will give us a lot of",
    "start": "1953840",
    "end": "1960360"
  },
  {
    "text": "flexibility to evolve things even after we've standardized",
    "start": "1960360",
    "end": "1964679"
  },
  {
    "text": "them all right so now let's get to the demo uh so I have a URL if you want to check out the code it's all up online",
    "start": "1965559",
    "end": "1971399"
  },
  {
    "text": "here um switch to my window here",
    "start": "1971399",
    "end": "1978679"
  },
  {
    "text": "so I got to run cargo component build cargo component is is is uh",
    "start": "1980720",
    "end": "1987120"
  },
  {
    "text": "should show the whole thing here so cargo component is this tool we have for building a component within the cargo",
    "start": "1987120",
    "end": "1992880"
  },
  {
    "text": "system um so you have within your cargo you can describe your opponent dependencies I don't have time to to",
    "start": "1992880",
    "end": "1997960"
  },
  {
    "text": "dive into it right now um but the kind of idea is like this is this is a tool for rust but it's also kind of shows the path where like other languages could",
    "start": "1997960",
    "end": "2003760"
  },
  {
    "text": "follow so if you have JavaScript you can do a similar thing with with the package.json file and other systems have their own build systems the idea is like",
    "start": "2003760",
    "end": "2010679"
  },
  {
    "text": "maybe we could incorporate building components into these things so it's relatively natural for developers to use rather than having components be this like separate tooling you have to pull",
    "start": "2010679",
    "end": "2016840"
  },
  {
    "text": "in it could just be built in like a fairly regular part of a regular tooling so we we built this thing as a server",
    "start": "2016840",
    "end": "2022399"
  },
  {
    "text": "yes uh oh um apparently you can't see my screen I had not anticipated this",
    "start": "2022399",
    "end": "2030360"
  },
  {
    "text": "um is this possible to fix",
    "start": "2030360",
    "end": "2035120"
  },
  {
    "text": "uh I don't know if I can fix this right now unfortunately you can't see the demal but if you can if you can believe me um uh so I have carg component um",
    "start": "2043240",
    "end": "2050878"
  },
  {
    "text": "it's it's a carg component build and I'm building this this program called echos server um and it's a fairly simple program that's using preview two apis",
    "start": "2050879",
    "end": "2058358"
  },
  {
    "text": "that are doing using new socket apis to open up connection or open up the socket and listen on it on on Local Host um and",
    "start": "2058359",
    "end": "2064919"
  },
  {
    "text": "then I have another another program called um Echo Cent which you you tell the port number that the server printed",
    "start": "2064919",
    "end": "2071118"
  },
  {
    "text": "out and then you run the client and connect to the server um so I really uh I apologize for not having a demo you",
    "start": "2071119",
    "end": "2077398"
  },
  {
    "text": "can see on the screen here that' be super fun but I can try",
    "start": "2077399",
    "end": "2085200"
  },
  {
    "text": "that um so now do I have to like uh here we go all",
    "start": "2085839",
    "end": "2095240"
  },
  {
    "text": "right so this this window here is server there we",
    "start": "2096400",
    "end": "2103040"
  },
  {
    "text": "go all right we're back online",
    "start": "2103040",
    "end": "2106720"
  },
  {
    "text": "here that's going here as a client so here I did my my Caro build I",
    "start": "2110599",
    "end": "2116680"
  },
  {
    "text": "made the server and now I have a program called host which is a fairly simplistic",
    "start": "2116680",
    "end": "2122079"
  },
  {
    "text": "program that links in WM time as the engine and links in the host impementation of Preview 2 that we've",
    "start": "2122079",
    "end": "2127200"
  },
  {
    "text": "been developing and and various others are working together on this so if we run host on thism component that we just",
    "start": "2127200",
    "end": "2135000"
  },
  {
    "text": "built so this is a component it's running the server it's listening on this port 36613 so now here I'm going",
    "start": "2135000",
    "end": "2142560"
  },
  {
    "text": "to on cargo component build my",
    "start": "2142560",
    "end": "2149319"
  },
  {
    "text": "component and um so this the the client is just it's going to connect it's going to send a message across the server is",
    "start": "2149319",
    "end": "2155040"
  },
  {
    "text": "going to Echo it back and we can run it and pass it the port",
    "start": "2155040",
    "end": "2160200"
  },
  {
    "text": "number 36613 um and there we go uh you can see the bottom of that",
    "start": "2160200",
    "end": "2167720"
  },
  {
    "text": "screen here so very basic socket demo you know",
    "start": "2167720",
    "end": "2175680"
  },
  {
    "text": "in in historical terms nothing fancy that we did a socket and a client collected it like we've been able to do this for I don't know how many 50 years",
    "start": "2175680",
    "end": "2181119"
  },
  {
    "text": "now at this point in in Unix pb40 uh but uh but basically this shows you that",
    "start": "2181119",
    "end": "2186359"
  },
  {
    "text": "like sockets are part of the story here and they work we have them implemented in our our our prev2 impation for the",
    "start": "2186359",
    "end": "2191640"
  },
  {
    "text": "Prototype we're building and they're definitely part of the story here uh we don't yet have like the standard Library support wired up for things yet so you",
    "start": "2191640",
    "end": "2197920"
  },
  {
    "text": "can't do like like invest you can't do SD net yet but that's where we're going so we'll get those things wired up in on other languages as",
    "start": "2197920",
    "end": "2204160"
  },
  {
    "text": "well uh and with that back to my presentation hopefully",
    "start": "2204160",
    "end": "2212520"
  },
  {
    "text": "uh I don't know how to bring presentation back but that's all I got thanks a [Applause]",
    "start": "2219480",
    "end": "2234799"
  },
  {
    "text": "lot hi um great talk very interesting to see here right okay yeah um you started",
    "start": "2242640",
    "end": "2250000"
  },
  {
    "text": "by mentioning that for example sharing pointers into data structures is one of the big problems but is this soft now or",
    "start": "2250000",
    "end": "2257440"
  },
  {
    "text": "um how can I share views for",
    "start": "2257440",
    "end": "2262480"
  },
  {
    "text": "memory in a component model the main way to share memory is to use a feature called resources um I didn't have time",
    "start": "2264720",
    "end": "2270960"
  },
  {
    "text": "to go into the resources in this talk but basically what a resource is um it can be either like a host resource like",
    "start": "2270960",
    "end": "2276240"
  },
  {
    "text": "literally an OS or or other s of external resource like an iio thing or it can just be a data structure in",
    "start": "2276240",
    "end": "2281400"
  },
  {
    "text": "memory and then with resources the way you can use them is you get handles which are essentially just pointers and",
    "start": "2281400",
    "end": "2286480"
  },
  {
    "text": "you can pass these handles around other things and that's effectively a form of shared memory because you have memory",
    "start": "2286480",
    "end": "2291960"
  },
  {
    "text": "you're passing pointer to it the difference between resources and like traditional shared memory is that with",
    "start": "2291960",
    "end": "2297960"
  },
  {
    "text": "resources there's no direct load in the store all access to Resource goes to function calls and the function calls are Guided by the type of the resource",
    "start": "2297960",
    "end": "2304920"
  },
  {
    "text": "so you have a way to do this uh and it can even efficient because these function calls are just calls we can inline them especially at instantiation",
    "start": "2304920",
    "end": "2311280"
  },
  {
    "text": "time where we know the function calls are going so we can get efficient things there but it's not direct loads in stores so it does require in many cases",
    "start": "2311280",
    "end": "2317720"
  },
  {
    "text": "like rethinking about how things are working um I should also mention people",
    "start": "2317720",
    "end": "2322760"
  },
  {
    "text": "have asked me a lot about uh map over the last uh last two days and so there is potentially a path that people been",
    "start": "2322760",
    "end": "2328280"
  },
  {
    "text": "talking about about you know if we had like a blob resource which would imagine be like this very large database blob",
    "start": "2328280",
    "end": "2333839"
  },
  {
    "text": "whatever and we wanted to like mmap parts of that blob into to the W L memory um that's potentially possible",
    "start": "2333839",
    "end": "2340079"
  },
  {
    "text": "there's path way we could do it um and we could do it without having to add iOS Magics into L memory which is a pretty",
    "start": "2340079",
    "end": "2345680"
  },
  {
    "text": "scary thing from like the abstract Blas semantics perspective so the way we might do it is we could say if we have an operation which is logically copy all",
    "start": "2345680",
    "end": "2353960"
  },
  {
    "text": "the data or or data in a range from a blob into linear memory and then we have another operation which might be like",
    "start": "2353960",
    "end": "2361200"
  },
  {
    "text": "copy it back uh when I'm done writing to it and maybe another operation which is like now set it all to zeros",
    "start": "2361200",
    "end": "2367920"
  },
  {
    "text": "um and so if we have these operations these can pretty directly map onto like oh M map from The Blob into my line",
    "start": "2367920",
    "end": "2373720"
  },
  {
    "text": "memory and then when I'm done I can maybe like M sync it back or I can I can M unmap it uh take it out of my Ed space",
    "start": "2373720",
    "end": "2379079"
  },
  {
    "text": "when I'm I'm done with it so there's definitely a path where we can we can have the the fast mmap Behavior to",
    "start": "2379079",
    "end": "2384920"
  },
  {
    "text": "outside resource in memory where your program can very conveniently do loads and stores on it um in a way that we can",
    "start": "2384920",
    "end": "2390760"
  },
  {
    "text": "rationalize with the semantics saying it's just still a copy semantics it's not actually giving IO semantics to to memory in the in the abstract machine",
    "start": "2390760",
    "end": "2398359"
  },
  {
    "text": "that's kind of a brief overview of some of the things that are are possible in this space so so these resources are",
    "start": "2398359",
    "end": "2404040"
  },
  {
    "text": "like f descriptors plus some functions yes so in fact resources are what we're using to model things like actual file",
    "start": "2404040",
    "end": "2410319"
  },
  {
    "text": "like the the file handle um will L will be like a file handle and then in in the C binding to that we'll have these",
    "start": "2410319",
    "end": "2415920"
  },
  {
    "text": "things which we'll call file descriptors which are the indices into the the file handle",
    "start": "2415920",
    "end": "2421400"
  },
  {
    "text": "table but resources can be like an external thing like a file they could also be like just a data structure memory like you can have resources if",
    "start": "2422160",
    "end": "2428800"
  },
  {
    "text": "you have like a virtualized file system you might have an inmemory thing that might be in line rememory those could be resources that are accessed by handles",
    "start": "2428800",
    "end": "2434720"
  },
  {
    "text": "by another uh component as well all right uh first off thanks for",
    "start": "2434720",
    "end": "2441160"
  },
  {
    "text": "the talk I have a question because there's one thing has changed between like uh preview one and today is that",
    "start": "2441160",
    "end": "2448520"
  },
  {
    "text": "there's been this uh recent um huge uh spike in interest from the kind of like",
    "start": "2448520",
    "end": "2454680"
  },
  {
    "text": "container community and the features that they used to and then mapping them in into wzy land and do you expect those",
    "start": "2454680",
    "end": "2461839"
  },
  {
    "text": "things to impact like Wy CLE um one of the things for example is Docker has like a worker concept and right now you",
    "start": "2461839",
    "end": "2469200"
  },
  {
    "text": "can't actually say what the working directory is for wasi uh like is it is",
    "start": "2469200",
    "end": "2475000"
  },
  {
    "text": "it too late to address some of those things while everybody's like excited uh can we get things like that",
    "start": "2475000",
    "end": "2481160"
  },
  {
    "text": "in um it's not too late I think work directory is uh I think the best answer",
    "start": "2481160",
    "end": "2486800"
  },
  {
    "text": "right now is just something that like I personally have not really thought about um but I think we can add it really the",
    "start": "2486800",
    "end": "2491960"
  },
  {
    "text": "trick here is to add these new features and give ourselves as much compatibility as we can um in a way that doesn't",
    "start": "2491960",
    "end": "2497280"
  },
  {
    "text": "affect the the kind of core system so we want to think about POS compatibility as like we want to provide as much as we can but we also want to keep it isolated",
    "start": "2497280",
    "end": "2504119"
  },
  {
    "text": "I keep it at Arms armed length so we can kind of preserve this core thing there's a risk that if we go off and and",
    "start": "2504119",
    "end": "2509839"
  },
  {
    "text": "specialize too much repics that we could end up forking ecosystem again like this one of the big risks like we could Fork",
    "start": "2509839",
    "end": "2515720"
  },
  {
    "text": "over won GC versus Avi we could also Fork over like let's do all the posix things versus the things that posix",
    "start": "2515720",
    "end": "2520920"
  },
  {
    "text": "doesn't work for at all and we have to end up going about separate ways for that um I actually think that we can keep it together we can keep the values",
    "start": "2520920",
    "end": "2526599"
  },
  {
    "text": "of a unified ecosystem if we think in terms of POS compatibilities being layer on top now current working directory is",
    "start": "2526599",
    "end": "2532119"
  },
  {
    "text": "just the thing that's not addressed by the current system but I think uh there's actually an issue about it in wi system right now um that I don't think",
    "start": "2532119",
    "end": "2538400"
  },
  {
    "text": "we've responded to yet I haven't responded to it um uh but I think it's definitely in scope of something we can",
    "start": "2538400",
    "end": "2543559"
  },
  {
    "text": "fix in the previous time frame",
    "start": "2543559",
    "end": "2547760"
  },
  {
    "text": "yeah so you mention um that the component model defines stuff like abstract lists and Maps um but",
    "start": "2562760",
    "end": "2570880"
  },
  {
    "text": "ultimately they need to be mapped to language specific implementations right that's right um is this going to be",
    "start": "2570880",
    "end": "2576680"
  },
  {
    "text": "implement as part of of the runtime that provides different uh Primitives that",
    "start": "2576680",
    "end": "2582880"
  },
  {
    "text": "are closer to what languages expect or is it fully uh the responsibility of language compilers to Target uh those",
    "start": "2582880",
    "end": "2590720"
  },
  {
    "text": "abstract data types it's kind of split um there's a",
    "start": "2590720",
    "end": "2595800"
  },
  {
    "text": "piece of it which is going to be in the bindings the generated bindings which will be specialized for a particular Source language so if you're generating",
    "start": "2595800",
    "end": "2601880"
  },
  {
    "text": "binding for JavaScript you're going to have code that's going to know how to construct a JavaScript dictionary or or",
    "start": "2601880",
    "end": "2607359"
  },
  {
    "text": "um colum dictionaries Maps I always forget but the code to construct the J data structures whatever they are right",
    "start": "2607359",
    "end": "2613760"
  },
  {
    "text": "and then you'll have the component model side of it is like the abstract side of talking about um essentially like let's",
    "start": "2613760",
    "end": "2619839"
  },
  {
    "text": "enumerate the elements of the list in a way that the the component model can understand and can generate like an",
    "start": "2619839",
    "end": "2626160"
  },
  {
    "text": "adapter function which could be jitted um but then it has to hand off to like just to delegate to the code inside the",
    "start": "2626160",
    "end": "2631920"
  },
  {
    "text": "component to say okay now I'm giving you these abstract list elements I want you to put these in the list that you have that you're building for your own source",
    "start": "2631920",
    "end": "2637720"
  },
  {
    "text": "language so it's like a split thing in the middle we have this abstract thing which is Source language independent and",
    "start": "2637720",
    "end": "2642960"
  },
  {
    "text": "on the inside of the component we have the source dependent part very interesting thanks",
    "start": "2642960",
    "end": "2649640"
  },
  {
    "text": "yeah sorry okay um could here um thanks a lot",
    "start": "2650480",
    "end": "2655599"
  },
  {
    "text": "I'll be around for questions if you have questions I'll be out in the in the lobby",
    "start": "2655599",
    "end": "2661040"
  }
]