[
  {
    "start": "0",
    "end": "40000"
  },
  {
    "text": "foreign",
    "start": "599",
    "end": "3599"
  },
  {
    "text": "[Music]",
    "start": "3850",
    "end": "4340"
  },
  {
    "text": "[Applause]",
    "start": "4340",
    "end": "7620"
  },
  {
    "text": "[Applause]",
    "start": "9650",
    "end": "13179"
  },
  {
    "text": "hi everyone it's amazing to be here uh",
    "start": "13219",
    "end": "16080"
  },
  {
    "text": "my name is Vivek I'm a product manager",
    "start": "16080",
    "end": "17640"
  },
  {
    "text": "uh working on the Chrome team at Google",
    "start": "17640",
    "end": "19560"
  },
  {
    "text": "and I want to talk to you about a",
    "start": "19560",
    "end": "21840"
  },
  {
    "text": "webassembly project that our team has",
    "start": "21840",
    "end": "23340"
  },
  {
    "text": "been super excited to contribute to for",
    "start": "23340",
    "end": "25859"
  },
  {
    "text": "a couple of years now called webassembly",
    "start": "25859",
    "end": "27720"
  },
  {
    "text": "GC or wasmgc so I'll briefly share a",
    "start": "27720",
    "end": "30720"
  },
  {
    "text": "little bit about why we built wasmgc and",
    "start": "30720",
    "end": "32820"
  },
  {
    "text": "what it means for web developers with",
    "start": "32820",
    "end": "34980"
  },
  {
    "text": "some exciting news I think for Native",
    "start": "34980",
    "end": "36780"
  },
  {
    "text": "mobile app developers as well at the end",
    "start": "36780",
    "end": "40340"
  },
  {
    "start": "40000",
    "end": "82000"
  },
  {
    "text": "so going back to the beginning this",
    "start": "40620",
    "end": "41940"
  },
  {
    "text": "mission statement should be mostly",
    "start": "41940",
    "end": "43260"
  },
  {
    "text": "familiar to two people it's Loosely",
    "start": "43260",
    "end": "45180"
  },
  {
    "text": "paraphrased from what's on",
    "start": "45180",
    "end": "46440"
  },
  {
    "text": "webassembly.org webassembly is a",
    "start": "46440",
    "end": "48899"
  },
  {
    "text": "portable compilation Target for",
    "start": "48899",
    "end": "50280"
  },
  {
    "text": "programming languages supporting",
    "start": "50280",
    "end": "51780"
  },
  {
    "text": "deployment on the web",
    "start": "51780",
    "end": "53100"
  },
  {
    "text": "we've seen today how webassembly has",
    "start": "53100",
    "end": "54600"
  },
  {
    "text": "grown far beyond this initial Mission",
    "start": "54600",
    "end": "56219"
  },
  {
    "text": "but I want to focus on just two parts of",
    "start": "56219",
    "end": "58260"
  },
  {
    "text": "it for now",
    "start": "58260",
    "end": "60120"
  },
  {
    "text": "the first part is the large Universe of",
    "start": "60120",
    "end": "62399"
  },
  {
    "text": "programming languages and manage",
    "start": "62399",
    "end": "64080"
  },
  {
    "text": "languages in particular and the second",
    "start": "64080",
    "end": "66360"
  },
  {
    "text": "since we work on Chrome is how we think",
    "start": "66360",
    "end": "68939"
  },
  {
    "text": "about deploying compiled code to the web",
    "start": "68939",
    "end": "71100"
  },
  {
    "text": "specifically",
    "start": "71100",
    "end": "72360"
  },
  {
    "text": "this usually means running webassembly",
    "start": "72360",
    "end": "74340"
  },
  {
    "text": "modules alongside JavaScript code and it",
    "start": "74340",
    "end": "76680"
  },
  {
    "text": "always means accessing the web's",
    "start": "76680",
    "end": "78420"
  },
  {
    "text": "JavaScript native apis in some form or",
    "start": "78420",
    "end": "80939"
  },
  {
    "text": "another",
    "start": "80939",
    "end": "82560"
  },
  {
    "start": "82000",
    "end": "152000"
  },
  {
    "text": "so first programming languages one way",
    "start": "82560",
    "end": "84840"
  },
  {
    "text": "to break down programming languages is",
    "start": "84840",
    "end": "86460"
  },
  {
    "text": "by how they use memory languages like c",
    "start": "86460",
    "end": "88860"
  },
  {
    "text": "c plus and rust rely on developers to",
    "start": "88860",
    "end": "91500"
  },
  {
    "text": "kind of tidy up after themselves freeing",
    "start": "91500",
    "end": "93720"
  },
  {
    "text": "allocated memory once it's no longer",
    "start": "93720",
    "end": "95280"
  },
  {
    "text": "being used",
    "start": "95280",
    "end": "96299"
  },
  {
    "text": "this class of languages was actually the",
    "start": "96299",
    "end": "98159"
  },
  {
    "text": "primary focus of the early webassembly",
    "start": "98159",
    "end": "100500"
  },
  {
    "text": "standard what we call webassembly MVP in",
    "start": "100500",
    "end": "103860"
  },
  {
    "text": "part because a lot of code was written",
    "start": "103860",
    "end": "105240"
  },
  {
    "text": "in C plus Graphics engines game engines",
    "start": "105240",
    "end": "108720"
  },
  {
    "text": "use C plus for performance reasons and",
    "start": "108720",
    "end": "111479"
  },
  {
    "text": "large desktop applications use C plus",
    "start": "111479",
    "end": "113040"
  },
  {
    "text": "plus largely for historic reasons",
    "start": "113040",
    "end": "116700"
  },
  {
    "text": "another class of languages supports",
    "start": "116700",
    "end": "118560"
  },
  {
    "text": "garbage collection where the language's",
    "start": "118560",
    "end": "120240"
  },
  {
    "text": "own runtime automatically finds and",
    "start": "120240",
    "end": "122280"
  },
  {
    "text": "frees memory that the app is no longer",
    "start": "122280",
    "end": "123780"
  },
  {
    "text": "using",
    "start": "123780",
    "end": "124619"
  },
  {
    "text": "now this class of languages is really",
    "start": "124619",
    "end": "126479"
  },
  {
    "text": "interesting if you're building web or",
    "start": "126479",
    "end": "128399"
  },
  {
    "text": "mobile apps because JavaScript is the",
    "start": "128399",
    "end": "131160"
  },
  {
    "text": "language in which the web's apis are",
    "start": "131160",
    "end": "133500"
  },
  {
    "text": "specified and standardized and kotlin",
    "start": "133500",
    "end": "135660"
  },
  {
    "text": "and dart are increasingly popular among",
    "start": "135660",
    "end": "137520"
  },
  {
    "text": "developers building cross-platform",
    "start": "137520",
    "end": "139080"
  },
  {
    "text": "native mobile apps so we wanted to",
    "start": "139080",
    "end": "141599"
  },
  {
    "text": "figure out what would it take to extend",
    "start": "141599",
    "end": "143400"
  },
  {
    "text": "the web platform",
    "start": "143400",
    "end": "144840"
  },
  {
    "text": "to include applications written in these",
    "start": "144840",
    "end": "147420"
  },
  {
    "text": "languages in a performant way so let's",
    "start": "147420",
    "end": "149580"
  },
  {
    "text": "talk about how we did that",
    "start": "149580",
    "end": "152340"
  },
  {
    "start": "152000",
    "end": "406000"
  },
  {
    "text": "when a web app starts in a browser it's",
    "start": "152340",
    "end": "154020"
  },
  {
    "text": "given a context and a JavaScript memory",
    "start": "154020",
    "end": "156959"
  },
  {
    "text": "now JavaScript memory is garbage",
    "start": "156959",
    "end": "158400"
  },
  {
    "text": "collected so there's a garbage collector",
    "start": "158400",
    "end": "159780"
  },
  {
    "text": "running behind the scenes that's",
    "start": "159780",
    "end": "160860"
  },
  {
    "text": "provided by the browser",
    "start": "160860",
    "end": "163940"
  },
  {
    "text": "when an app instantiates a webassembly",
    "start": "164340",
    "end": "166080"
  },
  {
    "text": "module it asks foreign is allocated a",
    "start": "166080",
    "end": "168180"
  },
  {
    "text": "region of linear memory for its own use",
    "start": "168180",
    "end": "171859"
  },
  {
    "text": "if a developer is using a language like",
    "start": "172319",
    "end": "173940"
  },
  {
    "text": "C or C plus plus then the waza module",
    "start": "173940",
    "end": "176519"
  },
  {
    "text": "uses some of this memory for a dynamic",
    "start": "176519",
    "end": "178200"
  },
  {
    "text": "Heap and the developer is responsible",
    "start": "178200",
    "end": "179940"
  },
  {
    "text": "for freeing objects from that Heap after",
    "start": "179940",
    "end": "182700"
  },
  {
    "text": "they're done using it",
    "start": "182700",
    "end": "185160"
  },
  {
    "text": "on the other hand if a developer wanted",
    "start": "185160",
    "end": "187019"
  },
  {
    "text": "to use a managed memory language then",
    "start": "187019",
    "end": "189360"
  },
  {
    "text": "the wasm module will need to include",
    "start": "189360",
    "end": "190920"
  },
  {
    "text": "that language's garbage collector code",
    "start": "190920",
    "end": "192840"
  },
  {
    "text": "to manage the Heap and automatically",
    "start": "192840",
    "end": "194879"
  },
  {
    "text": "free up unused memory",
    "start": "194879",
    "end": "196980"
  },
  {
    "text": "there are two main problems with this",
    "start": "196980",
    "end": "198480"
  },
  {
    "text": "approach",
    "start": "198480",
    "end": "199800"
  },
  {
    "text": "the first is obviously bloat",
    "start": "199800",
    "end": "202019"
  },
  {
    "text": "a webassembly module has to ship and",
    "start": "202019",
    "end": "204120"
  },
  {
    "text": "instantiate that garbage collector every",
    "start": "204120",
    "end": "205920"
  },
  {
    "text": "time the app is loaded this increases",
    "start": "205920",
    "end": "208260"
  },
  {
    "text": "the module size and delays the",
    "start": "208260",
    "end": "209760"
  },
  {
    "text": "application startup",
    "start": "209760",
    "end": "211680"
  },
  {
    "text": "despite the fact that every standards",
    "start": "211680",
    "end": "213659"
  },
  {
    "text": "compliant browser today already contains",
    "start": "213659",
    "end": "215580"
  },
  {
    "text": "a garbage collector that apps can use",
    "start": "215580",
    "end": "219140"
  },
  {
    "text": "another form of bloat comes from the",
    "start": "219900",
    "end": "221640"
  },
  {
    "text": "need for developers to have a kind of",
    "start": "221640",
    "end": "223379"
  },
  {
    "text": "Clairvoyance when deciding how much",
    "start": "223379",
    "end": "225180"
  },
  {
    "text": "memory to request for their webassembly",
    "start": "225180",
    "end": "226799"
  },
  {
    "text": "module to avoid crashes the typical",
    "start": "226799",
    "end": "229019"
  },
  {
    "text": "thing to do is to set your maximum",
    "start": "229019",
    "end": "230819"
  },
  {
    "text": "memory size just beyond the upper limit",
    "start": "230819",
    "end": "232620"
  },
  {
    "text": "of what you anticipate your memory needs",
    "start": "232620",
    "end": "234480"
  },
  {
    "text": "will actually be",
    "start": "234480",
    "end": "235920"
  },
  {
    "text": "this puts pressure on implementations",
    "start": "235920",
    "end": "237480"
  },
  {
    "text": "that have to manage the app's JavaScript",
    "start": "237480",
    "end": "239459"
  },
  {
    "text": "and webassembly memory separately",
    "start": "239459",
    "end": "241080"
  },
  {
    "text": "alongside the memory needed by other",
    "start": "241080",
    "end": "243180"
  },
  {
    "text": "apps and other other pages in the",
    "start": "243180",
    "end": "245159"
  },
  {
    "text": "browser",
    "start": "245159",
    "end": "247459"
  },
  {
    "text": "the second problem with this",
    "start": "247920",
    "end": "249000"
  },
  {
    "text": "architecture is what I call the split",
    "start": "249000",
    "end": "250379"
  },
  {
    "text": "brain problem",
    "start": "250379",
    "end": "251580"
  },
  {
    "text": "in this architecture the two memories",
    "start": "251580",
    "end": "253439"
  },
  {
    "text": "and their garbage collectors don't",
    "start": "253439",
    "end": "255239"
  },
  {
    "text": "actually know about each other",
    "start": "255239",
    "end": "258120"
  },
  {
    "text": "this means that developers need to be",
    "start": "258120",
    "end": "259620"
  },
  {
    "text": "careful to architect their applications",
    "start": "259620",
    "end": "261540"
  },
  {
    "text": "to avoid corruption when for example the",
    "start": "261540",
    "end": "264120"
  },
  {
    "text": "JavaScript garbage collector comes along",
    "start": "264120",
    "end": "265740"
  },
  {
    "text": "and frees some memory that's actually",
    "start": "265740",
    "end": "267780"
  },
  {
    "text": "still needed by the wasm side or vice",
    "start": "267780",
    "end": "270000"
  },
  {
    "text": "versa",
    "start": "270000",
    "end": "271139"
  },
  {
    "text": "all this adds up to more bookkeeping for",
    "start": "271139",
    "end": "273360"
  },
  {
    "text": "developers that they have to do",
    "start": "273360",
    "end": "274680"
  },
  {
    "text": "themselves which kind of defeats the",
    "start": "274680",
    "end": "276600"
  },
  {
    "text": "point of using a managed memory language",
    "start": "276600",
    "end": "277979"
  },
  {
    "text": "in the first place",
    "start": "277979",
    "end": "280639"
  },
  {
    "text": "but even if you put all of your objects",
    "start": "281759",
    "end": "283620"
  },
  {
    "text": "on one side in one Heap on the web",
    "start": "283620",
    "end": "285540"
  },
  {
    "text": "assembly side you can't avoid dealing",
    "start": "285540",
    "end": "287639"
  },
  {
    "text": "with the JavaScript Heap and that's",
    "start": "287639",
    "end": "289080"
  },
  {
    "text": "because of the web apis",
    "start": "289080",
    "end": "290940"
  },
  {
    "text": "web apis are specified to accept and",
    "start": "290940",
    "end": "293280"
  },
  {
    "text": "return JavaScript objects which",
    "start": "293280",
    "end": "295199"
  },
  {
    "text": "naturally live on the JavaScript Heap",
    "start": "295199",
    "end": "297060"
  },
  {
    "text": "and are collected by the JavaScript",
    "start": "297060",
    "end": "298620"
  },
  {
    "text": "garbage collector",
    "start": "298620",
    "end": "300120"
  },
  {
    "text": "in the original version of webassembly",
    "start": "300120",
    "end": "301860"
  },
  {
    "text": "this meant copying your data in both",
    "start": "301860",
    "end": "303720"
  },
  {
    "text": "directions between wasm and JavaScript",
    "start": "303720",
    "end": "305580"
  },
  {
    "text": "anytime you wanted to call a web API",
    "start": "305580",
    "end": "308639"
  },
  {
    "text": "Graphics apis like the Dom canvas webgl",
    "start": "308639",
    "end": "311580"
  },
  {
    "text": "and web GPU are especially impacted by",
    "start": "311580",
    "end": "313919"
  },
  {
    "text": "this because in some cases you have to",
    "start": "313919",
    "end": "315419"
  },
  {
    "text": "call these apis hundreds of times per",
    "start": "315419",
    "end": "317460"
  },
  {
    "text": "frame or thousands of times per second",
    "start": "317460",
    "end": "319460"
  },
  {
    "text": "with very strict latency requirements to",
    "start": "319460",
    "end": "321900"
  },
  {
    "text": "avoid user visible Jank",
    "start": "321900",
    "end": "324000"
  },
  {
    "text": "the net result is even after we built a",
    "start": "324000",
    "end": "326820"
  },
  {
    "text": "fast compilation Target for code on the",
    "start": "326820",
    "end": "328680"
  },
  {
    "text": "web many Frameworks and applications ran",
    "start": "328680",
    "end": "330960"
  },
  {
    "text": "the risk of producing jankier",
    "start": "330960",
    "end": "332880"
  },
  {
    "text": "experiences on the web then they were",
    "start": "332880",
    "end": "334860"
  },
  {
    "text": "able to produce on Native mobile",
    "start": "334860",
    "end": "336120"
  },
  {
    "text": "platforms",
    "start": "336120",
    "end": "338720"
  },
  {
    "text": "so how do we address this",
    "start": "339300",
    "end": "341280"
  },
  {
    "text": "well the webassembly community came",
    "start": "341280",
    "end": "343020"
  },
  {
    "text": "together and created a new extension",
    "start": "343020",
    "end": "344580"
  },
  {
    "text": "that in effect shares a joint Heap",
    "start": "344580",
    "end": "347039"
  },
  {
    "text": "between JavaScript and webassembly GC",
    "start": "347039",
    "end": "349199"
  },
  {
    "text": "code",
    "start": "349199",
    "end": "350160"
  },
  {
    "text": "now your managed memory code can just",
    "start": "350160",
    "end": "352560"
  },
  {
    "text": "allocate objects on this joint Heap and",
    "start": "352560",
    "end": "355080"
  },
  {
    "text": "when the browser's garbage collector",
    "start": "355080",
    "end": "356340"
  },
  {
    "text": "comes around JavaScript and webassembly",
    "start": "356340",
    "end": "358320"
  },
  {
    "text": "GC objects are garbage collected",
    "start": "358320",
    "end": "360120"
  },
  {
    "text": "together",
    "start": "360120",
    "end": "361380"
  },
  {
    "text": "this means no more bloat your",
    "start": "361380",
    "end": "363240"
  },
  {
    "text": "webassembly module doesn't have to ship",
    "start": "363240",
    "end": "364680"
  },
  {
    "text": "its own full garbage collector",
    "start": "364680",
    "end": "366120"
  },
  {
    "text": "implementation every time your app loads",
    "start": "366120",
    "end": "368160"
  },
  {
    "text": "and your webassembly app can more easily",
    "start": "368160",
    "end": "370139"
  },
  {
    "text": "grow and Shrink its memory footprint",
    "start": "370139",
    "end": "371820"
  },
  {
    "text": "based on uh its consumption just like a",
    "start": "371820",
    "end": "374699"
  },
  {
    "text": "Javascript app can",
    "start": "374699",
    "end": "376380"
  },
  {
    "text": "some browsers including Chrome will also",
    "start": "376380",
    "end": "378840"
  },
  {
    "text": "actually return unused webassembly",
    "start": "378840",
    "end": "380639"
  },
  {
    "text": "memory to the operating system whenever",
    "start": "380639",
    "end": "382919"
  },
  {
    "text": "possible helping to ensure that apps",
    "start": "382919",
    "end": "385020"
  },
  {
    "text": "running on the user's device remain",
    "start": "385020",
    "end": "386699"
  },
  {
    "text": "efficient and responsive",
    "start": "386699",
    "end": "389840"
  },
  {
    "text": "and the web API story improves as well",
    "start": "390600",
    "end": "392600"
  },
  {
    "text": "webassembly GC modules create objects in",
    "start": "392600",
    "end": "395580"
  },
  {
    "text": "the same Heap where the JavaScript web",
    "start": "395580",
    "end": "397259"
  },
  {
    "text": "apis will go looking for them and return",
    "start": "397259",
    "end": "399840"
  },
  {
    "text": "values are easily passed back as well",
    "start": "399840",
    "end": "401819"
  },
  {
    "text": "without any excessive copying",
    "start": "401819",
    "end": "405500"
  },
  {
    "text": "so that's webassembly GC smaller",
    "start": "406139",
    "end": "408360"
  },
  {
    "text": "binaries for modern managed memory",
    "start": "408360",
    "end": "410880"
  },
  {
    "text": "languages faster interrupt with",
    "start": "410880",
    "end": "412979"
  },
  {
    "text": "JavaScript code and the javascript-based",
    "start": "412979",
    "end": "415080"
  },
  {
    "text": "web apis and a dynamically resizable",
    "start": "415080",
    "end": "417600"
  },
  {
    "text": "memory footprint that grows and shrinks",
    "start": "417600",
    "end": "419520"
  },
  {
    "text": "to provide your module with what it",
    "start": "419520",
    "end": "421020"
  },
  {
    "text": "needs",
    "start": "421020",
    "end": "423319"
  },
  {
    "start": "424000",
    "end": "440000"
  },
  {
    "text": "and there's one more thing",
    "start": "424259",
    "end": "426120"
  },
  {
    "text": "all this talk about managed memory",
    "start": "426120",
    "end": "427740"
  },
  {
    "text": "languages from native mobile platforms",
    "start": "427740",
    "end": "429660"
  },
  {
    "text": "running on the web it's no hypothetical",
    "start": "429660",
    "end": "432240"
  },
  {
    "text": "first let's say hi to our developer",
    "start": "432240",
    "end": "434220"
  },
  {
    "text": "Friends building flutter Android and",
    "start": "434220",
    "end": "435900"
  },
  {
    "text": "kotlin multi-platform apps we've got",
    "start": "435900",
    "end": "438000"
  },
  {
    "text": "some news for you too",
    "start": "438000",
    "end": "440699"
  },
  {
    "start": "440000",
    "end": "475000"
  },
  {
    "text": "early data shows that webassembly GC now",
    "start": "440699",
    "end": "443400"
  },
  {
    "text": "runs code compiled from these languages",
    "start": "443400",
    "end": "445199"
  },
  {
    "text": "in the browser two to four times faster",
    "start": "445199",
    "end": "447720"
  },
  {
    "text": "than compiling them to JavaScript",
    "start": "447720",
    "end": "450300"
  },
  {
    "text": "from a user's point of view this level",
    "start": "450300",
    "end": "452160"
  },
  {
    "text": "of performance is increasingly",
    "start": "452160",
    "end": "453479"
  },
  {
    "text": "indistinguishable from what they were",
    "start": "453479",
    "end": "455400"
  },
  {
    "text": "what they would see on Native mobile",
    "start": "455400",
    "end": "457020"
  },
  {
    "text": "platforms we're talking about apps",
    "start": "457020",
    "end": "459180"
  },
  {
    "text": "running at 120 frames per second with",
    "start": "459180",
    "end": "461340"
  },
  {
    "text": "single millisecond frame update times",
    "start": "461340",
    "end": "463740"
  },
  {
    "text": "we can now imagine a world where",
    "start": "463740",
    "end": "465660"
  },
  {
    "text": "cross-platform Frameworks can build for",
    "start": "465660",
    "end": "467699"
  },
  {
    "text": "Native and the web with no perceivable",
    "start": "467699",
    "end": "470099"
  },
  {
    "text": "difference in their capabilities or in",
    "start": "470099",
    "end": "472199"
  },
  {
    "text": "their performance",
    "start": "472199",
    "end": "474800"
  },
  {
    "text": "and on the web your app is just a click",
    "start": "474840",
    "end": "477000"
  },
  {
    "text": "away from billions of new users",
    "start": "477000",
    "end": "479280"
  },
  {
    "text": "who can discover and share it just as",
    "start": "479280",
    "end": "481020"
  },
  {
    "text": "easily as they share a web page with no",
    "start": "481020",
    "end": "483240"
  },
  {
    "text": "stores getting in the way and no Revenue",
    "start": "483240",
    "end": "485160"
  },
  {
    "text": "split affecting your profitability",
    "start": "485160",
    "end": "487560"
  },
  {
    "text": "the productivity of cross-platform",
    "start": "487560",
    "end": "489360"
  },
  {
    "text": "development the performance of native",
    "start": "489360",
    "end": "491460"
  },
  {
    "text": "mobile apps and the openness of the web",
    "start": "491460",
    "end": "493979"
  },
  {
    "text": "that's what we're excited about with",
    "start": "493979",
    "end": "495599"
  },
  {
    "text": "webassembly",
    "start": "495599",
    "end": "498259"
  },
  {
    "start": "498000",
    "end": "576000"
  },
  {
    "text": "I'll close by saying that there's just",
    "start": "498479",
    "end": "499860"
  },
  {
    "text": "so much more to the story than I can",
    "start": "499860",
    "end": "501360"
  },
  {
    "text": "share with you in this brief lightning",
    "start": "501360",
    "end": "502680"
  },
  {
    "text": "talk so don't miss these talks from",
    "start": "502680",
    "end": "504900"
  },
  {
    "text": "Kevin on flutter as well as eliteman",
    "start": "504900",
    "end": "506520"
  },
  {
    "text": "Sebastian on kotlin multi-platform and",
    "start": "506520",
    "end": "509220"
  },
  {
    "text": "be sure to click over to their videos if",
    "start": "509220",
    "end": "510539"
  },
  {
    "text": "you're watching this online thank you",
    "start": "510539",
    "end": "514279"
  },
  {
    "text": "thank you",
    "start": "517760",
    "end": "520760"
  },
  {
    "text": "[Applause]",
    "start": "520830",
    "end": "524059"
  },
  {
    "text": "any questions",
    "start": "524820",
    "end": "527420"
  },
  {
    "text": "are there mics going around or go ahead",
    "start": "531420",
    "end": "534800"
  },
  {
    "text": "that's a great question I know the",
    "start": "547380",
    "end": "549480"
  },
  {
    "text": "flutter presentation will go into that",
    "start": "549480",
    "end": "551399"
  },
  {
    "text": "and they have an excellent story there",
    "start": "551399",
    "end": "553019"
  },
  {
    "text": "other languages obviously were evolving",
    "start": "553019",
    "end": "555060"
  },
  {
    "text": "that story as well but our goal with",
    "start": "555060",
    "end": "557399"
  },
  {
    "text": "debugging is to actually link into the",
    "start": "557399",
    "end": "559980"
  },
  {
    "text": "existing debugging experience for Native",
    "start": "559980",
    "end": "561360"
  },
  {
    "text": "mobile development as well",
    "start": "561360",
    "end": "564320"
  },
  {
    "text": "awesome thank you very much",
    "start": "570839",
    "end": "573720"
  },
  {
    "text": "thank you",
    "start": "573720",
    "end": "575839"
  }
]