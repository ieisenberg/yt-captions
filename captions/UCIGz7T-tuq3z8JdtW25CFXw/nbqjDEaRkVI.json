[
  {
    "text": "[Music]",
    "start": "350",
    "end": "12559"
  },
  {
    "text": "all right hello folks my name is Oscar",
    "start": "12559",
    "end": "14719"
  },
  {
    "text": "Spencer i'm a co-author of the grain",
    "start": "14719",
    "end": "16480"
  },
  {
    "text": "programming language and my talk is a",
    "start": "16480",
    "end": "18720"
  },
  {
    "text": "compiler author's guide to web assembly",
    "start": "18720",
    "end": "20800"
  },
  {
    "text": "GC so first let's all get on the same",
    "start": "20800",
    "end": "23279"
  },
  {
    "text": "page about what is garbage so when",
    "start": "23279",
    "end": "25920"
  },
  {
    "text": "you're writing a highle programming",
    "start": "25920",
    "end": "27199"
  },
  {
    "text": "language all the time we write code",
    "start": "27199",
    "end": "29439"
  },
  {
    "text": "exactly like this and we don't think",
    "start": "29439",
    "end": "31439"
  },
  {
    "text": "twice about it but you're allocating",
    "start": "31439",
    "end": "34239"
  },
  {
    "text": "just objects and objects all over the",
    "start": "34239",
    "end": "36719"
  },
  {
    "text": "place and it's the job of a garbage",
    "start": "36719",
    "end": "39040"
  },
  {
    "text": "collector to go and clean that up for",
    "start": "39040",
    "end": "40800"
  },
  {
    "text": "you because eventually uh your program",
    "start": "40800",
    "end": "42559"
  },
  {
    "text": "is just going to run out of memory and",
    "start": "42559",
    "end": "44239"
  },
  {
    "text": "that's pretty sad we don't want that to",
    "start": "44239",
    "end": "46079"
  },
  {
    "text": "happen uh so in a low-level language",
    "start": "46079",
    "end": "49440"
  },
  {
    "text": "like C uh you know you are the garbage",
    "start": "49440",
    "end": "52800"
  },
  {
    "text": "collector you allocate memory you have",
    "start": "52800",
    "end": "54640"
  },
  {
    "text": "to remember to uh free that memory and",
    "start": "54640",
    "end": "56480"
  },
  {
    "text": "sometimes that can be a little bit of a",
    "start": "56480",
    "end": "57920"
  },
  {
    "text": "challenge but garbage collectors they're",
    "start": "57920",
    "end": "60640"
  },
  {
    "text": "often super duper large and really",
    "start": "60640",
    "end": "62879"
  },
  {
    "text": "complicated like these are often you",
    "start": "62879",
    "end": "64878"
  },
  {
    "text": "know masterful pieces of engineering",
    "start": "64879",
    "end": "66560"
  },
  {
    "text": "that thousands of engineer hours have",
    "start": "66560",
    "end": "68799"
  },
  {
    "text": "gone into to make awesome some of them",
    "start": "68799",
    "end": "70720"
  },
  {
    "text": "do crazy things like copy uh memory over",
    "start": "70720",
    "end": "73600"
  },
  {
    "text": "to different heaps depending on how old",
    "start": "73600",
    "end": "75439"
  },
  {
    "text": "the data is and all sorts of crazy stuff",
    "start": "75439",
    "end": "77280"
  },
  {
    "text": "like that and that can be kind of large",
    "start": "77280",
    "end": "79920"
  },
  {
    "text": "and maybe sticking that in your WM",
    "start": "79920",
    "end": "81439"
  },
  {
    "text": "module is not super cool so again if",
    "start": "81439",
    "end": "85119"
  },
  {
    "text": "you're a super low-level language like C",
    "start": "85119",
    "end": "87119"
  },
  {
    "text": "this isn't really a big deal a very",
    "start": "87119",
    "end": "89119"
  },
  {
    "text": "small portion of your WM module is going",
    "start": "89119",
    "end": "91280"
  },
  {
    "text": "to be your allocation code your",
    "start": "91280",
    "end": "92960"
  },
  {
    "text": "implementation of Malak and",
    "start": "92960",
    "end": "94920"
  },
  {
    "text": "free but if you're a highle language you",
    "start": "94920",
    "end": "97759"
  },
  {
    "text": "got to ship a whole freaking GC in your",
    "start": "97759",
    "end": "99600"
  },
  {
    "text": "module and that's not really ideal right",
    "start": "99600",
    "end": "103759"
  },
  {
    "text": "uh because in the Wom MVP with linear",
    "start": "103759",
    "end": "107119"
  },
  {
    "text": "memory the runtime just hands you a",
    "start": "107119",
    "end": "108960"
  },
  {
    "text": "chunk of memory and says \"Hey have it um",
    "start": "108960",
    "end": "111360"
  },
  {
    "text": "manage it however you best see fit and",
    "start": "111360",
    "end": "113040"
  },
  {
    "text": "if I need a garbage collector then I",
    "start": "113040",
    "end": "114880"
  },
  {
    "text": "guess I got to ship one but browsers",
    "start": "114880",
    "end": "117119"
  },
  {
    "text": "have these world-class garbage",
    "start": "117119",
    "end": "118399"
  },
  {
    "text": "collectors and so it would be amazing if",
    "start": "118399",
    "end": "119920"
  },
  {
    "text": "there was an opportunity for web asmbly",
    "start": "119920",
    "end": "121439"
  },
  {
    "text": "code to be able to tap into that so",
    "start": "121439",
    "end": "125119"
  },
  {
    "text": "goals of the WMGc proposal provide a way",
    "start": "125119",
    "end": "128000"
  },
  {
    "text": "for web assembly modules to utilize a",
    "start": "128000",
    "end": "129679"
  },
  {
    "text": "runtime's GC implementation and then",
    "start": "129679",
    "end": "132000"
  },
  {
    "text": "make sure it's generic enough that it's",
    "start": "132000",
    "end": "133680"
  },
  {
    "text": "going to work for any language different",
    "start": "133680",
    "end": "135040"
  },
  {
    "text": "languages sometimes want different",
    "start": "135040",
    "end": "136400"
  },
  {
    "text": "things out of a GC implementation but as",
    "start": "136400",
    "end": "138560"
  },
  {
    "text": "long as it's generic enough it should be",
    "start": "138560",
    "end": "140160"
  },
  {
    "text": "perfectly",
    "start": "140160",
    "end": "141560"
  },
  {
    "text": "fine and then the big goal is if you're",
    "start": "141560",
    "end": "144959"
  },
  {
    "text": "a high level language your web assembly",
    "start": "144959",
    "end": "146720"
  },
  {
    "text": "module should just be all user code like",
    "start": "146720",
    "end": "149200"
  },
  {
    "text": "no allocator no GC implementation no",
    "start": "149200",
    "end": "153560"
  },
  {
    "text": "nothing so this is the TLDDR of the WOM",
    "start": "153560",
    "end": "157519"
  },
  {
    "text": "GC proposal which if you take nothing",
    "start": "157519",
    "end": "160080"
  },
  {
    "text": "else from this talk I want you to",
    "start": "160080",
    "end": "161519"
  },
  {
    "text": "remember this all the proposal is is you",
    "start": "161519",
    "end": "164000"
  },
  {
    "text": "can make strrus and arrays that's",
    "start": "164000",
    "end": "166480"
  },
  {
    "text": "literally it and this is kind of",
    "start": "166480",
    "end": "168879"
  },
  {
    "text": "brilliant in a way uh it's brilliant",
    "start": "168879",
    "end": "171319"
  },
  {
    "text": "because the GC proposal doesn't tell you",
    "start": "171319",
    "end": "175200"
  },
  {
    "text": "how you have to do GC that's now left up",
    "start": "175200",
    "end": "177840"
  },
  {
    "text": "completely to the runtime so let's say",
    "start": "177840",
    "end": "180800"
  },
  {
    "text": "you're running you know at the edge",
    "start": "180800",
    "end": "182560"
  },
  {
    "text": "maybe your functions as a service",
    "start": "182560",
    "end": "183760"
  },
  {
    "text": "platform uh maybe the best GC algorithm",
    "start": "183760",
    "end": "186159"
  },
  {
    "text": "for you is don't bother GC at all um my",
    "start": "186159",
    "end": "189200"
  },
  {
    "text": "favorite GC algorithm is just exit just",
    "start": "189200",
    "end": "191519"
  },
  {
    "text": "let the program finish and you know",
    "start": "191519",
    "end": "193280"
  },
  {
    "text": "throw it all away super happy um if",
    "start": "193280",
    "end": "196640"
  },
  {
    "text": "you've got a real-time uh program",
    "start": "196640",
    "end": "199040"
  },
  {
    "text": "running on say a robotic arm or a car",
    "start": "199040",
    "end": "202319"
  },
  {
    "text": "when you press the brake in your car you",
    "start": "202319",
    "end": "204239"
  },
  {
    "text": "probably don't want that GC algorithm to",
    "start": "204239",
    "end": "206800"
  },
  {
    "text": "be in the way of actually getting the",
    "start": "206800",
    "end": "208560"
  },
  {
    "text": "code executing some garbage collectors",
    "start": "208560",
    "end": "210319"
  },
  {
    "text": "do what's called stopping the world",
    "start": "210319",
    "end": "211840"
  },
  {
    "text": "where they'll pause execution of your",
    "start": "211840",
    "end": "213519"
  },
  {
    "text": "program and then go do a bunch of GC and",
    "start": "213519",
    "end": "215120"
  },
  {
    "text": "then go back and maybe that's not ideal",
    "start": "215120",
    "end": "216799"
  },
  {
    "text": "for that type of workload but you can do",
    "start": "216799",
    "end": "218560"
  },
  {
    "text": "something like reference counting in",
    "start": "218560",
    "end": "219760"
  },
  {
    "text": "that case where you amortize all the",
    "start": "219760",
    "end": "221440"
  },
  {
    "text": "cost of GC over the co over the lifetime",
    "start": "221440",
    "end": "223599"
  },
  {
    "text": "of your program",
    "start": "223599",
    "end": "225720"
  },
  {
    "text": "so I think even bigger is the",
    "start": "225720",
    "end": "228879"
  },
  {
    "text": "opportunity for portability you don't",
    "start": "228879",
    "end": "231200"
  },
  {
    "text": "have to recompile your web assembly",
    "start": "231200",
    "end": "233040"
  },
  {
    "text": "modules to make them super portable with",
    "start": "233040",
    "end": "235280"
  },
  {
    "text": "whatever type of GC you want this is",
    "start": "235280",
    "end": "237519"
  },
  {
    "text": "particularly huge when you start",
    "start": "237519",
    "end": "238959"
  },
  {
    "text": "thinking about things like the component",
    "start": "238959",
    "end": "240480"
  },
  {
    "text": "model right because I just want to go",
    "start": "240480",
    "end": "243040"
  },
  {
    "text": "download a WM module or a WM component",
    "start": "243040",
    "end": "245120"
  },
  {
    "text": "from somewhere and just go run it i",
    "start": "245120",
    "end": "247040"
  },
  {
    "text": "don't want to have to go and figure out",
    "start": "247040",
    "end": "248159"
  },
  {
    "text": "how to recompile it i can just take an",
    "start": "248159",
    "end": "250000"
  },
  {
    "text": "existing one and so long if it's using",
    "start": "250000",
    "end": "251959"
  },
  {
    "text": "WMGC as long as my runtime uses the",
    "start": "251959",
    "end": "254560"
  },
  {
    "text": "algorithm that I want I'm going to be a",
    "start": "254560",
    "end": "256799"
  },
  {
    "text": "pretty happy camper so the WMGc proposal",
    "start": "256799",
    "end": "261280"
  },
  {
    "text": "uh gives us a bunch of new reference",
    "start": "261280",
    "end": "263080"
  },
  {
    "text": "types now uh the funk uh reference type",
    "start": "263080",
    "end": "266560"
  },
  {
    "text": "and extern was a part of the uh",
    "start": "266560",
    "end": "269120"
  },
  {
    "text": "reference types proposal but GC gives us",
    "start": "269120",
    "end": "271360"
  },
  {
    "text": "this new uh any type and then that's",
    "start": "271360",
    "end": "273600"
  },
  {
    "text": "sort of the top type for all these new",
    "start": "273600",
    "end": "274960"
  },
  {
    "text": "heap types and then we have EQ types",
    "start": "274960",
    "end": "277840"
  },
  {
    "text": "which are types that can be compared for",
    "start": "277840",
    "end": "280080"
  },
  {
    "text": "like hey are these two objects the same",
    "start": "280080",
    "end": "281759"
  },
  {
    "text": "thing and then as I mentioned before we",
    "start": "281759",
    "end": "283919"
  },
  {
    "text": "have strrus and arrays but additionally",
    "start": "283919",
    "end": "285680"
  },
  {
    "text": "we get i31s and so i31 is the hey this",
    "start": "285680",
    "end": "290000"
  },
  {
    "text": "is a value that exists on the heap but",
    "start": "290000",
    "end": "291919"
  },
  {
    "text": "it's not a pointer it's just a scalar",
    "start": "291919",
    "end": "293919"
  },
  {
    "text": "value uh the reason why it's 31 bits is",
    "start": "293919",
    "end": "296560"
  },
  {
    "text": "because a runtime can efficiently use",
    "start": "296560",
    "end": "298479"
  },
  {
    "text": "one bit of that value to tag it and say",
    "start": "298479",
    "end": "300720"
  },
  {
    "text": "let's set the last bit of that value to",
    "start": "300720",
    "end": "302479"
  },
  {
    "text": "one and then now from the runtimes",
    "start": "302479",
    "end": "304160"
  },
  {
    "text": "perspective it says oh I know that this",
    "start": "304160",
    "end": "305840"
  },
  {
    "text": "thing is not a pointer I won't do",
    "start": "305840",
    "end": "307280"
  },
  {
    "text": "something scary with it um this is a",
    "start": "307280",
    "end": "309919"
  },
  {
    "text": "funny thing for grain uh in particular",
    "start": "309919",
    "end": "312240"
  },
  {
    "text": "because in our linear memory um",
    "start": "312240",
    "end": "313919"
  },
  {
    "text": "implementation we did the exact same",
    "start": "313919",
    "end": "315919"
  },
  {
    "text": "thing uh just in our own implementation",
    "start": "315919",
    "end": "318880"
  },
  {
    "text": "but we also use a little bit uh a couple",
    "start": "318880",
    "end": "321039"
  },
  {
    "text": "extra bits for more information uh to",
    "start": "321039",
    "end": "323360"
  },
  {
    "text": "handle things like printing and so we",
    "start": "323360",
    "end": "325840"
  },
  {
    "text": "actually lose we still need that extra",
    "start": "325840",
    "end": "327440"
  },
  {
    "text": "bit so now we're down to 30 bits instead",
    "start": "327440",
    "end": "329360"
  },
  {
    "text": "of 31 bits but it's sort of a fun thing",
    "start": "329360",
    "end": "331759"
  },
  {
    "text": "that happens the fields of strrus and",
    "start": "331759",
    "end": "334400"
  },
  {
    "text": "arrays can be any of the core wom number",
    "start": "334400",
    "end": "336400"
  },
  {
    "text": "types uh so i32 64",
    "start": "336400",
    "end": "339320"
  },
  {
    "text": "F3264 or any of these reference types",
    "start": "339320",
    "end": "342080"
  },
  {
    "text": "and fields can have a special pack type",
    "start": "342080",
    "end": "344320"
  },
  {
    "text": "so they can be i8s i16s and these types",
    "start": "344320",
    "end": "348720"
  },
  {
    "text": "were not added to core web assembly so",
    "start": "348720",
    "end": "351280"
  },
  {
    "text": "you don't just have new number types",
    "start": "351280",
    "end": "352639"
  },
  {
    "text": "that are i8s and i16s that would",
    "start": "352639",
    "end": "354160"
  },
  {
    "text": "complicate much of wom so instead this",
    "start": "354160",
    "end": "357039"
  },
  {
    "text": "is limited to just field types or",
    "start": "357039",
    "end": "359039"
  },
  {
    "text": "structure arrays and of course fields",
    "start": "359039",
    "end": "360880"
  },
  {
    "text": "can be mutable so you can have immutable",
    "start": "360880",
    "end": "362800"
  },
  {
    "text": "arrays or arrays that are mutable for",
    "start": "362800",
    "end": "365199"
  },
  {
    "text": "like array mute i8 for example is a",
    "start": "365199",
    "end": "367199"
  },
  {
    "text": "buffer type uh and additionally any of",
    "start": "367199",
    "end": "369280"
  },
  {
    "text": "your struck fields can be",
    "start": "369280",
    "end": "371160"
  },
  {
    "text": "mutable we also get subtyping uh what's",
    "start": "371160",
    "end": "374319"
  },
  {
    "text": "kind of neat about how the subtyping",
    "start": "374319",
    "end": "376639"
  },
  {
    "text": "works is theoretically as long as one",
    "start": "376639",
    "end": "381440"
  },
  {
    "text": "strct you had all the fields were a",
    "start": "381440",
    "end": "383919"
  },
  {
    "text": "prefix of another strct the spec says",
    "start": "383919",
    "end": "386400"
  },
  {
    "text": "that that is a subtype of uh that other",
    "start": "386400",
    "end": "388880"
  },
  {
    "text": "strct but for some performance reasons",
    "start": "388880",
    "end": "391520"
  },
  {
    "text": "make sure optim uh optimizers don't",
    "start": "391520",
    "end": "393440"
  },
  {
    "text": "screw you up you want to explicitly",
    "start": "393440",
    "end": "395919"
  },
  {
    "text": "declare all of your subtypes um in your",
    "start": "395919",
    "end": "398720"
  },
  {
    "text": "actual WOM code and then you can subtype",
    "start": "398720",
    "end": "401039"
  },
  {
    "text": "them as many times as you need and say",
    "start": "401039",
    "end": "403360"
  },
  {
    "text": "if you have uh some data that's relevant",
    "start": "403360",
    "end": "405600"
  },
  {
    "text": "to all of your GC objects maybe you have",
    "start": "405600",
    "end": "407759"
  },
  {
    "text": "an overarching type for that and then",
    "start": "407759",
    "end": "409600"
  },
  {
    "text": "for the more specific types you just add",
    "start": "409600",
    "end": "411280"
  },
  {
    "text": "on additional",
    "start": "411280",
    "end": "412600"
  },
  {
    "text": "fields so of course we get a bunch of",
    "start": "412600",
    "end": "415039"
  },
  {
    "text": "new instructions to handle all this um",
    "start": "415039",
    "end": "417280"
  },
  {
    "text": "of course uh instructions to create",
    "start": "417280",
    "end": "419039"
  },
  {
    "text": "strrus get the values uh set the values",
    "start": "419039",
    "end": "421759"
  },
  {
    "text": "and strrus arrays are pretty similar",
    "start": "421759",
    "end": "425039"
  },
  {
    "text": "same instructions but we got a couple",
    "start": "425039",
    "end": "426639"
  },
  {
    "text": "more in particular you can initialize an",
    "start": "426639",
    "end": "428960"
  },
  {
    "text": "array from a data segment or from an",
    "start": "428960",
    "end": "431039"
  },
  {
    "text": "element segment and so remember now that",
    "start": "431039",
    "end": "433840"
  },
  {
    "text": "we have arrays of reference types if you",
    "start": "433840",
    "end": "435599"
  },
  {
    "text": "had an element segment uh filled with",
    "start": "435599",
    "end": "437599"
  },
  {
    "text": "funk refs for example and you want to",
    "start": "437599",
    "end": "439680"
  },
  {
    "text": "initialize an array from that element",
    "start": "439680",
    "end": "441520"
  },
  {
    "text": "segment you totally can uh you can also",
    "start": "441520",
    "end": "444080"
  },
  {
    "text": "get the length of arrays which",
    "start": "444080",
    "end": "446080"
  },
  {
    "text": "programmers tend to love to do uh and",
    "start": "446080",
    "end": "448639"
  },
  {
    "text": "then of course there's bulk memory",
    "start": "448639",
    "end": "449919"
  },
  {
    "text": "instructions for filling copying and all",
    "start": "449919",
    "end": "451919"
  },
  {
    "text": "that sort of fun stuff",
    "start": "451919",
    "end": "454319"
  },
  {
    "text": "for uh I31 of course we need to be able",
    "start": "454319",
    "end": "457199"
  },
  {
    "text": "to create it uh and then when you want",
    "start": "457199",
    "end": "459039"
  },
  {
    "text": "to get that value back you have to tell",
    "start": "459039",
    "end": "461039"
  },
  {
    "text": "uh Wom how do you want them to handle",
    "start": "461039",
    "end": "463599"
  },
  {
    "text": "the sign bit do you want to sign extend",
    "start": "463599",
    "end": "465360"
  },
  {
    "text": "or",
    "start": "465360",
    "end": "466360"
  },
  {
    "text": "not and then we get to the fun casting",
    "start": "466360",
    "end": "470440"
  },
  {
    "text": "instructions ref.est lets you say \"Hey I",
    "start": "470440",
    "end": "473360"
  },
  {
    "text": "have this value is it this particular",
    "start": "473360",
    "end": "476039"
  },
  {
    "text": "type?\" Plain and simple easy ref",
    "start": "476039",
    "end": "481280"
  },
  {
    "text": "if you're a compiler engineer this is",
    "start": "481280",
    "end": "482800"
  },
  {
    "text": "your best friend uh because essentially",
    "start": "482800",
    "end": "485280"
  },
  {
    "text": "there's going to be times when you're",
    "start": "485280",
    "end": "486879"
  },
  {
    "text": "trying to compile a program where you",
    "start": "486879",
    "end": "489919"
  },
  {
    "text": "can prove from your compiler that you",
    "start": "489919",
    "end": "492319"
  },
  {
    "text": "know that the value like the type of",
    "start": "492319",
    "end": "494240"
  },
  {
    "text": "this value is a certain type but for",
    "start": "494240",
    "end": "497120"
  },
  {
    "text": "whatever reason and I'll show you an",
    "start": "497120",
    "end": "498960"
  },
  {
    "text": "example of this later you can't actually",
    "start": "498960",
    "end": "501039"
  },
  {
    "text": "compile it with that exact type uh this",
    "start": "501039",
    "end": "503520"
  },
  {
    "text": "is your escape hatch that says \"Hey no",
    "start": "503520",
    "end": "506080"
  },
  {
    "text": "we can just cast this value but this",
    "start": "506080",
    "end": "508080"
  },
  {
    "text": "does incur a runtime cost uh it's going",
    "start": "508080",
    "end": "510400"
  },
  {
    "text": "to actually check that value make sure",
    "start": "510400",
    "end": "512080"
  },
  {
    "text": "it can be cast to you know whatever type",
    "start": "512080",
    "end": "514240"
  },
  {
    "text": "it needs to be cast to and then if it",
    "start": "514240",
    "end": "516080"
  },
  {
    "text": "doesn't work then it will trap and so",
    "start": "516080",
    "end": "518080"
  },
  {
    "text": "that is something that you do have to",
    "start": "518080",
    "end": "519919"
  },
  {
    "text": "worry about additionally we have branch",
    "start": "519919",
    "end": "522880"
  },
  {
    "text": "on cast and branch on cast fail which",
    "start": "522880",
    "end": "525680"
  },
  {
    "text": "it's exactly like a rough test um with",
    "start": "525680",
    "end": "527760"
  },
  {
    "text": "like an if statement basically which if",
    "start": "527760",
    "end": "530720"
  },
  {
    "text": "you're a fan of the BR table instruction",
    "start": "530720",
    "end": "532800"
  },
  {
    "text": "you may notice there is no BR table on",
    "start": "532800",
    "end": "536399"
  },
  {
    "text": "cast and cast fail",
    "start": "536399",
    "end": "539720"
  },
  {
    "text": "which you know I'm just going to ride",
    "start": "539720",
    "end": "542000"
  },
  {
    "text": "until we get that instruction but for",
    "start": "542000",
    "end": "543680"
  },
  {
    "text": "now it'll be okay",
    "start": "543680",
    "end": "545760"
  },
  {
    "text": "and then for quality instructions for EQ",
    "start": "545760",
    "end": "548080"
  },
  {
    "text": "types in particular you can test are",
    "start": "548080",
    "end": "550240"
  },
  {
    "text": "these things the same",
    "start": "550240",
    "end": "552120"
  },
  {
    "text": "object now I want to talk about some of",
    "start": "552120",
    "end": "554240"
  },
  {
    "text": "the quirks of WMGc particularly if",
    "start": "554240",
    "end": "556880"
  },
  {
    "text": "you're trying to compile to it uh the",
    "start": "556880",
    "end": "559120"
  },
  {
    "text": "first is non-nullable locals so in web",
    "start": "559120",
    "end": "562720"
  },
  {
    "text": "assembly up until now let's say you had",
    "start": "562720",
    "end": "565120"
  },
  {
    "text": "a local that was an",
    "start": "565120",
    "end": "566839"
  },
  {
    "text": "I32 if you attempt to read that local",
    "start": "566839",
    "end": "569839"
  },
  {
    "text": "before you set it you just get back zero",
    "start": "569839",
    "end": "572480"
  },
  {
    "text": "great awesome well defined behavior",
    "start": "572480",
    "end": "575519"
  },
  {
    "text": "now we have reference types uh which",
    "start": "575519",
    "end": "577760"
  },
  {
    "text": "they can be null so you could have a a",
    "start": "577760",
    "end": "579519"
  },
  {
    "text": "null local and if you ask for the value",
    "start": "579519",
    "end": "581279"
  },
  {
    "text": "before you uh before you set a value you",
    "start": "581279",
    "end": "583839"
  },
  {
    "text": "would just get back null but you can",
    "start": "583839",
    "end": "586080"
  },
  {
    "text": "have non-nullable locals and so the WM",
    "start": "586080",
    "end": "589600"
  },
  {
    "text": "validator actually looks through and",
    "start": "589600",
    "end": "592000"
  },
  {
    "text": "checks did you initialize this local",
    "start": "592000",
    "end": "594240"
  },
  {
    "text": "before you tried to get the value which",
    "start": "594240",
    "end": "596240"
  },
  {
    "text": "that's fine makes sense but it turns out",
    "start": "596240",
    "end": "599920"
  },
  {
    "text": "it would be really hard to actually",
    "start": "599920",
    "end": "601760"
  },
  {
    "text": "validate that uh like quickly um because",
    "start": "601760",
    "end": "605519"
  },
  {
    "text": "if we try to look uh at block scopes for",
    "start": "605519",
    "end": "609120"
  },
  {
    "text": "example let's say I have a block inside",
    "start": "609120",
    "end": "611519"
  },
  {
    "text": "that block I have an if statement one",
    "start": "611519",
    "end": "613360"
  },
  {
    "text": "side I initialize it on the other side",
    "start": "613360",
    "end": "615680"
  },
  {
    "text": "maybe there's more if statements and",
    "start": "615680",
    "end": "616880"
  },
  {
    "text": "maybe it gets initialized later maybe me",
    "start": "616880",
    "end": "618800"
  },
  {
    "text": "as the compiler author I can prove that",
    "start": "618800",
    "end": "620399"
  },
  {
    "text": "that value will always be initialized",
    "start": "620399",
    "end": "622079"
  },
  {
    "text": "before it gets read later but that's a",
    "start": "622079",
    "end": "623519"
  },
  {
    "text": "lot for a validator to try and track so",
    "start": "623519",
    "end": "626079"
  },
  {
    "text": "the concession was we're just going to",
    "start": "626079",
    "end": "628880"
  },
  {
    "text": "look at uh the current block scope and",
    "start": "628880",
    "end": "631040"
  },
  {
    "text": "see if it was initialized there so this",
    "start": "631040",
    "end": "633920"
  },
  {
    "text": "whack here does not validate so even",
    "start": "633920",
    "end": "636800"
  },
  {
    "text": "though on the fifth line here we are",
    "start": "636800",
    "end": "640480"
  },
  {
    "text": "setting uh this local uh for the strruct",
    "start": "640480",
    "end": "643680"
  },
  {
    "text": "uh it doesn't validate because it's on",
    "start": "643680",
    "end": "645200"
  },
  {
    "text": "block which that's kind of annoying this",
    "start": "645200",
    "end": "647279"
  },
  {
    "text": "is something that I had to change the",
    "start": "647279",
    "end": "648640"
  },
  {
    "text": "grain compiler uh to handle because we",
    "start": "648640",
    "end": "651200"
  },
  {
    "text": "did stuff like this we would put you",
    "start": "651200",
    "end": "652880"
  },
  {
    "text": "know all of um our initialization in a",
    "start": "652880",
    "end": "655440"
  },
  {
    "text": "block things like that and it's",
    "start": "655440",
    "end": "656880"
  },
  {
    "text": "definitely something that you'll",
    "start": "656880",
    "end": "657839"
  },
  {
    "text": "probably run",
    "start": "657839",
    "end": "658920"
  },
  {
    "text": "into uh next is mutability the funny",
    "start": "658920",
    "end": "663600"
  },
  {
    "text": "thing here is with the type system uh I",
    "start": "663600",
    "end": "666640"
  },
  {
    "text": "didn't go into you know creating",
    "start": "666640",
    "end": "668320"
  },
  {
    "text": "recursive types but you totally can",
    "start": "668320",
    "end": "670880"
  },
  {
    "text": "create a mutable recursive types but",
    "start": "670880",
    "end": "673760"
  },
  {
    "text": "there's no way to create those values",
    "start": "673760",
    "end": "675839"
  },
  {
    "text": "and a part of that reason is that",
    "start": "675839",
    "end": "677360"
  },
  {
    "text": "immutable types are not subtypes of",
    "start": "677360",
    "end": "679519"
  },
  {
    "text": "mutable types which you would think like",
    "start": "679519",
    "end": "682320"
  },
  {
    "text": "okay if I'm expecting an immutable array",
    "start": "682320",
    "end": "685600"
  },
  {
    "text": "and you pass me a mutable one and just",
    "start": "685600",
    "end": "687360"
  },
  {
    "text": "lie to me and say hey it's immutable you",
    "start": "687360",
    "end": "689519"
  },
  {
    "text": "can't write to it that's probably fine",
    "start": "689519",
    "end": "691519"
  },
  {
    "text": "but from an optimizer's perspective",
    "start": "691519",
    "end": "694160"
  },
  {
    "text": "that's not great uh you get into really",
    "start": "694160",
    "end": "696640"
  },
  {
    "text": "weird situations of oh well sometimes",
    "start": "696640",
    "end": "698560"
  },
  {
    "text": "this actually is written to and",
    "start": "698560",
    "end": "700240"
  },
  {
    "text": "sometimes it's not so it's not a subtype",
    "start": "700240",
    "end": "703600"
  },
  {
    "text": "uh so if you're building utilities",
    "start": "703600",
    "end": "705040"
  },
  {
    "text": "within your compiler to do certain",
    "start": "705040",
    "end": "706480"
  },
  {
    "text": "things like maybe if you're doing an",
    "start": "706480",
    "end": "707920"
  },
  {
    "text": "array copy or something for a specific",
    "start": "707920",
    "end": "709680"
  },
  {
    "text": "array type it's not going to work across",
    "start": "709680",
    "end": "711760"
  },
  {
    "text": "the mutable and immutable",
    "start": "711760",
    "end": "714680"
  },
  {
    "text": "versions",
    "start": "714680",
    "end": "716200"
  },
  {
    "text": "and our buffer type array mute",
    "start": "716200",
    "end": "720440"
  },
  {
    "text": "i8 this is in my opinion the only I'm",
    "start": "720440",
    "end": "723760"
  },
  {
    "text": "not going to call it bad thing about",
    "start": "723760",
    "end": "725240"
  },
  {
    "text": "wismc but one place where we're just",
    "start": "725240",
    "end": "727839"
  },
  {
    "text": "objectively worse than uh linear memory",
    "start": "727839",
    "end": "730240"
  },
  {
    "text": "if you're going to uh array mute i8 and",
    "start": "730240",
    "end": "732399"
  },
  {
    "text": "you want to load or store like an i32 or",
    "start": "732399",
    "end": "735040"
  },
  {
    "text": "an i64 you can't uh there's no way to do",
    "start": "735040",
    "end": "738000"
  },
  {
    "text": "that right now um and that sucks there's",
    "start": "738000",
    "end": "740880"
  },
  {
    "text": "a lot of algorithms that really rely on",
    "start": "740880",
    "end": "742480"
  },
  {
    "text": "being able to load and store F64s which",
    "start": "742480",
    "end": "744880"
  },
  {
    "text": "of course you're probably thinking",
    "start": "744880",
    "end": "745920"
  },
  {
    "text": "already well just make an array mute I",
    "start": "745920",
    "end": "748720"
  },
  {
    "text": "64 it's basically the same thing but",
    "start": "748720",
    "end": "750880"
  },
  {
    "text": "then when you try and load and store i8s",
    "start": "750880",
    "end": "753200"
  },
  {
    "text": "for example now you have to read the",
    "start": "753200",
    "end": "755040"
  },
  {
    "text": "value you have to set the right bite and",
    "start": "755040",
    "end": "757040"
  },
  {
    "text": "all that so but there are rumblings of",
    "start": "757040",
    "end": "760000"
  },
  {
    "text": "hey actually let's just support this",
    "start": "760000",
    "end": "761600"
  },
  {
    "text": "because this is totally something that",
    "start": "761600",
    "end": "762800"
  },
  {
    "text": "can be supported",
    "start": "762800",
    "end": "765040"
  },
  {
    "text": "now let's talk about grain and some of",
    "start": "765040",
    "end": "768320"
  },
  {
    "text": "the specifics of me actually",
    "start": "768320",
    "end": "770000"
  },
  {
    "text": "implementing this so grain today uh it's",
    "start": "770000",
    "end": "774639"
  },
  {
    "text": "linear 32-bit memory great uh our GC is",
    "start": "774639",
    "end": "778560"
  },
  {
    "text": "performed uh via reference counting",
    "start": "778560",
    "end": "781000"
  },
  {
    "text": "which there's more to that than you",
    "start": "781000",
    "end": "783600"
  },
  {
    "text": "might originally think of because yes we",
    "start": "783600",
    "end": "785839"
  },
  {
    "text": "do have to put reference counts on",
    "start": "785839",
    "end": "787360"
  },
  {
    "text": "things but it also means anytime we load",
    "start": "787360",
    "end": "789680"
  },
  {
    "text": "values from the heap we have to incre",
    "start": "789680",
    "end": "791360"
  },
  {
    "text": "them anytime values go out of scope we",
    "start": "791360",
    "end": "793040"
  },
  {
    "text": "need to decorre them that adds a lot to",
    "start": "793040",
    "end": "795680"
  },
  {
    "text": "all the compilation that gets into your",
    "start": "795680",
    "end": "797920"
  },
  {
    "text": "final program which ends up slowing you",
    "start": "797920",
    "end": "799959"
  },
  {
    "text": "down and we only leak memory sometimes",
    "start": "799959",
    "end": "804040"
  },
  {
    "text": "uh the first major consideration in",
    "start": "804040",
    "end": "807120"
  },
  {
    "text": "terms of how are we going to get to",
    "start": "807120",
    "end": "809000"
  },
  {
    "text": "GC grain has fully generic first class",
    "start": "809000",
    "end": "812040"
  },
  {
    "text": "functions so what this means is we don't",
    "start": "812040",
    "end": "814560"
  },
  {
    "text": "do like monomorphisation or anything",
    "start": "814560",
    "end": "816320"
  },
  {
    "text": "like that if you have a function that is",
    "start": "816320",
    "end": "818560"
  },
  {
    "text": "generic it will actually compile to a",
    "start": "818560",
    "end": "821200"
  },
  {
    "text": "function that takes any value uh for",
    "start": "821200",
    "end": "823920"
  },
  {
    "text": "example if you have a list.map function",
    "start": "823920",
    "end": "825920"
  },
  {
    "text": "we want to be able to do list map uh",
    "start": "825920",
    "end": "827760"
  },
  {
    "text": "we'd love to take a function list of",
    "start": "827760",
    "end": "830720"
  },
  {
    "text": "values and apply a function that",
    "start": "830720",
    "end": "832160"
  },
  {
    "text": "transforms those values but we want it",
    "start": "832160",
    "end": "834639"
  },
  {
    "text": "to work on lists of any type as long as",
    "start": "834639",
    "end": "836639"
  },
  {
    "text": "they're paired with a function that",
    "start": "836639",
    "end": "838079"
  },
  {
    "text": "works on values of that type",
    "start": "838079",
    "end": "841440"
  },
  {
    "text": "what that means though is we need and",
    "start": "841440",
    "end": "846079"
  },
  {
    "text": "I'll just pop to the next slide here we",
    "start": "846079",
    "end": "848480"
  },
  {
    "text": "need a uniform representation so with",
    "start": "848480",
    "end": "851120"
  },
  {
    "text": "linear memory all pointers to values are",
    "start": "851120",
    "end": "854320"
  },
  {
    "text": "i32s so that's easy we can represent",
    "start": "854320",
    "end": "856639"
  },
  {
    "text": "that as an i32 any other value so maybe",
    "start": "856639",
    "end": "859839"
  },
  {
    "text": "like a character or a small number we",
    "start": "859839",
    "end": "862800"
  },
  {
    "text": "need to make sure that that's also",
    "start": "862800",
    "end": "864000"
  },
  {
    "text": "representable as an i32 because we need",
    "start": "864000",
    "end": "866160"
  },
  {
    "text": "every single parameter type and result",
    "start": "866160",
    "end": "868000"
  },
  {
    "text": "type to be an i32 that's the only way we",
    "start": "868000",
    "end": "870399"
  },
  {
    "text": "can get the wom types to work out at uh",
    "start": "870399",
    "end": "872720"
  },
  {
    "text": "that level so if I come back here a much",
    "start": "872720",
    "end": "875360"
  },
  {
    "text": "simpler example is apply and so apply is",
    "start": "875360",
    "end": "878079"
  },
  {
    "text": "a function that takes a function and a",
    "start": "878079",
    "end": "880399"
  },
  {
    "text": "value and applies the function to that",
    "start": "880399",
    "end": "882000"
  },
  {
    "text": "value and so in linear memory this is",
    "start": "882000",
    "end": "884079"
  },
  {
    "text": "what this compiles to today uh you'll",
    "start": "884079",
    "end": "886160"
  },
  {
    "text": "see there's a call to deck ref uh which",
    "start": "886160",
    "end": "888560"
  },
  {
    "text": "is the reference counting thing that's",
    "start": "888560",
    "end": "890000"
  },
  {
    "text": "happening the first argument of every",
    "start": "890000",
    "end": "891600"
  },
  {
    "text": "function is the functions closure but we",
    "start": "891600",
    "end": "893760"
  },
  {
    "text": "don't need to worry about that right now",
    "start": "893760",
    "end": "895360"
  },
  {
    "text": "that's what's going on there but the",
    "start": "895360",
    "end": "897040"
  },
  {
    "text": "second part is we do a return call",
    "start": "897040",
    "end": "898560"
  },
  {
    "text": "indirect we look inside the closure uh",
    "start": "898560",
    "end": "901120"
  },
  {
    "text": "for the function that we want to call we",
    "start": "901120",
    "end": "902720"
  },
  {
    "text": "pull out the table index that that",
    "start": "902720",
    "end": "904720"
  },
  {
    "text": "function is in and then we're able to",
    "start": "904720",
    "end": "906320"
  },
  {
    "text": "call that function but if you look at",
    "start": "906320",
    "end": "908240"
  },
  {
    "text": "the parameters it's i32 i32 to i32 and",
    "start": "908240",
    "end": "912079"
  },
  {
    "text": "that's the only way that we can actually",
    "start": "912079",
    "end": "913519"
  },
  {
    "text": "make this work when we want to compile",
    "start": "913519",
    "end": "915800"
  },
  {
    "text": "it so wmg gives us all these rich types",
    "start": "915800",
    "end": "920480"
  },
  {
    "text": "for heat values right so we can have",
    "start": "920480",
    "end": "922160"
  },
  {
    "text": "strrus with certain types of fields",
    "start": "922160",
    "end": "923920"
  },
  {
    "text": "arrays of whatever values but if we use",
    "start": "923920",
    "end": "926560"
  },
  {
    "text": "them in type signatures we're going to",
    "start": "926560",
    "end": "928160"
  },
  {
    "text": "run into the same problem as if we had",
    "start": "928160",
    "end": "929920"
  },
  {
    "text": "like an F64 that we wanted to pass to a",
    "start": "929920",
    "end": "932639"
  },
  {
    "text": "function it's just not going to work it",
    "start": "932639",
    "end": "935040"
  },
  {
    "text": "needs to have this specific",
    "start": "935040",
    "end": "937000"
  },
  {
    "text": "type so we can use ref any to accomplish",
    "start": "937000",
    "end": "941040"
  },
  {
    "text": "uh this exact same task uh so if we take",
    "start": "941040",
    "end": "944639"
  },
  {
    "text": "a look at what it looks like in WMGc",
    "start": "944639",
    "end": "946720"
  },
  {
    "text": "which it looks like more stuff but it's",
    "start": "946720",
    "end": "948639"
  },
  {
    "text": "basically just more types uh we have a",
    "start": "948639",
    "end": "950959"
  },
  {
    "text": "function type which is a ref any and a",
    "start": "950959",
    "end": "953199"
  },
  {
    "text": "ref any to a ref any uh and then you",
    "start": "953199",
    "end": "956320"
  },
  {
    "text": "know we have our closure which is our",
    "start": "956320",
    "end": "958160"
  },
  {
    "text": "data structure for actually holding",
    "start": "958160",
    "end": "959600"
  },
  {
    "text": "values that get closed over um which not",
    "start": "959600",
    "end": "962720"
  },
  {
    "text": "super important so don't dig too deep",
    "start": "962720",
    "end": "964079"
  },
  {
    "text": "into that but if we look at the actual",
    "start": "964079",
    "end": "966240"
  },
  {
    "text": "apply function here one we're not doing",
    "start": "966240",
    "end": "968480"
  },
  {
    "text": "the reference counting anymore i think",
    "start": "968480",
    "end": "969759"
  },
  {
    "text": "that's pretty hot um but besides that we",
    "start": "969759",
    "end": "973519"
  },
  {
    "text": "are actually just able to call the",
    "start": "973519",
    "end": "975120"
  },
  {
    "text": "reference so instead of indexing into a",
    "start": "975120",
    "end": "976959"
  },
  {
    "text": "table we're now using actual funk refs",
    "start": "976959",
    "end": "978560"
  },
  {
    "text": "which is pretty cool but you notice",
    "start": "978560",
    "end": "980639"
  },
  {
    "text": "there's a couple of casts in here and",
    "start": "980639",
    "end": "983040"
  },
  {
    "text": "those casts are kind of sad the first",
    "start": "983040",
    "end": "986560"
  },
  {
    "text": "cast is us casting uh that any type for",
    "start": "986560",
    "end": "989839"
  },
  {
    "text": "the closure to be the actual closure",
    "start": "989839",
    "end": "991440"
  },
  {
    "text": "type that one we can probably get rid of",
    "start": "991440",
    "end": "993519"
  },
  {
    "text": "uh we can just improve the compiler to",
    "start": "993519",
    "end": "995279"
  },
  {
    "text": "make that go away the second one is okay",
    "start": "995279",
    "end": "998160"
  },
  {
    "text": "well we have this funk ref uh and the",
    "start": "998160",
    "end": "1000639"
  },
  {
    "text": "type of our closure if you look that",
    "start": "1000639",
    "end": "1003519"
  },
  {
    "text": "last field um it's just a plain funk ref",
    "start": "1003519",
    "end": "1006560"
  },
  {
    "text": "doesn't say what the uh parameters and",
    "start": "1006560",
    "end": "1008320"
  },
  {
    "text": "results are we need to cast it to the",
    "start": "1008320",
    "end": "1011360"
  },
  {
    "text": "actual type of that function which is an",
    "start": "1011360",
    "end": "1013040"
  },
  {
    "text": "any any to any um so that one we can't",
    "start": "1013040",
    "end": "1015360"
  },
  {
    "text": "get uh rid of but that's",
    "start": "1015360",
    "end": "1018199"
  },
  {
    "text": "okay second major",
    "start": "1018199",
    "end": "1020360"
  },
  {
    "text": "consideration grain supports generic",
    "start": "1020360",
    "end": "1022720"
  },
  {
    "text": "structural equality so we have an",
    "start": "1022720",
    "end": "1024640"
  },
  {
    "text": "equality function um that does deep",
    "start": "1024640",
    "end": "1026640"
  },
  {
    "text": "nested equality on any values as long as",
    "start": "1026640",
    "end": "1028959"
  },
  {
    "text": "they're the same type if you have lists",
    "start": "1028959",
    "end": "1030720"
  },
  {
    "text": "or strings or whatever we can do it but",
    "start": "1030720",
    "end": "1033199"
  },
  {
    "text": "that means we need to be able to walk",
    "start": "1033199",
    "end": "1034400"
  },
  {
    "text": "our data structures so in linear memory",
    "start": "1034400",
    "end": "1037280"
  },
  {
    "text": "this is pretty easy uh you have",
    "start": "1037280",
    "end": "1039280"
  },
  {
    "text": "contiguous memory you have a for loop",
    "start": "1039280",
    "end": "1041918"
  },
  {
    "text": "you can let's say you have a tupil you",
    "start": "1041919",
    "end": "1043760"
  },
  {
    "text": "look at the first value the second value",
    "start": "1043760",
    "end": "1045199"
  },
  {
    "text": "the third value you compare them not",
    "start": "1045199",
    "end": "1047360"
  },
  {
    "text": "really a big",
    "start": "1047360",
    "end": "1048600"
  },
  {
    "text": "deal when it comes to our new strct",
    "start": "1048600",
    "end": "1051520"
  },
  {
    "text": "types if I have a tupole with three",
    "start": "1051520",
    "end": "1054000"
  },
  {
    "text": "elements that's a strruct with three",
    "start": "1054000",
    "end": "1055520"
  },
  {
    "text": "fields what if I have a",
    "start": "1055520",
    "end": "1057160"
  },
  {
    "text": "tupole with four values it's a strct",
    "start": "1057160",
    "end": "1060559"
  },
  {
    "text": "with four values they're not the same",
    "start": "1060559",
    "end": "1062480"
  },
  {
    "text": "type if you do a strruct get you have to",
    "start": "1062480",
    "end": "1065760"
  },
  {
    "text": "know uh at compile time what fields you",
    "start": "1065760",
    "end": "1068480"
  },
  {
    "text": "want to access you can't dynamically",
    "start": "1068480",
    "end": "1070080"
  },
  {
    "text": "access strruct fields which makes sense",
    "start": "1070080",
    "end": "1072880"
  },
  {
    "text": "but that means I can't walk uh those",
    "start": "1072880",
    "end": "1075200"
  },
  {
    "text": "data structures in the same way i need",
    "start": "1075200",
    "end": "1077960"
  },
  {
    "text": "to compile a function that knows how to",
    "start": "1077960",
    "end": "1080640"
  },
  {
    "text": "walk a strct of a certain",
    "start": "1080640",
    "end": "1083160"
  },
  {
    "text": "type or we can do the worst thing which",
    "start": "1083160",
    "end": "1086240"
  },
  {
    "text": "is model our data a little bit",
    "start": "1086240",
    "end": "1088240"
  },
  {
    "text": "differently so instead of having a",
    "start": "1088240",
    "end": "1089679"
  },
  {
    "text": "strruct uh for tupils for example uh",
    "start": "1089679",
    "end": "1092400"
  },
  {
    "text": "that has three fields for the three",
    "start": "1092400",
    "end": "1094160"
  },
  {
    "text": "values it can be a strruct with some",
    "start": "1094160",
    "end": "1095919"
  },
  {
    "text": "metadata and then an array of the values",
    "start": "1095919",
    "end": "1099200"
  },
  {
    "text": "in that tupil and then we can go back to",
    "start": "1099200",
    "end": "1100960"
  },
  {
    "text": "being able to walk uh the data",
    "start": "1100960",
    "end": "1102559"
  },
  {
    "text": "structures the bad news about that",
    "start": "1102559",
    "end": "1104400"
  },
  {
    "text": "though is we add a layer of indirection",
    "start": "1104400",
    "end": "1106720"
  },
  {
    "text": "uh so instead of just getting the value",
    "start": "1106720",
    "end": "1108080"
  },
  {
    "text": "from the strruct now we have to get the",
    "start": "1108080",
    "end": "1110080"
  },
  {
    "text": "array from the strruct and then we have",
    "start": "1110080",
    "end": "1111760"
  },
  {
    "text": "to get the value from the array and of",
    "start": "1111760",
    "end": "1113600"
  },
  {
    "text": "course doing that array access also does",
    "start": "1113600",
    "end": "1115919"
  },
  {
    "text": "bounce checking even though we know that",
    "start": "1115919",
    "end": "1118080"
  },
  {
    "text": "it's never going to be out of bounds so",
    "start": "1118080",
    "end": "1120320"
  },
  {
    "text": "that's not that cool but is something",
    "start": "1120320",
    "end": "1123120"
  },
  {
    "text": "that we can definitely improve but it is",
    "start": "1123120",
    "end": "1125120"
  },
  {
    "text": "something that you're going to run",
    "start": "1125120",
    "end": "1126520"
  },
  {
    "text": "into and the third major consideration",
    "start": "1126520",
    "end": "1129120"
  },
  {
    "text": "is that WY and the component model only",
    "start": "1129120",
    "end": "1131280"
  },
  {
    "text": "work with linear memory and we don't",
    "start": "1131280",
    "end": "1133440"
  },
  {
    "text": "want to lose support for Wy and the",
    "start": "1133440",
    "end": "1134640"
  },
  {
    "text": "component model because they're awesome",
    "start": "1134640",
    "end": "1136679"
  },
  {
    "text": "but guess what we have free will nobody",
    "start": "1136679",
    "end": "1140320"
  },
  {
    "text": "is stopping you from including having a",
    "start": "1140320",
    "end": "1142799"
  },
  {
    "text": "linear memory at the same time you're",
    "start": "1142799",
    "end": "1144480"
  },
  {
    "text": "doing WMGc so this is actually a",
    "start": "1144480",
    "end": "1146640"
  },
  {
    "text": "non-issue uh you can totally just write",
    "start": "1146640",
    "end": "1150080"
  },
  {
    "text": "a couple things to linear memory to do",
    "start": "1150080",
    "end": "1151600"
  },
  {
    "text": "wy stuff you might have to do a couple",
    "start": "1151600",
    "end": "1153200"
  },
  {
    "text": "of copies but that's okay and I",
    "start": "1153200",
    "end": "1155840"
  },
  {
    "text": "originally thought that we'd be able to",
    "start": "1155840",
    "end": "1157200"
  },
  {
    "text": "get rid of the allocator completely",
    "start": "1157200",
    "end": "1158640"
  },
  {
    "text": "going to GC but we have one trying to do",
    "start": "1158640",
    "end": "1162559"
  },
  {
    "text": "wy stuff maybe you have a simple bump",
    "start": "1162559",
    "end": "1164799"
  },
  {
    "text": "allocator and you just reset every time",
    "start": "1164799",
    "end": "1166400"
  },
  {
    "text": "you do a wazzy call that's fine that's",
    "start": "1166400",
    "end": "1169280"
  },
  {
    "text": "something you can make work but we also",
    "start": "1169280",
    "end": "1170799"
  },
  {
    "text": "have some algorithms within our runtime",
    "start": "1170799",
    "end": "1172480"
  },
  {
    "text": "that okay if I'm moving to GC I got to",
    "start": "1172480",
    "end": "1174960"
  },
  {
    "text": "update all the runtime so we might as",
    "start": "1174960",
    "end": "1177360"
  },
  {
    "text": "well just keep the allocator for now so",
    "start": "1177360",
    "end": "1179440"
  },
  {
    "text": "not completely off of the linear memory",
    "start": "1179440",
    "end": "1182480"
  },
  {
    "text": "not completely off of having the",
    "start": "1182480",
    "end": "1183679"
  },
  {
    "text": "allocator but I did get to delete all",
    "start": "1183679",
    "end": "1186320"
  },
  {
    "text": "the reference counting code and so that",
    "start": "1186320",
    "end": "1188080"
  },
  {
    "text": "was pretty",
    "start": "1188080",
    "end": "1189160"
  },
  {
    "text": "good so what effects did this have on",
    "start": "1189160",
    "end": "1192080"
  },
  {
    "text": "compilation that's what everyone wants",
    "start": "1192080",
    "end": "1193919"
  },
  {
    "text": "to know first is binary size so for an",
    "start": "1193919",
    "end": "1197600"
  },
  {
    "text": "empty grain program we have a test in",
    "start": "1197600",
    "end": "1199039"
  },
  {
    "text": "our test suite to make sure that we",
    "start": "1199039",
    "end": "1200559"
  },
  {
    "text": "don't regress on making the programs",
    "start": "1200559",
    "end": "1203440"
  },
  {
    "text": "bigger for some reason an empty grain",
    "start": "1203440",
    "end": "1205840"
  },
  {
    "text": "program so nothing at all just module",
    "start": "1205840",
    "end": "1208480"
  },
  {
    "text": "whatever no code that was 3,91 bytes um",
    "start": "1208480",
    "end": "1212720"
  },
  {
    "text": "which is a lot sounds like a lot and",
    "start": "1212720",
    "end": "1214480"
  },
  {
    "text": "it's mostly because there's a bunch of",
    "start": "1214480",
    "end": "1215840"
  },
  {
    "text": "initialization code that has to go into",
    "start": "1215840",
    "end": "1217520"
  },
  {
    "text": "every module and with linear memory",
    "start": "1217520",
    "end": "1219679"
  },
  {
    "text": "those are writes into a memory that gets",
    "start": "1219679",
    "end": "1222480"
  },
  {
    "text": "exported from the module so something",
    "start": "1222480",
    "end": "1224080"
  },
  {
    "text": "like WAMOP isn't able to prove that that",
    "start": "1224080",
    "end": "1227200"
  },
  {
    "text": "code isn't needed and it stays there but",
    "start": "1227200",
    "end": "1229919"
  },
  {
    "text": "with GC we're down to 292 bytes baby and",
    "start": "1229919",
    "end": "1233840"
  },
  {
    "text": "I'm like this is that's hot i love that",
    "start": "1233840",
    "end": "1236159"
  },
  {
    "text": "that's awesome um so this is uh big news",
    "start": "1236159",
    "end": "1238720"
  },
  {
    "text": "and that can get even smaller um I",
    "start": "1238720",
    "end": "1241200"
  },
  {
    "text": "looked at what gets produced and WMO can",
    "start": "1241200",
    "end": "1243360"
  },
  {
    "text": "go a little bit further and so I don't",
    "start": "1243360",
    "end": "1245840"
  },
  {
    "text": "know if Thomas Lively is here but I got",
    "start": "1245840",
    "end": "1247679"
  },
  {
    "text": "to bother him and we can make that",
    "start": "1247679",
    "end": "1249840"
  },
  {
    "text": "happen",
    "start": "1249840",
    "end": "1251760"
  },
  {
    "text": "uh hello world program that drops in",
    "start": "1251760",
    "end": "1254000"
  },
  {
    "text": "size by 35% that's pretty cool excited",
    "start": "1254000",
    "end": "1257120"
  },
  {
    "text": "about",
    "start": "1257120",
    "end": "1258200"
  },
  {
    "text": "that but let's talk about some",
    "start": "1258200",
    "end": "1260280"
  },
  {
    "text": "performance",
    "start": "1260280",
    "end": "1262200"
  },
  {
    "text": "so obviously being a functional",
    "start": "1262200",
    "end": "1264480"
  },
  {
    "text": "programming language we freaking love",
    "start": "1264480",
    "end": "1266159"
  },
  {
    "text": "link lists we love them bad baby so this",
    "start": "1266159",
    "end": "1269679"
  },
  {
    "text": "test pretty unscientific but it's",
    "start": "1269679",
    "end": "1272559"
  },
  {
    "text": "allocate a link list with 10 million",
    "start": "1272559",
    "end": "1275280"
  },
  {
    "text": "elements and then reverse it which",
    "start": "1275280",
    "end": "1277200"
  },
  {
    "text": "basically recreates the list and let's",
    "start": "1277200",
    "end": "1279360"
  },
  {
    "text": "see what happened with different",
    "start": "1279360",
    "end": "1280280"
  },
  {
    "text": "runtimes want time super optimized for",
    "start": "1280280",
    "end": "1284240"
  },
  {
    "text": "linear memory it's its bread and butter",
    "start": "1284240",
    "end": "1286240"
  },
  {
    "text": "that was already super duper fast in WM",
    "start": "1286240",
    "end": "1288679"
  },
  {
    "text": "time going to wm GC it got a little bit",
    "start": "1288679",
    "end": "1291520"
  },
  {
    "text": "slower that's largely just because hey",
    "start": "1291520",
    "end": "1293919"
  },
  {
    "text": "the linear memory is super optimized in",
    "start": "1293919",
    "end": "1295679"
  },
  {
    "text": "WM time and GC just happened recently so",
    "start": "1295679",
    "end": "1299039"
  },
  {
    "text": "there's probably a lot more tuning to do",
    "start": "1299039",
    "end": "1300480"
  },
  {
    "text": "there that's okay wom Edge has not",
    "start": "1300480",
    "end": "1302960"
  },
  {
    "text": "implemented it in uh their ahead of time",
    "start": "1302960",
    "end": "1305440"
  },
  {
    "text": "compiler yet it's only implemented in",
    "start": "1305440",
    "end": "1307760"
  },
  {
    "text": "the interpreter so don't freak out at",
    "start": "1307760",
    "end": "1309919"
  },
  {
    "text": "the large bars for uh WM",
    "start": "1309919",
    "end": "1312520"
  },
  {
    "text": "Edge but we see something like a 5x",
    "start": "1312520",
    "end": "1315360"
  },
  {
    "text": "speed off running in the interpreter in",
    "start": "1315360",
    "end": "1316799"
  },
  {
    "text": "WM Edge uh which is pretty pretty cool",
    "start": "1316799",
    "end": "1320080"
  },
  {
    "text": "and then amazingly V8 that beautiful",
    "start": "1320080",
    "end": "1323440"
  },
  {
    "text": "sweet browser engine that knows how to",
    "start": "1323440",
    "end": "1325919"
  },
  {
    "text": "do garbage collection real good we see a",
    "start": "1325919",
    "end": "1328720"
  },
  {
    "text": "rapid 10x speed up in performance and",
    "start": "1328720",
    "end": "1331679"
  },
  {
    "text": "funny enough you see okay it basically",
    "start": "1331679",
    "end": "1333600"
  },
  {
    "text": "just puts it on par with WM time but",
    "start": "1333600",
    "end": "1335440"
  },
  {
    "text": "that's kind of a big deal that's pretty",
    "start": "1335440",
    "end": "1337360"
  },
  {
    "text": "cool uh to get that level of performance",
    "start": "1337360",
    "end": "1339520"
  },
  {
    "text": "when we're running in the browser or",
    "start": "1339520",
    "end": "1340799"
  },
  {
    "text": "running outside the browser in something",
    "start": "1340799",
    "end": "1342799"
  },
  {
    "text": "like V8 it's massive to get those speed",
    "start": "1342799",
    "end": "1345240"
  },
  {
    "text": "ups uh next test I did was doing some",
    "start": "1345240",
    "end": "1348240"
  },
  {
    "text": "big math so this was okay uh do 10",
    "start": "1348240",
    "end": "1352799"
  },
  {
    "text": "million uh big additions and that",
    "start": "1352799",
    "end": "1355280"
  },
  {
    "text": "allocates a new big every single time uh",
    "start": "1355280",
    "end": "1358080"
  },
  {
    "text": "same thing with WM time got a little bit",
    "start": "1358080",
    "end": "1360240"
  },
  {
    "text": "slower wom edge similarly you know we",
    "start": "1360240",
    "end": "1363200"
  },
  {
    "text": "see that like 5x speed up V8 you'll",
    "start": "1363200",
    "end": "1367640"
  },
  {
    "text": "notice the WS GC bar isn't even on the",
    "start": "1367640",
    "end": "1371039"
  },
  {
    "text": "graph uh when I ran the test uh the",
    "start": "1371039",
    "end": "1374559"
  },
  {
    "text": "linear memory version took like 15",
    "start": "1374559",
    "end": "1376880"
  },
  {
    "text": "seconds to run and then cloud it with GC",
    "start": "1376880",
    "end": "1381280"
  },
  {
    "text": "i hit enter and it completed immediately",
    "start": "1381280",
    "end": "1385200"
  },
  {
    "text": "and it had the correct answer and I was",
    "start": "1385200",
    "end": "1387440"
  },
  {
    "text": "like",
    "start": "1387440",
    "end": "1388600"
  },
  {
    "text": "suspicious but then looking into it more",
    "start": "1388600",
    "end": "1391039"
  },
  {
    "text": "it turns out nah V8's just about it v8's",
    "start": "1391039",
    "end": "1395520"
  },
  {
    "text": "just super fast at doing this type of",
    "start": "1395520",
    "end": "1397039"
  },
  {
    "text": "thing and I think V8 was able to",
    "start": "1397039",
    "end": "1399200"
  },
  {
    "text": "completely optimize away all the",
    "start": "1399200",
    "end": "1400880"
  },
  {
    "text": "allocations in that case and it just",
    "start": "1400880",
    "end": "1402799"
  },
  {
    "text": "basically did a bunch of like I64 math",
    "start": "1402799",
    "end": "1405919"
  },
  {
    "text": "on all the biggin which I think was",
    "start": "1405919",
    "end": "1407840"
  },
  {
    "text": "pretty freaking cool so that was the",
    "start": "1407840",
    "end": "1409280"
  },
  {
    "text": "most surprising result that I saw but",
    "start": "1409280",
    "end": "1411280"
  },
  {
    "text": "thought it was pretty cool",
    "start": "1411280",
    "end": "1413360"
  },
  {
    "text": "so to recap a little bit on that WGC",
    "start": "1413360",
    "end": "1416480"
  },
  {
    "text": "makes implementation of your high level",
    "start": "1416480",
    "end": "1417919"
  },
  {
    "text": "languages much much easier all my bugs",
    "start": "1417919",
    "end": "1420559"
  },
  {
    "text": "with GC gone now it's the run authors",
    "start": "1420559",
    "end": "1424400"
  },
  {
    "text": "that have to deal with it which is",
    "start": "1424400",
    "end": "1425440"
  },
  {
    "text": "pretty sweet and of course all the",
    "start": "1425440",
    "end": "1427840"
  },
  {
    "text": "binaries are a lot smaller we're able to",
    "start": "1427840",
    "end": "1429360"
  },
  {
    "text": "dump way more code because there's way",
    "start": "1429360",
    "end": "1431120"
  },
  {
    "text": "more typing information that the",
    "start": "1431120",
    "end": "1432320"
  },
  {
    "text": "optimizers are able to use and in a lot",
    "start": "1432320",
    "end": "1434720"
  },
  {
    "text": "of cases we're running much much faster",
    "start": "1434720",
    "end": "1437760"
  },
  {
    "text": "the ability for your GC algorithm to be",
    "start": "1437760",
    "end": "1440720"
  },
  {
    "text": "selected by the runtime is absolutely",
    "start": "1440720",
    "end": "1442480"
  },
  {
    "text": "huge for portability and I don't think",
    "start": "1442480",
    "end": "1444960"
  },
  {
    "text": "that that can be understated at all and",
    "start": "1444960",
    "end": "1448159"
  },
  {
    "text": "then having more highle languages for",
    "start": "1448159",
    "end": "1450559"
  },
  {
    "text": "web assembly is just amazing for our",
    "start": "1450559",
    "end": "1452240"
  },
  {
    "text": "ecosystem and amazing for the component",
    "start": "1452240",
    "end": "1453919"
  },
  {
    "text": "model yesterday we don't have that",
    "start": "1453919",
    "end": "1456720"
  },
  {
    "text": "support yet in the commodent model to do",
    "start": "1456720",
    "end": "1458960"
  },
  {
    "text": "uh you know GC in the uh canonical AI",
    "start": "1458960",
    "end": "1461919"
  },
  {
    "text": "but it's coming but we can do it today",
    "start": "1461919",
    "end": "1464159"
  },
  {
    "text": "and shown it's actually not that bad",
    "start": "1464159",
    "end": "1466000"
  },
  {
    "text": "when you think about oh no you have to",
    "start": "1466000",
    "end": "1467919"
  },
  {
    "text": "copy everywhere if you're printing a",
    "start": "1467919",
    "end": "1470559"
  },
  {
    "text": "list in grain for example the expensive",
    "start": "1470559",
    "end": "1472960"
  },
  {
    "text": "thing is not copying the string to",
    "start": "1472960",
    "end": "1475200"
  },
  {
    "text": "linear memory it's calling print that's",
    "start": "1475200",
    "end": "1477279"
  },
  {
    "text": "always going to be the expensive",
    "start": "1477279",
    "end": "1478320"
  },
  {
    "text": "operation",
    "start": "1478320",
    "end": "1479720"
  },
  {
    "text": "there and of course that begs the",
    "start": "1479720",
    "end": "1482000"
  },
  {
    "text": "question what's next for grain well I",
    "start": "1482000",
    "end": "1484159"
  },
  {
    "text": "got to upstream the GC implementation uh",
    "start": "1484159",
    "end": "1486480"
  },
  {
    "text": "it currently exists on my laptop it",
    "start": "1486480",
    "end": "1489200"
  },
  {
    "text": "didn't even push it up to GitHub uh if",
    "start": "1489200",
    "end": "1491360"
  },
  {
    "text": "you want to wreck my whole conference",
    "start": "1491360",
    "end": "1493279"
  },
  {
    "text": "weekend just pour a cup of coffee in my",
    "start": "1493279",
    "end": "1495120"
  },
  {
    "text": "laptop and it's game over uh we need",
    "start": "1495120",
    "end": "1498000"
  },
  {
    "text": "support for Wom exceptions so this is",
    "start": "1498000",
    "end": "1500720"
  },
  {
    "text": "something that we hadn't implemented up",
    "start": "1500720",
    "end": "1502240"
  },
  {
    "text": "until now because think about what",
    "start": "1502240",
    "end": "1504159"
  },
  {
    "text": "happens when an uh an exception gets",
    "start": "1504159",
    "end": "1506039"
  },
  {
    "text": "thrown you lose your entire stack",
    "start": "1506039",
    "end": "1509760"
  },
  {
    "text": "if I have values on the stack and I need",
    "start": "1509760",
    "end": "1511600"
  },
  {
    "text": "to manage the ref counts if you lose",
    "start": "1511600",
    "end": "1513520"
  },
  {
    "text": "your entire stack I can't do that sounds",
    "start": "1513520",
    "end": "1515840"
  },
  {
    "text": "like a hard problem so we just never",
    "start": "1515840",
    "end": "1517600"
  },
  {
    "text": "tackled it but with GC it's not nearly",
    "start": "1517600",
    "end": "1519760"
  },
  {
    "text": "as hard of a problem anymore like you",
    "start": "1519760",
    "end": "1521440"
  },
  {
    "text": "lose the stack we don't care uh the ref",
    "start": "1521440",
    "end": "1523200"
  },
  {
    "text": "counts aren't being managed by us uh so",
    "start": "1523200",
    "end": "1525440"
  },
  {
    "text": "we can actually implement uh exceptions",
    "start": "1525440",
    "end": "1527840"
  },
  {
    "text": "which means things like hey when you're",
    "start": "1527840",
    "end": "1530080"
  },
  {
    "text": "testing your programs and something",
    "start": "1530080",
    "end": "1531440"
  },
  {
    "text": "throws an exception it doesn't have to",
    "start": "1531440",
    "end": "1532960"
  },
  {
    "text": "kill your test suite which is pretty d",
    "start": "1532960",
    "end": "1534880"
  },
  {
    "text": "uh pretty exciting and of course",
    "start": "1534880",
    "end": "1536799"
  },
  {
    "text": "releasing the initial beta of silo which",
    "start": "1536799",
    "end": "1539360"
  },
  {
    "text": "is our build tool and package manager to",
    "start": "1539360",
    "end": "1542080"
  },
  {
    "text": "make it easier for people to manage",
    "start": "1542080",
    "end": "1543679"
  },
  {
    "text": "building grain product uh projects and",
    "start": "1543679",
    "end": "1546000"
  },
  {
    "text": "working with components and of course",
    "start": "1546000",
    "end": "1548400"
  },
  {
    "text": "lastly is improving component model",
    "start": "1548400",
    "end": "1550000"
  },
  {
    "text": "support um we want to help on working",
    "start": "1550000",
    "end": "1552880"
  },
  {
    "text": "out what the canonical API for GC should",
    "start": "1552880",
    "end": "1555520"
  },
  {
    "text": "look like uh and we're really excited to",
    "start": "1555520",
    "end": "1558159"
  },
  {
    "text": "get involved on that and so with that",
    "start": "1558159",
    "end": "1561360"
  },
  {
    "text": "thank you so much folks for",
    "start": "1561360",
    "end": "1565120"
  },
  {
    "text": "talk and I somehow made it in time for a",
    "start": "1571559",
    "end": "1575520"
  },
  {
    "text": "couple of questions and I have way more",
    "start": "1575520",
    "end": "1577600"
  },
  {
    "text": "stuff that I could not fit into this",
    "start": "1577600",
    "end": "1579039"
  },
  {
    "text": "presentation that I would love to talk",
    "start": "1579039",
    "end": "1580400"
  },
  {
    "text": "about so if folks have questions I can",
    "start": "1580400",
    "end": "1582000"
  },
  {
    "text": "answer those now or you can totally find",
    "start": "1582000",
    "end": "1583360"
  },
  {
    "text": "me later and I'll answer them then",
    "start": "1583360",
    "end": "1587559"
  },
  {
    "text": "thank you for your presentations",
    "start": "1596799",
    "end": "1598240"
  },
  {
    "text": "absolutely um so my question was uh in",
    "start": "1598240",
    "end": "1601760"
  },
  {
    "text": "think was one of the first slides was",
    "start": "1601760",
    "end": "1604320"
  },
  {
    "text": "suggesting that there was no memory",
    "start": "1604320",
    "end": "1605919"
  },
  {
    "text": "marksman code at all that's for coverage",
    "start": "1605919",
    "end": "1608080"
  },
  {
    "text": "collection that's fine what about um C",
    "start": "1608080",
    "end": "1611200"
  },
  {
    "text": "and C++ programming languages like you",
    "start": "1611200",
    "end": "1613440"
  },
  {
    "text": "using Malo and free that hasn't moved",
    "start": "1613440",
    "end": "1616159"
  },
  {
    "text": "away from the runtime did it no so for",
    "start": "1616159",
    "end": "1619120"
  },
  {
    "text": "in those examples that you're still",
    "start": "1619120",
    "end": "1620480"
  },
  {
    "text": "going to have your Malak and free",
    "start": "1620480",
    "end": "1621520"
  },
  {
    "text": "implementation we ended up still having",
    "start": "1621520",
    "end": "1623360"
  },
  {
    "text": "our Malak and free implementation but we",
    "start": "1623360",
    "end": "1625120"
  },
  {
    "text": "were able to get rid of the rest of the",
    "start": "1625120",
    "end": "1626880"
  },
  {
    "text": "uh memory management stuff okay thank",
    "start": "1626880",
    "end": "1628720"
  },
  {
    "text": "you very much yeah absolutely",
    "start": "1628720",
    "end": "1632679"
  },
  {
    "text": "hello uh do you benchmark against",
    "start": "1639760",
    "end": "1642360"
  },
  {
    "text": "JavaScript in uh I have because in the",
    "start": "1642360",
    "end": "1644880"
  },
  {
    "text": "in the small examples I guess you could",
    "start": "1644880",
    "end": "1647520"
  },
  {
    "text": "Yeah yeah no I haven't benchmarked it",
    "start": "1647520",
    "end": "1649360"
  },
  {
    "text": "against JavaScript just yet um I expect",
    "start": "1649360",
    "end": "1651679"
  },
  {
    "text": "the reason why it's able to go so fast",
    "start": "1651679",
    "end": "1653440"
  },
  {
    "text": "is because JavaScript is the exact type",
    "start": "1653440",
    "end": "1655200"
  },
  {
    "text": "of language that does lots of these tiny",
    "start": "1655200",
    "end": "1657039"
  },
  {
    "text": "allocations and things so I think the GC",
    "start": "1657039",
    "end": "1659440"
  },
  {
    "text": "is really tuned to that which is why it",
    "start": "1659440",
    "end": "1660960"
  },
  {
    "text": "performs super well but I haven't done",
    "start": "1660960",
    "end": "1662240"
  },
  {
    "text": "those uh comparisons yet it'll be really",
    "start": "1662240",
    "end": "1664320"
  },
  {
    "text": "interesting to see um because I do think",
    "start": "1664320",
    "end": "1667039"
  },
  {
    "text": "that's Yeah",
    "start": "1667039",
    "end": "1670320"
  },
  {
    "text": "yeah absolutely i think it'll be really",
    "start": "1670320",
    "end": "1671840"
  },
  {
    "text": "interesting to see obviously we've been",
    "start": "1671840",
    "end": "1673760"
  },
  {
    "text": "in this long battle of Wlin versus JS",
    "start": "1673760",
    "end": "1676159"
  },
  {
    "text": "like turns out JS is super fast is wom",
    "start": "1676159",
    "end": "1678399"
  },
  {
    "text": "actually faster and I think this is a",
    "start": "1678399",
    "end": "1680000"
  },
  {
    "text": "case where we could maybe get faster",
    "start": "1680000",
    "end": "1681440"
  },
  {
    "text": "than JS uh because the the engines are",
    "start": "1681440",
    "end": "1684000"
  },
  {
    "text": "so optimized yeah yeah the point is yeah",
    "start": "1684000",
    "end": "1686880"
  },
  {
    "text": "the most saying that it could show",
    "start": "1686880",
    "end": "1689600"
  },
  {
    "text": "something that maybe there there's space",
    "start": "1689600",
    "end": "1691120"
  },
  {
    "text": "to optimize or or stuff that could be",
    "start": "1691120",
    "end": "1692880"
  },
  {
    "text": "done better or or maybe not or say this",
    "start": "1692880",
    "end": "1694880"
  },
  {
    "text": "is the best we could get or some at the",
    "start": "1694880",
    "end": "1697039"
  },
  {
    "text": "moment yeah absolutely",
    "start": "1697039",
    "end": "1700399"
  },
  {
    "text": "uh so so you mentioned um that for the",
    "start": "1700399",
    "end": "1703440"
  },
  {
    "text": "structural equality comparisons you have",
    "start": "1703440",
    "end": "1705039"
  },
  {
    "text": "to emit like a different walk for every",
    "start": "1705039",
    "end": "1707760"
  },
  {
    "text": "type that you're um operating on uh h",
    "start": "1707760",
    "end": "1711360"
  },
  {
    "text": "how reasonable do you think it would be",
    "start": "1711360",
    "end": "1713120"
  },
  {
    "text": "to have WOM have a built-in structural",
    "start": "1713120",
    "end": "1716720"
  },
  {
    "text": "equality comparison instruction that",
    "start": "1716720",
    "end": "1718640"
  },
  {
    "text": "reflects on the types",
    "start": "1718640",
    "end": "1721039"
  },
  {
    "text": "uh I don't think so from a technical",
    "start": "1721039",
    "end": "1723679"
  },
  {
    "text": "perspective it's certainly possible uh",
    "start": "1723679",
    "end": "1726080"
  },
  {
    "text": "but I think from a WOM perspective it's",
    "start": "1726080",
    "end": "1728320"
  },
  {
    "text": "not something they'd want to implement",
    "start": "1728320",
    "end": "1729760"
  },
  {
    "text": "uh because you know as Andreas Rossberg",
    "start": "1729760",
    "end": "1732960"
  },
  {
    "text": "says you want to go as low as possible",
    "start": "1732960",
    "end": "1734640"
  },
  {
    "text": "and no lower um and there's like the",
    "start": "1734640",
    "end": "1737120"
  },
  {
    "text": "weird cases where equality is strange",
    "start": "1737120",
    "end": "1740399"
  },
  {
    "text": "like so let's say you have a nested",
    "start": "1740399",
    "end": "1741919"
  },
  {
    "text": "object and there's float 32s in there uh",
    "start": "1741919",
    "end": "1745279"
  },
  {
    "text": "and then you're trying to do equality on",
    "start": "1745279",
    "end": "1746720"
  },
  {
    "text": "them do we all agree on what the",
    "start": "1746720",
    "end": "1749520"
  },
  {
    "text": "equality should be in those situations",
    "start": "1749520",
    "end": "1751600"
  },
  {
    "text": "it's kind of dependent on your",
    "start": "1751600",
    "end": "1752720"
  },
  {
    "text": "implementation and what you want to say",
    "start": "1752720",
    "end": "1754320"
  },
  {
    "text": "is what numbers are actually equal so I",
    "start": "1754320",
    "end": "1757360"
  },
  {
    "text": "don't think it's something that will",
    "start": "1757360",
    "end": "1758720"
  },
  {
    "text": "actually get implemented which is a",
    "start": "1758720",
    "end": "1760240"
  },
  {
    "text": "little sad but I do think um I think we",
    "start": "1760240",
    "end": "1764480"
  },
  {
    "text": "could get some type reflectiony type",
    "start": "1764480",
    "end": "1766080"
  },
  {
    "text": "stuff that might make it easier to do",
    "start": "1766080",
    "end": "1767679"
  },
  {
    "text": "that um but I had thought about this a",
    "start": "1767679",
    "end": "1770240"
  },
  {
    "text": "little bit and I think you can get away",
    "start": "1770240",
    "end": "1771760"
  },
  {
    "text": "with adding a handful of functions and",
    "start": "1771760",
    "end": "1773760"
  },
  {
    "text": "not you know one for every single type",
    "start": "1773760",
    "end": "1775520"
  },
  {
    "text": "of user defined so we'll see what",
    "start": "1775520",
    "end": "1778520"
  },
  {
    "text": "happens",
    "start": "1778520",
    "end": "1781520"
  },
  {
    "text": "awesome with that thank you so much",
    "start": "1783640",
    "end": "1785919"
  },
  {
    "text": "folks appreciate it",
    "start": "1785919",
    "end": "1789639"
  }
]