[
  {
    "start": "0",
    "end": "25000"
  },
  {
    "text": "foreign [Music] [Applause]",
    "start": "599",
    "end": "7620"
  },
  {
    "text": "ER and today's presentation is a technical dive on how we use the web",
    "start": "9920",
    "end": "15660"
  },
  {
    "text": "assembly to introduce user-defined functions that are Dynamic into lib SQL",
    "start": "15660",
    "end": "20760"
  },
  {
    "text": "which is our very own Fork of sqlite I have background in rather",
    "start": "20760",
    "end": "27720"
  },
  {
    "start": "25000",
    "end": "40000"
  },
  {
    "text": "um low level and distributed programming so I was naturally alert towards webassembly especially after I realized",
    "start": "27720",
    "end": "34559"
  },
  {
    "text": "it's not only about web development and now I'm a maintainer of the basketball",
    "start": "34559",
    "end": "41579"
  },
  {
    "start": "40000",
    "end": "95000"
  },
  {
    "text": "so we created a libisql to solve the following problem we love sqlite a data",
    "start": "41579",
    "end": "48059"
  },
  {
    "text": "which is a database Library also one of the most widespread software in the world it's in your phone it's everywhere",
    "start": "48059",
    "end": "54500"
  },
  {
    "text": "however it's also developed by a small team of experts which is super fine on",
    "start": "54500",
    "end": "61260"
  },
  {
    "text": "its own but it's also very hard to contribute to it not especially compared to other open source",
    "start": "61260",
    "end": "67140"
  },
  {
    "text": "projects and sqlite is also very opinionated on what",
    "start": "67140",
    "end": "73560"
  },
  {
    "text": "is and what isn't a good use case for it uh and that's also very fine like",
    "start": "73560",
    "end": "81600"
  },
  {
    "text": "opinionated software is great but there are people as included that love the",
    "start": "81600",
    "end": "86759"
  },
  {
    "text": "software so much that uh we actually want to apply it exactly to the use cases it wasn't designed for in the",
    "start": "86759",
    "end": "93060"
  },
  {
    "text": "first place uh enter libisql which is an open source",
    "start": "93060",
    "end": "98460"
  },
  {
    "text": "and open contribution Fork of of sqlite and in our development we focus on uh",
    "start": "98460",
    "end": "106140"
  },
  {
    "text": "making uh making lib SQL better suited for Edge environments networking",
    "start": "106140",
    "end": "113899"
  },
  {
    "text": "distributed systems systems were high concurrency matters and so on",
    "start": "113899",
    "end": "120479"
  },
  {
    "text": "and just a word of disambiguation when I when I say Edge I do not mean the internet of things so we're not trying",
    "start": "120479",
    "end": "127259"
  },
  {
    "text": "to put a database in your smart fridge or your Bluetooth light bulb yet but",
    "start": "127259",
    "end": "133680"
  },
  {
    "text": "we're just for now we're talking about local data centers small data centers",
    "start": "133680",
    "end": "139800"
  },
  {
    "text": "that might be in your hometown and provide way better way better latency to your into your projects",
    "start": "139800",
    "end": "147920"
  },
  {
    "text": "so since we've worked we've already managed to attract some Community attention we gained our first open",
    "start": "148319",
    "end": "155040"
  },
  {
    "text": "source contributors which is kind of why we created the project in the first place",
    "start": "155040",
    "end": "160319"
  },
  {
    "text": "uh we're working on a few interesting features that allow or make it easier for uh probably",
    "start": "160319",
    "end": "166680"
  },
  {
    "text": "basketball to be used in distributed systems uh Edge Computing serverless these kinds of environments",
    "start": "166680",
    "end": "172739"
  },
  {
    "text": "and we also slowly drift towards rust especially for new code we actually have",
    "start": "172739",
    "end": "179220"
  },
  {
    "text": "strong background in C which helps with the sqlite code base but we do believe",
    "start": "179220",
    "end": "184920"
  },
  {
    "text": "that trust is a safer choice and definitely more contributor friendly as well",
    "start": "184920",
    "end": "191700"
  },
  {
    "start": "191000",
    "end": "221000"
  },
  {
    "text": "let me start with a very short intro to the architecture uh lee basketball just like sqlite is a database Library so",
    "start": "191700",
    "end": "200159"
  },
  {
    "text": "it's just a self-contained Library it's not a distributed system on its own it's a great building block for one",
    "start": "200159",
    "end": "207000"
  },
  {
    "text": "and it contains everything already it has its own parser its own query engine its own storage layer and some glue code",
    "start": "207000",
    "end": "214620"
  },
  {
    "text": "for running it on the operating system so you can just embed it right into your application and it works",
    "start": "214620",
    "end": "221300"
  },
  {
    "start": "221000",
    "end": "233000"
  },
  {
    "text": "and now let me explain how user-defined functions fit into the picture and what",
    "start": "221459",
    "end": "226920"
  },
  {
    "text": "are the issues that we had and we wanted to overcome with the help of webassembly",
    "start": "226920",
    "end": "233060"
  },
  {
    "start": "233000",
    "end": "348000"
  },
  {
    "text": "so user-defined functions already exist in sqlite the way you the way you use it",
    "start": "233720",
    "end": "239340"
  },
  {
    "text": "is mass you would expect you can have a function let's say encrypt which encrypts text and you can just call it",
    "start": "239340",
    "end": "245640"
  },
  {
    "text": "in an SQL statement and get the result that you want uh",
    "start": "245640",
    "end": "252120"
  },
  {
    "text": "the way it works in sqlite is that you you need to actually program the function for instance in C or any other",
    "start": "252120",
    "end": "258239"
  },
  {
    "text": "language that has has proper bindings of all popular languages already have the bindings so we can you can pick your",
    "start": "258239",
    "end": "264419"
  },
  {
    "text": "language of choice and code the function in it so what is our issue well there are a",
    "start": "264419",
    "end": "269460"
  },
  {
    "text": "few the first one uh you can only register a",
    "start": "269460",
    "end": "274740"
  },
  {
    "text": "function by pretty much coding it and then inserting this implementation in your program and",
    "start": "274740",
    "end": "282180"
  },
  {
    "text": "in the distributed system you don't really want to allow your users to go",
    "start": "282180",
    "end": "287759"
  },
  {
    "text": "and change your code because that's an obvious concern and then there's also the matter of",
    "start": "287759",
    "end": "294120"
  },
  {
    "text": "making sure that your user use the same function for instance since it's a",
    "start": "294120",
    "end": "299340"
  },
  {
    "text": "distributed system there might be some users some some clients that use Python and register the function there might be",
    "start": "299340",
    "end": "306300"
  },
  {
    "text": "some some clients in Java that also register the function and",
    "start": "306300",
    "end": "311340"
  },
  {
    "text": "it's hard to be sure that it's exactly the same function it was implemented into two different languages maybe it",
    "start": "311340",
    "end": "317340"
  },
  {
    "text": "has some different floating Point precision and it may ruin your workloads so this is this is also something you",
    "start": "317340",
    "end": "325139"
  },
  {
    "text": "would like to change uh and finally uh user-defined functions well",
    "start": "325139",
    "end": "331199"
  },
  {
    "text": "as the name suggests are defined by your users so running them running them on",
    "start": "331199",
    "end": "337199"
  },
  {
    "text": "your own infrastructure is an obvious security concern and this is where web assemblies and kind of an obvious choice",
    "start": "337199",
    "end": "343440"
  },
  {
    "text": "due to its sound boxing by by Design",
    "start": "343440",
    "end": "348380"
  },
  {
    "start": "348000",
    "end": "374000"
  },
  {
    "text": "the existing interface for user-defined functions can be summed up by a few a",
    "start": "348840",
    "end": "355259"
  },
  {
    "text": "few C functions really so if you embed sqlite into your project",
    "start": "355259",
    "end": "361020"
  },
  {
    "text": "then you can just write your function then call this",
    "start": "361020",
    "end": "366840"
  },
  {
    "text": "all this function to register it and from now on you can use it in your SQL statements",
    "start": "366840",
    "end": "373820"
  },
  {
    "start": "374000",
    "end": "414000"
  },
  {
    "text": "in liebe SQL we would like the functions to be dynamically created as well so that",
    "start": "374460",
    "end": "380520"
  },
  {
    "text": "users can actually go and do it through SQL statements so we introduced or",
    "start": "380520",
    "end": "386039"
  },
  {
    "text": "rather reintroduced maybe the well-enone create function and drop function statements that you can",
    "start": "386039",
    "end": "392400"
  },
  {
    "text": "uh you can already know from postgres MySQL any other database management",
    "start": "392400",
    "end": "397560"
  },
  {
    "text": "system that's out there with one's fundamental difference right now we only",
    "start": "397560",
    "end": "404220"
  },
  {
    "text": "support one language for implementing the functions in and it's",
    "start": "404220",
    "end": "409620"
  },
  {
    "text": "not SQL it's webassembly",
    "start": "409620",
    "end": "413900"
  },
  {
    "start": "414000",
    "end": "468000"
  },
  {
    "text": "so let's go over the lifetime of Lee SQL Dynamic user defined function when a",
    "start": "414660",
    "end": "421500"
  },
  {
    "text": "function is created we need to take its source source code somehow so the user types in create function and then gives",
    "start": "421500",
    "end": "428280"
  },
  {
    "text": "it source code it can be either a binary compiled to awesome or webassembly text",
    "start": "428280",
    "end": "433860"
  },
  {
    "text": "format and then the next thing we do is store this function in an internal table the",
    "start": "433860",
    "end": "440460"
  },
  {
    "text": "storing is important first of all because then the function is immediately available to other users of the database",
    "start": "440460",
    "end": "447419"
  },
  {
    "text": "and secondly such definitions survives the program restart you don't need to re-register the function again when you",
    "start": "447419",
    "end": "454380"
  },
  {
    "text": "when you when you restart your application and in case somebody provided the",
    "start": "454380",
    "end": "462240"
  },
  {
    "text": "the source code in webassembly text format we also need to compile it to Binary so that we can run it later",
    "start": "462240",
    "end": "468900"
  },
  {
    "start": "468000",
    "end": "491000"
  },
  {
    "text": "uh next Awards module is instantiated in memory and with the help of that module",
    "start": "468900",
    "end": "476039"
  },
  {
    "text": "we can register the function in the basketball with the existing interface so just by calling the C the C API",
    "start": "476039",
    "end": "483180"
  },
  {
    "text": "function that registers the function and from now on it can be used as any other",
    "start": "483180",
    "end": "488400"
  },
  {
    "text": "user defined function now let's go over how a function gets",
    "start": "488400",
    "end": "496500"
  },
  {
    "start": "491000",
    "end": "584000"
  },
  {
    "text": "called first of all I'll go I'll explain how a regular non-wasm function works and then",
    "start": "496500",
    "end": "504379"
  },
  {
    "text": "point out some differences with the new Dynamic webassembly functions so for regular functions",
    "start": "504379",
    "end": "512339"
  },
  {
    "text": "when when a user wants to call something wants to call encrypt for instance this",
    "start": "512339",
    "end": "518640"
  },
  {
    "text": "function this function is first looked up in memory in a special data structure that holds all the registered functions",
    "start": "518640",
    "end": "524459"
  },
  {
    "text": "and there might be multiple functions with the same name C plus plus style and",
    "start": "524459",
    "end": "530279"
  },
  {
    "text": "in that case we need to find the best fit best fit is",
    "start": "530279",
    "end": "535519"
  },
  {
    "text": "done simply by comparing what are the parameter types and the best the best match",
    "start": "535519",
    "end": "541500"
  },
  {
    "text": "uh is what we should call and then the function is simply executed for webassembly functions the flow is a",
    "start": "541500",
    "end": "547740"
  },
  {
    "text": "little bit different it actually starts the same the function is looked up in in the same data structure where non-web",
    "start": "547740",
    "end": "554940"
  },
  {
    "text": "assembly functions are stored but then if once we see that this is a this is a webassembly function we need",
    "start": "554940",
    "end": "561720"
  },
  {
    "text": "to well prepare the runtime a little bit so we create awesome store with its with",
    "start": "561720",
    "end": "567660"
  },
  {
    "text": "its memory and it was an instance and then we need to translate types because libisql has its own set of types",
    "start": "567660",
    "end": "575660"
  },
  {
    "text": "and awesome has its own so we need to translate the SQL types to webassembly",
    "start": "575660",
    "end": "580980"
  },
  {
    "text": "to be able to run the webassembly function then the function is called with with",
    "start": "580980",
    "end": "587220"
  },
  {
    "start": "584000",
    "end": "596000"
  },
  {
    "text": "the parameters it returns some value this value needs to be translated back to the SQL type and then it can be",
    "start": "587220",
    "end": "594779"
  },
  {
    "text": "returned straight to the user this is a bonus slide actually uh one",
    "start": "594779",
    "end": "600600"
  },
  {
    "start": "596000",
    "end": "622000"
  },
  {
    "text": "interesting use case for uh web assembly user-defined functions and Oliver SQL is",
    "start": "600600",
    "end": "607440"
  },
  {
    "text": "database triggers you can do nice things with it I don't have I don't have enough of a time so to",
    "start": "607440",
    "end": "614399"
  },
  {
    "text": "elaborate on it but if you're interested feel free to just read the blog post later",
    "start": "614399",
    "end": "622399"
  },
  {
    "start": "622000",
    "end": "643000"
  },
  {
    "text": "and now I'll go through some more implementation details because the",
    "start": "622980",
    "end": "628080"
  },
  {
    "text": "previous slides were a little vacant high level and now I'll go through how",
    "start": "628080",
    "end": "633959"
  },
  {
    "text": "we actually managed to translate types and go from webassembly to bring in",
    "start": "633959",
    "end": "639480"
  },
  {
    "text": "something in libsql so fortunately for me the developer the",
    "start": "639480",
    "end": "648120"
  },
  {
    "text": "libusql type system is really concise uh so is the webassembly type system if you",
    "start": "648120",
    "end": "655160"
  },
  {
    "text": "disregard for for a little while all the billions of rfcs that happen every day one of the things will be happening",
    "start": "655160",
    "end": "661560"
  },
  {
    "text": "right now getting published but the basic set is really it's really small",
    "start": "661560",
    "end": "667200"
  },
  {
    "text": "um integers and floating Point numbers are trivially representable in both systems",
    "start": "667200",
    "end": "673200"
  },
  {
    "text": "and for for text for Strings and binary blobs we don't need to allocate instance",
    "start": "673200",
    "end": "679680"
  },
  {
    "text": "memory and we have tools to make it easier for the Developers",
    "start": "679680",
    "end": "685940"
  },
  {
    "start": "685000",
    "end": "749000"
  },
  {
    "text": "this is the um ABI the binary interface for translating",
    "start": "686000",
    "end": "691320"
  },
  {
    "text": "types to and from SQL lib SQL type system and webassembly",
    "start": "691320",
    "end": "697160"
  },
  {
    "text": "uh integers and and floating points are very very trivial to",
    "start": "697160",
    "end": "703320"
  },
  {
    "text": "um to translate and when we need to when we",
    "start": "703320",
    "end": "709680"
  },
  {
    "text": "need to pass a text a text field so so a string or a binary block we just need to",
    "start": "709680",
    "end": "714839"
  },
  {
    "text": "encode it and send a pointer to it which is a pointer to the webassembly",
    "start": "714839",
    "end": "720300"
  },
  {
    "text": "instance memory uh and in case of null we just send a null pointer historically",
    "start": "720300",
    "end": "726540"
  },
  {
    "text": "we also allocated memory for nulls but one of our very considerable external",
    "start": "726540",
    "end": "732839"
  },
  {
    "text": "open source contributions was to optimize that and only use a",
    "start": "732839",
    "end": "740339"
  },
  {
    "text": "single null pointer so I wanted to give a shout out for that because we love open source contributions",
    "start": "740339",
    "end": "747720"
  },
  {
    "text": "um so yeah to continue uh type mapping is not very",
    "start": "747720",
    "end": "753360"
  },
  {
    "start": "749000",
    "end": "786000"
  },
  {
    "text": "complicated because it fits on a single slide but it's easy to get it subtly wrong if you implement it by hand every",
    "start": "753360",
    "end": "760019"
  },
  {
    "text": "time so we we decided to create to make it easier for the developers and create a",
    "start": "760019",
    "end": "767279"
  },
  {
    "text": "library right now it's in Rust but we plan to support other languages as well",
    "start": "767279",
    "end": "772320"
  },
  {
    "text": "and with this Library you can write a native rust function that simply operates on regular rust types and get",
    "start": "772320",
    "end": "778980"
  },
  {
    "text": "it translated to to something that we can use straight in webassembly like in libysql",
    "start": "778980",
    "end": "786440"
  },
  {
    "start": "786000",
    "end": "838000"
  },
  {
    "text": "to let's go over an example this is a regular function written in Rust it's",
    "start": "786720",
    "end": "793019"
  },
  {
    "text": "quite self-explanatory it has only three lines it takes a it takes some arbitrary",
    "start": "793019",
    "end": "798420"
  },
  {
    "text": "data a key and then using uses a crate called Magic crypto encrypt the data",
    "start": "798420",
    "end": "806579"
  },
  {
    "text": "with the key and then returns it and this",
    "start": "806579",
    "end": "811620"
  },
  {
    "text": "is webassemblies or defined function for lib SQL that's that can run inside the",
    "start": "811620",
    "end": "818100"
  },
  {
    "text": "database this is kind of why I love the attributes macro system in Rust because",
    "start": "818100",
    "end": "824220"
  },
  {
    "text": "you can just annotate a function with something and everything happens under the curtain behind the curtain and",
    "start": "824220",
    "end": "832019"
  },
  {
    "text": "uh it compares to something that can be used straight in Libya SQL",
    "start": "832019",
    "end": "838620"
  },
  {
    "start": "838000",
    "end": "860000"
  },
  {
    "text": "if somebody is not into compiling rust themselves for any reason we also created an online playground where you",
    "start": "838620",
    "end": "845160"
  },
  {
    "text": "can just type in a rust function click a button and get a get an SQL create",
    "start": "845160",
    "end": "851220"
  },
  {
    "text": "function statement that you can simply copy paste put in your early basketball and then it works you can use the",
    "start": "851220",
    "end": "857579"
  },
  {
    "text": "function from now on uh all right now even more technical",
    "start": "857579",
    "end": "863279"
  },
  {
    "start": "860000",
    "end": "941000"
  },
  {
    "text": "details so far webassembly felt like a perfect fit for our use case for user defined",
    "start": "863279",
    "end": "869639"
  },
  {
    "text": "functions but especially if you compile with from rust but not only that there's one",
    "start": "869639",
    "end": "876180"
  },
  {
    "text": "substantial problem which is bloat if you if you're not careful",
    "start": "876180",
    "end": "883820"
  },
  {
    "text": "the the binary size of your compiled web assembly can get unreasonably huge",
    "start": "883820",
    "end": "889680"
  },
  {
    "text": "you can you can have have a binary that has tens or hundreds of kilobytes and on",
    "start": "889680",
    "end": "895980"
  },
  {
    "text": "your all your all your all it implements is like floating Point addition or something",
    "start": "895980",
    "end": "901740"
  },
  {
    "text": "and this wouldn't be an issue if we were running on like super computers but we",
    "start": "901740",
    "end": "908040"
  },
  {
    "text": "actually Target Edge environments serverless functions and the disk have hard limits and constraints with regard",
    "start": "908040",
    "end": "915120"
  },
  {
    "text": "to memory so uh one megabyte per per function is it's a",
    "start": "915120",
    "end": "921300"
  },
  {
    "text": "No-No but uh if we if we manage to make it smaller then",
    "start": "921300",
    "end": "926699"
  },
  {
    "text": "it's a viable solution so we did explore it quite a bit we found a few useful",
    "start": "926699",
    "end": "932160"
  },
  {
    "text": "tricks how to make make the output webassembly considerably smaller and",
    "start": "932160",
    "end": "938279"
  },
  {
    "text": "I'll just share the tricks with you now some low hanging fruit first",
    "start": "938279",
    "end": "944000"
  },
  {
    "start": "941000",
    "end": "984000"
  },
  {
    "text": "disable debug information because it produces megabytes of of bloat if you",
    "start": "944000",
    "end": "949500"
  },
  {
    "text": "don't need it in your production environment setup optimization level s which stands",
    "start": "949500",
    "end": "955560"
  },
  {
    "text": "for size and by the way there is also optimization level Z which stands for",
    "start": "955560",
    "end": "961980"
  },
  {
    "text": "aggressive size optimization but at least for webassembly we figured out with extensive testing",
    "start": "961980",
    "end": "969899"
  },
  {
    "text": "that the optimization is so aggressive that it actually produces larger binaries than the regular size",
    "start": "969899",
    "end": "976139"
  },
  {
    "text": "optimization so we stayed with s although we you can just go and try maybe maybe it works for you",
    "start": "976139",
    "end": "981959"
  },
  {
    "text": "next [Music] you might be tempted to just remove the",
    "start": "981959",
    "end": "988500"
  },
  {
    "start": "984000",
    "end": "1048000"
  },
  {
    "text": "rust standard Library if since you're since you're compiling to webassembly and it shapes off lots of of the code",
    "start": "988500",
    "end": "996120"
  },
  {
    "text": "from the binary but it also shapes off lots of developer experience because in our in our bindgen library we want",
    "start": "996120",
    "end": "1003220"
  },
  {
    "text": "developers to to be able to use Vector strings allocate some memory we want we",
    "start": "1003220",
    "end": "1009680"
  },
  {
    "text": "want them to use lots of create libraries that may depend on the standard Library as well",
    "start": "1009680",
    "end": "1015680"
  },
  {
    "text": "so we figured out a very decent Middle Ground solution and recompile the",
    "start": "1015680",
    "end": "1021860"
  },
  {
    "text": "standard library with this beautiful freeliner and that all all these options do is",
    "start": "1021860",
    "end": "1033260"
  },
  {
    "text": "turning turning off and removing uh Panic handlers because we can decide",
    "start": "1033260",
    "end": "1039918"
  },
  {
    "text": "that we don't want them and our code is panic free and that actually reduces the binary size quite a lot",
    "start": "1039919",
    "end": "1048640"
  },
  {
    "start": "1048000",
    "end": "1085000"
  },
  {
    "text": "next binarian project has some real goodies tools that I really like awesome",
    "start": "1049059",
    "end": "1055340"
  },
  {
    "text": "opt is a post post compilation optimization tool that also takes and as",
    "start": "1055340",
    "end": "1062360"
  },
  {
    "text": "flag which which stands for size optimization",
    "start": "1062360",
    "end": "1067580"
  },
  {
    "text": "and it does wonders you should definitely try it wasn't strip removes",
    "start": "1067580",
    "end": "1074059"
  },
  {
    "text": "debug symbols but not only that also some custom sections so even if you build without debug symbols it's worth",
    "start": "1074059",
    "end": "1079460"
  },
  {
    "text": "giving it wasn't strip a try and and think maybe maybe it reduces the size even further",
    "start": "1079460",
    "end": "1086120"
  },
  {
    "start": "1085000",
    "end": "1109000"
  },
  {
    "text": "and then when experimenting with binary size I also stumbled upon Twiggy which is a",
    "start": "1086120",
    "end": "1093500"
  },
  {
    "text": "size profiler for for web assembly and it's it's also great I really like how",
    "start": "1093500",
    "end": "1098840"
  },
  {
    "text": "how easy it is to inspect the binary after after we compile it and",
    "start": "1098840",
    "end": "1104380"
  },
  {
    "text": "reason about it so let's go through some examples twig it up gives you a list of top",
    "start": "1104380",
    "end": "1111200"
  },
  {
    "start": "1109000",
    "end": "1139000"
  },
  {
    "text": "offenders this example was run on top of a non-uh unoptimized binary and",
    "start": "1111200",
    "end": "1118340"
  },
  {
    "text": "you can see that the top two positions encrypt and compressed are actually um",
    "start": "1118340",
    "end": "1123440"
  },
  {
    "text": "related to the to the to the logic that we wanted to implement so encryption but",
    "start": "1123440",
    "end": "1128840"
  },
  {
    "text": "the rest is actually not directly related so this is like a candidate for maybe optimizing it out",
    "start": "1128840",
    "end": "1136580"
  },
  {
    "text": "and removing it from the binary Twiggy dominators give you gives you a",
    "start": "1136580",
    "end": "1142880"
  },
  {
    "start": "1139000",
    "end": "1168000"
  },
  {
    "text": "dominator tree of the call graph which sounds complicated but what it what it",
    "start": "1142880",
    "end": "1149419"
  },
  {
    "text": "allows you to do is basically um see what are the good candidates what",
    "start": "1149419",
    "end": "1154460"
  },
  {
    "text": "are the likely candidates of a hot path in your program this output is actually perfectly reasonable because I",
    "start": "1154460",
    "end": "1161120"
  },
  {
    "text": "um the binary I inspected only implemented a single function so this is what should",
    "start": "1161120",
    "end": "1166400"
  },
  {
    "text": "be on the hot path Twiggy garbage lets you see if your",
    "start": "1166400",
    "end": "1172820"
  },
  {
    "start": "1168000",
    "end": "1210000"
  },
  {
    "text": "binary con contains some useless data for instance",
    "start": "1172820",
    "end": "1178039"
  },
  {
    "text": "that might be debug info or some unreachable code and normally it wasn't opt and awesome strip tools should",
    "start": "1178039",
    "end": "1186880"
  },
  {
    "text": "take care of all that so in that case Twiggy garbage wouldn't really",
    "start": "1188020",
    "end": "1193580"
  },
  {
    "text": "report anything but it's still very nice to incorporate garbage in your continuous",
    "start": "1193580",
    "end": "1199160"
  },
  {
    "text": "integration tools so that you can get regular reports if your was in binaries contain some",
    "start": "1199160",
    "end": "1206200"
  },
  {
    "text": "potentially not useful data and the final minimization slide is a",
    "start": "1206200",
    "end": "1213980"
  },
  {
    "start": "1210000",
    "end": "1274000"
  },
  {
    "text": "collection of other things that we tried and also helped a little bit one is we Outlook which is an",
    "start": "1213980",
    "end": "1221120"
  },
  {
    "text": "alternative implementation of an allocator which is a little bit less performant but also",
    "start": "1221120",
    "end": "1227240"
  },
  {
    "text": "like 10 times smaller than the default so if you don't know if you do not allocate",
    "start": "1227240",
    "end": "1233720"
  },
  {
    "text": "heavily and user-defined functions usually have some simple logic so they they don't allocate very heavily maybe",
    "start": "1233720",
    "end": "1239900"
  },
  {
    "text": "it's worth it to switch to this simpler allocator which takes less less space",
    "start": "1239900",
    "end": "1245840"
  },
  {
    "text": "uh and it wasn't a snip is a very nice small tool that lets you cut out a",
    "start": "1245840",
    "end": "1251840"
  },
  {
    "text": "function out of your binary if you're sure that it's not going to be used and it just replaces it with an unreachable",
    "start": "1251840",
    "end": "1258559"
  },
  {
    "text": "instruction this is useful if your compiler keeps adding a function to",
    "start": "1258559",
    "end": "1265940"
  },
  {
    "text": "your binary because it cannot prove that it's never used but view of course know better so you can just snip it out",
    "start": "1265940",
    "end": "1273700"
  },
  {
    "start": "1274000",
    "end": "1315000"
  },
  {
    "text": "and this table shows steps from a very naive debug build to to the optimized",
    "start": "1274580",
    "end": "1281059"
  },
  {
    "text": "one and obviously most of the bloat disappears",
    "start": "1281059",
    "end": "1286520"
  },
  {
    "text": "right after you switch from a debug build with debug symbols to a proper release build but from there you can",
    "start": "1286520",
    "end": "1292820"
  },
  {
    "text": "still go eight times smaller if you apply all the tricks that I mentioned in the previous slides",
    "start": "1292820",
    "end": "1298280"
  },
  {
    "text": "I bet you can go even further but we decided that 20 kilo is something that",
    "start": "1298280",
    "end": "1303380"
  },
  {
    "text": "we can live with so so we stopped optimizing right there if someone knows that more tricks please",
    "start": "1303380",
    "end": "1309679"
  },
  {
    "text": "reach out to me I'll be very happy to hear about it and so would be my boss",
    "start": "1309679",
    "end": "1315860"
  },
  {
    "start": "1315000",
    "end": "1333000"
  },
  {
    "text": "uh all right so uh now webassembly runs on a stack-based virtual machine like for",
    "start": "1315860",
    "end": "1322100"
  },
  {
    "text": "me stack-ish based as we've learned in some previous presentations",
    "start": "1322100",
    "end": "1327500"
  },
  {
    "text": "uh so we in any case we need such a machine to run our functions on",
    "start": "1327500",
    "end": "1333340"
  },
  {
    "start": "1333000",
    "end": "1343000"
  },
  {
    "text": "and right now we have two underlying implementations one is awesome time and the other is uh that came a little bit",
    "start": "1333799",
    "end": "1340220"
  },
  {
    "text": "later was was an edge is uh things we like about awesome time is",
    "start": "1340220",
    "end": "1346280"
  },
  {
    "text": "uh well very active open source Community obviously it's very feature complete it has a good",
    "start": "1346280",
    "end": "1353600"
  },
  {
    "text": "support for async programming which is important for us because combined with this notion of fuel that I",
    "start": "1353600",
    "end": "1360200"
  },
  {
    "text": "really like that lets you decide for how long your web assembly",
    "start": "1360200",
    "end": "1365360"
  },
  {
    "text": "code should run before it's preempted this is useful because in a database",
    "start": "1365360",
    "end": "1371299"
  },
  {
    "text": "that has multiple users you should care about quality of service of some users so one user's function shouldn't run for",
    "start": "1371299",
    "end": "1378200"
  },
  {
    "text": "too long before checking if other if other users need something so this is all very useful for keeping",
    "start": "1378200",
    "end": "1386539"
  },
  {
    "text": "the latency of your of your database low and later we also introduced awesome",
    "start": "1386539",
    "end": "1393080"
  },
  {
    "start": "1390000",
    "end": "1434000"
  },
  {
    "text": "Edge support uh we like it for several recent reasons first of all it was a",
    "start": "1393080",
    "end": "1398179"
  },
  {
    "text": "little bit easier to to integrate because it's in CSE plus and uh",
    "start": "1398179",
    "end": "1404059"
  },
  {
    "text": "a vast part of lib SQL source code is still C although it's slowly changing",
    "start": "1404059",
    "end": "1410600"
  },
  {
    "text": "it also has every single feature that we need right now and it has a very lightweight build that comes well",
    "start": "1410600",
    "end": "1417380"
  },
  {
    "text": "without the ahead of time compiler but it has like one megabyte in size",
    "start": "1417380",
    "end": "1424179"
  },
  {
    "text": "which is which is important in the environments that we that we target with the best ql",
    "start": "1424179",
    "end": "1434260"
  },
  {
    "start": "1434000",
    "end": "1503000"
  },
  {
    "text": "now let's talk about uh things we don't have yet but would love to have in the future",
    "start": "1434720",
    "end": "1440140"
  },
  {
    "text": "one of them is a nice optimization so user defined functions are actually a",
    "start": "1440140",
    "end": "1446299"
  },
  {
    "text": "little bit more complicated than I initially uh shout on on my slides",
    "start": "1446299",
    "end": "1452000"
  },
  {
    "text": "uh you can also build user-defined Aggregates you can build window functions which are a little bit similar",
    "start": "1452000",
    "end": "1459080"
  },
  {
    "text": "uh and that already that already works perfectly fine in libosql and the",
    "start": "1459080",
    "end": "1464539"
  },
  {
    "text": "webassembly user defined functions but it can be optimized further what what an aggregate is is basically",
    "start": "1464539",
    "end": "1473260"
  },
  {
    "text": "a mechanism that runs the same function over and over for for its database row",
    "start": "1473260",
    "end": "1479780"
  },
  {
    "text": "and stores some accumulates some partial state and instead of recreating all the weapon",
    "start": "1479780",
    "end": "1487220"
  },
  {
    "text": "all the webassembly instances to keep the the sandboxing on we could just",
    "start": "1487220",
    "end": "1492799"
  },
  {
    "text": "reuse a single instance and run this function multiple times and then only return the result once so it's just a",
    "start": "1492799",
    "end": "1500539"
  },
  {
    "text": "nice optimization possibility uh next we're using was missile SQL but",
    "start": "1500539",
    "end": "1507200"
  },
  {
    "start": "1503000",
    "end": "1574000"
  },
  {
    "text": "libisql also compiles to awesome itself right now the main target is browsers",
    "start": "1507200",
    "end": "1512840"
  },
  {
    "text": "but we we would like to change that too but in any case you can compile the",
    "start": "1512840",
    "end": "1518299"
  },
  {
    "text": "whole the basketball code base to webassembly it can run either in memory",
    "start": "1518299",
    "end": "1523940"
  },
  {
    "text": "or even with persistent storage for instance local storage in your browser",
    "start": "1523940",
    "end": "1529400"
  },
  {
    "text": "or original private file system uh you we also compiled it to us and",
    "start": "1529400",
    "end": "1536600"
  },
  {
    "text": "created an online playground where you can just go to a webpage and have a fully fledged SQL engine that runs 100",
    "start": "1536600",
    "end": "1543620"
  },
  {
    "text": "in your browser but beyond demo purposes uh we we also",
    "start": "1543620",
    "end": "1551000"
  },
  {
    "text": "want to Target browsers because uh browsers can be considered something like far Edge it's something that has",
    "start": "1551000",
    "end": "1558140"
  },
  {
    "text": "compute power like a Micro Data Center it can also store data and at the same time it's very close to the user so the",
    "start": "1558140",
    "end": "1565340"
  },
  {
    "text": "latency is minimal and this close proximity means that the user experience is also better if we",
    "start": "1565340",
    "end": "1571520"
  },
  {
    "text": "manage to push the data so close to users now a webassembly is important for us",
    "start": "1571520",
    "end": "1578720"
  },
  {
    "text": "not only as runtime for user-defined functions but also as a catalyst for being able to run in in the edge",
    "start": "1578720",
    "end": "1584539"
  },
  {
    "text": "environment so we would very much like to see the best keyword running webassembly Edge",
    "start": "1584539",
    "end": "1590299"
  },
  {
    "text": "environments like like fermium Spin and cloudflare workers and others so on top of the basketball",
    "start": "1590299",
    "end": "1597260"
  },
  {
    "text": "we've built sqld which is server mode libisql incapable of speaking uh",
    "start": "1597260",
    "end": "1603380"
  },
  {
    "text": "postgres protocol but also HTTP and websockets",
    "start": "1603380",
    "end": "1608419"
  },
  {
    "text": "uh and we also have a driver for that which supports both Spin and workers",
    "start": "1608419",
    "end": "1613880"
  },
  {
    "text": "right now so that you can have your own database When developing an application that runs",
    "start": "1613880",
    "end": "1620539"
  },
  {
    "text": "on edge serverless functions that run on webassembly and HTTP is particularly important here because that's the most",
    "start": "1620539",
    "end": "1627320"
  },
  {
    "text": "standard way sometimes the only way except for websockets to communicate with the outside world from a host",
    "start": "1627320",
    "end": "1633380"
  },
  {
    "text": "hosted webassembly instance and this diagram shows how",
    "start": "1633380",
    "end": "1639820"
  },
  {
    "start": "1636000",
    "end": "1700000"
  },
  {
    "text": "deployed server-side lip SQL could work you can imagine that you have an application",
    "start": "1639820",
    "end": "1645440"
  },
  {
    "text": "a web web service and the users wants to register to it so they click a button",
    "start": "1645440",
    "end": "1651200"
  },
  {
    "text": "this button click is evaluated on on the edge on the edge like fermion spin for",
    "start": "1651200",
    "end": "1658700"
  },
  {
    "text": "instance and there it's translated to a to an SQL statements that gets shipped",
    "start": "1658700",
    "end": "1664940"
  },
  {
    "text": "via HTTP to our sqld cluster which is simply a distributed database",
    "start": "1664940",
    "end": "1670400"
  },
  {
    "text": "this database is capable of running webassembled user defined functions as well so we can run encrypt in there and",
    "start": "1670400",
    "end": "1677299"
  },
  {
    "text": "then the database server can send the information back to the Earth server and then back to the user uh and this kind",
    "start": "1677299",
    "end": "1685220"
  },
  {
    "text": "of workload is exactly what we Target because we can both provide a database for the edge for the data Edge and also",
    "start": "1685220",
    "end": "1693500"
  },
  {
    "text": "let the developers provide their own user-defined functions in webassembly",
    "start": "1693500",
    "end": "1700000"
  },
  {
    "start": "1700000",
    "end": "1720000"
  },
  {
    "text": "and finally as I mentioned in the very first slides we are open contribution",
    "start": "1700460",
    "end": "1706100"
  },
  {
    "text": "and we already had some but we would like to have more the more the merrier",
    "start": "1706100",
    "end": "1711260"
  },
  {
    "text": "so if anyone is interested in contributing or then please contact us",
    "start": "1711260",
    "end": "1717020"
  },
  {
    "text": "we'll be very glad to to help you and that's it thanks a lot",
    "start": "1717020",
    "end": "1723380"
  },
  {
    "start": "1720000",
    "end": "1757000"
  },
  {
    "text": "[Applause]",
    "start": "1723380",
    "end": "1732339"
  },
  {
    "text": "uh thank you for the presentation I think it's very well useful and we are",
    "start": "1752659",
    "end": "1758000"
  },
  {
    "start": "1757000",
    "end": "1801000"
  },
  {
    "text": "trying to find out how we can achieve these udfs in our products so I I have a",
    "start": "1758000",
    "end": "1764600"
  },
  {
    "text": "question about uh did you do any performance analysis uh for example on a like a large data set uh when you run",
    "start": "1764600",
    "end": "1773240"
  },
  {
    "text": "these UDF functions uh using vasam for over let's say one million records did",
    "start": "1773240",
    "end": "1780380"
  },
  {
    "text": "you measure the performance cost",
    "start": "1780380",
    "end": "1785020"
  },
  {
    "text": "we're not at that stage yet we at first we just we wanted to make sure that we",
    "start": "1787539",
    "end": "1794840"
  },
  {
    "text": "can run webassembly because of sandboxing and the fact that you can uh",
    "start": "1794840",
    "end": "1800899"
  },
  {
    "text": "the fact that you can code it once and then each users can can use them uh",
    "start": "1800899",
    "end": "1806240"
  },
  {
    "start": "1801000",
    "end": "1902000"
  },
  {
    "text": "there's also nothing that we can really compare it to because we could compare",
    "start": "1806240",
    "end": "1811880"
  },
  {
    "text": "the performance to Native functions but in our model you can't really let users",
    "start": "1811880",
    "end": "1817880"
  },
  {
    "text": "create the native functions so we could do benchmarks but we won't have anything",
    "start": "1817880",
    "end": "1822980"
  },
  {
    "text": "that's the comparatory because webassembly was our pretty much on only obvious choice",
    "start": "1822980",
    "end": "1830799"
  },
  {
    "text": "and also one more question about deploying these",
    "start": "1831880",
    "end": "1837279"
  },
  {
    "text": "functions from the user's perspective so what's your plan like are will it be",
    "start": "1837279",
    "end": "1844880"
  },
  {
    "text": "uploaded dynamically or will it uh once you once you have access to",
    "start": "1844880",
    "end": "1852760"
  },
  {
    "text": "sending SQL statements to your database so if you're a database user then you",
    "start": "1852760",
    "end": "1858559"
  },
  {
    "text": "can just send over a statement that says create function then then post the function body and then you can register",
    "start": "1858559",
    "end": "1864679"
  },
  {
    "text": "it so so that's how it works so that's why it's Dynamic and not kind of",
    "start": "1864679",
    "end": "1870679"
  },
  {
    "text": "statically built like like sqlite has thank you",
    "start": "1870679",
    "end": "1876940"
  },
  {
    "text": "okay I guess we're done so thanks everyone thanks again",
    "start": "1893240",
    "end": "1899400"
  },
  {
    "text": "[Applause]",
    "start": "1899400",
    "end": "1904589"
  }
]