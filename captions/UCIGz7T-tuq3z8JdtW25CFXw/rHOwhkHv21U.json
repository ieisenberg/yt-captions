[
  {
    "text": "[Music]",
    "start": "290",
    "end": "12820"
  },
  {
    "text": "[Applause] great thank you very much okay I believe this is on uh yeah thanks thanks again",
    "start": "12820",
    "end": "19840"
  },
  {
    "text": "um this has been an incredible day great conference uh really happy to be here and uh I'm very honored to be closing",
    "start": "19840",
    "end": "26000"
  },
  {
    "text": "this out today so we'll just get right to it um yeah just a little bit about me",
    "start": "26000",
    "end": "31439"
  },
  {
    "text": "to start uh my name is Dan Phillips i work for a little company called",
    "start": "31439",
    "end": "36480"
  },
  {
    "text": "Loophole Labs we do a few different things but the main thing that we do is this product called Architect.Run this",
    "start": "36480",
    "end": "42559"
  },
  {
    "text": "is completely unrelated to my talk uh but this is what I work on at my day job it's a way that you can take uh VMs and",
    "start": "42559",
    "end": "50480"
  },
  {
    "text": "migrate them with zero downtime it's really cool check it out um on the internet I usually use this handle",
    "start": "50480",
    "end": "56960"
  },
  {
    "text": "d_filler uh on Twitter x LinkedIn places like that some variation thereof on blue",
    "start": "56960",
    "end": "63600"
  },
  {
    "text": "sky and those places okay just to get right into",
    "start": "63600",
    "end": "69680"
  },
  {
    "text": "it why do people like containers this is uh we're going to sort of talk at a high",
    "start": "69720",
    "end": "75840"
  },
  {
    "text": "level and then move into things more specific as we get into the um um the boxer project so there's lots of reasons",
    "start": "75840",
    "end": "84240"
  },
  {
    "text": "um but I think one of the most important reasons people like containers is because they see them as a primitive uh",
    "start": "84240",
    "end": "90479"
  },
  {
    "text": "people who are involved in the cloudnative space uh we've kind of come to accept the idea that containers are a",
    "start": "90479",
    "end": "96880"
  },
  {
    "text": "cloudnative primitive right they're sort of a fundamental unit of compute um and we don't go much lower than that in in",
    "start": "96880",
    "end": "103600"
  },
  {
    "text": "uh lots of different services that exist today they just work uh when they work",
    "start": "103600",
    "end": "111040"
  },
  {
    "text": "they just work right and one of the great things about them just working is that you don't need to know how the",
    "start": "111040",
    "end": "117280"
  },
  {
    "text": "runtimes are implemented to have a lot of things work in fact I would go as far as to bet that most people who use",
    "start": "117280",
    "end": "123280"
  },
  {
    "text": "containers don't know and maybe don't care exactly how they work they just",
    "start": "123280",
    "end": "128840"
  },
  {
    "text": "work um I think a lot of developers see containers as just a small VM just like a mini VM right uh most people when they",
    "start": "128840",
    "end": "135760"
  },
  {
    "text": "first come across them they think \"Okay this is kind of like a VM and I'll use it like a VM i'll uh SSH into it i'll",
    "start": "135760",
    "end": "141760"
  },
  {
    "text": "attach a session and I can poke around in it and it's just a little VM even though it's",
    "start": "141760",
    "end": "147560"
  },
  {
    "text": "not containers before Docker um so containers before Docker",
    "start": "147560",
    "end": "154319"
  },
  {
    "text": "containers existed before Docker uh Docker was built on LXC there were lots of ways that you could use things uh I",
    "start": "154319",
    "end": "159760"
  },
  {
    "text": "think Croups were introduced into the kernel in 2006 um there was isolation in",
    "start": "159760",
    "end": "165280"
  },
  {
    "text": "the form of a container you just had to assemble it all yourself right there was quite a few there were quite a few",
    "start": "165280",
    "end": "170800"
  },
  {
    "text": "things that you had to do to make it work and uh most application developers uh did not know about",
    "start": "170800",
    "end": "177160"
  },
  {
    "text": "it docker gave us a developer experience and that developer experience has kind",
    "start": "177160",
    "end": "183280"
  },
  {
    "text": "of entered our consciousness as this abstraction because that's really all it is is an abstraction across different",
    "start": "183280",
    "end": "189599"
  },
  {
    "text": "runtimes the runtimes have changed the particular details have changed about how the runtimes work um but this",
    "start": "189599",
    "end": "196480"
  },
  {
    "text": "correct abstraction uh gave way to a",
    "start": "196480",
    "end": "201680"
  },
  {
    "text": "primitive so um at loophole labs we have",
    "start": "201720",
    "end": "206800"
  },
  {
    "text": "been doing wom in production for the last 2 years with a product called scale scale.sh scale is a plug-in framework uh",
    "start": "206800",
    "end": "214959"
  },
  {
    "text": "that we developed uh we started working on it about 3 years ago and I'm not going to get into the details now if you",
    "start": "214959",
    "end": "220159"
  },
  {
    "text": "want to check it out scale.sh is the place fully open source you can play with it we support Rust Go TypeScript um",
    "start": "220159",
    "end": "226480"
  },
  {
    "text": "and it's an extremely performant plug-in framework that we use for our control plane for our other products um we",
    "start": "226480",
    "end": "232959"
  },
  {
    "text": "learned a lot about what developers uh need and what they stumble on and how",
    "start": "232959",
    "end": "240480"
  },
  {
    "text": "they use Web Assembly through this process one of the big things that we learned is",
    "start": "240480",
    "end": "245920"
  },
  {
    "text": "that devs okay and by devs I mean application developers not systems",
    "start": "245920",
    "end": "251360"
  },
  {
    "text": "engineers specifically um they don't want to rewrite system code for benefits that they see as marginal or that they",
    "start": "251360",
    "end": "257440"
  },
  {
    "text": "don't fully understand we can by the way if you haven't noticed I'm not talking about what web assembly is or how it",
    "start": "257440",
    "end": "262720"
  },
  {
    "text": "works because I think everyone here gets it for the most part so uh we're just kind of getting into it but yeah",
    "start": "262720",
    "end": "268080"
  },
  {
    "text": "application developers they um you can tell them Wasma is safer but they may not understand exactly why you can show",
    "start": "268080",
    "end": "274479"
  },
  {
    "text": "them that it's faster and that's cool um but they're not going to rewrite system level code to make their Python Ruby PHP",
    "start": "274479",
    "end": "282800"
  },
  {
    "text": "Java app work um most of them won't some will the simpler you can make the DevX",
    "start": "282800",
    "end": "288880"
  },
  {
    "text": "the better um too many caveats kill adoption okay a choice then often comes up which",
    "start": "288880",
    "end": "295759"
  },
  {
    "text": "is do I run unmodified code like on a native platform or do I use this cool new WM tool and that's kind of been like",
    "start": "295759",
    "end": "302560"
  },
  {
    "text": "a binary choice for a lot of people and it's not just our product it's also many other WOM products that are out there",
    "start": "302560",
    "end": "309039"
  },
  {
    "text": "today uh no loss do right what if we could",
    "start": "309039",
    "end": "314960"
  },
  {
    "text": "have both why not both um what if we could have the compatibility of native",
    "start": "314960",
    "end": "321039"
  },
  {
    "text": "code uh with the benefits of Wom this is a representation of me eating my cake",
    "start": "321039",
    "end": "328240"
  },
  {
    "text": "and having it too having it too and eating it too right so these approaches are in",
    "start": "328240",
    "end": "335199"
  },
  {
    "text": "opposition right what a container does is that it starts with everything it starts with the whole world it starts",
    "start": "335199",
    "end": "340479"
  },
  {
    "text": "with a kernel it starts with an operating system it starts with the need for croups the need for namespaces it",
    "start": "340479",
    "end": "346240"
  },
  {
    "text": "starts with the CNI the CSI the uh the CRI and all these things that need to be",
    "start": "346240",
    "end": "351680"
  },
  {
    "text": "there to give you this one little shipping container right that only you can see stuff in which it's much harder",
    "start": "351680",
    "end": "357680"
  },
  {
    "text": "to break out of than it used to be but um it's still just a contain thing that's hiding all of this",
    "start": "357680",
    "end": "363479"
  },
  {
    "text": "complexity what if we started with the opposite approach and we took only what we need and we add we added system",
    "start": "363479",
    "end": "369120"
  },
  {
    "text": "functionality as needed but with native compatibility with native compatibility",
    "start": "369120",
    "end": "374160"
  },
  {
    "text": "and this is the opposite approach so thinking about web assembly um and",
    "start": "374160",
    "end": "381919"
  },
  {
    "text": "thinking about a new primitive we have kind of toyed with different ideas for the last few years um we sort of started",
    "start": "381919",
    "end": "388960"
  },
  {
    "text": "looking at the current state-of-the-art back in like 2021 thinking about this was pre-component model this is when we were",
    "start": "388960",
    "end": "395680"
  },
  {
    "text": "referring to things as nano processes and different ideas around how we can bring Unix processes into wow but not",
    "start": "395680",
    "end": "402080"
  },
  {
    "text": "really all the Unix philosophies um and then if you look on the other side thinking about the the primitives that",
    "start": "402080",
    "end": "408240"
  },
  {
    "text": "exist in current native systems with Unix uh which is the which is the primitive is it a process or is it a",
    "start": "408240",
    "end": "414319"
  },
  {
    "text": "file descriptor uh cuz everything is a file even though it's not and processes",
    "start": "414319",
    "end": "419520"
  },
  {
    "text": "are how things work even though you need file descriptors to access them and you",
    "start": "419520",
    "end": "424880"
  },
  {
    "text": "know depending on the context so there was a lot of confusion there um people",
    "start": "424880",
    "end": "429919"
  },
  {
    "text": "have talked about plan 9 i think there's actually not supposed to be a space plan space 9 um a lot of really cool ideas",
    "start": "429919",
    "end": "436160"
  },
  {
    "text": "principles and aspirations come from plan N but specifically there's some interesting things around perp process",
    "start": "436160",
    "end": "442520"
  },
  {
    "text": "namespaces and there's also the idea that it's distributed first right every",
    "start": "442520",
    "end": "448240"
  },
  {
    "text": "process every process in plan 9 has its own the idea is the original idea was",
    "start": "448240",
    "end": "453440"
  },
  {
    "text": "for it to have its own CPU it's kind of interesting",
    "start": "453440",
    "end": "458599"
  },
  {
    "text": "so when we started looking at how we could kind of adopt the good parts of Unix and think about other more",
    "start": "458759",
    "end": "464720"
  },
  {
    "text": "aspirational things and how we could get system code to work uh for arbitrary pix",
    "start": "464720",
    "end": "470000"
  },
  {
    "text": "code we of course looked at the Linux kernel and we started looking through Linux kernel source code and trying to",
    "start": "470000",
    "end": "476400"
  },
  {
    "text": "extract uh the functionality as discrete components and the results",
    "start": "476400",
    "end": "484520"
  },
  {
    "text": "Uh yeah so if you've ever tried to do this uh it's not as easy as it seems it sounds great in practice but e we just",
    "start": "486879",
    "end": "493680"
  },
  {
    "text": "started with the Linux VFS we were like okay this must be something that we can take and use but the amount of",
    "start": "493680",
    "end": "500720"
  },
  {
    "text": "dependencies and the amount of coupled logic I mean is a 30-year-old project that the entire world's infrastructure",
    "start": "500720",
    "end": "507199"
  },
  {
    "text": "runs on uh there's a lot there right so even people who in the micro kernel and unicernel space typically end up re",
    "start": "507199",
    "end": "514159"
  },
  {
    "text": "rewriting all these different you know levels of things uh without being able to reuse existing parts of the Linux",
    "start": "514159",
    "end": "519919"
  },
  {
    "text": "kernel so okay what's the closest then the closest thing then is one level up which",
    "start": "519919",
    "end": "525040"
  },
  {
    "text": "is actually where some of these standards come from lib C's right lib C's uh give you a standard pix interface",
    "start": "525040",
    "end": "532959"
  },
  {
    "text": "and what if we took these standard pix interfaces and we fulfill the implementations ourselves right that",
    "start": "532959",
    "end": "538720"
  },
  {
    "text": "gives us the ability to layer these implementations right we'll talk more about this and that leads me to a",
    "start": "538720",
    "end": "546000"
  },
  {
    "text": "project called Marquott Marquott is sort of a sub",
    "start": "546000",
    "end": "551279"
  },
  {
    "text": "project of boxer which is which is basically an amalgamation of muscle",
    "start": "551279",
    "end": "556720"
  },
  {
    "text": "libby and gibbc with virtualized layers that are generated ad hoc when you when",
    "start": "556720",
    "end": "563200"
  },
  {
    "text": "you use it right so marott takes the",
    "start": "563200",
    "end": "570040"
  },
  {
    "text": "entire pix specification and the goal is to",
    "start": "570040",
    "end": "575720"
  },
  {
    "text": "implement every single pix function right and we're at about 60%",
    "start": "575720",
    "end": "582399"
  },
  {
    "text": "right this is just a matrix of what's supported uh it's great because in Pix there are things that don't even touch",
    "start": "582399",
    "end": "588000"
  },
  {
    "text": "the kernel there are things that require the kernel there are things that you can emulate and there's everything in",
    "start": "588000",
    "end": "593200"
  },
  {
    "text": "between right you'll see that things like process and thread management are still missing signals are still missing",
    "start": "593200",
    "end": "598800"
  },
  {
    "text": "and we'll talk about that here in a second okay",
    "start": "598800",
    "end": "605959"
  },
  {
    "text": "so the difference though is this is a lib C that doesn't wrap implementations rather what it does is create",
    "start": "605959",
    "end": "612320"
  },
  {
    "text": "virtualized functionality as much as possible and when you can't virtualize something it tries to find the right",
    "start": "612320",
    "end": "618720"
  },
  {
    "text": "interface at the right level for stuff that you need which we'll talk about",
    "start": "618720",
    "end": "623959"
  },
  {
    "text": "also you need a file system right you need a file system for every module um",
    "start": "623959",
    "end": "631360"
  },
  {
    "text": "maybe a file system for every process if you have the concept of a process and we kind of started just with",
    "start": "631360",
    "end": "640000"
  },
  {
    "text": "getting just the right amount of compatibility uh with PZIX where we could bring most of the stuff that",
    "start": "640000",
    "end": "646560"
  },
  {
    "text": "people need and save the hard stuff like async.io and syncing and things like this right and that's where we came up",
    "start": "646560",
    "end": "653200"
  },
  {
    "text": "with the WM VFS wasn't BFFS is a project that we've worked on for a couple years",
    "start": "653200",
    "end": "658320"
  },
  {
    "text": "now and it implements most uh PZIX file",
    "start": "658320",
    "end": "663440"
  },
  {
    "text": "system calls um with a couple with a couple exceptions right so what we do",
    "start": "663440",
    "end": "669279"
  },
  {
    "text": "then is we have marott which creates these layers marott uses the file system for every single module every single",
    "start": "669279",
    "end": "675279"
  },
  {
    "text": "process and it brings this in together so you can call these standard lib file system functions uh but under the hood",
    "start": "675279",
    "end": "681200"
  },
  {
    "text": "it uses a uh rustbased bfs",
    "start": "681200",
    "end": "685920"
  },
  {
    "text": "And people say okay well it's a VFS um data is not persisted like how could you",
    "start": "687279",
    "end": "692880"
  },
  {
    "text": "use a virtualized file system for everything and usually my answer is that uh you already are using a virtualized",
    "start": "692880",
    "end": "698240"
  },
  {
    "text": "file system for most things if you're using a Unix system every time you access a file system it is through the",
    "start": "698240",
    "end": "704160"
  },
  {
    "text": "abstraction of the Linux VFS right it's just that uh underlying file stores and",
    "start": "704160",
    "end": "709440"
  },
  {
    "text": "persistence is something that is abstracted away for most application developers so we put this all",
    "start": "709440",
    "end": "718160"
  },
  {
    "text": "together maybe all together in one box if you will and maybe maybe we have",
    "start": "718440",
    "end": "724560"
  },
  {
    "text": "something like a new a new primitive but first one of the things that I'd like to",
    "start": "724560",
    "end": "730000"
  },
  {
    "text": "point out is that interfaces matter um one of the great things about Docker that they've created is this beautiful",
    "start": "730000",
    "end": "736079"
  },
  {
    "text": "file that we're all familiar with which is a Docker file people who don't even know what Docker is who are developers",
    "start": "736079",
    "end": "742560"
  },
  {
    "text": "can read this file and kind of get a sense of what this thing is what the fundamental unit of compute will be",
    "start": "742560",
    "end": "749120"
  },
  {
    "text": "based on this very simple and declarative structure so we already have a a beautiful DevX that Docker gives us",
    "start": "749120",
    "end": "755680"
  },
  {
    "text": "and it's incredible prior prior art so that's what we are going to use as our interface also and that's where Boxer",
    "start": "755680",
    "end": "762959"
  },
  {
    "text": "comes in boxer allows you to take a container declaration and it spits out a WOM",
    "start": "762959",
    "end": "770160"
  },
  {
    "text": "binary and host plug-in functions right so you can take a Docker file uh and in",
    "start": "770160",
    "end": "778240"
  },
  {
    "text": "theory soon at some point in my life when I get more time to work on this any arbitrary Docker file and it will create",
    "start": "778240",
    "end": "785200"
  },
  {
    "text": "a universally runnable WOM binary",
    "start": "785200",
    "end": "789959"
  },
  {
    "text": "so what is in a WOM box just to recap based on everything we talked about so far we have a base layer the base layer",
    "start": "792240",
    "end": "798880"
  },
  {
    "text": "is generated by marott which is a full lib and as much of virtualization as possible right in that virtualization we",
    "start": "798880",
    "end": "805120"
  },
  {
    "text": "have a virtualized file system and system code layers okay uh we have a runtime so this bundles a runtime but",
    "start": "805120",
    "end": "811680"
  },
  {
    "text": "it's specific and you can swap run times right now it's wen time but we've also experimented with w zero and whammer it",
    "start": "811680",
    "end": "817839"
  },
  {
    "text": "shouldn't matter because the difference is is that the host functions that you need for anything like networking or if",
    "start": "817839",
    "end": "823040"
  },
  {
    "text": "you want to actually use signals or if you're on some sort of operating system where you want to wrap specific architecture specific code then you can",
    "start": "823040",
    "end": "830000"
  },
  {
    "text": "use these host plugins right and then of course the user source",
    "start": "830000",
    "end": "836360"
  },
  {
    "text": "code imports and exports yeah so talking about how this works and how these are broken out into subcomponents and subm",
    "start": "836360",
    "end": "843120"
  },
  {
    "text": "modules is something that I'm not going to get into at this talk but if you'd like to talk more about it we can talk after yeah so quick",
    "start": "843120",
    "end": "851360"
  },
  {
    "text": "demo uh yeah it's kind of big enough okay so we have a Docker file here not",
    "start": "851480",
    "end": "861120"
  },
  {
    "text": "all of the directives are supported yet but these directives that you see are okay so let's see great the necessary",
    "start": "861120",
    "end": "869760"
  },
  {
    "text": "ASKI art course what we're going to do is we're going to take this Docker file all right and we're going to do",
    "start": "869760",
    "end": "876680"
  },
  {
    "text": "uh box",
    "start": "876680",
    "end": "881760"
  },
  {
    "text": "build docker file",
    "start": "881880",
    "end": "887560"
  },
  {
    "text": "okay we'll do a box ls right oh and one thing I didn't",
    "start": "887560",
    "end": "893839"
  },
  {
    "text": "mention is that I've already compiled the C code that I'm going to run and the very important thing about this C code",
    "start": "893839",
    "end": "899839"
  },
  {
    "text": "all this does is very simple for the for the purpose of a demo prints out 100 numbers all good the most important",
    "start": "899839",
    "end": "905440"
  },
  {
    "text": "thing is this right this would usually indicate that we're running this on a native platform uh but because we are",
    "start": "905440",
    "end": "911760"
  },
  {
    "text": "using Boxer specifically with Marott you can include SVIO and get everything that",
    "start": "911760",
    "end": "916800"
  },
  {
    "text": "that comes with okay",
    "start": "916800",
    "end": "923560"
  },
  {
    "text": "so you'll also notice that it's kind of big for that code that we just compiled",
    "start": "923560",
    "end": "929680"
  },
  {
    "text": "uh but you have to remember and there's there's been no sort of optimization done with this this brings in everything",
    "start": "929680",
    "end": "935440"
  },
  {
    "text": "that we can virtualized for all of what we've combined from gibbc and muscle right um not just sdil for now so uh",
    "start": "935440",
    "end": "945600"
  },
  {
    "text": "we'll do box run yay printed that's",
    "start": "945600",
    "end": "950720"
  },
  {
    "text": "great and now we'll do something else let's do box",
    "start": "950720",
    "end": "956759"
  },
  {
    "text": "run web oh of course this wouldn't",
    "start": "956759",
    "end": "962000"
  },
  {
    "text": "work yay also worked here too and now that I have this here in my",
    "start": "962360",
    "end": "969199"
  },
  {
    "text": "browser running the exact same code that we just ran on my local machine",
    "start": "969199",
    "end": "974600"
  },
  {
    "text": "um here what if we had a little scripts that could I could download the entire",
    "start": "974600",
    "end": "981279"
  },
  {
    "text": "runtime with the box pre-ompiled and and and run it safely on my local machine",
    "start": "981279",
    "end": "986639"
  },
  {
    "text": "that's what in theory we can do here um as soon as I build this functionality in",
    "start": "986639",
    "end": "993680"
  },
  {
    "text": "uh and then yeah further we could take this exact same box because it's just a WM binary",
    "start": "993680",
    "end": "1000360"
  },
  {
    "text": "right and we could deploy it on the best uh site deployer that you've never heard of because this is a personal project of",
    "start": "1000360",
    "end": "1006800"
  },
  {
    "text": "mine that uh I never talked about um but we could use Boxer and uh what what we",
    "start": "1006800",
    "end": "1012480"
  },
  {
    "text": "can do here is deploy that same code to a server and the result",
    "start": "1012480",
    "end": "1018390"
  },
  {
    "text": "[Music] being the same",
    "start": "1018390",
    "end": "1024760"
  },
  {
    "text": "so that's the same code running in three different places and what I personally",
    "start": "1024760",
    "end": "1030720"
  },
  {
    "text": "love about this and what got me really excited about web assembly is uh the",
    "start": "1030720",
    "end": "1035760"
  },
  {
    "text": "fact that that exact same code from a container definition can be run in the",
    "start": "1035760",
    "end": "1040798"
  },
  {
    "text": "browser can be run on the server can be run locally on on your machine but also",
    "start": "1040799",
    "end": "1045918"
  },
  {
    "text": "it can be run anywhere where there's a wom runtime so we can also run this on an IoT device on embedded devices uh you",
    "start": "1045919",
    "end": "1053440"
  },
  {
    "text": "know if we if we work on the size constraints um a lot of more a lot more places are theoretically possible if",
    "start": "1053440",
    "end": "1060160"
  },
  {
    "text": "you'd like to sign up uh for more announcements and releases check out boxer.dev we have a a little sign up",
    "start": "1060160",
    "end": "1065760"
  },
  {
    "text": "thing for your for your email this is an image that I had Chad",
    "start": "1065760",
    "end": "1071840"
  },
  {
    "text": "GPT make for me um I thought it came up pretty well kind of encapsulates the whole idea right a box versus a shipping",
    "start": "1071840",
    "end": "1079960"
  },
  {
    "text": "container um obviously there's a lot to explain here this is a high level overview um but basically Boxer to",
    "start": "1079960",
    "end": "1088080"
  },
  {
    "text": "summarize it virtualizes Unix like system functionality okay run anything in Wom like you would",
    "start": "1088080",
    "end": "1094720"
  },
  {
    "text": "on native that's the goal our goal too is that this is going to work for about 95% of container",
    "start": "1094720",
    "end": "1101039"
  },
  {
    "text": "workloads obviously if you are using a container and you're doing something with native architecture architecture",
    "start": "1101039",
    "end": "1106960"
  },
  {
    "text": "specific code that is not going to work and it's not going to be uh not going to be something that we really support we",
    "start": "1106960",
    "end": "1112160"
  },
  {
    "text": "could get around this with emulation if we really wanted to um but that would be multiple cans of forms that uh are",
    "start": "1112160",
    "end": "1118000"
  },
  {
    "text": "probably well beyond the scope of the project um right now it's about 60% file system operations networking um and then",
    "start": "1118000",
    "end": "1126000"
  },
  {
    "text": "uh libc functions like math localization things like this that don't touch the kernel",
    "start": "1126000",
    "end": "1131919"
  },
  {
    "text": "how do we do this networking signals threads IPC process management yes all of these things could be their own talk",
    "start": "1131919",
    "end": "1137840"
  },
  {
    "text": "and there's a lot to each one of them so if you're going to be around tonight or tomorrow and you'd like to talk more I",
    "start": "1137840",
    "end": "1143679"
  },
  {
    "text": "would love to get into all of these so the goals one of the loftiest",
    "start": "1143679",
    "end": "1150880"
  },
  {
    "text": "goals is to create a better bootstrap uh to bootstrap a better compile to WOM story right i don't know if people in",
    "start": "1150880",
    "end": "1158000"
  },
  {
    "text": "this room many people in this room run Wom services but uh when people come to Wom they want the simplest thing",
    "start": "1158000",
    "end": "1164600"
  },
  {
    "text": "possible the sort of thesis here too is that with Docker containers the sort of",
    "start": "1164600",
    "end": "1170080"
  },
  {
    "text": "uh way that containers worked previous to to Docker it was too hard for most people to figure out until it was put",
    "start": "1170080",
    "end": "1176080"
  },
  {
    "text": "into a nice DevX and people didn't have to think about the underlying constraints",
    "start": "1176080",
    "end": "1181520"
  },
  {
    "text": "um the result is that you get something safer faster smaller and more",
    "start": "1181520",
    "end": "1186760"
  },
  {
    "text": "universal if you noticed in the Docker file that we used for the example we use from scratch right but there's no reason",
    "start": "1186760",
    "end": "1194400"
  },
  {
    "text": "theoretically that with this sort of compilation story that we couldn't use something like Alpine Latus if we were",
    "start": "1194400",
    "end": "1199919"
  },
  {
    "text": "to get all the user space programs compiled accordingly right right now it's a work",
    "start": "1199919",
    "end": "1206320"
  },
  {
    "text": "in progress but we are working towards uh more feature parody all the time one",
    "start": "1206320",
    "end": "1212320"
  },
  {
    "text": "of the anti- goals so this is not a replacement for wy that's a very important point this is at a different",
    "start": "1212320",
    "end": "1217520"
  },
  {
    "text": "level of abstraction there's no reason that you can't have uh at a very very",
    "start": "1217520",
    "end": "1224080"
  },
  {
    "text": "high level and this is another sort of debatable thing but there's there's no reason that you can't virtualize things",
    "start": "1224080",
    "end": "1229760"
  },
  {
    "text": "to the point where you have pix compatibility and capability based security there's a lot there that by",
    "start": "1229760",
    "end": "1235919"
  },
  {
    "text": "itself could be a whole another talk too so what does this enable truly isomorphic deployable",
    "start": "1235919",
    "end": "1244240"
  },
  {
    "text": "primitives run the same code like I just did in your browser on your local machine on a server right that also",
    "start": "1244240",
    "end": "1251360"
  },
  {
    "text": "changes how we can um distribute compute across multiple",
    "start": "1251360",
    "end": "1257159"
  },
  {
    "text": "dimensions you can take these things in these different places and combine them",
    "start": "1257159",
    "end": "1262799"
  },
  {
    "text": "right it wouldn't be a talk in 2025 if we didn't mention AI of course so uh AI",
    "start": "1262799",
    "end": "1269200"
  },
  {
    "text": "code uh that's being made more and more every day uh there's people have said",
    "start": "1269200",
    "end": "1274480"
  },
  {
    "text": "that there will be a 100x increase in software produced and it'll be produced by people who know maybe if you know",
    "start": "1274480",
    "end": "1281120"
  },
  {
    "text": "maybe they don't know as much about what they're doing with security and there's going to be so much more um it would be nice to have a primitive that could uh",
    "start": "1281120",
    "end": "1288240"
  },
  {
    "text": "that could work well that we could trust for all of this untrusted code that's about to be thrust into the world and we",
    "start": "1288240",
    "end": "1294720"
  },
  {
    "text": "can do that with a familiar DevX just with something that's smaller safer faster and more universal",
    "start": "1294720",
    "end": "1302600"
  },
  {
    "text": "lastly uh one interesting point and this is kind of interesting to me with WM in",
    "start": "1302600",
    "end": "1309440"
  },
  {
    "text": "particular is there's a vast amount of unutilized compute in the world right",
    "start": "1309440",
    "end": "1315440"
  },
  {
    "text": "idle compute in fact just in this room there's a huge amount of idle compute",
    "start": "1315440",
    "end": "1320559"
  },
  {
    "text": "that's just sitting here right and in most of your phones and computers guess what kind of runtime you have on those",
    "start": "1320559",
    "end": "1327080"
  },
  {
    "text": "devices right um that's an interesting thing obviously if we want to harness",
    "start": "1327080",
    "end": "1332320"
  },
  {
    "text": "that compute people have tried this type of stuff in the past and failed um but there's a lot of interesting ways that",
    "start": "1332320",
    "end": "1338000"
  },
  {
    "text": "we could talk about verifying execution moving running workloads um all sorts of cool stuff in a really really",
    "start": "1338000",
    "end": "1343919"
  },
  {
    "text": "interesting future so that's it thank you",
    "start": "1343919",
    "end": "1349490"
  },
  {
    "text": "[Applause]",
    "start": "1349490",
    "end": "1359039"
  },
  {
    "text": "i think I have a couple minutes for questions if anyone's interested",
    "start": "1359039",
    "end": "1365720"
  },
  {
    "text": "don't all jump at once",
    "start": "1369520",
    "end": "1373400"
  },
  {
    "text": "okay cool great oh oh it's all right yeah go ahead oh hey hey how are you",
    "start": "1376960",
    "end": "1383200"
  },
  {
    "text": "yeah how do you build a C program to web assembly which tool chain are you using",
    "start": "1383200",
    "end": "1388960"
  },
  {
    "text": "yeah good really really good question so uh using clang right and what we do is",
    "start": "1388960",
    "end": "1394880"
  },
  {
    "text": "instead of instead of just using standard clang we do all",
    "start": "1394880",
    "end": "1401600"
  },
  {
    "text": "the linking ourselves against this uh modified lib that we have in Marott",
    "start": "1401600",
    "end": "1407600"
  },
  {
    "text": "right so when you uh when you",
    "start": "1407600",
    "end": "1413000"
  },
  {
    "text": "run this instead of just relying on what's on on the host like you would in a",
    "start": "1413000",
    "end": "1418400"
  },
  {
    "text": "native platform um we are basically providing uh the SEIO headers and source",
    "start": "1418400",
    "end": "1426280"
  },
  {
    "text": "code via Marquott yeah other",
    "start": "1426280",
    "end": "1432760"
  },
  {
    "text": "questions oscar is it me first hey over here oh sorry uh",
    "start": "1432760",
    "end": "1440080"
  },
  {
    "text": "on that um so like how for example you know if you're using mcript and I don't",
    "start": "1440080",
    "end": "1446480"
  },
  {
    "text": "know for sure i think in script and if you do print f uh it goes to your you know console log um whereas in yours it",
    "start": "1446480",
    "end": "1453600"
  },
  {
    "text": "goes to the canvas do you like what's the um sort of design impetus be behind",
    "start": "1453600",
    "end": "1460559"
  },
  {
    "text": "like do you think playing is always going to be the appropriate solution i guess that's a great question i mean so",
    "start": "1460559",
    "end": "1466400"
  },
  {
    "text": "each of these things I I didn't talk about any of these terminal devices but we'd like to keep the design as similar",
    "start": "1466400",
    "end": "1471440"
  },
  {
    "text": "as possible so we basically have like miniature emulated terminal devices that attach to each uh process uh in Marquott",
    "start": "1471440",
    "end": "1478960"
  },
  {
    "text": "that then are plugged into each host right and these are the host plugins right so it's kind of like when you um",
    "start": "1478960",
    "end": "1485200"
  },
  {
    "text": "the analogy at a high level is if you attach something like you attach to a docker session what you're actually",
    "start": "1485200",
    "end": "1490720"
  },
  {
    "text": "doing there is like set like creating a virtualized uh um you know TTY",
    "start": "1490720",
    "end": "1495919"
  },
  {
    "text": "environment and then attaching to that process and reading things in bytes at a time that's basically how we do it here too okay",
    "start": "1495919",
    "end": "1503760"
  },
  {
    "text": "so it seems like excuse me so it seems like uh you're doing all native WM",
    "start": "1504080",
    "end": "1510080"
  },
  {
    "text": "you're not doing any kind of emulation at all uh native WMO what do you mean like I",
    "start": "1510080",
    "end": "1516240"
  },
  {
    "text": "mean uh so like the C program you said uh you compiled it with clang did it what did it compile to like x86 or Oh no",
    "start": "1516240",
    "end": "1522320"
  },
  {
    "text": "no no no that that compiles to wom 32 yeah so it compiles to wom 32 but to get",
    "start": "1522320",
    "end": "1527919"
  },
  {
    "text": "the standard library stuff we're providing the standard library got it and so are there any plans to do any",
    "start": "1527919",
    "end": "1533520"
  },
  {
    "text": "kind of emulation for uh if I have a Docker file that I just copy in a random",
    "start": "1533520",
    "end": "1539279"
  },
  {
    "text": "binary yeah that's a great question uh that is something that is probably well",
    "start": "1539279",
    "end": "1545520"
  },
  {
    "text": "beyond the scope of this project right so if if you were to copy in like an x86 binary and then try to like run this",
    "start": "1545520",
    "end": "1551840"
  },
  {
    "text": "there are some interesting projects out there like those guys I think in Japan who are doing this where they they take",
    "start": "1551840",
    "end": "1557360"
  },
  {
    "text": "the uh I think it's like um ARM binaries and translate them on the fly um that",
    "start": "1557360",
    "end": "1563360"
  },
  {
    "text": "would be something to look at but uh but it's it's it's not something that we've handled here basically one of the sk one",
    "start": "1563360",
    "end": "1569679"
  },
  {
    "text": "of the steps that I skipped is uh there's a sort of like before the box build step that binary there's a box",
    "start": "1569679",
    "end": "1575919"
  },
  {
    "text": "compile step and that's that's the one extra step that's not sort of in this the similar API to the docker CLI right",
    "start": "1575919",
    "end": "1583520"
  },
  {
    "text": "so you box compile that binary which of course we you know under the hood this is a web assembly function that we're",
    "start": "1583520",
    "end": "1589440"
  },
  {
    "text": "just executing but it's the same DevX so you don't have to think about the difference that is the one difference though yeah very cool thanks",
    "start": "1589440",
    "end": "1599320"
  },
  {
    "text": "um how is it security-wise because um you you have the code and you built the",
    "start": "1609919",
    "end": "1616080"
  },
  {
    "text": "box the container mh um then you still have control over where you go from inside the container outside uh so so",
    "start": "1616080",
    "end": "1623520"
  },
  {
    "text": "how is that isolation level yeah so the so the best way to think about this is that like we can we are taking functionality",
    "start": "1623520",
    "end": "1631440"
  },
  {
    "text": "that was once sort of separated between user space and kernel space and we're bringing it all into user space but that",
    "start": "1631440",
    "end": "1637279"
  },
  {
    "text": "user space is within the guest wom right so uh there are many things that I",
    "start": "1637279",
    "end": "1643120"
  },
  {
    "text": "didn't discuss on purpose things like uh pix spawn fork exec execv these things",
    "start": "1643120",
    "end": "1649200"
  },
  {
    "text": "um because the way that that's handled is through instead of spawning new",
    "start": "1649200",
    "end": "1655200"
  },
  {
    "text": "processes that are new new Waza modules you can spawn what the user thinks are",
    "start": "1655200",
    "end": "1660320"
  },
  {
    "text": "processes but within the same module so basically this the security guarantee is that all you can see here is all you",
    "start": "1660320",
    "end": "1666720"
  },
  {
    "text": "have access to and because every process has its own file system that's all it can see right uh and because we didn't",
    "start": "1666720",
    "end": "1674159"
  },
  {
    "text": "talk about how the networking stack works but because the networking stack is also virtualized and also brought into the same space uh the the only sort",
    "start": "1674159",
    "end": "1681840"
  },
  {
    "text": "of attack vector with things moving in and out are with things that are um that that cross to the host right so um it",
    "start": "1681840",
    "end": "1691279"
  },
  {
    "text": "gives you the illusion that you're in a pix environment but it's actually much more restricted to the specific process",
    "start": "1691279",
    "end": "1697200"
  },
  {
    "text": "that you're running there's about a million details in there though that uh we could we",
    "start": "1697200",
    "end": "1703679"
  },
  {
    "text": "could talk about yeah",
    "start": "1703679",
    "end": "1707880"
  },
  {
    "text": "daniel yeah hey yes that's a a pretty cool presentation um I have one question",
    "start": "1710399",
    "end": "1716080"
  },
  {
    "text": "what is the most um you say it's about 60% um implemented cyish what's the most",
    "start": "1716080",
    "end": "1721919"
  },
  {
    "text": "complex thing that you have managed to compile and how does it compare in terms of you know uh size and performance to",
    "start": "1721919",
    "end": "1729440"
  },
  {
    "text": "to say mcrym for example that's a great question i'll take those in reverse order so uh comparing to Mcripton I have",
    "start": "1729440",
    "end": "1736640"
  },
  {
    "text": "no idea because I I haven't run the benchmarks um but I can tell you because this is like a virtualized first approach instead of so like right now",
    "start": "1736640",
    "end": "1743919"
  },
  {
    "text": "they it's interesting too because mcriptton is moving towards a virtualized file system approach right",
    "start": "1743919",
    "end": "1748960"
  },
  {
    "text": "but they were using a JavaScript based one and that was like the calls across the boundary for any sort of",
    "start": "1748960",
    "end": "1754880"
  },
  {
    "text": "significantly high IO there would be a cost right um so the interesting thing",
    "start": "1754880",
    "end": "1760320"
  },
  {
    "text": "about performance on a general uh in a general sense that I can say is that um",
    "start": "1760320",
    "end": "1766480"
  },
  {
    "text": "the interesting thing by sort of doing this process of bringing all of the system functionality into the WOM space",
    "start": "1766480",
    "end": "1773039"
  },
  {
    "text": "is that the most performance are literally just imports and exports right and most things are not implemented by",
    "start": "1773039",
    "end": "1779039"
  },
  {
    "text": "the host okay so the interesting thing there is that with high IOPS and stuff like this you the cost of system calls",
    "start": "1779039",
    "end": "1786320"
  },
  {
    "text": "drops to nothing right so like uh context switching doesn't exist in this",
    "start": "1786320",
    "end": "1792559"
  },
  {
    "text": "in this uh in this format right however there are other concerns right so like",
    "start": "1792559",
    "end": "1798799"
  },
  {
    "text": "the difference in when you do need to to to do things that are below the networking stack so what we actually do",
    "start": "1798799",
    "end": "1804000"
  },
  {
    "text": "with the the networking stack um is uh we go all the way down to where the nick",
    "start": "1804000",
    "end": "1810320"
  },
  {
    "text": "is and then we virtualize the stack to there then we pass things across the host there so you can use things without",
    "start": "1810320",
    "end": "1816159"
  },
  {
    "text": "an operating system if there's a nick which is kind of a cool networking uh thing to discuss um so yeah it's a",
    "start": "1816159",
    "end": "1824240"
  },
  {
    "text": "trade-off it's a trade-off it would really depend on your workload um the other question too the the",
    "start": "1824240",
    "end": "1831679"
  },
  {
    "text": "hardest thing to compile I would say is with there is a lot of",
    "start": "1831679",
    "end": "1838679"
  },
  {
    "text": "history baked into libc a lot right and",
    "start": "1838679",
    "end": "1843760"
  },
  {
    "text": "and uh there are things in there that before I worked on this project I didn't even like the fact that there's",
    "start": "1843760",
    "end": "1850480"
  },
  {
    "text": "localization functions in libc is fascinating to me right um the the math",
    "start": "1850480",
    "end": "1856720"
  },
  {
    "text": "functional ity is extensive right and some of it is like things that are specific to different architectures",
    "start": "1856720",
    "end": "1863200"
  },
  {
    "text": "right and then uh making things like just out of the box the very first challenge was like making the type",
    "start": "1863200",
    "end": "1869679"
  },
  {
    "text": "definitions work for everything right so we had to redefine what type definitions",
    "start": "1869679",
    "end": "1875200"
  },
  {
    "text": "were and that was that was probably the hardest part because it was like okay well I mean do we want to stick with",
    "start": "1875200",
    "end": "1881840"
  },
  {
    "text": "like 32-bit or what do we have here this is like in if you look at how lib C's are implemented they have like these top",
    "start": "1881840",
    "end": "1888159"
  },
  {
    "text": "level header files they have source definitions but then they have definitions for every single architecture that they support right and",
    "start": "1888159",
    "end": "1895120"
  },
  {
    "text": "those implement really crazy things in different ways right and so yeah I would",
    "start": "1895120",
    "end": "1900760"
  },
  {
    "text": "say I would say the hardest part was actually um wrapping the file system lib",
    "start": "1900760",
    "end": "1907760"
  },
  {
    "text": "calls with this Rustbased virtual file system that we built um that took a long",
    "start": "1907760",
    "end": "1912960"
  },
  {
    "text": "time to sort of get right and there's still file systems are incredibly hard and I don't claim to be an expert right",
    "start": "1912960",
    "end": "1918880"
  },
  {
    "text": "and so uh there's a lot there and there's probably more bugs that I'm not even aware of",
    "start": "1918880",
    "end": "1925640"
  },
  {
    "text": "so anybody else cool thanks again appreciate it",
    "start": "1925640",
    "end": "1933399"
  }
]