[
  {
    "text": "[Music]",
    "start": "310",
    "end": "13840"
  },
  {
    "text": "hi welcome uh I'm Sean Ism i'm the CEO and founder of Render Lit and I'm Meny",
    "start": "13840",
    "end": "20080"
  },
  {
    "text": "uh software engineer at Render Lit and today we're going to be talking about uh how you can make games in any 3D",
    "start": "20080",
    "end": "25920"
  },
  {
    "text": "application more powerful in web assembly using plugins let's get",
    "start": "25920",
    "end": "32520"
  },
  {
    "text": "started okay so I want to take us through an example of how 3D content is built today in many games uh this is",
    "start": "32520",
    "end": "39040"
  },
  {
    "text": "kind of an interaction that you see here between a uh designer on the left and a developer on the right so let's say",
    "start": "39040",
    "end": "44800"
  },
  {
    "text": "you've got a brief that says you need an animated disco ball uh okay okay so you might want to hook into a game engine uh",
    "start": "44800",
    "end": "51039"
  },
  {
    "text": "be able to use geometry functions that are exported by the engine integrate that uh with the content creation app",
    "start": "51039",
    "end": "56879"
  },
  {
    "text": "and you have portion of a disco ball that's great but that's static content and so now we need data in order to",
    "start": "56879",
    "end": "63440"
  },
  {
    "text": "animate that well where do we get that data let's say you want to make a disco ball rotate with the music that you're",
    "start": "63440",
    "end": "68799"
  },
  {
    "text": "playing well you might need to plum through animation parameters through the engine time or events or something of",
    "start": "68799",
    "end": "75439"
  },
  {
    "text": "the like and so you can see this is becoming increasingly complicated over time but now does it look right no it",
    "start": "75439",
    "end": "82960"
  },
  {
    "text": "looks weird in the game it looks different in my content creation tool than it does in my actual uh 3D scene",
    "start": "82960",
    "end": "89040"
  },
  {
    "text": "and you see this look of consternation on the face of of the programmer and now at this point the artist here I don't",
    "start": "89040",
    "end": "94079"
  },
  {
    "text": "know try this I guess um this is just kind of a illustration of how painful it is and how expensive it is to build",
    "start": "94079",
    "end": "100400"
  },
  {
    "text": "these kinds of applications today and uh here you'll see this is a screenshot",
    "start": "100400",
    "end": "105759"
  },
  {
    "text": "from an excellent talk called The Next Leap How AI Will Change the 3D Industry by Andrew Price um this is a scene from",
    "start": "105759",
    "end": "112720"
  },
  {
    "text": "a Tom Clancy video game and based off of kind of an average hourly rate for a 3D",
    "start": "112720",
    "end": "118000"
  },
  {
    "text": "artist of about $40 an hour you can see how truly expensive the final cost to deliver these kinds of assets into this",
    "start": "118000",
    "end": "124640"
  },
  {
    "text": "game are right here um and a lot of that comes stems from the ability to produce",
    "start": "124640",
    "end": "129840"
  },
  {
    "text": "content that works in this game but that can't necessarily be reused like let's take a look at that truck over there for",
    "start": "129840",
    "end": "135840"
  },
  {
    "text": "example $5,600 there's shattered glass on the screen of that which is really cool but",
    "start": "135840",
    "end": "141520"
  },
  {
    "text": "how did that glass shatter like maybe a piece of trash fell out of the trash can you've got a spline that's animating",
    "start": "141520",
    "end": "146959"
  },
  {
    "text": "that and that has some sort of interaction with that glass and that's all very specific to the scene but what",
    "start": "146959",
    "end": "152560"
  },
  {
    "text": "if you want a general framework for breaking any glass on any window",
    "start": "152560",
    "end": "157720"
  },
  {
    "text": "anywhere and that's because this is hard to do content is expensive to build um",
    "start": "157720",
    "end": "165200"
  },
  {
    "text": "you can see we're just basically throwing money out the window every time we're trying to rebuild this kind of",
    "start": "165200",
    "end": "170400"
  },
  {
    "text": "thing for different games but the scope the the quality bar of content the",
    "start": "170400",
    "end": "175599"
  },
  {
    "text": "quantity as consoles get more powerful as GPUs get more powerful um as we have",
    "start": "175599",
    "end": "180720"
  },
  {
    "text": "these more immersive experiences all over the place this just gets expensive to build over time um and these assets",
    "start": "180720",
    "end": "187280"
  },
  {
    "text": "are not reusable uh something I'll call out is uh anybody here heard of glTF",
    "start": "187280",
    "end": "192560"
  },
  {
    "text": "anybody's done 3D work so glTF is very powerful um but it's mostly for static data right so it's very good at defining",
    "start": "192560",
    "end": "198800"
  },
  {
    "text": "vertex formats ways to get data onto the GPU but what about all of the effects",
    "start": "198800",
    "end": "204000"
  },
  {
    "text": "what about the data flow what about the parameters everything around that we think plugins can help so uh",
    "start": "204000",
    "end": "212799"
  },
  {
    "text": "rendering should become plug-in driven and we're going to give some great examples of that today uh in order to",
    "start": "212799",
    "end": "217840"
  },
  {
    "text": "kind of marry the code with the data to produce that kind of 3D scene that you saw there in a reusable way and lower",
    "start": "217840",
    "end": "225040"
  },
  {
    "text": "the cost to develop those assets uh let's define a plugin as this",
    "start": "225040",
    "end": "230640"
  },
  {
    "text": "third-party code called over a welldefined interface this is kind of a broad explanation of a plugin everybody",
    "start": "230640",
    "end": "238000"
  },
  {
    "text": "might have their own preconceived notion of what a plugin is coming into this talk uh but let's go through some",
    "start": "238000",
    "end": "243519"
  },
  {
    "text": "examples of some plugins real quick so quick show of hands who here has used Win Amp yeah all right dating myself a",
    "start": "243519",
    "end": "252000"
  },
  {
    "text": "bit but that's a great example of plugin right you remember those little visualizers in there you could have a frequency coming out for the music you",
    "start": "252000",
    "end": "258479"
  },
  {
    "text": "can write little animations make some fire maybe put it into this desktop but put it into a frame of a known shape and",
    "start": "258479",
    "end": "265600"
  },
  {
    "text": "size inside this host app let's go a little bit more broad photoshop any",
    "start": "265600",
    "end": "270960"
  },
  {
    "text": "Photoshop users here probably a few yep um Photoshop's great because even if you",
    "start": "270960",
    "end": "276160"
  },
  {
    "text": "haven't gone and installed Photoshop plugins Photoshop is a plug-in based architecture much of the core app",
    "start": "276160",
    "end": "281520"
  },
  {
    "text": "actually ships as plugins as well so everybody here who has used Photoshop has used extensive plugins before uh",
    "start": "281520",
    "end": "288960"
  },
  {
    "text": "this is an interesting one but what about Kubernetes CRDs yeah probably some Kubernetes",
    "start": "288960",
    "end": "294960"
  },
  {
    "text": "people in the crowd um might not be what you think of when you think of plugin but this is a way to take thirdparty",
    "start": "294960",
    "end": "300160"
  },
  {
    "text": "code and third party functions integrate them over a well- definfined interface a datadriven interface in with an",
    "start": "300160",
    "end": "305520"
  },
  {
    "text": "orchestrator uh in in a way that things can orchestrate across different data types largely meets our definition of",
    "start": "305520",
    "end": "311680"
  },
  {
    "text": "plug-in browser APIs even broader but yeah uh",
    "start": "311680",
    "end": "317360"
  },
  {
    "text": "browser APIs same thing you're using well- definfined interfaces to put content into a host application which in",
    "start": "317360",
    "end": "323520"
  },
  {
    "text": "this case is a multi-tenant system for putting data onto a screen",
    "start": "323520",
    "end": "329960"
  },
  {
    "text": "clippy anybody remember clippy clippy is the perfect plugin you're taking data out of an app like Microsoft Word right",
    "start": "329960",
    "end": "337120"
  },
  {
    "text": "you're running some analysis on that you're putting back suggestions and you're putting pixels onto a screen to",
    "start": "337120",
    "end": "342400"
  },
  {
    "text": "give a graphical depiction of of those uh your suggestions so this is all to say that this is a very um flexible",
    "start": "342400",
    "end": "350320"
  },
  {
    "text": "definition of plugins but why don't we see these in games and why don't we see these in 3D apps today and I will posit",
    "start": "350320",
    "end": "355759"
  },
  {
    "text": "this uh anything that does 3D in games in particular they need a GPU and so lots of stuff happens on the GPU data is",
    "start": "355759",
    "end": "363039"
  },
  {
    "text": "generated on the GPU data is resident on the GPU um and you're not you don't want to like necessarily pull that off to the",
    "start": "363039",
    "end": "368800"
  },
  {
    "text": "CPU side in order to perform calculations on it for a plugin so we need GPUaware plugins in the",
    "start": "368800",
    "end": "375479"
  },
  {
    "text": "future um so how do how do we solve this uh well we have web GPU which runs on",
    "start": "375479",
    "end": "381759"
  },
  {
    "text": "web browser so this kind of gives you a multi-tenant GPU security model uh this is a secure way in multiple tabs to",
    "start": "381759",
    "end": "387600"
  },
  {
    "text": "isolate multiple origins and uh be able to generate 3D content and interact with",
    "start": "387600",
    "end": "392880"
  },
  {
    "text": "the GPU maybe even run inference in a safe way where you can't like read data from other tabs on your system likewise",
    "start": "392880",
    "end": "399680"
  },
  {
    "text": "we have web assembly that is running in a web browser uh and this is a true native sandbox it's not flash it's not",
    "start": "399680",
    "end": "404800"
  },
  {
    "text": "you know shelling out to system APIs um but we have this kind of uh model of web",
    "start": "404800",
    "end": "410240"
  },
  {
    "text": "GPU for uh GPU compute and WASM for CPU compute and in a browser this integration works pretty well um you've",
    "start": "410240",
    "end": "416800"
  },
  {
    "text": "got things like mcript in for C++ wasn't binden on the rest side there's more as well these can communicate with these",
    "start": "416800",
    "end": "423440"
  },
  {
    "text": "browser APIs over a JavaScript bridge uh but outside of a browser there's not",
    "start": "423440",
    "end": "430000"
  },
  {
    "text": "really any way to do this in core WASM you've got F-32s F64s i32s I64s and that",
    "start": "430000",
    "end": "435759"
  },
  {
    "text": "and that's it so obviously you've probably most people in here have heard about the wing component model and all",
    "start": "435759",
    "end": "440960"
  },
  {
    "text": "the great things that have come along with that and the wii space and we think that this can solve this problem for",
    "start": "440960",
    "end": "446560"
  },
  {
    "text": "GPUs and so we would like to introduce WY",
    "start": "446560",
    "end": "451639"
  },
  {
    "text": "GFX so Wazi GFX is a translation of the web GPU spec into uh wit which is the",
    "start": "451639",
    "end": "460560"
  },
  {
    "text": "language uh used to define components in the component model and we need to extend that a",
    "start": "460560",
    "end": "467599"
  },
  {
    "text": "little bit because webg by itself can't really uh draw to the screen uh it relies on HTML canvas for that that's",
    "start": "467599",
    "end": "474560"
  },
  {
    "text": "where wii surfaces come in and that is completely window and graphics API agnostic so it can run on in an as a",
    "start": "474560",
    "end": "482960"
  },
  {
    "text": "standalone window or as part of a larger app or as we're going to show later as part of a game and it can run on a",
    "start": "482960",
    "end": "489280"
  },
  {
    "text": "variety of uh uh graphics APIs like the X12 Vulcan",
    "start": "489280",
    "end": "494919"
  },
  {
    "text": "etc and we have a reference host implementation of this we call it WY GFX runtime um so if you're using uh Wom",
    "start": "494919",
    "end": "502160"
  },
  {
    "text": "time you can make you can just add Wii GFX runtime and that should give you all of Wazi GFX today",
    "start": "502160",
    "end": "510440"
  },
  {
    "text": "so let me show you a demo of this actually",
    "start": "511000",
    "end": "515839"
  },
  {
    "text": "working so bevy",
    "start": "517640",
    "end": "522120"
  },
  {
    "text": "is there one yep that one sorry so Bevy is a game engine uh written in Rust and",
    "start": "523599",
    "end": "530399"
  },
  {
    "text": "it uses WGPU in the back end to actually draw the graphics and WGPU",
    "start": "530399",
    "end": "536480"
  },
  {
    "text": "uh internally uses actually webgu so that means we can compile that to wom into a component and we can run a bevy",
    "start": "536480",
    "end": "543920"
  },
  {
    "text": "game inside uh wom time if it's going to",
    "start": "543920",
    "end": "550600"
  },
  {
    "text": "open you think oh no oh sorry it rebuilt i don't know why we built but what",
    "start": "550600",
    "end": "557440"
  },
  {
    "text": "you're going to see here is really cool because we are going to be running an entire desktopbased game that is",
    "start": "557440",
    "end": "563440"
  },
  {
    "text": "compiled to WSOM and running WOM on the desktop",
    "start": "563440",
    "end": "568959"
  },
  {
    "text": "yep so here you can see we can interact with a keyboard so this is like a full",
    "start": "569959",
    "end": "575279"
  },
  {
    "text": "bevy game what did I just do no don't want",
    "start": "575279",
    "end": "584519"
  },
  {
    "text": "full bevy game",
    "start": "586959",
    "end": "590240"
  },
  {
    "text": "yeah I got to learn how to use computers so",
    "start": "595880",
    "end": "601920"
  },
  {
    "text": "uh how does web GPU work on the web so on the web the way it displays anything",
    "start": "601920",
    "end": "607519"
  },
  {
    "text": "to the screen so it's windowing system is the HTML canvas element and the HTML canvas element can be connected to a",
    "start": "607519",
    "end": "614320"
  },
  {
    "text": "number of graphics APIs like WebGL or WebGPU but there's only the canvas on",
    "start": "614320",
    "end": "619519"
  },
  {
    "text": "the windowing side in WY you want to be a little more robust so we have WY surface but in the future it will",
    "start": "619519",
    "end": "626560"
  },
  {
    "text": "probably be more powerful maybe desktop specific uh uh windowing systems or",
    "start": "626560",
    "end": "631760"
  },
  {
    "text": "maybe a a specific app wants a more custom uh windowing API and it wants to",
    "start": "631760",
    "end": "638079"
  },
  {
    "text": "make sure that it can work with any graphics API like we're starting here with web GPU uh we also have a frame",
    "start": "638079",
    "end": "645360"
  },
  {
    "text": "buffer which is a CPU based for uh ju just a frame buffer so you can use you",
    "start": "645360",
    "end": "651040"
  },
  {
    "text": "can do CPU based rendering and in the future there will probably be better newer graphics API so how do we make",
    "start": "651040",
    "end": "657360"
  },
  {
    "text": "sure that any graphics API can work with any windowing system that's where wazi graphics context comes in and all wi",
    "start": "657360",
    "end": "665040"
  },
  {
    "text": "graphics context does it takes is it takes the graphics API on one side the windowing system on the other side and",
    "start": "665040",
    "end": "670480"
  },
  {
    "text": "the host is in charge of making sure that the these two work nicely together",
    "start": "670480",
    "end": "676000"
  },
  {
    "text": "all right so what you saw there with the bevy game or what we attempted to show was basically an entire application um",
    "start": "676000",
    "end": "682000"
  },
  {
    "text": "if you think about that there was uh still a host app that was loading the WASM file but it was basically responsible just for putting Chrome",
    "start": "682000",
    "end": "688320"
  },
  {
    "text": "around the window and so for most plugins you're going to be want want to be interropping with an existing",
    "start": "688320",
    "end": "694480"
  },
  {
    "text": "graphics app an existing rendering app and so the way to do that uh if you're just putting 2D data onto the canvas is",
    "start": "694480",
    "end": "700560"
  },
  {
    "text": "to hook the back buffer which is relatively straightforward so if you think about like UI for example you can",
    "start": "700560",
    "end": "706160"
  },
  {
    "text": "think about little applets or little pieces of Chrome different um elements that composite onto a screen uh you can",
    "start": "706160",
    "end": "712560"
  },
  {
    "text": "just render those as sub regions to the back buffer texture uh we would recommend that you draw that using what",
    "start": "712560",
    "end": "718480"
  },
  {
    "text": "we call a full screen quadpass you actually composite that on the GPU um if you're just copying textures bit by bit",
    "start": "718480",
    "end": "724800"
  },
  {
    "text": "obviously you're going to destroy your transparency you won't be able to do things like drop shadows or composite different layers of the UI uh for 3D",
    "start": "724800",
    "end": "732320"
  },
  {
    "text": "things get a little bit more difficult uh if you think about like I've got an entirely separate app that's running in",
    "start": "732320",
    "end": "738079"
  },
  {
    "text": "WAM here that's rendering 3D data into an existing application's canvas um you",
    "start": "738079",
    "end": "743279"
  },
  {
    "text": "need to know a lot of information for the host app like if you're doing a deferred rendering context for example you might have 12 different render",
    "start": "743279",
    "end": "749440"
  },
  {
    "text": "targets and they've all got different uh parameters and different types of data and different channels they're writing out to so the guest kind of has to be",
    "start": "749440",
    "end": "755360"
  },
  {
    "text": "made aware of that and it loses some of that abstraction from the host and so an approach we found that uh that works",
    "start": "755360",
    "end": "760720"
  },
  {
    "text": "pretty well is uh rendering your own data in 3D passing basic camera information over basic matrices over um",
    "start": "760720",
    "end": "767279"
  },
  {
    "text": "to the WASM guest rendering into your own texture with alpha and then just compositing that as a 2D texture onto",
    "start": "767279",
    "end": "773200"
  },
  {
    "text": "the window and so that you can kind of control the you know what aspects of you write to you can still do things like",
    "start": "773200",
    "end": "779120"
  },
  {
    "text": "screen space effects with different channels but you can remain agnostic of the actual rendering environment for the host app itself um another thing we'll",
    "start": "779120",
    "end": "786480"
  },
  {
    "text": "show that uh works pretty well for certain use cases is actually letting the host app draw the data using its own",
    "start": "786480",
    "end": "792480"
  },
  {
    "text": "shaders um if the data is of a known shape known format uh we can just putt it onto the GPU from the guest and we",
    "start": "792480",
    "end": "799200"
  },
  {
    "text": "can have the host app you know uh give it the same look and feel as all the content that's already rendered by the ho by the host",
    "start": "799200",
    "end": "807120"
  },
  {
    "text": "game see an example of this here may the demo gods be on our",
    "start": "807480",
    "end": "814920"
  },
  {
    "text": "side all right so here you see a map viewer this is like uh something largely",
    "start": "814920",
    "end": "820399"
  },
  {
    "text": "analogous to Google Maps and you can see you've got kind of uh uh geospatial data",
    "start": "820399",
    "end": "826000"
  },
  {
    "text": "you've got elevation data you've got um textures that are like uh buildings",
    "start": "826000",
    "end": "831200"
  },
  {
    "text": "projected onto this what if we want to put 3D data into the scene so we're going to load a",
    "start": "831200",
    "end": "836760"
  },
  {
    "text": "plugin real quick that has just injected all of these little 3D buildings in the right spot uh onto this scene and so",
    "start": "836760",
    "end": "845600"
  },
  {
    "text": "this is uh this is all just a plug-in based it's able to communicate with the host but it's shading it with the host's",
    "start": "845600",
    "end": "851040"
  },
  {
    "text": "parameters just like we saw uh before so like all the lighting effects like they look right and you can see this this is",
    "start": "851040",
    "end": "857120"
  },
  {
    "text": "not just static data this is 27 million triangles we're putting onto here and even like we can interact with things like the angle of the sun to adjust the",
    "start": "857120",
    "end": "864000"
  },
  {
    "text": "lighting on the buildings we can do we can do really dynamic calculations at runtime on the GPU that depend on data",
    "start": "864000",
    "end": "870480"
  },
  {
    "text": "from the host in this WASM guest pause that so I don't destroy my",
    "start": "870480",
    "end": "877880"
  },
  {
    "text": "GPU with PowerPoint of all things okay so",
    "start": "877880",
    "end": "884680"
  },
  {
    "text": "um how do we do that how do we actually use WY GFX in a game uh I'll say that",
    "start": "884680",
    "end": "890639"
  },
  {
    "text": "Wazi GFX itself you know it's a part of Wazi open source we have an open source runtime implementation we showed before",
    "start": "890639",
    "end": "896399"
  },
  {
    "text": "uh but it's much like a box of Lego parts um they're useful to build a model out of yourself but to build a plug-in",
    "start": "896399",
    "end": "902240"
  },
  {
    "text": "runtime uh which we at render are currently building you need to be able to build logic for sharing host and guest resources you need to be able to",
    "start": "902240",
    "end": "908880"
  },
  {
    "text": "perform copies manage state uh be able to integrate with with games data models 3D apps etc um there are some challenges",
    "start": "908880",
    "end": "917279"
  },
  {
    "text": "to make this work that we'd love to talk through how we solve them and we're in the still in the process of solving uh for example most games are written in",
    "start": "917279",
    "end": "924079"
  },
  {
    "text": "C++ most of them are Windows apps uh a lot of the WASM ecosystem is a little bit more rustcentric um being able to",
    "start": "924079",
    "end": "930160"
  },
  {
    "text": "map against different GPU APIs even be able being able to get you that real-time 60fps performance uh if you",
    "start": "930160",
    "end": "936880"
  },
  {
    "text": "can't do that you can't really work in a game so how do we overcome some of these challenges uh and this is a perfect",
    "start": "936880",
    "end": "943360"
  },
  {
    "text": "analogy for this we've got two different puzzle pieces we've got the game world we've got the WASM world how do we plug",
    "start": "943360",
    "end": "949120"
  },
  {
    "text": "these pieces in together so one hurdle is integrating",
    "start": "949120",
    "end": "954240"
  },
  {
    "text": "C++ and Rust so obviously the plugins can be written in any language that",
    "start": "954240",
    "end": "959519"
  },
  {
    "text": "compiles the Wom and uses the component model you can just make use of Wazi GFX and write a plugin in it but for the",
    "start": "959519",
    "end": "967839"
  },
  {
    "text": "host side um a lot of the wi gfx infrastructure and the wom infrastructure in general is written in",
    "start": "967839",
    "end": "974959"
  },
  {
    "text": "rust so for example wgpu uh that's rust wism time is rusty gfx runtime that's",
    "start": "974959",
    "end": "981120"
  },
  {
    "text": "rust as well whereas the games they're all written in C++ so how do you deal with that so that's why we have to",
    "start": "981120",
    "end": "987120"
  },
  {
    "text": "maintain the separate build tree where we generate a DLL with all the rust artifax inside and we have to use a lot",
    "start": "987120",
    "end": "994480"
  },
  {
    "text": "of FFI with Cbinden and probably going to move to CXX or better safety and we end up with lots of like wrapper C's and",
    "start": "994480",
    "end": "1001680"
  },
  {
    "text": "void stars which is not great but we're working on reducing those but the result",
    "start": "1001680",
    "end": "1006800"
  },
  {
    "text": "is a clean C++ API wrapper uh around that low-level FFI function FFI",
    "start": "1006800",
    "end": "1014240"
  },
  {
    "text": "interface that We just ship a DL with a nice uh C++ interface and you could just",
    "start": "1014240",
    "end": "1019680"
  },
  {
    "text": "make use of that in the game and feel like it feels just like regular",
    "start": "1019680",
    "end": "1025439"
  },
  {
    "text": "C++ uh what about performance um I'll say sometimes there's questions about W",
    "start": "1026199",
    "end": "1032160"
  },
  {
    "text": "and performance uh we say was performance is pretty good um it's usually good enough for these kinds of use cases uh our benchmarks have shown",
    "start": "1032160",
    "end": "1038959"
  },
  {
    "text": "that for heavily MD optimized code like you'd often find for like matrix and geometry calculations in a game uh we're",
    "start": "1038959",
    "end": "1045600"
  },
  {
    "text": "at a P95 of about 80% of WAM compared to native runtime performance most",
    "start": "1045600",
    "end": "1050880"
  },
  {
    "text": "importantly WAM and really CPU performance for these kinds of modern rendering workloads shouldn't be the",
    "start": "1050880",
    "end": "1056000"
  },
  {
    "text": "bottleneck uh you need to be very careful with how you manage your resources so you can fully take",
    "start": "1056000",
    "end": "1061200"
  },
  {
    "text": "advantage of the GPU a mental model for this is using the CPU and using WASM code therefore to configure the pipeline",
    "start": "1061200",
    "end": "1068400"
  },
  {
    "text": "state that is necessary to get the GPU to actually build the rendering pipeline so this is doing using things like",
    "start": "1068400",
    "end": "1073520"
  },
  {
    "text": "GPUdriven rendering we have uh like draw indirect with account buffer for example has made its way into web GPU in a",
    "start": "1073520",
    "end": "1079600"
  },
  {
    "text": "preview in Chrome this is a way to let the GPU take over and fully control the rendering process reducing the burden on",
    "start": "1079600",
    "end": "1085600"
  },
  {
    "text": "the CPU even further um what I was describing before about CPU uh readbacks is very important as well like if we've",
    "start": "1085600",
    "end": "1091760"
  },
  {
    "text": "got data like let's say we've got a texture we've got a height map we want to do some calculations put a little mini map in a game super cool right the",
    "start": "1091760",
    "end": "1098400"
  },
  {
    "text": "wrong way to do that is to take that read it back to the CPU put it into a buffer map that buffer into WASOM and",
    "start": "1098400",
    "end": "1104320"
  },
  {
    "text": "have the uh guest code decide to to you know perform some CPU side calculations on it the better way to do that is to",
    "start": "1104320",
    "end": "1111919"
  },
  {
    "text": "have that mapped using everything Mindy described by WGPU into the W and gas as a GPUide texture write a texture against",
    "start": "1111919",
    "end": "1118480"
  },
  {
    "text": "it generate an indirect command buffer on the GPU and let a compute shader go to town uh being able to generate any",
    "start": "1118480",
    "end": "1124240"
  },
  {
    "text": "kind of logic on top of that last um for generating data inside WASOM and putting",
    "start": "1124240",
    "end": "1129760"
  },
  {
    "text": "it on the CPU we're working on ways to map memory into the WASM process so we",
    "start": "1129760",
    "end": "1134880"
  },
  {
    "text": "can avoid those temporary allocations so we're not like for generating an image we're not putting uh data and",
    "start": "1134880",
    "end": "1141120"
  },
  {
    "text": "allocations in the WASM address space ultimately to just have that end up copied into GPU memory we want to be",
    "start": "1141120",
    "end": "1146720"
  },
  {
    "text": "able to map that GPU accessible memory directly into WASM as well",
    "start": "1146720",
    "end": "1152760"
  },
  {
    "text": "so another hurdle is integrating DX12 which is how most games are uh is the",
    "start": "1154400",
    "end": "1160559"
  },
  {
    "text": "graphics API most games use uh with web GPU so our web GPU implementation and",
    "start": "1160559",
    "end": "1166720"
  },
  {
    "text": "GFX runtime is based on WGPU wgpu internally on Windows actually uses the X12 so what we need to do is get WGPU to",
    "start": "1166720",
    "end": "1175039"
  },
  {
    "text": "be able to convert from WGP res WGPU resources into the underlying get the",
    "start": "1175039",
    "end": "1180320"
  },
  {
    "text": "underlying DX12 resources and vice versa if we have a DX12 resource create a WGPU",
    "start": "1180320",
    "end": "1186400"
  },
  {
    "text": "resource for that that way we can pass it to the guest and WGPU actually",
    "start": "1186400",
    "end": "1192240"
  },
  {
    "text": "supports a lot of this on other backends already so on Vulcan and Metal it has support for most of this it's a little",
    "start": "1192240",
    "end": "1197919"
  },
  {
    "text": "bit lacking on DX2 so we're actively working on filling that gap and this",
    "start": "1197919",
    "end": "1203280"
  },
  {
    "text": "conversion is actually not needed not necessary for the vast majority of resources it's only the things that have",
    "start": "1203280",
    "end": "1208880"
  },
  {
    "text": "to be passed between the guest and the host for the most part the guest is going to use its own textures and owns buffers and the same goes to the host",
    "start": "1208880",
    "end": "1214880"
  },
  {
    "text": "it's not going to they're not going to mix and match too much but the ones that do have to go across the boundary we're",
    "start": "1214880",
    "end": "1220640"
  },
  {
    "text": "working on making sure that they can be converted easily okay so how do we plug these",
    "start": "1220640",
    "end": "1226640"
  },
  {
    "text": "puzzle pieces together uh you need a surrounding wrapper and this is what we are calling the render lit plug-in runtime uh but this is a way to uh host",
    "start": "1226640",
    "end": "1234799"
  },
  {
    "text": "WAM components using WASM time it's a way to do all that DX12 mapping on the GPU it's a way to automatically generate",
    "start": "1234799",
    "end": "1241200"
  },
  {
    "text": "some of that graphics data yourself so you can very easily slot this into a game which we're going to see an example",
    "start": "1241200",
    "end": "1247520"
  },
  {
    "text": "of right now so we have taken something called Adria which is an open- source uh game engine it's uh largely indicative",
    "start": "1247520",
    "end": "1255840"
  },
  {
    "text": "of what you would find in a modern game engine architecture tilebased deferred rendering uh uses mesh shaders uses",
    "start": "1255840",
    "end": "1261840"
  },
  {
    "text": "ultimate full bindless um it's going to you know it's a fully GPUdriven rendering pipeline whereas a lot of",
    "start": "1261840",
    "end": "1267679"
  },
  {
    "text": "graphics samples are just putting data you know in a little hello world app uh here this was very very hard to get all",
    "start": "1267679",
    "end": "1274240"
  },
  {
    "text": "of the data integrated to but uh it works yeah so as you can see the top",
    "start": "1274240",
    "end": "1280000"
  },
  {
    "text": "left that's done in a plugin in a guest and as I move the camera",
    "start": "1280000",
    "end": "1285720"
  },
  {
    "text": "around the guest is aware and is able to uh uh react to that and same uh the",
    "start": "1285720",
    "end": "1292799"
  },
  {
    "text": "opposite way if I want to if I move things around on the guest it can move the camera as well you can see the",
    "start": "1292799",
    "end": "1298000"
  },
  {
    "text": "background is black got to fix that but as you can see there's two-way communication with the guest can set the",
    "start": "1298000",
    "end": "1304880"
  },
  {
    "text": "camera position and be aware of uh if the camera moves so that way they uh you",
    "start": "1304880",
    "end": "1311120"
  },
  {
    "text": "have two-way uh data communication and it's a fully separate app effectively that's rendering into",
    "start": "1311120",
    "end": "1316960"
  },
  {
    "text": "that existing 3D app over that defined data model i got",
    "start": "1316960",
    "end": "1325280"
  },
  {
    "text": "it okay so what do those kinds of data models look like for plugins i'd like to give some heruristics on that uh how if",
    "start": "1325480",
    "end": "1333679"
  },
  {
    "text": "you're building your own game building your own kind of uh 3D app of any kind like what kind of data do you want to",
    "start": "1333679",
    "end": "1339280"
  },
  {
    "text": "share with a plugin there's no one-izefits-all approach but we'd recommend not exporting entire host app",
    "start": "1339280",
    "end": "1345039"
  },
  {
    "text": "APIs so like if you're in C++ land the example of this is headers don't just give plugins access to all of your",
    "start": "1345039",
    "end": "1350799"
  },
  {
    "text": "headers because you're probably injecting into weird places in your app that you've got state assumptions um that you don't want to break uh through",
    "start": "1350799",
    "end": "1357760"
  },
  {
    "text": "a multi-tenant kind of guest likewise don't do the opposite of that and build very fine grain very bespoke mappings",
    "start": "1357760",
    "end": "1364559"
  },
  {
    "text": "for single functions uh I encourage you to think broadly about the world of",
    "start": "1364559",
    "end": "1369600"
  },
  {
    "text": "things you can do with the plug-in and consider that when people are using your app like an SDK they can build functions",
    "start": "1369600",
    "end": "1375760"
  },
  {
    "text": "that you might not have even thought about yourself so what we would recommend is using automatic mapping",
    "start": "1375760",
    "end": "1380880"
  },
  {
    "text": "systems if you have like a documentation generator for example that's built against public APIs of your of specific",
    "start": "1380880",
    "end": "1386840"
  },
  {
    "text": "subsystems those are great candidates to put a lightweight layer on top of that can be exposed into plugins and you can",
    "start": "1386840",
    "end": "1393120"
  },
  {
    "text": "generate a lot of that binding code automatically uh likewise uh use the concurrency model of the host app get",
    "start": "1393120",
    "end": "1400400"
  },
  {
    "text": "yourself into trouble if you try to synchronize across different areas um if you try to introduce new concurrency",
    "start": "1400400",
    "end": "1405600"
  },
  {
    "text": "primitives within different plugins different guests um we re I'm not saying not to run plugins in parallel or",
    "start": "1405600",
    "end": "1411200"
  },
  {
    "text": "anything like that just make sure that the areas they slot into your app respect the existing apps uh concurrency",
    "start": "1411200",
    "end": "1417679"
  },
  {
    "text": "model as well um and then last uh let's talk about restrictions which is",
    "start": "1417679",
    "end": "1422880"
  },
  {
    "text": "interesting because we're talking about we're bringing the power of the web GPU API entire GPU API to guests to plugins",
    "start": "1422880",
    "end": "1429280"
  },
  {
    "text": "why would you want to restrict that uh well think about from a host perspective for restriction what you want it to be",
    "start": "1429280",
    "end": "1436080"
  },
  {
    "text": "able to do does this plugin need the full web GPU API for example would you",
    "start": "1436080",
    "end": "1441280"
  },
  {
    "text": "like to just install a plugin into a game or or into a web browser anywhere on your system that's just mining",
    "start": "1441280",
    "end": "1446559"
  },
  {
    "text": "Bitcoin with arbitrary compute shaders probably not and so uh maybe for certain",
    "start": "1446559",
    "end": "1451679"
  },
  {
    "text": "plug-in use cases you'd want to limit the ability to create new specific",
    "start": "1451679",
    "end": "1456960"
  },
  {
    "text": "shaders maybe you want to use a set of pre-baked shaders maybe you want to uh have the host app allocate textures for",
    "start": "1456960",
    "end": "1464320"
  },
  {
    "text": "you that then the guest can use it can't realloc it can't generate new render targets but it can render into existing",
    "start": "1464320",
    "end": "1470480"
  },
  {
    "text": "data um there's all sorts of different use cases that you might want to think about uh locking down or opening up",
    "start": "1470480",
    "end": "1477039"
  },
  {
    "text": "depending on the model of the host app and the security concerns and the runtime concerns as well uh for resource",
    "start": "1477039",
    "end": "1484120"
  },
  {
    "text": "restriction if you think think about capability restriction this is like a matrix of which of the APIs you can you",
    "start": "1484120",
    "end": "1489360"
  },
  {
    "text": "can call and you can't call resource restriction would be uh what kind what can I do with the data um for CPU time",
    "start": "1489360",
    "end": "1497039"
  },
  {
    "text": "and was time we have something called fuel it does a decent job of uh effectively metering the CPU runtime of",
    "start": "1497039",
    "end": "1503200"
  },
  {
    "text": "different functions uh on a GPU this is actually quite a bit more complicated uh because of how scheduling works within a",
    "start": "1503200",
    "end": "1509600"
  },
  {
    "text": "GPU um there's not really a way to bound a running shader for example but you can",
    "start": "1509600",
    "end": "1515440"
  },
  {
    "text": "bound like the size of indirect command buffers you can do runtime queries for the performance of various things and",
    "start": "1515440",
    "end": "1521279"
  },
  {
    "text": "you can limit dispatches if things are taking too long um I would be curious if anybody has experience with kind of like",
    "start": "1521279",
    "end": "1526799"
  },
  {
    "text": "limiting code on a GPU uh please come talk to us uh for memory specifically",
    "start": "1526799",
    "end": "1532400"
  },
  {
    "text": "VRAMm uh particularly in console environments you can be very constrained by these resources think about",
    "start": "1532400",
    "end": "1537440"
  },
  {
    "text": "introducing per heap or more granularly per heap more granularly or",
    "start": "1537440",
    "end": "1542960"
  },
  {
    "text": "for entire plugins uh limits on how many resources the size of the resources you can put on the GPU um this could be",
    "start": "1542960",
    "end": "1549919"
  },
  {
    "text": "object count this can also just be uh like raw heap size limitations sometimes even formats like sometimes you want to",
    "start": "1549919",
    "end": "1556000"
  },
  {
    "text": "make things easy for your users if you only support a certain type of render target like if you only support HDR rendering for example maybe just",
    "start": "1556000",
    "end": "1562640"
  },
  {
    "text": "restrict to that format make it easy uh but we think at render lit that",
    "start": "1562640",
    "end": "1568159"
  },
  {
    "text": "plugins are the future and we think that future is here we think they promote uh content flexibility reuse all of that",
    "start": "1568159",
    "end": "1573440"
  },
  {
    "text": "stuff we showed at the beginning that back and forth process now if we make our plugins data driven if we build like",
    "start": "1573440",
    "end": "1578480"
  },
  {
    "text": "a plugin for glass breaking and we connect it to data that um animates it",
    "start": "1578480",
    "end": "1584559"
  },
  {
    "text": "and and parameterizes it we've made our rendering safe we've made it portable we've made it fully data driven and",
    "start": "1584559",
    "end": "1590159"
  },
  {
    "text": "fully composable all right I think that's it uh thank you for your time uh if you're",
    "start": "1590159",
    "end": "1597279"
  },
  {
    "text": "interested in plugins we'd love to chat if you want to chat GPUs chat Web Assembly come talk to us um yeah and I",
    "start": "1597279",
    "end": "1604080"
  },
  {
    "text": "think we have time for questions uh if you have a question we have a few of these very cool render lit hats we'd",
    "start": "1604080",
    "end": "1610240"
  },
  {
    "text": "like to give out so step right up thank you",
    "start": "1610240",
    "end": "1617799"
  },
  {
    "text": "hey this is um extraordinarily cool well done um I feel like you can't talk about",
    "start": "1626400",
    "end": "1633600"
  },
  {
    "text": "um producing games without a conversation about consoles i'm curious about your experience if you've had any",
    "start": "1633600",
    "end": "1639840"
  },
  {
    "text": "with porting WGPU or WSM time to modern consoles",
    "start": "1639840",
    "end": "1646240"
  },
  {
    "text": "interesting question yes um without getting into specifics I'm happy to have more of this conversation offline things",
    "start": "1646240",
    "end": "1652720"
  },
  {
    "text": "port pretty easily to Xbox because it is basically just Windows um PS5 is a",
    "start": "1652720",
    "end": "1659600"
  },
  {
    "text": "different story uh we can have a conversation about that that's not recorded",
    "start": "1659600",
    "end": "1665039"
  },
  {
    "text": "yeah I have like 9 million more questions i'll probably hit you up outside perfect thanks",
    "start": "1665039",
    "end": "1672600"
  },
  {
    "text": "Hi uh thank you for the talk it it was really interesting i have actually two",
    "start": "1678399",
    "end": "1683679"
  },
  {
    "text": "questions uh principally about web GPU so um it's a long time that the",
    "start": "1683679",
    "end": "1691039"
  },
  {
    "text": "community is not agree on absolutely everything it's not stable yet so I'm wondering how you can base something in",
    "start": "1691039",
    "end": "1698480"
  },
  {
    "text": "on based on insert insertitude in something like this and the second one",
    "start": "1698480",
    "end": "1703919"
  },
  {
    "text": "is about distributed computing so unfortunately on your terminal also onyx",
    "start": "1703919",
    "end": "1709200"
  },
  {
    "text": "runtime or something like this so I expect you maybe played with comput shaders and stuff",
    "start": "1709200",
    "end": "1717520"
  },
  {
    "text": "yeah Mindy go i think there were two questions there right yes one is about the stability of web GPU uh yeah oka",
    "start": "1717520",
    "end": "1724559"
  },
  {
    "text": "base actually something like an abstraction of top of insertitude and something",
    "start": "1724559",
    "end": "1730960"
  },
  {
    "text": "we're not stable either yet so at the time we're stable they'll probably be stable as well uh you want to take the",
    "start": "1730960",
    "end": "1737200"
  },
  {
    "text": "other question yeah I mean I I would call web GPU stable enough for production work at this point it as of",
    "start": "1737200",
    "end": "1743760"
  },
  {
    "text": "maybe like the last 6 months it's still not it's it it's on in Chrome it's still",
    "start": "1743760",
    "end": "1748880"
  },
  {
    "text": "in trial in Firefox they are working through some on the WGPU side of things",
    "start": "1748880",
    "end": "1754480"
  },
  {
    "text": "some integration issues still uh that are very like edge cases for the spec in order to get that fully enabled but like",
    "start": "1754480",
    "end": "1761120"
  },
  {
    "text": "the W3C spec for it although it's like a living document it is basically in its",
    "start": "1761120",
    "end": "1766480"
  },
  {
    "text": "v1.0 know form right now so there's not going to be breaking changes and future breaking changes are going to be probably put into new APIs within uh",
    "start": "1766480",
    "end": "1773919"
  },
  {
    "text": "like new feature levels you could think of within uh WebGPU itself um so yeah",
    "start": "1773919",
    "end": "1779840"
  },
  {
    "text": "like to to Mindy's point I think web GPU is more stable than wi web GPU at this",
    "start": "1779840",
    "end": "1785120"
  },
  {
    "text": "point um but I think it is fully stable enough to to build an application off of",
    "start": "1785120",
    "end": "1790159"
  },
  {
    "text": "um but I do acknowledge that has been a very long journey to get there uh for",
    "start": "1790159",
    "end": "1795200"
  },
  {
    "text": "distributed compute i'm not sure if if I entirely understood your your question um yes like in general like could could",
    "start": "1795200",
    "end": "1802640"
  },
  {
    "text": "you run this kind of stuff like Was GFX on a remote host and like pixel stream that back or like run like compute",
    "start": "1802640",
    "end": "1808720"
  },
  {
    "text": "shaders for example like if you're doing inference or something on a remote host and send the resources back absolutely and I would say probably the number one",
    "start": "1808720",
    "end": "1815679"
  },
  {
    "text": "use case for web GPU today is probably compute shaders so it I sorry uh inference so it it makes sense yeah uh",
    "start": "1815679",
    "end": "1822880"
  },
  {
    "text": "did that answer your question or you have something more specific okay great thank",
    "start": "1822880",
    "end": "1829200"
  },
  {
    "text": "you okay thank you so much everyone",
    "start": "1833240",
    "end": "1838440"
  }
]