[
  {
    "start": "0",
    "end": "45000"
  },
  {
    "text": "foreign",
    "start": "599",
    "end": "3599"
  },
  {
    "text": "thank you very much",
    "start": "5940",
    "end": "8860"
  },
  {
    "text": "[Applause]",
    "start": "8860",
    "end": "13920"
  },
  {
    "text": "um so right before we're heading for a",
    "start": "13920",
    "end": "15839"
  },
  {
    "text": "coffee I want to talk a little bit about",
    "start": "15839",
    "end": "17760"
  },
  {
    "text": "FP buying Jam which is a tool for making",
    "start": "17760",
    "end": "20400"
  },
  {
    "text": "full stack plugins more easy",
    "start": "20400",
    "end": "24060"
  },
  {
    "text": "um well we're in the context of the wasm",
    "start": "24060",
    "end": "25859"
  },
  {
    "text": "conference obviously so we're talking",
    "start": "25859",
    "end": "27900"
  },
  {
    "text": "Wes and plugins but I really want to",
    "start": "27900",
    "end": "30900"
  },
  {
    "text": "emphasize this full stack nature here",
    "start": "30900",
    "end": "33000"
  },
  {
    "text": "because while you can use FP bindgen",
    "start": "33000",
    "end": "35460"
  },
  {
    "text": "fully server-side or fully inside the",
    "start": "35460",
    "end": "38100"
  },
  {
    "text": "browser",
    "start": "38100",
    "end": "39500"
  },
  {
    "text": "it's most effective when you use it in a",
    "start": "39500",
    "end": "42899"
  },
  {
    "text": "full stack context",
    "start": "42899",
    "end": "45420"
  },
  {
    "start": "45000",
    "end": "82000"
  },
  {
    "text": "so what does FB bindgen really do for",
    "start": "45420",
    "end": "48239"
  },
  {
    "text": "you well you need some kind of protocol",
    "start": "48239",
    "end": "51300"
  },
  {
    "text": "definition and then it generates for you",
    "start": "51300",
    "end": "53879"
  },
  {
    "text": "a set of Bindings that allow you to",
    "start": "53879",
    "end": "55620"
  },
  {
    "text": "start writing rust plugins and it also",
    "start": "55620",
    "end": "58920"
  },
  {
    "text": "generates for you a runtime so that you",
    "start": "58920",
    "end": "61379"
  },
  {
    "text": "can run those plugins inside a rust",
    "start": "61379",
    "end": "63719"
  },
  {
    "text": "application and it also generates a",
    "start": "63719",
    "end": "66119"
  },
  {
    "text": "typescript runtime so you can run the",
    "start": "66119",
    "end": "68460"
  },
  {
    "text": "same plugins within a typescript",
    "start": "68460",
    "end": "70080"
  },
  {
    "text": "environment such as a browser",
    "start": "70080",
    "end": "72479"
  },
  {
    "text": "the other runtimes may be added in the",
    "start": "72479",
    "end": "75720"
  },
  {
    "text": "future as well but this tools really",
    "start": "75720",
    "end": "77460"
  },
  {
    "text": "rust centered and I think you will find",
    "start": "77460",
    "end": "79860"
  },
  {
    "text": "out why shortly",
    "start": "79860",
    "end": "82439"
  },
  {
    "start": "82000",
    "end": "238000"
  },
  {
    "text": "so how does it really do this how does",
    "start": "82439",
    "end": "84960"
  },
  {
    "text": "it generate those bindings well it needs",
    "start": "84960",
    "end": "87299"
  },
  {
    "text": "some sort of Truth to generate those",
    "start": "87299",
    "end": "89100"
  },
  {
    "text": "bindings from and this is immediately",
    "start": "89100",
    "end": "91259"
  },
  {
    "text": "where FP bindgen rather diverges from",
    "start": "91259",
    "end": "94140"
  },
  {
    "text": "most other tools that do bind gen-like",
    "start": "94140",
    "end": "97680"
  },
  {
    "text": "functionality because most of the those",
    "start": "97680",
    "end": "100140"
  },
  {
    "text": "tools they allow you to write a protocol",
    "start": "100140",
    "end": "102180"
  },
  {
    "text": "definition using an IDL or an interface",
    "start": "102180",
    "end": "104579"
  },
  {
    "text": "description language",
    "start": "104579",
    "end": "106079"
  },
  {
    "text": "but with FB engine it works slightly",
    "start": "106079",
    "end": "108119"
  },
  {
    "text": "differently instead we just use Simple",
    "start": "108119",
    "end": "110579"
  },
  {
    "text": "rust macros so here you see an example",
    "start": "110579",
    "end": "113340"
  },
  {
    "text": "of a rust export macro which basically",
    "start": "113340",
    "end": "117000"
  },
  {
    "text": "tells uh febine gen this is a function",
    "start": "117000",
    "end": "120860"
  },
  {
    "text": "that is exported by the plugin and that",
    "start": "120860",
    "end": "124380"
  },
  {
    "text": "can be called by the runtimes similarly",
    "start": "124380",
    "end": "126659"
  },
  {
    "text": "there's an inverse macro as well the",
    "start": "126659",
    "end": "128940"
  },
  {
    "text": "import macro that defines which",
    "start": "128940",
    "end": "131760"
  },
  {
    "text": "functions can be imported by the plugin",
    "start": "131760",
    "end": "135000"
  },
  {
    "text": "from the runtimes",
    "start": "135000",
    "end": "137520"
  },
  {
    "text": "this is me",
    "start": "137520",
    "end": "139440"
  },
  {
    "text": "there is to it but there's one trick",
    "start": "139440",
    "end": "141540"
  },
  {
    "text": "under the hood here and this is why it's",
    "start": "141540",
    "end": "144239"
  },
  {
    "text": "so nice that we're using native rust",
    "start": "144239",
    "end": "146760"
  },
  {
    "text": "rather than an IDL because it just",
    "start": "146760",
    "end": "148980"
  },
  {
    "text": "allows you to",
    "start": "148980",
    "end": "150900"
  },
  {
    "text": "to refer to existing rust types within",
    "start": "150900",
    "end": "153840"
  },
  {
    "text": "your project",
    "start": "153840",
    "end": "154800"
  },
  {
    "text": "so if you're building an application",
    "start": "154800",
    "end": "156900"
  },
  {
    "text": "well obviously you define your own data",
    "start": "156900",
    "end": "159239"
  },
  {
    "text": "types what you need to do is you need to",
    "start": "159239",
    "end": "162260"
  },
  {
    "text": "implement this FP by engine serializable",
    "start": "162260",
    "end": "165360"
  },
  {
    "text": "trade on your custom types and that's",
    "start": "165360",
    "end": "167940"
  },
  {
    "text": "all you need for those types to work",
    "start": "167940",
    "end": "169800"
  },
  {
    "text": "within this particle definition",
    "start": "169800",
    "end": "174379"
  },
  {
    "text": "and well fbansion will basically take",
    "start": "175019",
    "end": "177300"
  },
  {
    "text": "care of the rest and one interesting",
    "start": "177300",
    "end": "178860"
  },
  {
    "text": "thing I would like to highlight there is",
    "start": "178860",
    "end": "180780"
  },
  {
    "text": "that well it generates the runtimes for",
    "start": "180780",
    "end": "183420"
  },
  {
    "text": "you it takes care of all the",
    "start": "183420",
    "end": "184620"
  },
  {
    "text": "serialization issues and one of the",
    "start": "184620",
    "end": "188400"
  },
  {
    "text": "interesting parts of that is that it",
    "start": "188400",
    "end": "190140"
  },
  {
    "text": "uses message back for serialization now",
    "start": "190140",
    "end": "192540"
  },
  {
    "text": "message back is a protocol that is",
    "start": "192540",
    "end": "194580"
  },
  {
    "text": "rather like like Json except that it's",
    "start": "194580",
    "end": "197280"
  },
  {
    "text": "binary which makes it a bit more",
    "start": "197280",
    "end": "199620"
  },
  {
    "text": "performant especially if you want to",
    "start": "199620",
    "end": "201540"
  },
  {
    "text": "pass binary data back and forth fourth",
    "start": "201540",
    "end": "205280"
  },
  {
    "text": "but another interesting aspect is that",
    "start": "205280",
    "end": "207659"
  },
  {
    "text": "is because it is json-like in nature you",
    "start": "207659",
    "end": "210300"
  },
  {
    "text": "can easily extend your structs with with",
    "start": "210300",
    "end": "213659"
  },
  {
    "text": "new fields and you can do that in a",
    "start": "213659",
    "end": "216239"
  },
  {
    "text": "in a way that does not break backwards",
    "start": "216239",
    "end": "218640"
  },
  {
    "text": "compatibility so if you're trying to",
    "start": "218640",
    "end": "220560"
  },
  {
    "text": "build a plug-in ecosystem this is I",
    "start": "220560",
    "end": "222420"
  },
  {
    "text": "think a very valuable property of this",
    "start": "222420",
    "end": "224580"
  },
  {
    "text": "format because you can keep evolving uh",
    "start": "224580",
    "end": "227879"
  },
  {
    "text": "your your protocol and other plugins can",
    "start": "227879",
    "end": "232200"
  },
  {
    "text": "stay compatible even if you deploy new",
    "start": "232200",
    "end": "234420"
  },
  {
    "text": "runtimes",
    "start": "234420",
    "end": "237019"
  },
  {
    "start": "238000",
    "end": "368000"
  },
  {
    "text": "I already mentioned the serializable",
    "start": "238799",
    "end": "241440"
  },
  {
    "text": "trade this is like the main thing that",
    "start": "241440",
    "end": "244019"
  },
  {
    "text": "you need to derive on your custom types",
    "start": "244019",
    "end": "247280"
  },
  {
    "text": "if you want your types to work with the",
    "start": "247280",
    "end": "250260"
  },
  {
    "text": "FB bandgen protocol",
    "start": "250260",
    "end": "253400"
  },
  {
    "text": "most of the time it's as simple as just",
    "start": "253400",
    "end": "256019"
  },
  {
    "text": "adding a derived macro to your types",
    "start": "256019",
    "end": "259799"
  },
  {
    "text": "it's really rather simple and we even",
    "start": "259799",
    "end": "261840"
  },
  {
    "text": "have already done that for built-in rust",
    "start": "261840",
    "end": "264060"
  },
  {
    "text": "types such as vectors Maps books some of",
    "start": "264060",
    "end": "267479"
  },
  {
    "text": "the common types so you really should",
    "start": "267479",
    "end": "269100"
  },
  {
    "text": "only need to focus on your own custom",
    "start": "269100",
    "end": "271680"
  },
  {
    "text": "types",
    "start": "271680",
    "end": "273360"
  },
  {
    "text": "another thing you see here is that",
    "start": "273360",
    "end": "276120"
  },
  {
    "text": "there's this rust module annotation",
    "start": "276120",
    "end": "279500"
  },
  {
    "text": "it's optional but it's most of the time",
    "start": "279500",
    "end": "282720"
  },
  {
    "text": "you want to use it the reason for that",
    "start": "282720",
    "end": "284639"
  },
  {
    "text": "is that as soon as you make your types",
    "start": "284639",
    "end": "286860"
  },
  {
    "text": "realizable we also generate typescript",
    "start": "286860",
    "end": "289380"
  },
  {
    "text": "type definitions purely from this rust",
    "start": "289380",
    "end": "292139"
  },
  {
    "text": "definition",
    "start": "292139",
    "end": "293400"
  },
  {
    "text": "but for rust it's a little bit more",
    "start": "293400",
    "end": "297060"
  },
  {
    "text": "tricky because we already have rust",
    "start": "297060",
    "end": "299340"
  },
  {
    "text": "types and febungin actually supports",
    "start": "299340",
    "end": "302419"
  },
  {
    "text": "generating rust types as well",
    "start": "302419",
    "end": "305100"
  },
  {
    "text": "but you already have rust types so in a",
    "start": "305100",
    "end": "308040"
  },
  {
    "text": "lot of cases why would you so what you",
    "start": "308040",
    "end": "311040"
  },
  {
    "text": "do then is you just specify this rust",
    "start": "311040",
    "end": "313020"
  },
  {
    "text": "module annotation and basically it tells",
    "start": "313020",
    "end": "315960"
  },
  {
    "text": "the rust runtime",
    "start": "315960",
    "end": "318020"
  },
  {
    "text": "okay if you want to use this type just",
    "start": "318020",
    "end": "320520"
  },
  {
    "text": "import it from this module and we don't",
    "start": "320520",
    "end": "322919"
  },
  {
    "text": "have to do any code gen for you",
    "start": "322919",
    "end": "326479"
  },
  {
    "text": "another thing that is nice about this",
    "start": "326580",
    "end": "328919"
  },
  {
    "text": "example is that you can see that we",
    "start": "328919",
    "end": "331560"
  },
  {
    "text": "support 30 annotations as well",
    "start": "331560",
    "end": "333660"
  },
  {
    "text": "this is quite relevant especially for",
    "start": "333660",
    "end": "336360"
  },
  {
    "text": "for the conversion to typescript",
    "start": "336360",
    "end": "338520"
  },
  {
    "text": "because",
    "start": "338520",
    "end": "340139"
  },
  {
    "text": "we we serialize this type using message",
    "start": "340139",
    "end": "342479"
  },
  {
    "text": "pack and the the field names get",
    "start": "342479",
    "end": "346020"
  },
  {
    "text": "serialized as well so in this case 30",
    "start": "346020",
    "end": "348300"
  },
  {
    "text": "will cause mime types which is currently",
    "start": "348300",
    "end": "351479"
  },
  {
    "text": "in snake case here to be converted to",
    "start": "351479",
    "end": "353880"
  },
  {
    "text": "camel case and that's also how it will",
    "start": "353880",
    "end": "355680"
  },
  {
    "text": "come out one to one on the typescript",
    "start": "355680",
    "end": "358500"
  },
  {
    "text": "side so we need to know the real field",
    "start": "358500",
    "end": "361740"
  },
  {
    "text": "names before serialization",
    "start": "361740",
    "end": "365479"
  },
  {
    "text": "all right",
    "start": "366180",
    "end": "368699"
  },
  {
    "text": "and that's mainly all there is to it we",
    "start": "368699",
    "end": "372479"
  },
  {
    "text": "have been using as fiberplane we have",
    "start": "372479",
    "end": "373979"
  },
  {
    "text": "been using fire every bind General in",
    "start": "373979",
    "end": "375600"
  },
  {
    "text": "the wild already we have built our own",
    "start": "375600",
    "end": "378000"
  },
  {
    "text": "fiber plane providers system on top of",
    "start": "378000",
    "end": "380460"
  },
  {
    "text": "this",
    "start": "380460",
    "end": "381539"
  },
  {
    "text": "um so if you want to get like a feel for",
    "start": "381539",
    "end": "383699"
  },
  {
    "text": "a real world",
    "start": "383699",
    "end": "385220"
  },
  {
    "text": "uh real world implementation just have a",
    "start": "385220",
    "end": "389100"
  },
  {
    "text": "look here it's also open source and",
    "start": "389100",
    "end": "391440"
  },
  {
    "text": "another nice example that I like to",
    "start": "391440",
    "end": "393240"
  },
  {
    "text": "highlight is our fiber kit tool which is",
    "start": "393240",
    "end": "395699"
  },
  {
    "text": "actually a bunch of rust core logic that",
    "start": "395699",
    "end": "398160"
  },
  {
    "text": "we reuse between our backend and our",
    "start": "398160",
    "end": "400319"
  },
  {
    "text": "front end so that's also a nice example",
    "start": "400319",
    "end": "402960"
  },
  {
    "text": "of things that you can do with this tool",
    "start": "402960",
    "end": "406400"
  },
  {
    "start": "406000",
    "end": "478000"
  },
  {
    "text": "and that's all there is to it thank you",
    "start": "406400",
    "end": "408660"
  },
  {
    "text": "all for listening if you are interested",
    "start": "408660",
    "end": "410880"
  },
  {
    "text": "to have a look at the project page we",
    "start": "410880",
    "end": "412979"
  },
  {
    "text": "have Discord too so if you have",
    "start": "412979",
    "end": "414300"
  },
  {
    "text": "questions feel free to use the",
    "start": "414300",
    "end": "415740"
  },
  {
    "text": "conference app or just hop onto our",
    "start": "415740",
    "end": "417600"
  },
  {
    "text": "Discord",
    "start": "417600",
    "end": "419220"
  },
  {
    "text": "um",
    "start": "419220",
    "end": "419819"
  },
  {
    "text": "thank you all for listening and enjoy",
    "start": "419819",
    "end": "421440"
  },
  {
    "text": "your coffee",
    "start": "421440",
    "end": "422400"
  },
  {
    "text": "[Applause]",
    "start": "422400",
    "end": "429900"
  },
  {
    "text": "any questions I can take now maybe",
    "start": "429900",
    "end": "433340"
  },
  {
    "text": "hey cool talk",
    "start": "435180",
    "end": "437100"
  },
  {
    "text": "um as a fellow rust macro nerd I was",
    "start": "437100",
    "end": "440520"
  },
  {
    "text": "wondering if you could shed a little",
    "start": "440520",
    "end": "442139"
  },
  {
    "text": "light on the decision to make use of",
    "start": "442139",
    "end": "445199"
  },
  {
    "text": "macro rules versus proc macros in the",
    "start": "445199",
    "end": "448800"
  },
  {
    "text": "initial code gen piece and then on the",
    "start": "448800",
    "end": "451319"
  },
  {
    "text": "decorators themselves",
    "start": "451319",
    "end": "452880"
  },
  {
    "text": "um yeah so there were all uh Brock",
    "start": "452880",
    "end": "454380"
  },
  {
    "text": "macros indeed",
    "start": "454380",
    "end": "456120"
  },
  {
    "text": "um and frankly that was the only choice",
    "start": "456120",
    "end": "458520"
  },
  {
    "text": "because the declarative macros are not",
    "start": "458520",
    "end": "460319"
  },
  {
    "text": "Advanced to do code gen at this level",
    "start": "460319",
    "end": "463860"
  },
  {
    "text": "gotcha",
    "start": "463860",
    "end": "466580"
  },
  {
    "text": "any other questions",
    "start": "468419",
    "end": "471319"
  },
  {
    "text": "all right well thank you so much enjoy",
    "start": "471599",
    "end": "473940"
  },
  {
    "text": "your coffee",
    "start": "473940",
    "end": "474750"
  },
  {
    "text": "[Applause]",
    "start": "474750",
    "end": "480100"
  }
]