[
  {
    "text": "[Music]",
    "start": "1490",
    "end": "7109"
  },
  {
    "text": "hi everyone I'm Max dad of uh I'm software engineer on the Swift",
    "start": "10240",
    "end": "16440"
  },
  {
    "text": "team at Apple today we'll talk about the Swift programming language and why it is",
    "start": "16440",
    "end": "21480"
  },
  {
    "text": "interesting in the context of web assembly I'll demo a swift package written and build for web assembly",
    "start": "21480",
    "end": "26679"
  },
  {
    "text": "interoperating with a C++ Library we'll see this package run in the browser environment but it's easily deployed uh",
    "start": "26679",
    "end": "33200"
  },
  {
    "text": "can be easily adapted to support more Platforms in environments as needed I'll wrap up with some pointers for where to",
    "start": "33200",
    "end": "39079"
  },
  {
    "text": "go from here and I'm happy to answer questions after that so Swift is open",
    "start": "39079",
    "end": "44200"
  },
  {
    "text": "source modern and general purpose programming language you can run Swift toolchain on all mainstream platforms",
    "start": "44200",
    "end": "50480"
  },
  {
    "text": "including Mac OS Linux and windows and cross compile to even more platforms uh embedded uh and of course web assembly",
    "start": "50480",
    "end": "60000"
  },
  {
    "text": "I've been working for years on wasm support uh within the Swift wasm Community I'm incredibly excited to",
    "start": "60079",
    "end": "67320"
  },
  {
    "text": "announce uh that all of the changes necessary to cross compile to wasum are",
    "start": "67320",
    "end": "72439"
  },
  {
    "text": "now available in the Upstream Swift repository Swift has an active open source community at swift. org and uh",
    "start": "72439",
    "end": "80040"
  },
  {
    "text": "all of the source code for to chain core libraries and the package manager are",
    "start": "80040",
    "end": "85360"
  },
  {
    "text": "hosted on GitHub uh where everyone can contribute to Swift you can build apps",
    "start": "85360",
    "end": "91399"
  },
  {
    "text": "servers uh use Swift for system programming and uh even deploy uh to",
    "start": "91399",
    "end": "100000"
  },
  {
    "text": "microcontrollers why would you consider Swift uh when targeting web assembly it has high performance uh thanks to the",
    "start": "100119",
    "end": "106759"
  },
  {
    "text": "full Suite of lvm optimizations uh so your code will run fast so if uses automatic reference counting uh so there",
    "start": "106759",
    "end": "114040"
  },
  {
    "text": "is no garbage collector overhead giving you unexpected pauses uh during the execution and Swift has a static type",
    "start": "114040",
    "end": "120680"
  },
  {
    "text": "system um so you can catch more errors in compile time and uh you can write portable code as well it also has a",
    "start": "120680",
    "end": "128239"
  },
  {
    "text": "gradual learning curve and it is easy to pick up if you're coming from a different programming language Advanced",
    "start": "128239",
    "end": "134840"
  },
  {
    "text": "features such as uh the memory ownership model is there uh these Advanced",
    "start": "134840",
    "end": "141319"
  },
  {
    "text": "features are there when you need them but they don't don't get in your way when you're trying to to to write code",
    "start": "141319",
    "end": "147519"
  },
  {
    "text": "to paraphrase it a famous quote with Swifts simple things are easy and uh",
    "start": "147519",
    "end": "152680"
  },
  {
    "text": "complicated and hard things are possible as a quick as a quick introduction to Swift uh I'll",
    "start": "152680",
    "end": "159400"
  },
  {
    "text": "demonstrate web assembly support and generate music programmatically what's cool is that since Swift has high",
    "start": "159400",
    "end": "164800"
  },
  {
    "text": "performance and low memory consumption we can even reuse this example code in realtime",
    "start": "164800",
    "end": "169959"
  },
  {
    "text": "audio we'll develop this as a swift package and visual studio code right here on stage at the bottom of the slide",
    "start": "169959",
    "end": "176080"
  },
  {
    "text": "you can see a waveform graph of sounds uh this code is going to produce so with that quick introduction out of",
    "start": "176080",
    "end": "182920"
  },
  {
    "text": "the way uh let's jump into into our demo",
    "start": "182920",
    "end": "187319"
  },
  {
    "text": "project open vs code here so the first uh line of Swift we're",
    "start": "187959",
    "end": "195920"
  },
  {
    "text": "going to write here is a sample rate we'll declare it as a we'll declare the",
    "start": "195920",
    "end": "201360"
  },
  {
    "text": "magical number of 44.1 Kilz which is the amount of samples we are we have to",
    "start": "201360",
    "end": "208560"
  },
  {
    "text": "generate per second uh what is a sample actually sound is a",
    "start": "208560",
    "end": "214000"
  },
  {
    "text": "waveform that represents the vibration of the medium that this sound is going through a speaker or air and S and based",
    "start": "214000",
    "end": "223959"
  },
  {
    "text": "on this we can say a sample is the amplitude of the waveform at a given moment and to represent the waveform at",
    "start": "223959",
    "end": "231079"
  },
  {
    "text": "a uh with pretty good accuracy 44,000 uh samples per second is good enough but",
    "start": "231079",
    "end": "237120"
  },
  {
    "text": "that's still a lot of uh a lot of samp Generations that we have and that puts enough constraints on performance in",
    "start": "237120",
    "end": "243480"
  },
  {
    "text": "memory consumption the simplest waveform we can Define here is a Sawtooth uh",
    "start": "243480",
    "end": "248879"
  },
  {
    "text": "shaped waveform we Define it as a function that takes Uh current time in seconds that has passed since previous",
    "start": "248879",
    "end": "255879"
  },
  {
    "text": "oscillations the frequency both of floating Point type based on these we",
    "start": "255879",
    "end": "260880"
  },
  {
    "text": "calculate the phase of the waveform and apply a well-known formula to returned",
    "start": "260880",
    "end": "265919"
  },
  {
    "text": "results also of the floating Point type now to generate to keep generating samples continuously uh we need to keep",
    "start": "265919",
    "end": "273840"
  },
  {
    "text": "track of current state and also updated as we go best tool for that in Swift is",
    "start": "273840",
    "end": "279680"
  },
  {
    "text": "a struct declaration so you can see here uh we declare struct call saw with a",
    "start": "279680",
    "end": "287720"
  },
  {
    "text": "couple of properties for tracking frequency amplitude current time again in seconds we use the VAR keyword to",
    "start": "287720",
    "end": "294840"
  },
  {
    "text": "indicate that this state can be mutable and in the function declaration for",
    "start": "294840",
    "end": "300280"
  },
  {
    "text": "generating next sample below uh which is also mutating again more explicitness",
    "start": "300280",
    "end": "306160"
  },
  {
    "text": "with regards to what is mutable or not um in in the body of the function we",
    "start": "306160",
    "end": "313240"
  },
  {
    "text": "delegate to the existing so function we declared above return the result uh we",
    "start": "313240",
    "end": "318840"
  },
  {
    "text": "also update current time as necessary making sure there no overflows here happening as I said we keep generating",
    "start": "318840",
    "end": "325919"
  },
  {
    "text": "uh samples indefinitely so overflows can lead to some weird artifacts in your",
    "start": "325919",
    "end": "331000"
  },
  {
    "text": "sound it's not a catastrophic failure but you need to make sure there are no overflows happening so we are only tracking time since previous",
    "start": "331000",
    "end": "337479"
  },
  {
    "text": "oscillations and reset this time and assignment on self means that we are uh",
    "start": "337479",
    "end": "342919"
  },
  {
    "text": "updating properties here specifically current time here and we return the result uh multiplied by the current",
    "start": "342919",
    "end": "350800"
  },
  {
    "text": "amplitude we want our code to work with uh different waveforms not just the S",
    "start": "350800",
    "end": "356520"
  },
  {
    "text": "waveform so we use we want to make this code gener generic and in Swift to use protocols for that it declares an",
    "start": "356520",
    "end": "363600"
  },
  {
    "text": "interface that a specific type has to conform to so here it's a mutating",
    "start": "363600",
    "end": "368639"
  },
  {
    "text": "function next that generates an example of the floating Point type uh which is exactly the Declaration that we saw for",
    "start": "368639",
    "end": "376000"
  },
  {
    "text": "the uh s too struct so we can go back and add a conformance on",
    "start": "376000",
    "end": "383720"
  },
  {
    "text": "saw to Signal great uh where are we even going with with this this seems quite",
    "start": "383720",
    "end": "390800"
  },
  {
    "text": "simplistic but uh we can build with these simple Primitives to something more advanced I will show you uh the",
    "start": "390800",
    "end": "398599"
  },
  {
    "text": "data flow of samples that we'll be working with so I've shown you the signal protocol we can manipulate any",
    "start": "398599",
    "end": "405680"
  },
  {
    "text": "signal uh asking it for the next sample",
    "start": "405680",
    "end": "410960"
  },
  {
    "text": "we'll iterate over the samples populate the audio buffer so we need enough samples to produce some sound we either",
    "start": "410960",
    "end": "417039"
  },
  {
    "text": "give it to the encoder which will write a waveform file that we can actually listen to up plot it because visual",
    "start": "417039",
    "end": "423280"
  },
  {
    "text": "visualizing these waveforms is also helpful and for this uh depler we'll use a canvas implementation specifically in",
    "start": "423280",
    "end": "429759"
  },
  {
    "text": "the browser uh through JavaScript interop with this um I've shown you the",
    "start": "429759",
    "end": "438360"
  },
  {
    "text": "signal type and we can create a buffer to accumulate these samples again A TRU",
    "start": "438360",
    "end": "443919"
  },
  {
    "text": "declaration with a storage initializer the initializer uh in the initializer we",
    "start": "443919",
    "end": "450120"
  },
  {
    "text": "take a fixed capacity we take a source signal uh allocate the buffer for this",
    "start": "450120",
    "end": "455879"
  },
  {
    "text": "capacity and iterate through indices in this buffer asking on each each",
    "start": "455879",
    "end": "461440"
  },
  {
    "text": "iteration for a sample which we write in corresponding element via the index on this buffer um great we want to",
    "start": "461440",
    "end": "470360"
  },
  {
    "text": "represent this visually at first uh so we need a canvas to draw something",
    "start": "470360",
    "end": "476280"
  },
  {
    "text": "there's a protocol canvas in the multiplatform approach we are taking taken for this package uh we we",
    "start": "476280",
    "end": "482440"
  },
  {
    "text": "declaring a protocol here with only four functions for drawing uh samples on the",
    "start": "482440",
    "end": "488479"
  },
  {
    "text": "screen uh in the this could be in in an abstract component model uh kind of",
    "start": "488479",
    "end": "494759"
  },
  {
    "text": "framework you could say this is an interface declared by a component um but for the simple types",
    "start": "494759",
    "end": "501840"
  },
  {
    "text": "that we are passing around like just integers this is enough we can uh we don't need the component model overhead",
    "start": "501840",
    "end": "508319"
  },
  {
    "text": "for in the simple case we decare HTML canvas implementation U for each function we",
    "start": "508319",
    "end": "515440"
  },
  {
    "text": "add a external wasm attribute which says that this function the underlying implementation of this function comes in",
    "start": "515440",
    "end": "522440"
  },
  {
    "text": "externally uh in our case from JavaScript uh it comes externally from a module linked uh imported into the",
    "start": "522440",
    "end": "529560"
  },
  {
    "text": "current was module under name canvas and the name of the imported function here it matches exactly the function uh",
    "start": "529560",
    "end": "536959"
  },
  {
    "text": "declared on the Swift side let's see how it looks on the JavaScript side so",
    "start": "536959",
    "end": "542000"
  },
  {
    "text": "there's the Imports object uh declared and here's that canvas module which",
    "start": "542000",
    "end": "547120"
  },
  {
    "text": "basically proxies to the canvas context uh declared here um in in the same file",
    "start": "547120",
    "end": "553640"
  },
  {
    "text": "and uh whatever arguments have passed we passed in verbatim to the corresponding methods and Below we just instantiate",
    "start": "553640",
    "end": "560600"
  },
  {
    "text": "the web assembly module produced by the Swift compiler uh and pass this Imports object",
    "start": "560600",
    "end": "567200"
  },
  {
    "text": "uh to L the functions uh from for JS",
    "start": "567200",
    "end": "573240"
  },
  {
    "text": "interop to work uh great uh we got the canvas",
    "start": "573240",
    "end": "578600"
  },
  {
    "text": "working we actually want to draw something uh with that canvas so for that we declare a plotter struct a",
    "start": "578600",
    "end": "585279"
  },
  {
    "text": "couple of constant properties that we initialize for layout purposes uh in the initializer and the",
    "start": "585279",
    "end": "594079"
  },
  {
    "text": "plot function on it uh takes an audio buffer as an argument we won't be",
    "start": "594079",
    "end": "600120"
  },
  {
    "text": "drawing every single samples as I said there are like tens of thousands millions of samples for long",
    "start": "600120",
    "end": "607480"
  },
  {
    "text": "um uh for long audio files uh so we calculate the number of samples we will",
    "start": "607480",
    "end": "613839"
  },
  {
    "text": "draw for every pixel of the graph then iterate over the buffer and calculate an",
    "start": "613839",
    "end": "620680"
  },
  {
    "text": "average over this window of samples for specific uh point on the graph uh and with that average we just",
    "start": "620680",
    "end": "628000"
  },
  {
    "text": "draw the line on the graph with with the canvas implementation I've shown you before so now we have uh enough building",
    "start": "628000",
    "end": "634600"
  },
  {
    "text": "blocks to proceed to define the main entry point function at Expos attribute is the",
    "start": "634600",
    "end": "642320"
  },
  {
    "text": "counterpart of the at external attribute uh it does the opposite thing is expose",
    "start": "642320",
    "end": "647800"
  },
  {
    "text": "a swift function to JavaScript under a given name uh you have to be explicit",
    "start": "647800",
    "end": "653000"
  },
  {
    "text": "with with the name here since uh uh with more advanced languages like C C++ and",
    "start": "653000",
    "end": "658480"
  },
  {
    "text": "Swift there's name mangling uh that can get in the way so we have to encode compilers encode a lot of information",
    "start": "658480",
    "end": "664880"
  },
  {
    "text": "under the hood but uh U this more of a lowlevel detail so here we just def",
    "start": "664880",
    "end": "671360"
  },
  {
    "text": "Define the export name explicitly in the body of the function we uh create this",
    "start": "671360",
    "end": "676720"
  },
  {
    "text": "saw too waveform with a given frequency of two Hertz uh we'll generate six seconds of AIO which is enough create an",
    "start": "676720",
    "end": "683440"
  },
  {
    "text": "audio buffer with a given sample rate sample rate multiplied by the number of",
    "start": "683440",
    "end": "689040"
  },
  {
    "text": "set seconds is the total number of samples we have to generate we give it the source for that the S uh Soto",
    "start": "689040",
    "end": "696560"
  },
  {
    "text": "waveform we encode that in a way for uh audio file use a plotter with HTML",
    "start": "696560",
    "end": "702760"
  },
  {
    "text": "canvas certain layout constants pass and then pass the buffer to the plot",
    "start": "702760",
    "end": "708760"
  },
  {
    "text": "function uh let's check the status of our build everything successful um so",
    "start": "708760",
    "end": "714320"
  },
  {
    "text": "that's great no errors in this demo something actually generated here I'll",
    "start": "714320",
    "end": "719560"
  },
  {
    "text": "switch back to the editor uh for a",
    "start": "719560",
    "end": "725600"
  },
  {
    "text": "second to show you that we can actually update this uh in the real time for",
    "start": "725600",
    "end": "732000"
  },
  {
    "text": "let's say let's set the frequency to 1 second sorry one Hertz 4 Hertz um 0.5",
    "start": "732000",
    "end": "741639"
  },
  {
    "text": "Hertz these uh these frequencies are inaudible so uh I'm only using these low",
    "start": "741639",
    "end": "748639"
  },
  {
    "text": "frequencies for us to see that there's actual sortu shape here uh but the range",
    "start": "748639",
    "end": "754600"
  },
  {
    "text": "of human hearing is uh for most people 20 to 20 Hertz to 20 KZ so maybe we can",
    "start": "754600",
    "end": "761360"
  },
  {
    "text": "start with something like 30 Herz uh and uh let's set amplitude to",
    "start": "761360",
    "end": "768639"
  },
  {
    "text": "something um like uh order of magnitude less uh so that you don't get startled",
    "start": "768639",
    "end": "774279"
  },
  {
    "text": "by this noise uh well I I'll be afront that this is not entirely musical for now let's see do I need to make this",
    "start": "774279",
    "end": "782240"
  },
  {
    "text": "louder uh excuse me um doesn't seem like",
    "start": "782240",
    "end": "788600"
  },
  {
    "text": "there's audio output",
    "start": "788600",
    "end": "795720"
  },
  {
    "text": "um I'll play it again it's not musical by any measure so",
    "start": "798360",
    "end": "804440"
  },
  {
    "text": "let's be up front it's just a fixed harsh Stone so I'm playing it at low volume at uh only for a couple seconds",
    "start": "804440",
    "end": "812199"
  },
  {
    "text": "but we need more interesting waveforms to produce something Musical and in limited amount of time that I have as I",
    "start": "812199",
    "end": "818240"
  },
  {
    "text": "promised like we will generate music here um so how do we how do we get more",
    "start": "818240",
    "end": "824800"
  },
  {
    "text": "complex waveforms in the limited amount of time we have like in the real world project we have uh we don't have a",
    "start": "824800",
    "end": "831440"
  },
  {
    "text": "luxury of writing everything from scratch a lot of the time you can use in open source libraries and specifically",
    "start": "831440",
    "end": "836800"
  },
  {
    "text": "in uh software audio system uh a lot of libraries vast majority of libraries",
    "start": "836800",
    "end": "842680"
  },
  {
    "text": "written in C and C++ du to these uh realtime audio constraints so this is",
    "start": "842680",
    "end": "849600"
  },
  {
    "text": "fortunately for Swift which is built on top of lvm and its CN C++ compar clang",
    "start": "849600",
    "end": "855160"
  },
  {
    "text": "we can interoperate with these libraries easily uh specifically in our case I will use um language called volt which",
    "start": "855160",
    "end": "863920"
  },
  {
    "text": "can transpile to C++ uh it's a specialized language for digital signal processing",
    "start": "863920",
    "end": "869839"
  },
  {
    "text": "and uh you can see here a declaration for the triangle waveform uh this function process",
    "start": "869839",
    "end": "876920"
  },
  {
    "text": "declared in Vault when transpiled to C++ uh is called triangle underscore process",
    "start": "876920",
    "end": "884240"
  },
  {
    "text": "which takes triangle context type also declared in C++ by mutable reference uh",
    "start": "884240",
    "end": "889720"
  },
  {
    "text": "and one last thing to note here in this out. CPP file it's declared in val DSP",
    "start": "889720",
    "end": "895600"
  },
  {
    "text": "it is created in val DSP directory I'll show you in a few seconds why that matters so how can we call this from",
    "start": "895600",
    "end": "902040"
  },
  {
    "text": "Swift uh let's uh switch back to uh Swift source code and declare the",
    "start": "902040",
    "end": "909160"
  },
  {
    "text": "triangle struct so whatever conventionally with swift package manager everything that's in a uh",
    "start": "909160",
    "end": "916440"
  },
  {
    "text": "subdirectory with a given name on sources it belongs to a module with that same name so whatever public headers",
    "start": "916440",
    "end": "923519"
  },
  {
    "text": "where on the C++ module called Vault DSP it becomes available with import Vol DSP",
    "start": "923519",
    "end": "929519"
  },
  {
    "text": "uh in this file on the first line As for the triangle declaration itself we set the pitch the amplitude couple",
    "start": "929519",
    "end": "937399"
  },
  {
    "text": "more a couple of properties that are quite obvious but the most interesting one here is State uh of triangle context",
    "start": "937399",
    "end": "944360"
  },
  {
    "text": "type uh which is declared in C++ so it is important to emphasize here that for",
    "start": "944360",
    "end": "949880"
  },
  {
    "text": "calling into C++ there is no overhead you you might think that we need a",
    "start": "949880",
    "end": "955120"
  },
  {
    "text": "create this into a component and wrap C++ code into another component and Link",
    "start": "955120",
    "end": "960240"
  },
  {
    "text": "these components and then sort out the ABI issues Swift compiler knows about C++ and C's calling convention and it",
    "start": "960240",
    "end": "967959"
  },
  {
    "text": "can generate direct calls into C++ thanks to that um it can create a value",
    "start": "967959",
    "end": "973279"
  },
  {
    "text": "of that type directly these declarations are available uh for us here thanks to",
    "start": "973279",
    "end": "978880"
  },
  {
    "text": "Swift compiler integrating with uh clangs parser for C++ and in the next function for this",
    "start": "978880",
    "end": "986319"
  },
  {
    "text": "triangle waveform we again call a C++ function triangle underscore process Pass State um by mutable reference as",
    "start": "986319",
    "end": "994759"
  },
  {
    "text": "needed and a couple of uh properties uh excuse me couple of values that are also",
    "start": "994759",
    "end": "1000720"
  },
  {
    "text": "floating Point parameters that triangle process function requires that and we as",
    "start": "1000720",
    "end": "1006880"
  },
  {
    "text": "in as you've seen for the S with wave uh waveform we also multiply the result by",
    "start": "1006880",
    "end": "1011920"
  },
  {
    "text": "amplitude to scale for a desired volume now with this triangle waveform",
    "start": "1011920",
    "end": "1019519"
  },
  {
    "text": "there there's one missing thing here I haven't told you what pitch is uh so",
    "start": "1019519",
    "end": "1024600"
  },
  {
    "text": "let's declare that pitch uh let's struct I'm declaring a few more magic",
    "start": "1024600",
    "end": "1032038"
  },
  {
    "text": "numbers here these are not Herz uh so if you're interested in in in audio and",
    "start": "1032039",
    "end": "1038798"
  },
  {
    "text": "musical Theory uh you may know that Herz uh raise exponentially with every octave",
    "start": "1038799",
    "end": "1045520"
  },
  {
    "text": "here we declare like linear uh I wouldn't say scale a linear uh linear DEC linear",
    "start": "1045520",
    "end": "1054440"
  },
  {
    "text": "increments of pitch uh for every Noe so for every note we have a certain value",
    "start": "1054440",
    "end": "1060400"
  },
  {
    "text": "that Vault DSP for example understands and we have a helper function octave that allows us to scale pitch by integer",
    "start": "1060400",
    "end": "1067080"
  },
  {
    "text": "values uh we can shift the pitch uh lower and or higher with a signed",
    "start": "1067080",
    "end": "1073640"
  },
  {
    "text": "integer pass here and create a new pitch based on that uh great we have a lot of basically",
    "start": "1073640",
    "end": "1081679"
  },
  {
    "text": "almost all of the building blocks here uh there's one more uh fundamental one",
    "start": "1081679",
    "end": "1088120"
  },
  {
    "text": "needed modulator which can combine multiple signals uh modulation in uh signal processing",
    "start": "1088120",
    "end": "1094799"
  },
  {
    "text": "means changing parameters of one signal with time and here we're using a different signal to do that uh it's",
    "start": "1094799",
    "end": "1102799"
  },
  {
    "text": "actually sequencing is one other thing that uh I need to mention so circling",
    "start": "1102799",
    "end": "1108799"
  },
  {
    "text": "back to Triangle modulating pitch will give us Melodies and modulating amplitude will give us",
    "start": "1108799",
    "end": "1115960"
  },
  {
    "text": "Rhythm do uh sequences of these modulations uh will give us what we need",
    "start": "1115960",
    "end": "1122120"
  },
  {
    "text": "the actual music that we can generate so here is a sequencer helper type that is also a signal and it takes a signal as a",
    "start": "1122120",
    "end": "1129200"
  },
  {
    "text": "generic argument there is the sequencer step which is either not on or off when it is on it requires a given pitch um",
    "start": "1129200",
    "end": "1138039"
  },
  {
    "text": "great uh then we can Define our instruments here here's the base instrument uh it's a modulator of a",
    "start": "1138039",
    "end": "1145159"
  },
  {
    "text": "triangle waveform uh returns next sample basically wraps the triangle waveform",
    "start": "1145159",
    "end": "1150559"
  },
  {
    "text": "wraps the modulator and just returns samples from those uh",
    "start": "1150559",
    "end": "1156320"
  },
  {
    "text": "and gives samples back Bas based on a sequence current sequencer step value um",
    "start": "1156320",
    "end": "1163080"
  },
  {
    "text": "excuse me and then we can also Define the drums",
    "start": "1163080",
    "end": "1169350"
  },
  {
    "text": "[Music] uh the kick and the high hat uh we need",
    "start": "1169350",
    "end": "1174880"
  },
  {
    "text": "a noise waveform which we again take from wdsp since wdsp is great that it provides all of these instruments for us",
    "start": "1174880",
    "end": "1181039"
  },
  {
    "text": "they're uh readily available uh noise process function for that noise waveform",
    "start": "1181039",
    "end": "1186280"
  },
  {
    "text": "we use it in the high hat basically modulated noise gives us very uh characteristic sound uh of the high head",
    "start": "1186280",
    "end": "1194360"
  },
  {
    "text": "the kick is readily available same uh",
    "start": "1194360",
    "end": "1199760"
  },
  {
    "text": "same processing of the sequencer current step property for a given sequencer step",
    "start": "1199760",
    "end": "1205400"
  },
  {
    "text": "and we process the Ki based on a given note",
    "start": "1205400",
    "end": "1210760"
  },
  {
    "text": "um then we need to mix these uh instruments together so let's declare a",
    "start": "1210760",
    "end": "1218400"
  },
  {
    "text": "mixer uh again a generic type that takes multiple signals and basically sums their",
    "start": "1218400",
    "end": "1223960"
  },
  {
    "text": "samples um I can also show you for the to be",
    "start": "1223960",
    "end": "1229120"
  },
  {
    "text": "more visible we we have three instruments back a base kick and high hat uh bases based on the triangle",
    "start": "1229120",
    "end": "1236280"
  },
  {
    "text": "waveform high hat on the noise waveform kick becomes readily available completely implemented on the Val DSP",
    "start": "1236280",
    "end": "1242400"
  },
  {
    "text": "side and we sequence them together and put them into the mixture uh finally I think we're ready",
    "start": "1242400",
    "end": "1249559"
  },
  {
    "text": "to produce something uh quite musical um I declare our hard code some",
    "start": "1249559",
    "end": "1255919"
  },
  {
    "text": "sequences for the kick for the high hat uh for base as well the mixer mixes them",
    "start": "1255919",
    "end": "1262840"
  },
  {
    "text": "together at given volumes um and then we fill the buffer um with a given mixer with this",
    "start": "1262840",
    "end": "1270919"
  },
  {
    "text": "mixer we encode this buffer and use the same invocation for the plot uh for the",
    "start": "1270919",
    "end": "1277760"
  },
  {
    "text": "plotter uh of course there is an error that I need to fix",
    "start": "1277760",
    "end": "1285360"
  },
  {
    "text": "uh I only need to delete these lines this is what happens when you edit your sample code just before the demo um did",
    "start": "1285360",
    "end": "1294080"
  },
  {
    "text": "that fix it uh of course the coma is missing um",
    "start": "1294080",
    "end": "1301200"
  },
  {
    "text": "here great uh we can see this more complicated sound uh there are spikes",
    "start": "1301200",
    "end": "1307880"
  },
  {
    "text": "which correspond probably to either specifically to the kick or to the high hat uh both it's definitely visually it",
    "start": "1307880",
    "end": "1315880"
  },
  {
    "text": "feels more complicated than what we've heard before uh and I'll let's let's hear that I'll try to",
    "start": "1315880",
    "end": "1323159"
  },
  {
    "text": "play it six seconds of audio finally we produce that um one other thing to note",
    "start": "1323159",
    "end": "1332120"
  },
  {
    "text": "here is that um the binary size of the produced wasm",
    "start": "1332120",
    "end": "1340720"
  },
  {
    "text": "module is about 100 kilobytes which is pretty good for the amount of code that we have uh this actually includes an an",
    "start": "1340720",
    "end": "1347960"
  },
  {
    "text": "allocator uh which we had to bring for uh the audio buffer but if you're constrained",
    "start": "1347960",
    "end": "1354440"
  },
  {
    "text": "with binary size you can actually and you know this is this is the only buffer you will use you can Pro provide some",
    "start": "1354440",
    "end": "1360400"
  },
  {
    "text": "kind of shame allocator allocator that will just say this buffer is here always forever and when we shut down we don't",
    "start": "1360400",
    "end": "1367799"
  },
  {
    "text": "need to deallocate um basically you have full control over um memory if you need that",
    "start": "1367799",
    "end": "1374919"
  },
  {
    "text": "and if you don't you can use highle structures uh by default with reference counting uh to summarize uh and and to",
    "start": "1374919",
    "end": "1383440"
  },
  {
    "text": "wrap up specifically for this demo we've uh got a feel what Swift",
    "start": "1383440",
    "end": "1389039"
  },
  {
    "text": "looks like uh we've tried JavaScript interrupt as well as C++ interrupt uh",
    "start": "1389039",
    "end": "1395240"
  },
  {
    "text": "for C++ interrupt specifically uh no generation of bindings is needed CN C++",
    "start": "1395240",
    "end": "1402440"
  },
  {
    "text": "libraries are readily available for CNC Plus+ libraries that don't have their own dependencies you can basically dve",
    "start": "1402440",
    "end": "1408640"
  },
  {
    "text": "and drop them into your project uh make headers public again it's all based on",
    "start": "1408640",
    "end": "1414480"
  },
  {
    "text": "convention and just import them and you can use them uh more advanced features",
    "start": "1414480",
    "end": "1420880"
  },
  {
    "text": "of C++ like templates also work so you can type def decare type Dev for a template on a C++ side and that will",
    "start": "1420880",
    "end": "1428360"
  },
  {
    "text": "become available in Swift uh and it works both ways you can call Swift from C++ if needed which is great uh for",
    "start": "1428360",
    "end": "1436080"
  },
  {
    "text": "large code basis uh that you may have in C and C++ if you want to adopt some high",
    "start": "1436080",
    "end": "1441840"
  },
  {
    "text": "level language incremental if you want to adopt some high level language with swift you can do it incrementally",
    "start": "1441840",
    "end": "1447720"
  },
  {
    "text": "rewriting like f file by file or function by function mixing and matching",
    "start": "1447720",
    "end": "1452840"
  },
  {
    "text": "these together um and I've also demonstrated you that uh we optimize here for binary",
    "start": "1452840",
    "end": "1461159"
  },
  {
    "text": "size with embedded Swift uh we also have control of uh memory allocations if",
    "start": "1461159",
    "end": "1466799"
  },
  {
    "text": "needed specifically in this project uh it was it was important for",
    "start": "1466799",
    "end": "1474279"
  },
  {
    "text": "uh uh for the processing now back to",
    "start": "1474279",
    "end": "1480360"
  },
  {
    "text": "slides to wrap things up I encourage you to try Swift for web assembly which is now available in preview uh with latest",
    "start": "1480399",
    "end": "1487480"
  },
  {
    "text": "development with latest Swift development snapshots at swift. org download uh Swift 6.0 branched off I",
    "start": "1487480",
    "end": "1494559"
  },
  {
    "text": "think uh today so in a few days you will see Swift 6.0 development snapshots",
    "start": "1494559",
    "end": "1500440"
  },
  {
    "text": "there but right now these are snapshots of the main branch you can find the package of just demoed at github.com",
    "start": "1500440",
    "end": "1506559"
  },
  {
    "text": "slapple Swift for wasm examples and one other important package to check out is",
    "start": "1506559",
    "end": "1512120"
  },
  {
    "text": "wasm kit maintained by the Swift wasm Community uh which is a web assembly",
    "start": "1512120",
    "end": "1517320"
  },
  {
    "text": "runtime embeddable web assembly runtime uh implemented in Swift it also supports",
    "start": "1517320",
    "end": "1523120"
  },
  {
    "text": "Wy preview one uh and it has W uh winding bindings generation support it",
    "start": "1523120",
    "end": "1529960"
  },
  {
    "text": "can generate Swift it sorry it can generate web assembly interface types from Swift declarations and can also",
    "start": "1529960",
    "end": "1536600"
  },
  {
    "text": "generate Swift for a given web assembly for a given WID file um and lastly join the conversation",
    "start": "1536600",
    "end": "1544880"
  },
  {
    "text": "at forums. s.org uh I will be publishing uh I'm working currently on a more",
    "start": "1544880",
    "end": "1550279"
  },
  {
    "text": "formal formal formal document within the Swift Evolution framework uh which is a",
    "start": "1550279",
    "end": "1555960"
  },
  {
    "text": "vision for web assembly support Swift which will formalize our road map uh",
    "start": "1555960",
    "end": "1562080"
  },
  {
    "text": "things that we will want to prioritize and of course Community feedback is well welcome and uh I'll publish that",
    "start": "1562080",
    "end": "1569039"
  },
  {
    "text": "document uh it will be announced on forums. s.org I'm also happy to answer a",
    "start": "1569039",
    "end": "1574279"
  },
  {
    "text": "questions here thank [Applause]",
    "start": "1574279",
    "end": "1580520"
  },
  {
    "text": "you any questions hi so uh you talk about",
    "start": "1580520",
    "end": "1587799"
  },
  {
    "text": "preview you talk about we and uh there is a what map soon but what about preview two",
    "start": "1587799",
    "end": "1595520"
  },
  {
    "text": "uh so I'm I'm not a Mainer of wasm kit uh at the current moment I did",
    "start": "1595520",
    "end": "1602080"
  },
  {
    "text": "contribute uh but I think I I I encourage you to open an issue on wasm",
    "start": "1602080",
    "end": "1608039"
  },
  {
    "text": "kit and uh it will be it it should be on the road map uh I do",
    "start": "1608039",
    "end": "1613840"
  },
  {
    "text": "mention the component model in the the draft of the vision document that I have",
    "start": "1613840",
    "end": "1619159"
  },
  {
    "text": "that I'm working on right now unfortunately I can't provide a specific timeline but this is I I would",
    "start": "1619159",
    "end": "1626600"
  },
  {
    "text": "say that more or less that it's in with wasi adoption it would become inevitable",
    "start": "1626600",
    "end": "1632159"
  },
  {
    "text": "for us uh to adopt wasi preview too I would say concurrency support is uh",
    "start": "1632159",
    "end": "1639120"
  },
  {
    "text": "important in Swift Swift has a I did not have a chance to show Swift concurrency",
    "start": "1639120",
    "end": "1644320"
  },
  {
    "text": "here but it's much more advanced to what you uh I have seen a lot of languages",
    "start": "1644320",
    "end": "1649480"
  },
  {
    "text": "there support for actors distributed actors structured concurrency it's all part of the language and with swift 6.0",
    "start": "1649480",
    "end": "1655559"
  },
  {
    "text": "specifically you get data data race safety so the compiler will tell you",
    "start": "1655559",
    "end": "1661039"
  },
  {
    "text": "you're actually trying to access this value concurrently from different uh threads or it's called isolation domain",
    "start": "1661039",
    "end": "1667519"
  },
  {
    "text": "since uh you may have concurrency even a single threaded environment like embedded or by default with embedded uh",
    "start": "1667519",
    "end": "1674200"
  },
  {
    "text": "switch for web assembly um so there are a lot of like we know async is coming in",
    "start": "1674200",
    "end": "1680039"
  },
  {
    "text": "wasi preview 3 so we maybe maybe we can actually take advantage of that and come",
    "start": "1680039",
    "end": "1686039"
  },
  {
    "text": "up with like first class uh support is is at least something to consider it's",
    "start": "1686039",
    "end": "1691320"
  },
  {
    "text": "again no specific timeline I can provide unfortunately but I'm super excited about wasi what's it called 0.3 at this",
    "start": "1691320",
    "end": "1699200"
  },
  {
    "text": "point not wasi preview 3 uh and async in the component model uh I'm also uh I've",
    "start": "1699200",
    "end": "1707039"
  },
  {
    "text": "if you're interested in a sync and these kind of sess uh environments uh I'm also",
    "start": "1707039",
    "end": "1713559"
  },
  {
    "text": "working on adding support for Wy to Swift Neo which is",
    "start": "1713559",
    "end": "1720480"
  },
  {
    "text": "a framework for concurrent IO networking IO uh which would be great and could be",
    "start": "1720480",
    "end": "1727720"
  },
  {
    "text": "potentially integrated with other with these Services R times and I think that would be a great kind of foundation for",
    "start": "1727720",
    "end": "1735679"
  },
  {
    "text": "wasi preview 3 uh implementation as well um that's that's as much of an answer I",
    "start": "1735679",
    "end": "1741720"
  },
  {
    "text": "can give specifically for that when you use uh Swift as a guest",
    "start": "1741720",
    "end": "1749600"
  },
  {
    "text": "language um how does it compare with a other",
    "start": "1749600",
    "end": "1756120"
  },
  {
    "text": "common uh guess language for the binary size uh for the binary size yeah was",
    "start": "1756120",
    "end": "1764120"
  },
  {
    "text": "binary size um example to rust or other so specifically with wasi I I can",
    "start": "1764120",
    "end": "1770919"
  },
  {
    "text": "caution you with the current wasi snapshot One support uh that's the B",
    "start": "1770919",
    "end": "1777159"
  },
  {
    "text": "size is a big kind of drawback there well Swift has an advantage with uh",
    "start": "1777159",
    "end": "1782880"
  },
  {
    "text": "string processing the string processing in Swift is Unicode correct that means we have to ship Unicode tables there so",
    "start": "1782880",
    "end": "1790279"
  },
  {
    "text": "like for example you have some complex it's great for localization and internalization but that's the tradeoff",
    "start": "1790279",
    "end": "1796480"
  },
  {
    "text": "uh non-embedded Swift makes like I've shown you here what I've shown you here is embedded Swift mode it strips out",
    "start": "1796480",
    "end": "1803360"
  },
  {
    "text": "like there's no string type there you you can work on strings as arrays of bytes and that gives you like full",
    "start": "1803360",
    "end": "1809679"
  },
  {
    "text": "control so hello world printer with embedded Swift is I think 600 bytes or something on that order of magnitude and",
    "start": "1809679",
    "end": "1816880"
  },
  {
    "text": "you can build from there from that perspective it's like you have full control it's basically higher level you",
    "start": "1816880",
    "end": "1822360"
  },
  {
    "text": "can go as as low as C and you can build get all of the first class features and then you can fully control like okay I",
    "start": "1822360",
    "end": "1829399"
  },
  {
    "text": "don't need unic code correctness uh to the same degree and uh then you operate",
    "start": "1829399",
    "end": "1834559"
  },
  {
    "text": "on arrays of bytes and and that means you you can stay within embedded Swift",
    "start": "1834559",
    "end": "1839880"
  },
  {
    "text": "constraints which will give you uh small binaries that that's these are like the",
    "start": "1839880",
    "end": "1845840"
  },
  {
    "text": "metrics that I can provide for you I I've tried like small like micro benchmarks there so you can go as low as",
    "start": "1845840",
    "end": "1852600"
  },
  {
    "text": "like literally 600 bytes uh and with something more advanced with this project seen there there's a bunch of",
    "start": "1852600",
    "end": "1859240"
  },
  {
    "text": "code there it's 100 kilobytes here but it has like an allocator bunch of C++ uh",
    "start": "1859240",
    "end": "1864559"
  },
  {
    "text": "code in there as well it's also autogenerated so I think for your use case this would be",
    "start": "1864559",
    "end": "1870000"
  },
  {
    "text": "interesting thank you this is a really cool talk um so for cotlin there's a",
    "start": "1870000",
    "end": "1875440"
  },
  {
    "text": "compos multiplatform and doing some research I found a project for Swift UI called Tokamak um do you have any",
    "start": "1875440",
    "end": "1882519"
  },
  {
    "text": "insights in like are web developers trying to build entire applications with",
    "start": "1882519",
    "end": "1887639"
  },
  {
    "text": "Swit Swift UI that they then could compile to web assembly and just yeah",
    "start": "1887639",
    "end": "1892880"
  },
  {
    "text": "have something like cotlin compos multiplatform for Swift it's uh hard for me to say I work",
    "start": "1892880",
    "end": "1899960"
  },
  {
    "text": "on developer tools first first of all not an expert in UI Frameworks unfortunately I can't comment on",
    "start": "1899960",
    "end": "1908080"
  },
  {
    "text": "that I think we're out of time so thanks again",
    "start": "1908200",
    "end": "1914200"
  }
]